%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: main.dvi
%%Pages: 75
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMBX12 CMR12 CMR17 CMSY10 CMTI12 CMTT12 CMMI12 CMR8
%%+ CMMI8 CMR7 CMR10 CMMI10 CMSY7 CMEX10 CMSY8 CMMI6 CMTT8
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -P cmz -t letter -o main.ps main.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2005.05.09:1524
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: CMTT8
%!PS-AdobeFont-1.1: CMTT8 1.0
%%CreationDate: 1991 Aug 20 16:46:05

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTT8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
end readonly def
/FontName /CMTT8 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
readonly def
/FontBBox{-5 -232 545 699}readonly def
/UniqueXX 5000830 def
currentdict end
currentfile eexec
9b9c1569015f2c1d2bf560f4c0d52257bacdd6500abda5ed9835f6a016cfc8f0
0b6c052ed76a87856b50f4d80dfaeb508c97f8281f3f88b17e4d3b90c0f65ec3
79791aacdc162a66cbbc5be2f53aad8de72dd113b55a022fbfee658cb95f5bb3
2ba0357b5e050fddf264a07470bef1c52119b6fbd5c77ebed964ac5a2bbec9d8
b3e48ae5bb003a63d545774b922b9d5ff6b0066ece43645a131879b032137d6d
823385fe55f3402d557fd3b4486be533de8dbe3ccd493ef4c9656d5d5b76d531
9e704539dd76b065f45e6d6f62ec499c9ab91923a364237ef75e1d62d52df3a9
43713cbc63b16c1880feedd1633766248fed9d060ff709951f2ec84ecdc06bbd
9cc4a865e1f275455525e5ac7e2e6289615e98cf7ce3763b6914d3a4c5b75b29
b8043dbd898ccd5be448064cf1af2f80f969a44b4f9b801c42f6d6a6d0c3ff42
e0b1cff748c1fc49b598eadde0c2802dd591c54b802ffd24cb7a7639295713d5
4e639514ac78460672c9c51742ae2014e4137ba4303051c06f686395aaef86c9
9d7f9a97009436c2ff55b770de3e80cef0d53f4df46aacecc21632c0c676e2f5
ca7bb101a239a0ff67ebd37a6b8c4c8246dc2c90b759dc03fb26bde8f134f552
23ef3d6496aa0c4a2d7b6398de6e6a0474ee1b0d78b2d865614609f1db92fc56
4ab5921078b4944e11a2162902f0e04f4b29448aaa22b4ea92fac48f8dc47535
d717dc7acd08b25d391c97c6c540ae0a98be5d6a8da564ab73e8b5d3b5e1989d
6e25c3a35ea44d596b5fd6b2373b30de7d59c1831245edb76d6a67816ab91a80
a27a6597c6dfd274db8b3e45cb01aedee59ba6efa1428e41ed557f051012a389
9b195ea44a4e4d0067398d9d40ea26195efbffd2cf785540bbeb8964f6391361
904fa5e187e4af3baeb4e8cbe7558fb7049c94a1769a2ff0b44f679bf6f14d8a
974bb8bdc735d5a9798c89d7d81176ba98dc22dddf6766acd52020e3ddcbc94b
71ad8a336dbe9262f302d8e8d5ced4481b19a586e1d73d0138ab0b732226185e
8cfb8408890ecb590f032a5633352c42df62a7dd1a3cb4fb12083709edc26146
f31161bae67a54aa5b41ca7af61b515c100b38a01b77f831245a013f804584b7
bb764dab019978bf8eda8175a55e25839ea023e515e9a26411d9b429ba60cbb3
b3fc5eed52eb9290225ce848264f312087f3d7054424b4b246eee44512983350
d4c2b95ff93807dfc2de0126892b5fae5b6e2853cd76fb454770f8f76a99fe95
d9358f6c1ca8f47aec58305873a93d7610199346de49495e90e2de7fc96e87f6
6a125b0575078131de41d835d248b3b6388146ee7b4762f0f6fd9ea0a0e7408a
6b52173fa84d7942f41cf8252d1510a1016c6deea522462258d5ba3a05794d5a
7d7168f61636acdb07d8e8c45e6e671a3a1a7731442c0589909d1b6d0775ed52
560b6ba6e1e62613835b683a20cc9ba3c736af4ebf44357aa78615fb52f53bfe
ce091583ebf5fce6316827f0ac11f025ced6399c4672b883172622a92c07606c
7d44223b2e1e4c17085db22e7e726a3fd5f08520456f0af8ee630f92fdc26240
bd98710fc2e529f94d35d54d20d13ab2db73cc1b2f21405afc8b21de22185057
7b8f4cdd73e186ed1af438033681c58dd870c42c295372bc80cffe2b94f1fba9
a4c600ccbba4ce1e806c4974c880d86c7e598efee5e4c25e8fb3bfeaa388d18e
a09fcccf4190f7710e20863ef55228765d680a4e8df0ed746ff7944803214d37
229d6932e76adb4385dc205d00c7ed9982533018d8ee1f7c4f8603ad31517ee5
93ce2ac0500020102525aa8bc5f19414cb56a8726715761e99a914c622f9efa3
20368081133a725ac1f8e80330796c572220ed312593e7bfc2ef69cbe1d3ec78
165e116bcd127491a56541a677fcb94c227421c4f0c0544a30c0557a1ce37ed7
cdfc3994e0274ede4ec1a7ec7c2b816b81dc1c0b1c275a114b869eb7850ab46d
d70c80fbe331a34da968d5c63fb199b9f0ca3d5da30b1e4bc4033f0bb5f537e0
03278aa08471421a6f72da7c29494083ca251f981dd854d27f83c973614615dc
f1439084353aaed704db232e1e73d90482ec1200557bef54e1c78606cd54e96e
cf39ff411dfb5192f360293276ba898899c5d2736d
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
%%BeginFont: CMMI6
%!PS-AdobeFont-1.1: CMMI6 1.100
%%CreationDate: 1996 Jul 23 07:53:52

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI6 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 109 /m put
readonly def
/FontBBox{11 -250 1241 750}readonly def
/UniqueXX 5087381 def
currentdict end
currentfile eexec
80347982ab3942d930e069a70d0d48311d725e830d1c76fba12e12486e989c98
74c2b527f0925722787027f44470d484262c360cdfdddf3657533a57bb16f730
48bfbbfcb73a650484015441fdc837add94ac8fbd2022e3ec8f115d4b4bb7b7f
15388f22cc6198efe768bd9fceb3446ee4a8dc27d6cd152485384ef5f59381ff
da43f2d20c8fb08aa27ab2015b774db10dacfdcd33e60f178c461553146ab427
bdd7da12534ba078ad3d780414930e72218b3075925ce1192f11fc8530fcd5e3
038e3a6a6db2dcfbae3b4653e7e02730314e02b54a1e296d2bef8a79411d9225
dad7b4e6d6f9cf0688b69ba21193bf1495807e7a1e67ed7e41cc25acc04702f6
8ef703e3d45722c1a91fdef7100a48631a02a6f02a08c6b1f9b4df8310385b86
8632718fd87119a233f219d9411383b7fa9f3e4780d8c27e2e89e0cae883d664
c3eac57a3aef8988a2e9f0f8c7f53e0a80bdfc4620e21287d0390e1975398544
7f3ea66401024bea75e1b4c4437b7bb188f76f96b918ac7c6ad7e8ae7f21d8c2
790f08cccec904fe48ef39e597ed4d4237c1d1f596f5906b19ea308020f7a35c
168e327ec3246b1dfabe912f6b6daac09974876d3996e57d180261110db05f15
e3e8eebba3d90b5764c03df3033a1ed678ebc679569a2fb297378b25434c0f20
5313ecb8a952f07242d3ee731b0cdc086a4481178a3d65129c47c09b22e9c431
e11b3747b94c26a757c38d06001798c6a568303d541385244b967d3b1786edea
f65bb53c4c2fe75e4b1b15c2c78d930b4296c80f08bad86012451edc8e9f0854
c3b390a16e27b11b3d45a9f72eff8baded2242dc928a61685d79e09681c97425
5b90a498614cf560fa5b1718981388268ba206a96989e6d0b5d485d9aca5594a
e67dd7b34d8a369adb06647f8aff8814d6d9cdc04a4835918e557174c5bc0f3f
bcea9907a04cf93c12727ec40db3f2f77596dca477862747435bdedacd9b2311
6cc97fa47ffdd7d897fb6bdd5572e35d34e7e1cb5e7273a4ffd86525323ace4a
84e1297028c2bd5469baa2e75d19360c2c9042139d5e7dd4390a6a3935424711
de21910126d750ae279916ceb71da3591d60dc62db333c5021e2c1cd61ade51e
9391472f46a58f4d47b46f95c41dbec5e4518446480a4f24096952ed2f1dbc87
45a2d0a1fe65de562d84e47536c41f41ee92e6edbee519141eb65b05f8e0dee0
fcb116be1e9416c3ea3b1ff688a8f78b088424476f33c9d70ace9b088579c0c0
773925848ea8f547252443058fd0bbd044d26b07cf5b95202d134e3bf14b0375
b54204c6e30b47c13a1353cd6c3ac4abdeaec9257fbe54308570be0b5931b3db
51ba6772b74836871c92ff7b0eb1a3277c37c593b7e71b2743826e0d2e7abcac
56de53e49e06c39143ddd1e9035d04eff2cd461c7f82c93d75a85ef06a63feaf
bbc2cc04efe98a19110f574a96d5a10d37264bc6ba2bf1c75a25394074884617
7dccc1ca1ca8a7a8f86dfc2ec6e79fec653afdfcc1c36c1cb54a69369837b5b5
d61990fde7c418822b0a0024fb4d4daaa7c42be63aa6fef86c1bc514513b3300
c00fdc0a847861e6a34ae69d046b7367fc16b2187af780c77b24b6e6a7349dea
04f5a879d1274540470becc4f0b3f36cc8223c151b2353fed3e435f96ef8fe67
b2d0f35f93897673546a4f33c9bfa3251835426568b719b9df78cc02a67af08f
64ac11ee06caad0fac78f07ba5d87e9032e30db8ac571f881c6e04ebd3c897ed
97f00b28486b65699f24ac52e2d7d642aad2b7b4a0cb7d85c39882
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
%%BeginFont: CMSY8
%!PS-AdobeFont-1.1: CMSY8 1.0
%%CreationDate: 1991 Aug 15 07:22:10

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY8 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /prime put
dup 106 /bar put
readonly def
/FontBBox{-30 -955 1185 779}readonly def
/UniqueXX 5000818 def
currentdict end
currentfile eexec
9b9c1569015f2c1d2bf560f4c0d52257bac8ced9b09a275ab231194ecf829352
05826f4e975dcecec72b2cf3a18899ccde1fd935d09d813b096cc6b83cdf4f23
b9a60db41f9976ac333263c908dcefcdbd4c8402ed00a36e7487634d089fd45a
f4a38a56a4412c3b0baffaeb717bf0de9ffb7a8460bf475a6718b0c73c571145
d026957276530530a2fbefc6c8f059084178f5ab59e11b66566ca5ba42b1911a
5d7f1bf343015eece988b7a93bce0c7aa61344d48aed9c92c8698d4b7c9951c8
7d103f2414b39e1437f9d2e50c4ee5f218f2e6716926a79ea978f13b1f855345
191dd7d31d8f82c2e3343c7a5894d95bdc492c28226834efcb5c12fea36ac5cc
430e0aa604961e34888adf6c1f3954cbc2498e225d953cf5685852162346f474
5a2a7087d5d7ad486de16d2ca8e15cee26e012671ba3bdc7d95cc8c98bb774f5
08625e968aee27ff7d1a06e63bcfb5aa4876c3f8f13b30ccccee73c3caf4e70d
98e6ed2f422dbb4950bf789680e064150995941a9f4dd68a575949847a7d012b
b910bf03a69374e341e8036ff92c949f3dc6e86aaa7a2b7942d0642851dbfd6b
09e9a784c32d5c4e581d6dd4ac2c5c2ca2e693f549818b83f08635a46ba17e44
68471a2d0881c1175e83f095332e363db0cb6a2915263092505686471f260bd8
bc6bed6385bd4d27cdc1cdc1147c6884844d9108a3eef68ee0e59b697db891eb
d85f8ed216a9f9b60be66440f1a933b55234fef242c161776caf92474685ad15
48fd0ecd63457ec9f04a276b804a0f7150c84ffe902cb0abc5759ae7770eb4a0
845effbebe3923ab5ea2983ac96d8b9aa6e2f08d59548d711e7f11d14555aade
ca94593a6531a297bbcf842ec8c0f423af4afe606137ab4f576c5ee93792b587
2ca92c64883baf57bb60dcb6b66afb6ebfac37705baa2f99a8f2c2ed5517291d
b7b2489afc057c0b3b5e1a711e6bf4a4e63ffdd3d3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
%%BeginFont: CMEX10
%!PS-AdobeFont-1.1: CMEX10 1.00
%%CreationDate: 1992 Jul 23 21:22:48

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.00) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMEX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMEX10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 56 /bracelefttp put
dup 58 /braceleftbt put
dup 60 /braceleftmid put
dup 62 /braceex put
dup 88 /summationdisplay put
readonly def
/FontBBox{-24 -2960 1454 772}readonly def
/UniqueXX 5000774 def
currentdict end
currentfile eexec
80347982ab3942d930e069a70d0d48311d7190fa2d133a583138f76695558e7a
e9348d37cac6651806d08527c1bb4a062a4835ac37784cc39ad8841404e438b4
d52d3901e47a1de4f7924e0fb3daf442499175bab1226edf692a4956739f8828
e80592f450c5d5c22ac88bcfbe9748f61d18243a16f4a4467f084e8e2be46ef4
7fc51c3a8199e3cda62ff9c4fb73956dab8b6683d2156377808cb35026073e80
523f59a30d195fcf9b9fce4ffafc6d5649664203ab24acb938d58d246707ffe7
d62f04bec4b70c21ef75beb2b812622b3c74e969d72d3cd11bd7106294a99caf
0b1629bc7d4de6b96ca82930831d64575f23f4ad06a0e45e315b1d392411be8d
6d73c998789ff258a07a3c8c2057325784514c845500bfd1a971310cfc11d41c
1a167dbd5ff012c60add4e87325f6e5299032a839de65fb1473a166aae1876a4
414a434f22c1d241591fb36f857df6fa930608750ffc0c54f44994662b1f00f1
400bf752ea8d83ffc4cb77a290bc2d99981ae59a191748ba5c7ba1a9d2583fd2
1398452b6ff5d83a059f7eadcd2ef744e9dd22bdf9c79d049bf06835e878c32b
7765c69bdd8ef4deb4ea7cfff4cf9354a4ddffa689de961d16772491c7afbd7f
ffde42400764c68e954ee5c455a5687959829bc3b319b2147deaab3628662c80
30c5e02fea09609abe4eaa12e217bc3af673f1bc36a7039eb13fcacb4218fe0f
c5a3f9452d4edf46cc91db67b624d4f2d37502fb9f11af4da18ca40b61097f95
d44329375467ed13c5cb585ec53f62b83ef9502cc755af44bf32b87b8ae9f3f2
f8dbf72dab90acafbacd280db6aaffaefdff6d5eff26669bac56280a950560e3
d01714ba38659b0e4e28bf8cdc1f15ff7e3ea9d95a6afbbe3d8e6905aa6d531d
6b6dcab89e2036cc492c65f76ddcc3cfcff33fde3d9ffd10f7a90530fd5c7683
4329baa902e701ca42717476298c9ff511b1941244bb1dfd0e5cab92a43970cd
1bdb292eadd055c97972844fdcdb0aa06401e7b2632b9d134f96bce0064860f3
9859da7a9a82be0a840672a1331212752ae1b521b693b384a72dba8d37a86eaf
a0341e7fc5f6ef7a8c566aacb91e8bf5005c18837894c4eacff41dba54e071ca
83faebe85623580a3d4507f63d81a4c1a64bc5d292edcae18db9ee0f00b77026
ad5c8cf7cc9a7454c0af85310251b9e556551298ea6eb8874ea35ab51e96d264
0b35edf9e070aed79acd75537be16e14f840ec5572569cd565320bf290faa94a
4ee4258c170ef5cb8253c7c0b03ed1bac0615d59f0cf7a1a50d84f7c66e4f06d
af152c4e873f84891dc59410e19169c803a9eed36a8ed227de35324a86a08cb6
6ca4fa7ada91a27d853a7a70b572bb7b3a23b46913f87ec26f7d2d1fa3d93a79
3ab77a609d68a9a330fced991b13a6506d8d35bb6e628036dd76734049554deb
1e928d1e3312c5fe27dcd643cd41f422ca0a594e2897655f1d80966b7a116155
ec37e12e96b200f2e9410fffaa0531f24e33edd07ef84cde9566717647dd1315
c4a3ef00ad45dc110c078290f60c349787cbe97efa6ac0dedfe661ea2df1ee2a
b8000c6d42df58246329bc74a74fd7fc836fc3fe38ee47945212c49ef5a924e3
b3d76f13b84df5a696a196086a83058d7ac8fab8c751fbc0d3b9fcc2190d2a76
b66aac5da64c3071de94f1b0448e8f77f8ce70e0a223b4fb14022ab40d33cb99
34e269cc758f84c66736e1a1e85a8c0727fefa6ba191ddcf86edbc9c9fd3fcd8
b235ffbfab97c9671c971aaa73476af6de99e593ab884372db1e5db4d14fff74
cfff60fe9bf7cfec8a45c269f396c64dfacfd42bc0c04e97c8713958cbebf0b6
9b280dc4049664092f59e6a25d22ab32de3e95797ddcb2f33ed45bc992517e7d
6a944d1a56a732136f1bce8c4c1e4f26ec7b05444fb871e621de5e0927a68bcf
92c0cb972a2a333e33fb2d0ac6484542ff7ad8a5e44547531dbf6284506744d9
677dd6e72678cd8ecd12f6192fb1643b06878aedb3416356f1929784a0c94e0a
d8d8db313b721cc45b09f01d2896d8c4e4df0c18c70437673422aeb4bc6ccf3f
c2b62bcbfabee9dbe9bb6a6519d7be62bf8e3a01dc32496a35f63a2c0167e072
975438bcfd2cbac7c1018c3513231e66e2af6cdfc1075efefc8fe7f0274a3895
fe40665c9ff981ccefe01d2ccc368c4ab6d73b01eecce8e90f37771f15bc7f11
b0db407d4954eb8da3d84dfa7c812fb29cd1723b393e74

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.1: CMSY10 1.0
%%CreationDate: 1991 Aug 15 07:20:57

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 2 /multiply put
dup 3 /asteriskmath put
dup 13 /circlecopyrt put
dup 20 /lessequal put
dup 50 /element put
dup 98 /floorleft put
dup 99 /floorright put
dup 102 /braceleft put
dup 103 /braceright put
dup 106 /bar put
readonly def
/FontBBox{-29 -960 1116 775}readonly def
/UniqueXX 5000820 def
currentdict end
currentfile eexec
9b9c1569015f2c1d2bf560f4c0d52257bac8ced9b09a275ab231194ecf829352
05826f4e975dcecec72b2cf3a18899ccde1fd935d09d813b096cc6b83cdf4f23
b9a60db41f9976ac333263c908dcefcdbd4c8402ed00a36e7487634d089fd45a
f4a38a56a4412c3b0baffaeb717bf0de9ffb7a8460bf475a6718b0c73c571145
d026957276530530a2fbefc6c8f67052788e6703bb5ee49533870bca1f113ad8
3750d597b842d8d96c423ba1273ddd32f3a54a912a443fcd44f7c3a6fe3956b0
aa1e784aaec6fce08dae0c76da9d0a3eba57b98a6233d9e9f0c3f00fcc6b2c6a
9ba23af389e6dfff4efec3de05d6276c6be417703ce508377f25960ef4ed83b4
9b01b873f3a639ce00f356229b6477a081933fef3bb80e2b9dffa7f75567b1fa
4d739b772f8d674e567534c6c5bbf1cf615372be20b18472f7aa58be8c216dbd
df81cc0a86b6d8318ca68fe22c8af13b54d7576fe4ca5a7af9005ea5cc4edb79
c0ab668e4fec4b7f5a9eb5f0e4c088cd818ecc4feb4b40ec8bd2981bf2336074
b64c430280667a8dc19b02be416e3df183688b40f613e16979535d073d4e5ab7
eb209e5c64e96c26a4def183b517cbb7660f0a6a7c73d2267528886f4572b753
e6a3666d9f1416a553d49c455573471d7c32b8096ce700aaf1be95a9b759f76e
13fa96290fae44704419b8c9a80852f04d56498d8b76f0d0023fb4393da5dd49
1dbc8da4c433d8c36a3dcca264e6a756896b8ca4978f38492dfbf25d9464749f
a6af8bdb7fc6b14ddf0301afccfc95bb0b95a4b4846a21b9f3ed4410053336a2
384180c31e8ab67d43160a59d9f6e6dd26cd3f0720009598eeff71b3f876d16d
290795a1d574d6fe9860fe7f1120bf0b1c58e14e95762c328e8bcf6f292ad35a
be8deff344885f6727a62dfcf44fe6192760d53a6c1fbb65df0130536d2510ac
3b514c9b23f117ab74316f03f0a9be0ae1e2896df8f93bfaa64fbe1953583895
f636eb6917cdd30029ed610faab5f5b9c973520a20a75081922823c4c73e11ea
e3ddaaa832e902e34883df42f31b9e0909f0159a3e2a98f20c5278125aac4a09
62df11daa5399edb82732ff402e8ba47d486e69c63166a391d4b4a23d0e0eaec
cf819424626e785f8764f0b2e5c7e4eb74d05c2d611613f139cd39f63b1cab8c
040ac9ad722e728a6b3306ecb38d26dd0e6d0f41a439c6bbd46683bdd3fe6167
523e5c42649feb1e01079e4eecb6fede838a2e7dab2e9911bc5048b5298fb2b7
ce5eb0288311868edc6f5a888bff2e8e45327735ca06f415c24023ebdfd52485
8a86d502040f9a01fbeaf7d8c7a94faf6e97e35646c99cd9e621d783131bc03e
69bddd68f2cea5c6d38b10a200ec1c8809b95e308f0e27e115c5350d9442cdd3
963c2247c773d014852f7e43b2a4c0b9cf53b1df0535373dff8c4da465bce0d5
76e91a5c85abac039e6a1c1f1dc2e02a838602e896da090f6dca33e6984bab2b
39db33e3363a78afd99937c3c6ac3d474e37809349fb0b2583f3be11eec07ee3
339e48a63e0478a4c0ce0a52c623e4f63c08158ce35d893f6fe0de58506b3f7d
f4d9027a80ceda6b244d8327282e6b37dbfd5d2f7296156d97b2f35826ce18b8
24a358a2145d7636ed0e09186c492b47f0242241529d24d516b3fdc586a73f48
16a20a2dde21611676014014b2c6a1970a7af3ab8ad04c0091416a9bb0a4ad12
ec3023a821235427acabdcd0a9cf38b189fae75ce2e55a26eeb9703bfd1b76da
bd96db1512254a8776ae7b27f652a9078941ea64c05a177019fbd808e6bc8255
f50ac4c9b90489aaf0b2b0502458720456949ba6fc7d2d1054fcef240837a15c
55b753cdd94da1196946f283828895a8e5dc989f995a37b900b2c133156a781d
9e969ed5fbdf7e11d23e47fb2f9ab0494058a3515fb0a211af89f715003e8130
abfc897ed123a6b3a99f3a8e9003fcbfdbcbfdd080e8b56addebb00a6837fbec
01a7475ab1e3cf58c194b6e20067824d306cbfaa4401e6a54f0f257eb2a891ae
c452640e5596b79914c469ea2c75dac2966c6fbf2b434de576f77ee9e04badb8
cb451b529a5fe38414c7eb08a778b6f04637233c6b5f39bb8889eb06fda2ec31
184433b588ce97e05c571483ab0f508e6ca726a7f5fd8b68334494dbda258e32
de27fc788c4381f7ff2de805da1cfbb927e54c716c23d079fa99a28b77f7e2ec
5238230830de26eea8a3fa49db01ba5be8c63d8c18af72ec2d44a51784ed56e1
990b20c1a5c6ebfca583dfb5fd00ff544251e7a01e4e25fa6b8e96796988d42b
02466858d66bbe3cf498834de09f90d841f96af9d67b93eb1664191858e8d368
96e5a5095855d50438da658c3ed975b4621095181cb0386daf6875ef0b96b804
5d7fb532fecb839d7e47dc21d3dbdb3ec10b9ee97e3f2cfa2ee5faf3986681cc
4e2d6ad3f56ac914a65b997980fd978b37abf8ff601492683e85d1d1d25ed048
10b97c27c07cb2fee94e743e974d4a6da7d0cc2b4208bbe91e63b0d871fea528
2774180739883145fafc1d5985226033d48720e2ff8587d0bcc7f8f6ca67540e
54906b0efda0982df87f5c51adb55919cf8acd2e04ab48b56e28f50e4d7776d1
df7a011856471e3e334b74017269118d3fe50afb3554dbeee129f3692454c6c2
0bdfee6d29e3fe9c61a09c8e7a02279394569b94f064fd58550caf18e74a3218
b36d4608650a786ca7be8babf229577e2ddcbd6a6a489f65a511829ed725c46c
28204547dcddfadd0393b6fff643e59c7cf025ad5e77fa3e2b475728c286988d
080456e81b8fcecd43a80c34dfbe1b6810bd7531486d1af9cce4661bd856f67d
682bcae7c089
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
%%BeginFont: CMSY7
%!PS-AdobeFont-1.1: CMSY7 1.0
%%CreationDate: 1991 Aug 15 07:21:52

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /prime put
readonly def
/FontBBox{-15 -951 1252 782}readonly def
/UniqueXX 5000817 def
currentdict end
currentfile eexec
9b9c1569015f2c1d2bf560f4c0d52257bac8ced9b09a275ab231194ecf829352
05826f4e975dcecec72b2cf3a18899ccde1fd935d09d813b096cc6b83cdf4f23
b9a60db41f9976ac333263c908dcefcdbd4c8402ed00a36e7487634d089fd45a
f4a38a56a4412c3b0baffaeb717bf0de9ffb7a8460bf475a6718b0c73c571145
d026957276530530a2fbefc6c8f73e9b697ddc0351763500e23c4d170ea8a2d2
75ad0b6b23097f02fa803c1f46f9ac10fe0e527c431b11b1b9a50e874896cca6
17fe3e255960846bc319ca68b9b930a45d5d0fc36b352c3443ab6f7793b38d2c
7fb9c409ab7980ead55e9f8f6b83c70088d1fa6d7f2214da8928e40b96334ad2
72d1b5db9d1355a579b26a8dac21f021e393d7d837a95deb8de92ed818a8b80b
98ee9cdd8a3c57ad7d6eb7a82f43eaa6ec520eefa7302e750edc4b495f70bba2
24a2182eec37f1a1c5dc8e20973007150237daa6bf03d498826777eeebe09014
ebfe05a8731e1a421cfc513d47d673e3d94d805f5d0668ffa265e0962cb5a75a
4a93d9b872c2d3ac4391eedd46c6cae184e1af981f95ce213181b697819ba31f
f3e3ed201f4914426e805de77334e00eed5adea5f5d61825725d49fa68a47dff
c7dff4d05cf6f360d8527294e94f599911c9b1c6ee95a83babcb7b57d31308bf
2640919d126b479a8eea2b7131aaf0903d6b3f9519ece17464f3d605fee01d6e
3e58fc4c89f6b777941084ca85af30f25e654413f4375bc8cb6a1a646f67e625
fc908b99cc334b2fdce43d5fb1cfc6818380ec001b2cd1512737559d840e7314
38f466bcd2a38f39407a24126b5740c84b061f1e16f5e2a86e4861655d1ce449
244d642b6101c0b80b742dcae02855
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.1: CMMI10 1.100
%%CreationDate: 1996 Jul 23 07:53:57

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 83 /S put
readonly def
/FontBBox{-32 -250 1048 750}readonly def
/UniqueXX 5087385 def
currentdict end
currentfile eexec
80347982ab3942d930e069a70d0d48311d725e830d1c76fba12e12486e989c98
74c2b527f0925722787027f44470d484262c360cdfdddf3657533a57bb16f730
48bfbbfcb73a650484015441fdc837add94ac8fbd2022e3ec8f115d4b4bb7b7f
15388f22cc6198efe768bd9fceb3446ee4a8dc27d6cd152485384ef5f59381ff
da43f2d20c8fb08aa27ab2015b774db10dacfdcd33e60f178c461553146ab427
bdd7da12534ba078ad3d780414930da4f8d58abefd45db119b10eb409dd89792
3c6e705479464a4b310b58348c4b42393988fef4925cf984423aaf65fea9f0e6
4629953bcf50b919d968d99bd185f83112b2759cc411764e9bde677f57c5ee5a
c555448d5f81a16259ded1e11bf4119d53e8ab07a802df900d3a2d5ccc1c6876
d29c5e9effb7af3ef83400b0910c07873a8c56fa7b1eb1ba426043b00cc95dbe
dc6e136cbbbcb3f67509964f9f281ebf81fe5b018122eaf66c4a838487e82e18
6e006093042848a903efb3469ab6b4049767aadb95c30408dfd58d8a10f4cb22
168decd9f3ee100f07b49aa44c92139b669cc312ba20192454eb2375be6284b0
26659d964b96ae82d4942e758027fcf23c25ed01115af27ce7f20efe2a822bb6
84004f20243a49c9e93301fc21b80815c033c3e2ba58ef53da2157d524b395f2
b37abca13bc6a2f42e824ab7e47106176b0d6db267fbb795ac7425582df2e3dc
55863468a9200742bd7b552c48f8cf58bc21343bd3b95abfa140f33f37c6f3f7
8b0d8a5154eb7c1f62ec598267f13e841a3e64172663935ac8b665d86540d316
ddece329c008049c5e74b27d59022c5515059bc3b89370b1bc6a169c888bb325
e0b74282d6f053a50da4024ed1e433271a32ab8c17d41c632b41cf9f3ecd5fe1
24daf7aea7ce8a63047b245822930d517df7baaafa69d2d17f7d93cebd45416d
f3459365434123a76ccf883a4973bab19807e1f0c4bab03a45f7ed69ff2660ff
3963e4def11001eec4238c368a39d874fd30b3c14f4186ec7700fbce22abe468
eb32baf7b0164f8f21a9b5e706b91411faaa44467cb2180ab03de375c1ab93e9
76e11ab92fdd4a7280a6d1a8dc65c4c89d04c8ed6988045a2a3de9a4c7b1efd3
75b79ee3d49569213fcb818f6f1cf250f5e595c4b2f30eccda0ad91535242898
c1b2c8c6be9ee484601d7f21b6065ddc04f49d458c4a7b8f55fa066755125cee
be883e79aab6c79e7a8e4a5ca93fc58404296aa714656aaf084082941ca07591
f88491205be3b93a0ab094ac6218de2929347bf8634cb75da7a3cd22add358f9
8848f8b2795b888b1a5cdc78abce026828f03b4dac0d07af7d8392e0fa9ebd47
290df56a3fb9f24c0414ec0f884101b534323dbf38831eb3418187e6335517dc
840a0a11f9fe97e1bc1c6f48469a29413f6d8240a79829cf6aed21417e8e5d81
2662df956ed7406e02c529c1363b6c16d3cda28477ab92e09791ea82e09fbfb3
bc34c55b7a70e9e49a9d4fef4bd6270fd64a3f55351df73e87b71c61d85de208
41cf2dfa9b47b4b53beafdbead9198a93f9da8908751951d8df8574560f20f58
eb42332013b9d8ba2d38171343d775e17995122800df90602118b037a4cbe383
3ccbcd65cb2881b64a917057c93389cf811af8bd0ebf415ed360c487577c
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 46 /period put
dup 61 /equal put
dup 73 /I put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 104 /h put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
/UniqueXX 5000793 def
currentdict end
currentfile eexec
8053514d28ec28da1630165fab262882d3fca78881823c5537fe6c3dda8ee5b8
97e17cb027f5c73fdbb56b0a7c25fc3512b55fe8f3acfbffcc7f4a382d8299cc
8fd37d3cea49dabdca92847af0560b404ef71134b0f3d99934fc9d0b4e602011
b9cfb856c23f958f3c5a2fbe0ef8587d1f5774879c324e51fcb22888b74f2415
50d7401eb990d4f3a7af635198422283cac1b6cd446ddbcbd915db9bff88844e
784c6bf7389803d9450b0c21756a017306457c7e62c1d269f306bd3402e266de
fc3b5e7d8a8d2f5bf0fe6ddd40d07391df4fad4a6018dce29a2b8f692b29f202
3a7c0e66de8ed85c14f1f8492167357f51a7e84cc5d92e0fee4d81cf7fbc8de5
2d2e7bb57142033993f9c08c315abade8dbc4a732e84e142d3bee51557910e12
cd8aa37c459a5e6b7f5269f59078aba3be4641a11ac48d0b625c8325b38ec08e
4c9e5e7fed976a5650d99d82114f449b9ca14c4ec957702295a39a93ef93f618
99b8ea06b092c3c1e503e6e436e0a9fa22576c8930ab3dc8c20f5d82b69cddf8
ff4dacfa9c54bed5a3aa3ea5b129fe96be632843b9b6bc91b615581a985db56b
1e01ca60ee69ca92cf5c0882ece62edad3e106d835348822400f0b66af658f2a
e56ed08f8b0010571807009b73ab12a8cf14ca6c71f03c2a48c500f9d62266af
154a6375ff600d9bac3f05ce34142d6867a79581c533176bb2f3117336671e2e
44638a97167e2ea9644e31ea16c2ad2990ea33c54001e0c8156e6de8ab6a4d40
a7137ba275f39589fea2e2db8256adc103d6f9cc038037a47e8fd469c5f98a5e
3c15bd4ace40d340018b1cff7d1ed8abb0ac57b5b5a2c20a51957b96c453edb7
dae5affd91a46d938fe0a13363001d844ded4323f1ee6d30012aea19b024a552
315505535c85dc26bad31e09c50e6512802976d298c4e90d0044c362e6bf3ab3
62a454ee93de25ce54411090c29e9d75c80ce26a84404bd9de3aee0e3f921ac5
87f907572b8354a5c3165eea7e8b2ba4e333802132f760b41a900c698eb3d273
8bea0aaf7aae96a558f08b61aec7c7d65b2889bb7b99800cffee5ba19ac90fce
11437be1ddfcf0bca5670b543b9644a71c8726d0c1005abdb96f6e0cf7caaa31
95017ca81519151c2c0b04f81e717c0691b63a76e9b25329ce2625b711cb7bf9
9d23ec2bb5ec8aefb8c1a3b422ad617b3da4d49685fd44cc21a1fe5e1541163a
b3e15e589b2a3f161012fb273207161902de4df12adaa93e5e2269561a54b792
9e779e5897588afe605d12f9f72895ff7f576182923ff152a74f4e5d7a635037
8e5ddbbfa1c3378f7f8db6918bcd4c98841a413326db360d879a638aa965d384
a6c675faa1309038b90fcf2c4b1b6f20364ea34d2d5eb7b832fd6488c0a406b5
d95937061eb911ab5dabcef26223b8b541b9ceea4588e55398b7bfd549cf1a2c
f638015c7f4a8b18dab233a692de91053b668ec057ef6f3cc4a6c04d892003ef
7110b86a9ad6f5d55b18c9749b64ae533d0f92f789865c9cdab99f6837507062
21a894b53cf278890fc834773f4e5b8f6357aec52ad93adbe7b8919e0547fa54
1b792559a2e6ac6aec4f8521b743f34240f29796a31c30e82a7a2e6fb859ea24
98e277f84f9e45d95ad405212f0574f38c1c1c41539a6293c01838458e3232bd
1264050449e228c8018475cc91048895c3a2c8c8e9d147e5dce5bea39642887b
293c75062f7d6bdd0a34add96e296a71e3f9445b551b908566ad4a7b762e4f9a
e24893a523c2598d0f729e07022d1e01f539c74b3fd0ae3b6c46432931e338c2
c00bf4b15b03d99a07377748f9f2b079328e4d2291773f8938ff881c6d917e6c
3d9d542d74e29ffb91c1da493c930adcc3c091d66225944aba546d6b639a2526
a60f34b22aca7004f5079efc02990bc3e5ad12e2d6a70daa304acaaf8694b30d
0604bec0abee7a67dc91796888f1bcf8adc40130e6bf62aa35fcc9cae06abc34
5c1cedd061283df6bb17fd6be78e6fd263b374e8a16fbbe4ed7e0167b14d9348
0f0e649d5a540a7b5610c58c621909aaf09f41fae6360a1bf443642e8f346104
184de23a2c17b1cd59ebaabcd5a1b0c8214c1dc0999b8a0ccb0b77b267c306b2
1ddde337be845069831fe19d6dd6f5b16c87216abef2dff948b97e5ac24f0ec8
f6debb93dbbbc3cfd1b6b0fbc906d065c5d90d06d190511a54dafba7804ec739
49db04611c47d9d5ced4c3b94589a22f7af69b53e5952fdd353e96a0e424d4e6
084f1009d21476679e9fcaac8f90fc62238795a601b0088cff4d7d3a17a1b707
b9cf8f4a1125e6be79cd9691a69e4ea7255361d139ef9ea6380b5beda787beb2
1a5911bf83f07d689bbffe5591dd708fb2ccf4bb3947d2fec28054716c11a1bf
46c32155355500df3ad085e96f7e0989b1aad83ec0192ca1f4d8e6b4b0eeeec8
897a564ea5b0b9a5c6876bd12cc2d9c80e8a4a74f7a482a3bb63596462cc94b5
9646c1ee11c0879a21e1e4d35138ec6c8bf9d55c3d9091af6c6501444d7dee7d
b6c3afc28935c9ff9eb8745d916e710eec5dfb0a862f2cb5c22ac32d5a2481e2
649f82596f3d4456e7c44433037cfaf188f33c5bf3b9a1b09c5dcce4c93da5be
6bfe56411ae98cfd334cd8d8988be0a334751e9ff5234cee03d70e886fc8133c
41831ac24c713d81111d5c20f0fd2284dfb3db133896745f32d886caeda9eabd
00687addd72440f3c7b04f16bb2def82161ef0f79e81902a1e8e17f45b82959e
5cea1b1432acbfaae3b61820f3a5a4e763503fa50aed98bc1648c9a4b86988ca
4470bd0a284ca359c98c5e632ee30ccea94bbde90cc48747226e9e5fe172909c
0277017758fb1bf68d4193d71adab2632785fe144998c92fe4066d41789322f5
f8bae65e7a8f6f7bebb912af330fed9fe8c3790cd80481e53963f3c92cf47dc9
4e87c78ebccdb8aa21388cf9d6f675c35ec9ffcc73cc7f718185730e968f4b27
8dbc6f0d36a41f7844746a9df23c2a5350bd9eab1afc6eff942034e7cd47543a
46c5817eeb74c1bd7aec47a7f5c5a7442eaa9bcdaf8634f1ade29609fb794f38
0b89986975b75f77af7f4bfba7580f99b78ba0b80ea43f4e5a77fba24aef5877
730d9fc03605def366c34cc6e2883c373a6e42e41f5196d2e7587ebfb41083f3
619804ed87cea5a025cddd01504a4d7dfb18383c8a581de389895a2164b5621b
705c4efbf66a23fed11ef5e7d69840cfab9f9d0fbb88daae2f89f98c652106aa
03b9f2e45c1759378234854ccdc329df1ad6cc1ff757228a10e252637b4c4ce2
37b45e93fc1b672e0e16eb6d7dd5847f00051dc1ec1ae9832426ca205a1cc3d2
ed293acb3ad4033ff9c3e9da9f48228b960413eb323032f240c75256a3555495
ae8ba50eb2a29915c56c7856b58a3f36bbec5b1a9521f6d1b207859935df33d1
77a564a391a18c14493430a4799907a89f446e7747bcfb3006e1a1a63aeaeca5
67f6094b4e695cb9378b8ec8623913cf80aac6b5dd6a70fcf8258367da8a284f
97cc86498b9ce8e8adc133568599816e335eb12d67952079fe822781c1d5370b
1640b9872d9438b20b6e30af129e5856fab1c522ad598dffdf4dc51a1b2e2681
1975fc4b3c86a42fef0101fd132ea26b1b44dfe5f7cbf2b7ac67cb6e28fc6ccd
3267ed93c6a4f20b638859dc701b8d693f212793007da23c65916e17c54b340c
0d8b631f3df4f0d2f536ebb29b5f2a72aedc4508c5b357c4ae7d2fc7605883b1
95f40dcfea8ea956c3c5e2a41e250998a297835c4584fa6e395b6ac062b5c744
ce0a4e994a3b2d2f1e9e668dbe2fb39ce9990f857485d987ad851ca47e6913f1
aa0091670f80f32f8aaede11a58aa744ed3b0c9a9c913ee80c281758e519c658
9a619cf6fa9b086e3161aaec17492bb883f425265c873fa590882617482a0919
346f4bfa6eabfa355ce4965a14898084c89d8472b40a8ee0c744a1537eb1973d
88b9be5705509ff93f828c7169c1b5a7b97b84c08d62366c17622b29bad9f4bd
eddad062dac1bd286c40964657dc090d4203641753593456cbc06e3449842516
f6b9d101b0de0162f827dc76b7c7b3838a4ebac12bede8eb260891e84376c9da
8eacedf96d249db4cbc35e91a7d754f891c9628d519626f41598dd5aed93e0e7
45cfb370ca7c7cd5cb959cc0522862b85ec3d365a88bc486bd7a746bae34e5c7
1b61143ae5bf68ece60ac0b5e427106aa3ee82139c9726b037a08fc1b9fa165f
d6fb87d6d031dfa1bd570f244f5c620dc9b23a8682a4b440b91af0b8a3e71842
822b881a56d34bac8b2ef768571659b7674ccd9a09fff78999b7d54024dd4955
f639ace26e03d0e961cd74963b47352f31aaaad04948b41a1f453c43d578dca3
22a2c2cec7b688066cd9c3213d7a542d2f43cf1f8640a76790d3f69e1eb0928d
259a589cc1ebb4602d3f4bd8ef53fbdf3eaebf0498854624e4bfc57a04704747
fa30ddf1f5c1252436eb0bb00409cfd5d74d50ebff508016179d8af1fe256752
3108e5ac4005b75b337de76128417eef82072e6005bcf5e6cea98ce7e0582805
f98733cf6f3ad21aa7bc1794ef77b5af227fc46e02fd74aec5dc439a44bb93af
f6951335bea55cec18190ef21a319b0719985bd87782ea75d4eff9d0af29f3e3
6fd7d3b12fdb70689a5ab5d77094429d36b38a3c9dd5bb0716c18fe2ccf0c120
b64cc9f4fff3cf94d8bf1b666c87488c79e4f8031a767f66d630be5bec822e60
a14153080884e9c665ddcb902a8cfaadc80a9ed125c976b9bb40bd05da0160f1
a417f16fcb211062547285d728ec30f6b11409fcde815ed18da58f57f507b646
a81c8acb4a1d51ff8571e06b22dd839b89d0e559dff7128e5bb2a144f45b8791
4feefc9efa229fa75da0b8a121fe5fc2cec06def56594d17f9ebd075cbca6d7e
8e63f14e34984774f94aa99848141b7ac7cb23169d08731e984ff28e46876ba3
1e604dd1198b8b04e73479f6f79246c67df1decb418eba768716c33c3f8f1113
05975713e99dd340bf9a1d6e1ad6c92a88f9f7f470cc0585955cfd7c618289ce
3196a2f43924d79bc73b6644adb2a2bdffe745683fbd23c3d7cb7ef1ab738f9a
dcf368cccd0ef496a3f2c47940be10cceed0fda13ee44feb5a3b4048c46ce00d
2d3464374ac21e09e9a2ada6040271bbad850cbd98a2791557fdf56a848a833e
517542c2eb120b9004d037e7e8b4b5c4c2e792d939d08394e7a281e5ed7ffd9c
ce8d4838b8c5d6b347e6a1a796c15335ab00e5930cec519b00f7a7e98c7cd940
e9a53045ebd3af0a2506b05105fec2e3f138b319a2cde55ba6d9ea1b3379ce2c
8a846dca15fec9914df3d1a6e46cf58d5fb0fd3b71b6b2e531934fef6178fd59
d152b05d2d47194d57f22b4e8481bfe6a1cb1258065c9b27758cd639da14dd9f
36f9be7df054e9c62c41164f22aa4fdc44cc58c36dcd936417e1c3bcce748c3f
709933e8886fe243598199fc4ee2c8dd4cbf4b54920f4e91962ce031b115bced
2270c61ba58fe45e4c81c8f21fdf51e16135231164bfb424b12113bf72fdee5c
338c3ed4031a0179937c9b0c7b542c38a4ec0f26159a07094dd818b90c97238f
4ee34b079e2f00d574e47ad72186e2bc21e14c0857fd0b5490cc58df1a0dca1d
948dce757934425f3896a294025d7d74b38bf0c64b24babed2a70087e72c2a20
3061918e536d8c3066fffca55de8fc07e66284c03b9a6d93d27fa9c8e1eebb27
3cebb84016afb62a5e701791552afc635eb6b9fa64b2ea9a93dcd2fd69edae1c
bdbe0215c221e996ac57b4d1fc9662792de70833c63548d0ba7a79c635cc67a9
c79c4c1236a6fde63ec8513b8beac09a6de3774dd226691459e53398871a0cbc
92d7a026f77d1cdba9e7d25571853fc580fea4e1d5dc6c75c91a444c004a997e
9ce6ce3780c618c1f164cb113ba747aeb660dc66cc6d3605fc789ef65efe2845
a09a17210f14f5dc8feae5929d0537cc5a26c4051b840628ac607c59791a07b9
bd2fce82fd9cbde5eb4b9d66ccb62092855d17c0fa19e170e85a6e906f945ed0
daed5a11c08b3fb5ba29d4a442bc1fd0d7bdeacd9f0bd77cfbc6ef33d113ede8
9c5eabb5b2fc8d592006be29def34f751615ce838d8016405e21a3a31d2b72e9
4e8dabd22d9328156ec982a2d9bc28aabce67f847054f3d5b1711ae57104708e
0ca0ed7fec1cec9fe6d3cef85b9b4bb73a8a1eaeebd2ba9e96c3425f0ae2d96e
2e27d83e061d90025cd35f469d7ced2a2073ed301a9b09f172ac66e3db1dbd6a
caa31b13c53613f21dfb0f4d175ea09b0ca71bc82bf21ef2bbd8428898fa2ef5
b2d2813d4b7df1fffe9e488b10baa6bb1dd8d41dc7f66e47110a589869df5b36
ad2e6a913712a701e5d718939b7248992834b2d832566c5fb0013823815ed7f7
4fee156fc65d7c0556e154176c38742181fdff8ed76254fbd1221f4d4154a2b0
fb15339b70f657fbd000323a2934acbd027f7c1e4a5cb7996ecbdde894804ab6
f93b34ecc1e720b7f9843aeb4742506a0e5f0f879f0ccf1dba72cbf5e0377106
d8adbf35a421e6b87cc4ce00a01f0de7dcccbf524ea0507a0179121eb3fe200e
09cde624438f087fcbbf1f790b202ed437072be4fd98b0d49784fd9ea2bd0a39
b52cef6b828aa035a313eb8b5e78922267ef877127d4dd1066095ebb02e1bfeb
09427176f60af4a0139f68e849bde7bb580ad59fb5088a815fd04ad4ab603882
bae9930603192d5a219a8c497c900d97b5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
%%BeginFont: CMR7
%!PS-AdobeFont-1.1: CMR7 1.0
%%CreationDate: 1991 Aug 20 16:39:21

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
readonly def
/FontBBox{-27 -250 1122 750}readonly def
/UniqueXX 5000790 def
currentdict end
currentfile eexec
9b9c1569015f2c1d2bf560f4c0d52257bacdd6500abda5ed9835f6a016cfc8f0
0b6c052ed76a87856b50f4d80dfaeb508c97f8281f3f88b17e4d3b90c0f65ec3
79791aacdc162a66cbbc5be2f53aad8de72dd113b55a022fbfee658cb95f5bb3
2ba0357b5e050fddf264a07470bef1c52119b6fbd5c77ebed964ac5a2bbec9d8
b3e48ae5bb003a63d545774b922b9d5ff6b0066ece43645a131879b032137d6d
823385fe55f3402d557fd3b448685940729e6e22f4be0e08c6505cba868f7950
93f556b64b808dd710eb936d3ac83e5783b5f7e56d363a59a026a5619a357d21
c4e77bea121eb24b09027d1aad93158edf912940e91cd2f17922b35885894644
7773730bb19af9e70453e1b78d5edc123b273a979891d6d5e624f4a388f3897e
13b045e34b4ee2f5e4fc5e996d3549640010c671de14d18b0b3cd300e57dac03
22e59bfbf7b29422230870f5897fcfaad4b50c7c1c58edcd119218163d6f6e56
25ccb882db7b6d09a1586508e8cb642a11c29a46915e4a96e282079cb21922c1
c2e360b487a45302fd22ec8c5fab63e54b5e844d4b17ca2fff37c69c366dd72a
d02922c14c0932f65ed03e4219c117962edbad2dcdeaa9c10ce8af38a4ae52e2
b377245b0be19a77d6c936e7530cc4d0b78d0cc4a92698fa2870fa54f2d8503e
2d17b3d52fb2febb09f2b2af0c2a1892039ebe19a690098799a858e3d39631bd
6925a154d161df3918074ada6bd52baddd0adc3f07e2d9f15e27cbf7fe8b98c4
07205c811121fa91e059f2f99322fed63f359ac9da97aec383f067f23e5de331
51e80f0a88ab50fe8fdae4a5de93c1ae2fdca06150b37246140c0e87cb2325a6
0d2349162ae3ac93144eee1e665a1289105318fdfe86b6e76251cb25adc967d3
d0b97fe5e279e1161736ab22b4ca510b964342383a840defd38f96a7280e6ac1
34e48d740607ff2e7804164a16d47735864db847c97335e6d4215cb99911a1ec
015a3edaac1f28fedd56d2467130d07bae9416c15f0827d27c6c79f59054282a
418c12c157c91223a829947f47592f7cafd93ca182b25a73a9419127e3b12a9e
5167ac3963f2b019b338ac46d63880f94dda4b538835884d2a5538c85528d6bd
977f844d32b43b0e48caed5a4bdabcefe71695d69ca784dc64b133e0a1ad75f6
c55499b6157e9c9fe0a411744219751991a2315ea8a54a9be766ce6bf7729ac3
23fd821cec46b54722a4aa8b37cb690b35870b00117872a72cf506288fa3f16b
fe0d5973d3be1a5874666d7daeecf6c89dd86cd37e2f31bbeab1b5d5b6d68fa6
4178dbe24f36e7dfe4dacae0cd9855e1315a2902d26d37df6a8352f1f3b7a736
bfeadba229f6f42c33f875a46bd130240420ec1fb53e43b3c74d660f3212afa1
6f37050fbf9211d6af038c983ebed0dcea06e93316517f82974646077101eb11
457a1bf84042a0715625cf2deaad1b8469e55437bcb15db5730bfce5140f8b23
f9c1a1d6eec1e8a3a5ba7c3771e8c3201ea11fdf46c54ba3dec7b6a499
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
%%BeginFont: CMMI8
%!PS-AdobeFont-1.1: CMMI8 1.100
%%CreationDate: 1996 Jul 23 07:53:54

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI8 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 68 /D put
dup 73 /I put
dup 83 /S put
dup 97 /a put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
readonly def
/FontBBox{-24 -250 1110 750}readonly def
/UniqueXX 5087383 def
currentdict end
currentfile eexec
80347982ab3942d930e069a70d0d48311d725e830d1c76fba12e12486e989c98
74c2b527f0925722787027f44470d484262c360cdfdddf3657533a57bb16f730
48bfbbfcb73a650484015441fdc837add94ac8fbd2022e3ec8f115d4b4bb7b7f
15388f22cc6198efe768bd9fceb3446ee4a8dc27d6cd152485384ef5f59381ff
da43f2d20c8fb08aa27ab2015b774db10dacfdcd33e60f178c461553146ab427
bdd7da12534ba078ad3d780414930e72218b3075925ce1192f11fc8530fcd5e3
038e3a6a6db2dcfbae3b4653e7e02730314e02b54a1e296d2bef8a79411d9225
dad7b4e6d6f9cf0688b69ba21193bf1495807e7a196cf14c95a4e02f9cd2da8c
db2546c6df52e524745992e18d9ff87aa25e4e1800bbe4ebb357c6ef55ed6d03
6d3a00c1ee8073266c21d2f0ac85d656abf61d7e5a4fa87da8ec3b5329e434d0
d2adab706b42a2e5331be5295399d803ccac03f631f01f39a022fcdf63486b68
7d15ef284a77def7fde4898543e7b5f7ec267756103e477f547cfb8d2311c4b0
09deff56085f5d419697af1846c8b88c1bbbae149f0f19ca3c8dafe19cec48fe
6b38357246d8b5cef80b53bab4cbbbe8bc8318cc462a4158258f456e697f6058
86010493f252073ee4e4c9531f23485415ad6bc901bbaea659ef701f825f4b6d
5c9bed0dce7b63810f906b33ea4955531ca1ed1fc120cc56dc1e277a33222cc6
c3a97552607b865783faf0895cbeccd0df54f57bd162a88494768435eda71a39
69718c0c5912d3167bb0971546d733e735aa9bcd89f5aa154656031ab3f6fe41
94ec225ad03ab8b67a9da43ab365c4df17c23e79f685c3b6fd5b654e4a6f2603
6cec3a8641b0b57f93eb95f9e238832aeac2061f3153e0f375513c974f1c38f7
b59edcc94716f2862cf71c9a2be8430985da1cd813b1e1c1b9310564a2eb1aff
52c190f50fc981dccb64bb2c1f7a62c216f211c162c2ed1c554ef49fbaf12b31
aa3b2a80fee259dc0a2a4242869ddec7c29e2941792b28bba7f2c6f77ef69638
12b07d6843f33b51e01c8626b26edc34e1e0fffadede5fb468e8cd5de7e5a64c
366967578f415484d122834de4a647541d66989f7d8b25d1712d8d16729bd9a6
47260cceee79391edfafc8df24b4a339f61b1dacda4b5d8e488c7e7251f24118
bb4872be5b604f21352d0a10fe243a87c8cdfa227557424b9bd9201912cf5300
b0609e38d3f4e280aabd15c0c5195c5b4961ddb2d27f6e8c674bd7c4d2f05d77
7bd17ce8bebcd3caf421233a7b77bf680cf58cd0255dbab967ef678a752bd1d6
69e5704f87a8fdfd60e0a80ab88fa640775e7404ecb7dc1980b0681fe6f44185
4182b9d9cbdb6e58891f2fec244b5dc70ee4c296823e528e34dfa94492bf9bad
68b3feb29ae6e3f983c69e90a3a383285ee8dac7f873524562fcc621dd56e626
997536f76e56bd7aaf8c7cc6827d0c94eecf068d2208b6b8a6a6908a486a928b
07f2a4ad902450b46d2ef95d94ab119acc1e1fb6ef127e6752d28e7d8397ac30
57d9cf5f3b27d101038f62e171741065c71eeb85f83a1064b2aa6eba54078d7d
36ada8e033de4feaad0406ed50d2dee63082e9db7758f76de267f301f3ca6075
34f7187dd250062fe9bd83bb21c97960902bcf63d20df8e7b883fe4e678ddbb0
0040ee3ffa3922f32738c1209044e5a93b9ea58902f39b957c49dbb6c7b5d874
1246911274d95951a0a0e7fc220d3c062d2d54d576f8fb3565a07de1642610a3
1e5954b37c8b871a2aac3989ea1dbde7a09473bb53bdbcded38b91f4bbe2e075
e6a58276ccd6da69639b250b9cc496d4633855fe25dadd6a8479757b4663a625
8d2eb0c84d8f4bf4810018f087d49777369ae3dfc7ed7760fb497153bea1096b
e6b8ab6773d7847adaca305304d9b2d7e08b6de4ca60c574dafa3d86c6b83ec2
e6f4d522b66d9d4781010ddbcc8439e787274f91211963fb6ed8d62c7386e726
3093d71a34a74a97f0db34734540a1e95f1e51d756fe59e6eac97be4dd9aeaee
e9734ad7d6f9e6845aacd110a841a770f99af8e431e44644f9c466c5380359a7
061a35b4f9d97146b53252c2376bdce2654a9386ee8eb091e5a2018950c11ee5
d2330484d28ed9e88745fc4954f3c8a7548f675421cfadba4ed9b4e0404d3683
0d6f6a1983b6a14d70b793cd6cf97803ff1c71983b5e7f95c17ea21f928abe41
7f905eea8e4f29d0e975595854a6446e6da0a2fe41e26be85a7b87e03b846f6a
a846ed52a0a79c0f6ebab50e32029e17059b779281cea6aa4829ef58b30d286e
8521d3b71fdcbc2333c408746c63143a990b45d45a7bbbd6c8045ced96cf696a
9476f89e98d00d02d52b957992df826204c9d6ace8a7259494816d7b6e31cc2d
e20524ea9ec0639fda9c4e1f07fb32b362a8bf9171e5f3553d895e1f3775d30c
ce0295feeebb5b0cfde6d74701edb1c0ba8b00ba3dbf7ee61f6cbfc4dc0169d2
95de46378e465aafad583af04f9e821940247da2f0e4fd5da34fcb42cf6183d8
95aac309dc73694da1edbfddb1986687f63e6b550171099c8fb16560bb4f2590
664fd27cfe421526c5ef35a4c4204d3618952aeb963951a2b50d6a9ea8ef5f18
b06fa28375ac4bd56ea8a385c99ad3c3ff337e322d44757dee96b10dd5909d35
ea60dce55fafd01d07a1bcc8280f25d2fa2f5c2ec45ec1168649be0b1bcc3c92
a0820a0496f64a1108fdd0e2a49310d86309de91b1d84c5726e60009a5faf172
c5c90d6c159062a0d621c9c8ad86835e29abd4333cc52be32e6b8bab9acfc11a
496c4d4e73cecadb6ee673c64c79e67702e7a1dc1f7826d1883e72d278b11c0e
0e36fccb64a773e87bb643c3ad2f92811638a9aa00f52a8bdc0846698d0dd7ed
3796697592e7ba3a5bb3be00f47decd1772a181090a955a653df84c052cabe06
492a0f6bc65e93a144abcc8e7a744794f1c0fd5c5c8a36d709db8c0997af1ca4
c23567cb5c31574b7b26f23287e915859cfd8ae521f5e292bbcfccab32f573af
e3b463926e6ae74782000e2963d9b2559cdb5df1afa6fdcd5e0c209ffa594e78
e8e2376664f0033370f252d171db1f5d8f2b9576cc1f47726067593d528f6bd6
20c67e8dffe099255aff5e9b5f2ff3cd06aa96d259c815dcb189a8f46915ef7e
14b2e2b53ff90ce40efaa8dc28e754f4abca12757ee1b85bffe76006e7ca9305
41d78dc3c1036b68f0a20636684952e95db2cc84f185dfc2a3177531295438a2
3db2ac62c36db9abce1232e968cea3b445cd36ab891c6e70790b0d9ad214a39a
9d37a325f39c06073221626553d47c1161f46d69f57de061077f298850e3951c
13e188b6dbb966c8cd98acdcfefc7c22be32e63a90876d0985b2f32e79273413
6ad905aa5c498ad5df9b4bfdf0bddbb81aae3f45a4ae3271276bad4737dde7f0
ca6112a09f2856d339494884587903ba89336a7a5369d76cbe65957ec4df068e
b8b106c4f53a2d404f245333dc73e4a5b38fd796cd5a3f8230fef7ad2d77ede3
0a0c630f950805bcffb1a948fead3f9066e9020fc0a634b0dabc3e42726956d2
e4d3584120d9c40aacce6d79ec77541b8be22e4aed6471051d3b39575e58ea21
7dea756fd69c598f45ee0a9aac709859bae2da073e34f3b9de363dca07aee9bd
0ccbe84194f2a0a9c811b5e1c307fd6714ab893a0015289beeac2469c790d2a6
ae1a1fc4591ddc73e7165f6592b08f4aa94dc87c8ca7337383af
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
%%BeginFont: CMR8
%!PS-AdobeFont-1.1: CMR8 1.0
%%CreationDate: 1991 Aug 20 16:39:40

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR8 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 61 /equal put
readonly def
/FontBBox{-36 -250 1070 750}readonly def
/UniqueXX 5000791 def
currentdict end
currentfile eexec
9b9c1569015f2c1d2bf560f4c0d52257bacdd6500abda5ed9835f6a016cfc8f0
0b6c052ed76a87856b50f4d80dfaeb508c97f8281f3f88b17e4d3b90c0f65ec3
79791aacdc162a66cbbc5be2f53aad8de72dd113b55a022fbfee658cb95f5bb3
2ba0357b5e050fddf264a07470bef1c52119b6fbd5c77ebed964ac5a2bbec9d8
b3e48ae5bb003a63d545774b922b9d5ff6b0066ece43645a131879b032137d6d
823385fe55f3402d557fd3b4486858b2a4b5a0cc2e1bf4e2a4a0e748483c3bcf
5de47cc5260a3a967cac70a7a35b88b54315191d0423b4065c7a432987938c6b
edad3b72ad63c2918b6e5a2017457e0d4ebc204b094541f345ec367ae85ca9bd
24568a01d3b9f8095f7420e6c423c414b3dcce6da48dd1c89a56d078e0d0e2f2
62a13640a06d17e44ee3866c3471fb58fedf5a3b77294517651c16bdd7267d39
a54e7171752dbde63ac19bb4b3021ce95eb5fe67390b09ae4d9ed4d704a67443
f55dce17acd996c1f5e023c9e5a18cbeecc3097f23763acb86cdd7cd13381ae7
4e48495ec7fa520539d87f8a8dcb3c826275469b6800876a457e7d1e5be867c7
b1ccad69742a8c9b0ad943482bf2a4ad0aed40baeb69a0233bad36b4ca2d2da7
322956c70375d152653500b2f22d2ab6990cadde2da14b4917f7515e64bc3d96
bf775258fc7dae4e42a4c9b6da8eddec4a800c8aadc8d75e48cae52137e05c03
677f5d6a82fa46d9f2fc7f56d62e5c605a1b7898b8d1401c2cac1a0122a2c8a7
aae09607f2c5f29293a09b9959399283be89051452898238b777db9830ff4318
a298b221c4a820c700ca964fc99e6b1d9eb0bafc39be9aa9dffa2fa326b2a466
1e67261bb3dbc85844e76f9313ab533ee16bcb478166de5502b68e6ec1ea6110
f53206cf1cfea419571b0243244b32ea38b828a01e62b03bcf476a32c2341cec
b8a0fa2a3f3f339315d5f3aa7704408f6617d026ffee4925aa48537a4b2e556d
225be09392546ad561cd46cf766f0ba14c6854c5af1a528c3842b0c5aeefefcf
19f19cbce5d967153c4f88e51c776cfbe10d39328466f7a3b83d85601ef4d1ce
0cc136610fa6a74d9676e4e99291d565cad27b9eb2337b0eba4148efd0eb2866
ebf0a4209ba135ad1376cf9cc2d4110f36121055caa3f2e01780740eece6c18a
13a2dd210687a04dfffff599203049443810003f7fbab9b6ebb55d5528345d36
c71de3336b7c09ea4fbf2f52752e5d87d81e529b81007e4b0220ae61547416df
4d69e3f44139fa1f615166114637fd9735b715bb9522046944fe5d3046d82bad
b10acfb9aefbe7771853e5df51c2145aae8681284a6e403fc8530e748e531b1e
980de41b012957c20315bf1171485e87b3cab8d162c866f25d89cb47af604166
44492350ee5fbd58e4b298ab2ccd1a999994cf8c3292a97de6aa400e7c827726
f01fc6a55ad1ef9314543899f1abe3fd27bc6bb1ef3ca298efc7a4deb14f0e80
782bbc6c622c39d92fd25ad76a6ae5df82da0a665ba02644f52e770ac6b46067
73e37185585f7589fdc5bf0bbdeb90e1ef6becd39b49e70ecb04c8d933cdb416
345b770790fb510a5c05a026c5ce887b4c628e201d18f10b0d16379de6b337d7
88b4f1cecbbeaa26fc60ef6097ba67798acf7546fcb85f64515c16e2a5ba2dd2
b11fe07f5a74f22c8467005afcdba58269913c26b0b7f5a56bdebe96c8145c78
369e8c50dc9d7e41e3c64f8982ecad1a016f82e209b822eeb909362ec1336c08
7095fcae4b6a9fa5666973bd550acc5f87408032d0c735a84210ea4f4c186b65
9b7e406ee3234c60c17c48ebcf00346d791738589c348f5a6e77ccb8c0836402
7f2aeba0f115c8e937bcf5bd8ca624590cb70f34e019b6888e627476
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
%%BeginFont: CMMI12
%!PS-AdobeFont-1.1: CMMI12 1.100
%%CreationDate: 1996 Jul 27 08:57:55

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 58 /period put
dup 59 /comma put
dup 60 /less put
dup 61 /slash put
dup 62 /greater put
dup 67 /C put
dup 73 /I put
dup 77 /M put
dup 78 /N put
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
readonly def
/FontBBox{-30 -250 1026 750}readonly def
/UniqueXX 5087386 def
currentdict end
currentfile eexec
80347982ab3942d930e069a70d0d48311d725e830d1c76fba12e12486e989c98
74c2b527f0925722787027f44470d484262c360cdfdddf3657533a57bb16f730
48bfbbfcb73a650484015441fdc837add94ac8fbd2022e3ec8f115d4b4bb7b7f
15388f22cc6198efe768bd9fceb3446ee4a8dc27d6cd152485384ef5f59381ff
da43f2d20c8fb08aa27ab2015b774db10dacfdcd33e60f178c461553146ab427
bdd7da12534ba078ad3d780414930e72218b3075925ce1192f11fc8530fcd5e3
038e3a6a6db2dcfbae3b4653e7e02730314e02b54a1e296d2bef8a79411d9225
dad7b4e6d6f9cf0688b69ba21193bf1495807e7bcb09b7064e91fa0ded228e42
09aae407a7aaca60b1076299ac4abd23ef02f108765f0e3d91f92f3afbfded37
2fcf6e4b1416901517da8f2fb3c9fe7a87bcbe6fd36cd5b5823fdb74229036a6
3c3346a1093e6b1036902c1bf42fc317c80abf04020a47b344c36de42f05c490
a0ff44ab6d5249e9f552a8707bb7661e242644814001c8430ebd5e5f0b944ceb
666ee64359d663e355b2f17093a964139d17287f6ca6a024767eba4fe4873855
babe2f07b91560f68300b06dfe27264c163195d446980c35bca0b48f7806626a
e72636593a05ba403ce1c0f8b2cea3ecd586e90ac17d034ba4af708304f23131
3459fbbbfb97d4834d0395754ab3f22d6495d2144087d448616fa1ce27bc50d3
46543287e3860d99b433624119bb9920a2113604c0e260fd275ba55e0fd19c83
e19addc3baa1f32f6b7284038845ccee71a3311ddb17b84975f7a984bed7c6ec
2a06e5b335a763d081c6273f86a46632fd9141a27902074fc860df3a2eb59b89
774c767022dbb577e30da128bd7706a43af886d0c256b50fa968ef06776aac0b
a5387e9011eb2334c1f42c090f06a1125c207ea6324e87f46414050d88017594
375f9bf015751759ba48eceb410f615b1b8fc2bed0ca7994808c136f49d9edb2
714f28e499b59dcbd8ce3455d3409002eaf455a9272a7090a43fd6bd4601f84a
aca25a7c9d6973ce1c0bca5f53ba13c65eb0c7b457a7055b3ccb8613de9300fb
11407eb14445058a7e9fa375989e69ceeeb8032d19662f7d9fce73ce78955151
16854afd3ad930af497d2c32dcfaff970df637cdf33e9a109428a20607cb8979
09f7ec376c61f51b561dcc115192a6fc22d4c6bf444f8831814da08820801168
978cae1c3074e04673f0ef8b8e49ad4bcf5364850a8f03a83fd8855b3e69db86
6017d107b1aa4c38913400aa690ea00c3252b9064e86e9bd1055e8254a863f90
98c272f8b5d335c6bbf51d4491d3d3db55f64da03f8cb26a8d2daaebbb8a6441
a61ab8151a0b069a5838c7ed5295062d7d3c504a16d1935b145c777b3e8abdca
629f247abf79fb1294a89b6d5e1e377104fb2cecc70a3375b5e979ccf3ee635d
22642493a9857722eba830e914e517d45832d007ec2c8a3589f54a0d4b3abf35
13da7951d34c047afd6a1a1a06e23ab8b432d568ab08b86cd924f3ff334118b6
16239df434723583b2361cdf9e395d63db183a322a872ac7fa1ff1d5a411a63e
b5e5d53b54a731afeda3760d3107cd4071b68ff7080517ff68059de0a9bfeb7c
b25092ab8fbbc3b6a1cddf5e1d18d1655298b55870ced3c94c3d3227829532f7
cae268e7b12807bec376c3b881ff076c9ec3209561950646a67c8467e3a8fd9c
c6d3a9b4562f01bd495060fa18f0d5cccb655f79651bacbd58eba8924dd395e4
5598e7b00f8b70b1563602e6bfbb96828614190387cc45df3a5a5f669f621fc5
4c4286113e17a0e4ee0b057163c4efaec37e1cc0cbe25e48eed5e1cbdd512321
6a7cd4aac414f377621650c0222009e12ea43a2b49d9bebe02c9ec7492d8e30c
8f822dc06a23c305db9fbea92226506d122de42716fa7a7e46ab4a1fb289d7cf
e68c43ce8fdcbcef3174edac4cce16938a476c29e280d6f08aad3534f591434e
7abfd4f3fe08eeeba9231f39a0f773b6e8c17aa2d4dd2cf96dec912842eb9eb6
fa974cd9e23b00d1bbdb3f900ed898400b9606ef7ed7cf79c595ffb6aa487416
4c0937664d0de1f3b80b7d2cdbef0fbd98df2e9114b8d776c66570752cfd9e80
41e764fb3a9d9a29b4f7a4efb89aef9d7fd37b4c338f906dbd4eec828a9740d3
4c1d24a6ed9540e57bf50003ce9e33426e36ddde6d7ab13b30f62326c37788a4
205ecc96d50f100c5d435457fe18e3bd6b485edc6d7b23a1ba3e8de9ae022c51
60bfb072332d3b754529a9e09c080656f896e3f2f20a8f0d6915d05ff1fc8a90
8d51de9e4a9758a447342490cf83ad27d4a0f76a08ba47d2954bd091c32eabf1
16666e5cad11dad942ffaa317a41dd887131a7636f288138db474281a9a1bc4b
eeb0f2fa737530684a6bb401ea26f200eea10ddd4e1b6922d1a99917b0647990
e90406b30efa12e9870db1b7b9a733ba680fdebd9c7f7416d27a596c27be6b99
79803785b769fe7b7afe1db53e029ec4a937f7e5f0a664d9a8267d5e938712c0
ac6a4829b8f2b4f9a22722572cd4b413dc0bc32d3530a787ab1acdd39b98a664
8f8cc0834eeaaadbe286f0634d96164c0e1fd9c30da3018efb9fe9e125e86f11
7b1747b60531bdb3e8339a5b85a54f5bcf6d2ec72d0466063edbb48e53396933
1c5dfa7b5196c862fb6ca22f6f9a8de7c14eead26905741431ba605b0e05b258
5872ca5e796cee7b04d540c10e339a9fbbd67939bdbdc6229792da1e3ce14091
c237c76cb58a06ee0f2b227a1c35baf19c7a5afdb62984eb134e691c3930f2c4
aad7126dacf1ea8f6b7d51e9fa18b44ab1c8d74768c4de03baf7eaecdeaf6a59
372c777f40a60c6257dda0337d2e165e57c9cab67267c522d54d8074d3f1246c
f0cddfe1acb3311405111fa93cb55dde5292188be6bd4475523bab5d59a960a5
a3d48cd492599c55e427b3867cf9106438a26b8292639e7ee3be882c4535f97b
027cd9d8a89354bca20cc81f27caa1713431d6c4697b554ef32b6bc59f1e4ff2
d0b4acb8d19ae0ca6e294136dc1d74016b2d4f341455681d7562f8b3f13589fa
a202370c9f6d5de860cfe674bd3470fa1b1e880c215417bbf048e4298d70b6b4
b9227390ba29fefc8429dbfe4e06332f686c5a4e6923572ab50dbdb41ccdc4c3
015162b482943e736aad4a3a4056ff41d6ca60f17d2e330a445f1cdebaf07af6
4b1e48f54a872896c236fa1f3b0a3c55861d1df3ff9134976b2eea7fa4dc6dfa
d854b940dd9405b3618b88b68671626c3c6a2163734a25b820bb0d7192cc3b9c
44da38581e17cf8aaa82d4130a290e6ec6d904604a7d2b65f10f8ca21ee945f0
b6f5793be71f670540ea93bf3d0a804c5fe9f7d41d396a573b94f77cc0bbf9c6
ce7ff9a00690c12668b6b50e9e08b79d0e3dc89b45362bf57029cb0d02fbb04a
3aedf71ab63d2b843f1a3c630dfbc18817449b524f939508e823e8f9a4972d95
7b5aff576d65f0ebf21c3ddc17e121f22fdb29d2dbc5b8a14ae7ee0259a63c25
e8f59859c8bd24e96c9e130dc6a3cc3acc1e1f29613e1b5346e6d85d5b42d540
179ae7d5eec45ef708a8eee6239a55d5963bfb1bc118b772bf1c5b8fe3f18b60
9f67f5f7189d2582af0aa4f42472f8c5a3ce95454442f96fb08cf046f88db7e5
1435094cf8dc25201dacc06789bb6f58f2982be806d14f087042157b6f895406
08efbc55532ec2a8ffb33b30497bb9e1e320a7e590232ca2ddfcd16c228b584c
5403f4d7dbb22cb279c275107312cdcdc91fe806259ba1a1fe2a29e385cf521f
20d1b5513846eacbad2b796c2a0e5a997fcf612601c8177302d7ca2bcac6dffa
5417f0a1c83d2f78fbefcaf592b0f37abf1f9b6d73d96f595215cf73c016c0d7
1a6bf62a42b0c1254cfe90d71f51feeba4bce1e96123a46ae1e4df29bc4bffa9
aebe1a91768c2019a66f230bb4ad1c978420619f8a32333ef45859da7fd549af
5c5a2fc0eea9105836cc604bb02e8f533254c3c58911f83981706b60a09ae66f
f636cb3708e9485b3ac02846580476eed955c04e1c87254462067fab9644e53a
a8671ecd6fa5b484ea678ba3243e6556307ddc3e1abe0dccdb5f93dfdf451a98
750a29c73f6e71bc972c22bad2b96f562c18ab34b7cbce2a9633a871d25d6cdb
79096f85f1832dd83bc593f63a8bf9544c27ae80df807254845e0332949d897c
fcfafba8a2d052db492df2ec7a64123607497815c0e31f34bcd04b95fa3caaa2
393fe00604e89356c467533958b3c17b2182bab7f8d65574c26dda7fc8edaada
e075bfb5d9728f4417f58fc45f0cbe3b04cdb1e72142d7e57dd8007879cfadf2
5f57f15f7bd21478d2d037f8d810afa6771f9ad78ce2672e19b5f1e828f6f4c5
1fbc58e93c5ade06423eba8113baf87a56e09a69118e8deaa44da69589ac527a
acb8197e92a29faf2ccca0f232c74dd3d01f8015b22f950ac3013421b5ce6a37
ca030d0f2d269aac7d99b3c223ec241c7fa457e79d48ef8edeff0ccd5362d696
f0545fe4570f5edcef57ef216a60f27ab292d3dd4bc9e52db7b880f0c3337508
76901e5d80e7b25a4a3ed4111eb661031de1d9fd06c4d5b3293c6c90a5392595
d56c51c15e1a06dfaa77bdd16ae6f7d5bfd171841d001ae6382281856fa48633
ca4cf8879a45284aa7f301d621b830897973a270c99ce78704d2d78ff93aea06
ea22ac97ae5d094e08af52c8d62ddd68b9b37a784e801620465e01bba19f39b0
661b46adaac29b1bdf5689d1a963a7fee3f7863f64a22d4aed8310569a1e61be
9fd8bc8199c8c53eeb63f52cb88692955edffbd030250daa4316f967eed9676b
3718c0ee27b71634b0bd1197097d04c73e99f56571ada96aa4f6f3ac8b6a4b1c
3ad1db743a6016ae3d8170a8b56282772db6c234ee42d54ad11abfa3da1413a0
8616794cef0cdfc54bc65da574d8ce4da7a65b5cdbc7babfc79a088311cda573
3cc28418e36fd3b5cf8f2810f345a3506a68d1285f0d9f3320098b378b3fdf12
ed40ae59638a675293cefd52533bd9879e65bf1d79435ecca4571553396bbb78
d07eb9fbd684122cccd06e345c1d338b17b179e2dd2b30bcb55807471619b091
3c837629b29d08966d4e971c585bf434617f4286c66ed1f4b7376ea40139348b
e6f2b6547f2798666c7d7fd076d6c8938b1e8c54bfb7d47c89cd91fbffd682d0
ef4ca3802c3bd0edd121cb30e5af1b992852214b93035be5efdf4c50a9bcf8f9
278f968ebd62a1a422d709509800c6954f836948ce0acac6bcb42cfa268a69df
d85ba5c6656ccbd97dc9e23ef57a04b2a02c10386ac25ac7c7466bde533a578a
8e15133f588bbb04e4c91fe6feadc5aa7cf0a5dd133bce2a0465b46167e901cf
b1925319c67b66ff5971baea6bc355cf05a292cca27b0c862db2136f93f89dad
2682ab2d70ec4a50726e18840deeac043fe7633bf85ce479462857a284318746
065b4e77b3b6968cf2d49df4514d585bddef55dd2c8e3ce7cde84e9080a32d5f
60bc196fe574ae6b56214d143ed1ae7c8eb266caf1e53507d54593c489e5f8c4
4a8f449e09d71ec175147cfe34b006738740062baab997daf1eed2b7426b0267
34087cd4a0a46643febc3ea59ce67a6feb48056ace040a9ed48d1d4d5433d71f
e2a7f4779204fd7873fb84371745411b4377ad470ac50d75dfb1ab4c975b73fd
c5571716212725a8609747c51d147da09227a22139236e30751042f2e8a1e199
af3ea3c0489afb69bc135203d841fa9e5e2b4fd2e22d7d7dd853dbc56113dc9e
b5b4f4ea28dbbedf7fce264a64a6828412d52549e6566e25a0a57fa41375d590
ee5eb3c8c51da411438dc82801dca7dda2a84481870a63835a57838f22a14c3d
452dad1f317363f5ba4037553fa326878727f310ee15b56e878e373272d2e6c5
6f2aea582aa955a04c5c15b6407379f7f7ec1f047ab2b9b26ff14cd4d1c6e44b
b7c3a9697a215ded41bdea4bbaaf1dae09b52d80a2cabbc2d8d333c613f47c0c
ba3c4b5730bbabc931f6906dcb9f3b10841ab86fd976377e7dc854408dbe6edc
560ea541eb1e192cb96a710dfe2ed383d44c60384078c4f35e0e1fc1fd22d226
0e2695c1584099c2459bffe67bf9569c817172407f9dcd959a803d5af662a593
963a6c5cbef1a1d70dfc0bdf83337f466560d7ca7fa8228cc31e2050e1d62d4f
bbb07bd065d6e45d10c7e3d7dba53a03d666ff82becf854fd6e1a40f463022df
8661e21dab3c56ee4148205af505045f92ca558321d008cdcfebe1a145ab59ee
24a229a34d216b7c75a572b2a2916849e1f0fab3b46ae4a5875d6b726dd12da9
0456c7158e0dda0b575303bf39fb2830023315346e8d4569e99df048158932b0
2a9450bc6a6d239e06df7ac58798e50c9c85b6d85e8ca8e185a06df09fecee36
25b43145d58cba0875124675a034b1988f442cf43632f7a1343ec5e31f79d12b
d372876697be22fd07c8c0cdebb1e98c45b512b1f95ecfe11ecd7ea25a4c5911
c196e437d1a2d784df4576446d8ed1eb22fc4247f8dfd3ad95b8ba9c2ca9edb1
46f106c6352d929d8d32d3e3ba1202d9351c8ffe3f58ac8a53995d85fc2e6e78
9224405d6a56363fd2e64548985c09c24b7863127b3ada15f29a98de574e08b2
3f701d9d17ab6fd0c945856b13d328e78bd19505e153574018b5ff3afe81ba09
5a7982bc86a04a3cd4a3ae6ceee2e95d2dd54f2f3f65f33ee89b88d699d0f977
dca00af92202e8603f2acc6c157c8b7aad0d597da4c241e4786b73d165be9168
438603573feb9837c3a0e0009047877236b4a5b8dfd077132e8ccbf333fe51c0
0ed4960e32dd858ef00f19398022fe146cf9b76dd16078a30bac9649ab789a78
c49a5c8a9009e05efbaf67ee375769e3b64de41c378a99685e48c599d844229a
427ae379116ba5c938903304b083f3d74c8f68c433a6960f7257be648df5ddb5
bea03c30def428f32a3fb3a19b21d1ae3598778890722ba6410138f7d1ee7982
6549433220981471d58914815fd73738715990d19b0dddc297b0db55176405fb
62854a3fecefe79ff90e77d97496198f57b4b200375870768b351d8200251671
aa7eddea7dd288b3964584c325a24ced9ffd56b60f501096b1247a2319c48b33
0a7066e32c342bfea02a6fe07ad20dce6106790195975247f9b6c92cc32e5a75
78e6800a5b9216a76d9725ec1dac2485e896fdceff3a6bea4a16026874c2a9fe
03983747ea35bd5814a98b542d22b6bc5ab0f655a7b5047fd3ae4e7026ae7ddb
be4c820d6890bf3067c8dd7cbe48245a39a7fd34574bcc283ce60d9c4cda1ffb
11c3b3231b4a997881da7d24f1126549a748020c2d628e2d20d8c08635a8cd08
ceafb0e4f64d03035327733b2f3b203dfd1d19d1a1fccdf3e168767d4276784a
8711d69d3bbe320b273105fc7e4c4f42e1c7d52d70dd64829154454b81c5fecc
bb6055814e4a7ea22cf93ca9541da2e3bb4b7857f8fcce34b24fc86a6e5ecd3c
a930f3caf5d6f0661f91e7dbe21ae3b4879cb918b19f87ece9d69f4fe9df9b0a
7e5bf2497a79a3aa020d4a13c12adfceed838de4ce34341cd77895fa36b4e69e
2b70ffc925e7cafb5325585af6adc427541fe85c91818e761e1405cb02af1327
a7aa3565ddb7e05530751ef08c58550aefe4f828f6d842c6ea4d63e732389114
afceac910a00415ffba3d7acbf300929badced44bb2e4241f9cd2d1a79de0e7e
90d626444e51014e6176f4bbd9cba58dcba8fb3ca0da1f2f2e1d294790aa1168
59a336bc89837a82dcc947e0fba7ebcbda6da4a14a6b8acb804cd8e1ef89d88e
aaa37e34e309301e6a4b270bf35802e54385b336b1f0f4dc6b010641878b4e81
957f77e177365bb9d221c8e6b0af9d96732f15f4e35d416b9d616d104dad8050
cb5dfeb624d014d9a186b0aebff0ae7abd961aedc48f2ca9aea690a20bc43e8f
4d55dbc0aef6d0b42f1dfeeeb5c0ca26b172257d92918625d34fa43940bcb2a5
be245f2a8f0988fe789473255675205e2e59d30cf20b36795c9cf5916f3ecc59
e56026ecbd7d6dbe2b8fd073e76dd25ad44e4d11166faea97a7c636cff3082cd
9508eb10f2224b73e6b4429e98531ba0d03defbac1cb57dc083178531d0a8302
d3997730dfbd9d71bba623ca708214ac033f9365b93113d2766efa18d650b646
4dd4513d4118fe2fd21d15cdc30d0bba7376b0c016ebb0e93105fb65b87a17cb
81ae3cf5153df8e802ebb24735400cb71c289b57c4e9d4bc78421d0246dd7ed5
8039145acc612eb82d37f3e32efede6bfff3520abd1571f3bf3385126c4361ed
3b6de6130393b11818bbc511cd12c193184c2acb39f2bd46f47dc5ea71729181
7f0ff8bcc06ceb563b3bb66f8077abb3e9858ee1813bac9af365e8ea7c64f402
3d14d00edef36cd91f21dcb2ff197859f66737f6f4edbc210097fbfa4c35e02c
cba3ac0eecb1d1eaa8f405b696720a47a2b9caef425142b455d1499bc4e8aaf4
e42a65c51633cd99eef08db536938312c4c57e85f4a37dc2ef53c12b448d9a7c
31c20153ae33ae35a0026a833a6c51a21eceb28a72fc212104bbaeeea2bb2b60
bb87f02c25baeed333e8c46dee1a070a83b0eb9429fb8a4694dd838d41b821ba
8d9bae9f2ca50480181e5346f536e666fa331b8e298d32dfcdeac93039055481
34684a4744ebf3de8e051848a526a836d1d300d7d30980917fa9bd87484d57d7
e37118041917ce2d8deba049fd0a35836ad94fcd983d3ef54dc6128ca891dc42
23bff4430486601e202aa29308cde626131fbb07a6199d0ff4a5e641aaa7925e
ae6d1389de3d110f1be6901f31930e00023aefa1a4a6711d0369ff6e4fcd0d85
8ae23c5acd1e1ae7efc71ab1503590e642dbd7458f7903db0129f388476c0f7b
4d1dd565bb25a42636e6e1c3830ee04bde50bfa279ec9ac84f31899ff499d53f
38b1fa9f34adde3c2ef61913b6ce526649d8e412c2df350564f3e1e600f411d3
e0ccadc530d5afbd93a18ab21936a42ad3c7b5a7859d5da4e7d0ea279f61478f
97c69177359256ae3b5fd0f7c7390f803a0f610694f0499f5ebe29e813712f59
6a53d8ac2a4c0954eaa50f49d9e3a4e2f6eb7fe6b9293bbb8bf0c43ed03b3888
4d5655bcc0aab8fd267fdbcef858fb0cb6d888444ebdfa4525e8f4f81ec55a82
b169ea7744ec30d32e287c6dbdfac68e6c0e1ad23dab89f0af7b046d1e049687
db17f646f4e49b9b23e0e6f32d6b195347f81bbebe510fc1af967f9252b5167d
0561631ff7fb5a4565201b99aca6e3c7f644d67bb1390ee66d
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
%%BeginFont: CMTT12
%!PS-AdobeFont-1.1: CMTT12 1.0
%%CreationDate: 1991 Aug 20 16:45:46

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTT12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
end readonly def
/FontName /CMTT12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 37 /percent put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 58 /colon put
dup 59 /semicolon put
dup 61 /equal put
dup 62 /greater put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 75 /K put
dup 78 /N put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 85 /U put
dup 90 /Z put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 95 /underscore put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
/FontBBox{-1 -234 524 695}readonly def
/UniqueXX 5000833 def
currentdict end
currentfile eexec
9b9c1569015f2c1d2bf560f4c0d52257bacdd6500abda5ed9835f6a016cfc8f0
0b6c052ed76a87856b50f4d80dfaeb508c97f8281f3f88b17e4d3b90c0f65ec3
79791aacdc162a66cbbc5be2f53aad8de72dd113b55a022fbfee658cb95f5bb3
2ba0357b5e050fddf264a07470bef1c52119b6fbd5c77ebed964ac5a2bbec9d8
b3e48ae5bb003a63d545774b922b9d5ff6b0066ece43645a131879b032137d6d
823385fe55f3402d557fd3b4486be79011d1f5b667eed85fade30ab2ec4e1c2f
4fe750cf9a69506458071de8896261c001b1c290937fa42a1fa87de406e9f86a
4c9c0f03f69fba719114f8ae51040a4c03a58b6f3de027f6726f32743dce7395
14c2c6f3c2de1aeddcfa8eed7da56dd68dbcde33c29ff7a694769049e4325ec9
61b2df16add2ad46f18781fbd63eec62c26f1db41e6a666a09886382dceba91d
8ff7cedd64ddc8a2f15fe34076a064c46febd1f4dc3707aede0ce8af161bcb8e
4ada202d0954baca5be71c28ab8bf32fd72029aa07f27d658a68f454a4bf386f
6314224d16c7f0a8624f6b86319a4e2fd178f596f3b20db032ea28c157a68a69
fad2bc88881658d2286c0d4ef061bc070c3145f2a37ebec03f51de7cda34cd97
7eeebd86b00f9758b3a496f41d9a74279ef3c6322dc54945f95062c5f37a1e51
cf7eaf45f2b3634b2d7d01ec3b298ff35b6616cd3020e096f6c6aa2bf04c4a93
61c19f3c67a28d936ffc8120f1e46980b29bf54047c5f1fa48e67611a74fa434
3384f802a4079b28b94681e119ab0c1692de5bbf426440ad1023506cb80732de
c64d9061869cb34de924d2c26e404b7dbd9be55b9c0c5ae3095c15d278adbb49
12df1484ed2d73128e5d9c1f1a3b9ac19e2ce5366c96644f5b3d3eea589caedb
586fd9b8f4df32ec910e9b7434d5bbe57e03892eb03890567df5b811afa0da5e
929d456af3638c5c3b15280174d19630e3fc4b1c0ff6ff28ab65d04d55ed7347
8b4ebe1ad34c49fe38193abb280d5a40e461d087cba6f482663e5a677eacd003
307b48da9e58a0ade9e675c77a24d5dcbfa236068157e7d13548276143369cbf
88f83fda1e8acc04f9a941fafebd81172c3e68d4828a180aa3af44ea8c0c423d
3350bdcd0fdd4575b1fed12071782c3c5d906b119ef1e72e0d6fd178e234bb50
04583cb5ae5b9a1008e9b820b66f66983069dd4528080096c02f97d671a4ea9d
cc93de809db0a40ef4139f5be54569615f893685d073366241b111fe169d0858
9cb3e3105507c06eba9072bf2ccb7395b5d696a62f5ac0936de7cbc4bacb30d4
5948be9e7c100e399347cf760ab90e2175d1519cd132d560d415e6062d344735
d114775d8c4d6951cc6b69962503ecb82b55be2b358f1389afefa577f92cc560
e34b0707f38802485e81a9cdd5d2dd0fa04eb3ea3ea6aa618d7b3a69cde4f8bc
d6f14108779897d6d98cad7f4fbc321ee481ceb62e3492b8706bdad6c86e3eea
843db18b4f06dd9d624490e100589ddfb0d4e67b57f8b1a27977027b873d435b
f9e78bece11c86b55d62cd26ff84d3b150896a729cfdbf03919999a9a62bc892
6f5c5bb231fdd83b1372ffee916f93eccc4a2d2eca0ec7ed37f4c354804fd643
6553a3e77acf3fcf797e56b32030a3030269f1358e16b207b5fceebea2422279
b2b4647d84447ece5ed0a68420bfedfa64de86439e435099e9c4f9befe7b342e
d4acb62ac1925e5929aba5d14a85cea6fd8a8bc9fedaf16f852800766c47cbdb
867eb8383b4c0ae1cd0b1c8b79ff96950d758c8cc38ea3e6365b486c6afa7ad8
5868ee8505c326ea74d0acd5fd6bf76702a64cd1324cde4615150b9b5d7e4b7d
2c08bdd790cf9e14577f0dbaa338ae2444923b83770a6410962944b4d6e4ccf7
8d13b3db551ff3fb9675879e7ee24c4f80e55cdeae975580bc57735ebf8e2226
ca1c434a2b453ba8514dff7b87cea7b6ef5c5ad0cb8733e64c297d9b64202e2b
54fb78959a8c95b2dcbf1fbbb96d82f7c81959aa852ca0fd7d6f3fa725e8e0de
b20c70c7be088085820f14e46f316c147e2e8b4fb9bb0926c514199e0bc8f324
cab694922905f1617993079728af3218ffdabbf1375700d3bbbed0a7edb20982
81a7427800dccb5847cf48d4c78cc3a4973f22f0cc654bc0e15cc3a172c85378
e080ac50ed73321468d8a4c55afc2437318f5489437d171fe814294d371c8331
d34d74fd175b140c038b7e27da8a7da0ba0d50fe4504e790ee2425d447664b91
ce2fe8bcf9e0812582f6e7a7a7f559a6dc323755427b5dcaff3fb251706f8892
757890a0987ef8d96f2e39047c5002454f5b61149b434351a6a4f6cec23c8abc
414f76d30af8b180a908c6d2a69d15ade04bc4640b5b6dceddf312b3f83fbb9c
599b9e108096aff2a491a3e6f48a0e2f8e8332f3218b90a3524dae2d9e930c57
1fb0e9d0e4ae7874f0765f92e03020c813c1fcd8fb887093d6d7788f98c38155
19d327c93430e71a97160cc4b4da66b945f2c6055deb79e8a21764b901358ff8
ee30608629ff052556ed2d6b755f091cd6e178f5fb65da43d0bb01ffeb9dc616
3294b5b407c2cc69bd85913c3649d29ae433953d1bf9fc2e39a32f00a4804880
16b16489abb8d7fb43554778e3defaccb178d7ad9cbf7a9c6889a5f81e3c466e
90251ea2c49b7e49e8afac79472e1a0f488bde58e7bea436f783e795f3983ecd
f809f093fabcf06e3e817b9c2dac74812de59feebcd68dfcd11d3b0b33a8384d
e01ef140f550dad15d372d8207114ea3c84844464aec029e86e1dc9a2db48974
e96bc9f2c39ad66f1674c9345098cd6b59210e23a8fb375bfc86770ed48811d8
4d345704b792fd0030b16fc4931e14803129e10a5363295c48fef9370f4341e4
8bc8b874df564fdfe6fd68c9f6bb779d124c3c1560e3406bb3837adcf457c4a3
ffa777581dd6982f390b331234a4f91548ac9fb83517f672ee4c320ddb1c971e
e8013ec01cf366a2bdae813b7376a552b1c6fba52d89dc94e8ff755745f87c0e
45a396700298b8f98bc61103f0445cae8243a644b913f2acf39a3c98ae22d7d3
c93a13547bc11dc58c1a29e9fb8a44b94dbff9faa30066c08f4cdde8cee0c646
880203fa94f771e6facd60e04dfd6835e0dc18c5d0edbaa9d9fcbdefe0672112
abf9a01f588d094457ace50e135093d879ff16b4473d95eabcb1ca27618a86eb
8a9650ac5eab9384be4dd6595c4d848242a921aef6814c0af306bb99b831bc28
a76151d2b8a5087c8d5e6a6bbdb2aa8a72683c3bd0ecf311c98cd6c3aeda5d9b
09636ffb1763e240fc0af3b77a613a128ad84a3e65b2a8cb83fbbcd1883f5906
0d03f0b3f887bf2b56a5c49fefaf51a82682784ec01aee9cce33319f836ebe3b
a548dfeaa02faab0e35f302958c1e6bc227535f8672001b16c68da69c2f01c3c
5697c330d1b28bce45bfc19daec25532ded7a240006e92bbe9b111fcf89d924f
80e275c9162f9843ed0fcd3b2c6050e70a9435c0f665621064285cbd99690552
c21261ad241484e38a9873f5116e17de93d2a2c9f4a549968e5af57af8d5a55b
3f1bc22d141bf9f4b1a19be813c29781e89a32a6bae48ca98341c8c9122cead5
f90b54b1933322cabd98b4d8e9153958e279856c75aa19fdcbacfeef911de049
00f527a4a6e315a0dca52a94aa3f040ee72196b3cb3b872cc05a95c1d5d9598d
63308acfe8f90528c311d24a7446c13bf680dedc53a8652dc5b56201958fdd37
fb4a030c386a1bd60880d060a451765ab302f55b856c9cbf84c4770fdc3f2754
c13405b6bd71bfa14b802701e0c38b41c3b4ce6991d1759927fe50d1ea1125c7
94a5f65e23b503564d87c05b39c721236e317be5409a340bc25c64ca02142a60
f58690036900603a596b9ae69e595f417cdeb772032e857b49a6bff3f242f9f3
0d362054e0264fb546a84abc54531e1a464b9751e90abdeb6b8e40401900502d
b106d86c9d826ad54f75077a98b28be959ae1cc46659038d7e6512ee8c58e236
229b47b298a13ebb6a9a57c540456c37915e0958a7d8c15853d45f5c9e504931
137e505d00be39bd12a474af03b4c06d9d46bda1b38690d7f2efac7b44a6eb5c
55e1016e10e3172deee3e84a406bb02ff968d61e732ccd8ab543d7a26e5cd7c1
d1623697e537368cd46670b56b5b48d43e1415228a03b49a83f98f5120ca0493
aa268d961e8180174d7fcbc31e394dac9782b39ac00f1fc756dcf81e17185c04
c44b88b2a7bfa63ab09ef83d067d9aee87605388fddfdd2e120e3171273ac87b
abbc2310c4fe98a89d21e0fae0abf328c27451ce446db9b7c48503f7cba045cf
d30eef436ae2443a2cfd4faef048f4083d0049c3289af59e96edbeb087d831a7
d7147204b71a229905187165931bb59206e4096b7b6c6a745d9d0885901a3215
950dce99c3c71d5ab895bdc82117697a646e63ec64331099f889d961a96ecdfb
443f49899035f3f8de194d495de8293e3635fe97914ddac418cc112e417e4c4d
6c10255fcf57c1508d1d9450b9a14389b3aa1d88c2d454af3a399b4f9d051bee
84683eaa94cfa1f55a2d5ce63f3f8188965353f151fe73f427c22b10e131fb1b
321fdd3c1c483cec0e818b3c3f9f8c084996f7295f6530a3663a6aa9a3e41fb1
a64a97b2953bac5be2ac9b7e5c715dc3b1cd3f2a5c2302ce36bc0afb8d1686c7
fd810e342f6416ce6f53b66a1fef9316369ac3ad32bedbd1f5e3d77bb8fd5653
47fe1226c77902b5bf0e551ea797c14ac27f933f6a53d6d1f316a36a4976e3e6
a86ba9536d76c6f83db63a43a87c9ec3fbad925ee9b2aae9d53247d83de3d2ee
a1d5d08bc4a77eb678837fdbe2a98d95a703cbe4ac985d9dfe741ebac89050ae
306a4745be530edb6e7092b354ace4cbcd7f3a471be9d4e2e28667fdd2bd8e4a
deb9ddfd5cedc6e70a69196e6801458e74deb806ef8b67bcb71b89cb1199f49f
fb635d0b435bc71a85126bcc4ccd312825f737d807c2495b3bd6b326e108e64a
046f04354843983e16876fd0b937526022dbba4b6891fc870cd30b07f07b9fcd
482ff2f28d7c0fd964b77bd957f238c7d21130045ebf9ce74b3ddc6b1c89be29
5909c4385aedf7c4366c11c36a3f8d649621b20f839f3caef5960aaff584b1eb
ddb1ba25f5dd691ad57481371860a10d989f31e96d4f9ac22b82d2b34244b37d
4b4418622ced7f8d99132d9393c8ee93e70f292c47cf82c0d320b1e6d5b84700
78cc9ab596c548ce3c626d4e0bb3982dd48c9b376cca547bc3876eb590b8f861
5eee6f983f13f57462dd06a6b7ddcd770bb174fa9ed7967be28cc1fde15ec1df
e8cc40206ebd573fc66495b01f0fa7885bba841d7f90c8f15afd1eebfac59f0d
65e8f7daa8a48e6ac7e0243f5e0cde5db741723f83150d34628314716315fcf8
f960967c648382cbed795571b5333219c6da59f89ebd47ddbaab19a2b879e417
d88ab95e507c9ffeb297bdcfc116238ef7f70188ea5f57412080a43ed093a6e1
44334ceef2112bcc5aa7b96a025b48e3522b0e010349c756caf1ed4a4b4737ed
c3aad60c3c8594f0840f0baf46909de9d1f3a7ac3e97f3d1c7cccb5aeb7ef3c3
a14e5b5546c3e637e32f4ec7e7e6e34fb719c47e24e546d55ebaefb5d7cf60cd
f7cbd2657de8ab50a684ed1171860ca7aeabf422823bec99c17b1abaa36f1bee
16f31028f04d4fbefc4a113047248e54e28aa588cb15ba25b3d125de22051e45
3913264929a1f285ef12431af2c41735c6f8fb271c3f0d1b295578675566b45f
a63b3cb73f732344d547f3158697429c2db4bd2d1f0c6ce6fd0c5ca85abe5f9b
acb1a54f309b695a3c2ef615d679e567be27a341287a6cc60bf17641805b1293
2b18221df96fcbcc6054a9f9fad3a79b23c524d143efd16a8b1f50b92915e30d
e66fa3221bf1b486d623e5ac5d054ffcd14531b1dc976aa18cbca44049af65d2
bfeef8cf74c7de8a1ec795cd93bafec0815bf7b6283896e189cd243217084b2f
4fbadbfc05c8982ba9e38a68eeecb225d76c5bd259226aa84aa4afa8e9574de1
cfce1cde052fa7b11b7f0c79680c806267ae02a60a3d17ac0c587175f3d75ef3
88fa9dae518262446d8c4e663760b6abaec0240f90a79d6c0097b9f6d2232641
b0a8e349a0bc9a92ac46a3d60cf3c646ee7dc8fa4897aef451bca18386d96187
d1acfa6530015cba028418f1208401f1918f4f090ec5907a5840c41936e0ed8b
7842901d15db0edda8ad1d819186aa719f09220e498f4236e25f3955566f0d24
9727de6a33809a05398a08f7d122db79b33520ddca2e181231883e588d351bd8
263334163e9035f04ab7829926ab51031e5d779f97c00fcbca0d9b72ce1543cd
805a5d7d33d3259fd364de1e1805ac9cbc36990245078dba5ecb94bff0517827
a4c607014583777954a07bf94ea1e829ea09755490f436632f414d37a3d5e630
ae7a6a09ca72b446669b4d55fb6b0e9b50c58c7fc63ceea2e0ea139b7a30d878
c2587c7c6ac290f4453054740c1426620fae2233d89b653adda734b8525b8266
71403f2b8389480a2ea012d498ddf630b12dfed6f13ecb43e2a5eefc9ffcae19
d48e5eb9a8cc07bcf32e93bd2b9e2585f7ed72d20201238c485ea12ab2d78737
9e151d3ac1bf1f771b44f60e2457c2799e2efb0ad06dcbadeab08883bbd74b38
266cc8643470f32d320795b536dd65b579ba07f203bb4abf26847153a4f673a0
ae0361b1328416f42783dcab572eadb671f4084d9f2d5e1da892854ec2258813
7f74bf2c4f9ba1518d05d14b4a7a22f261b78efa69238a9f16c3d94f41a5fe24
eb01565d57a9c060e9efeac03e5ed9941b07f81763f3f425285fc6fa8fbcdbd1
540cf6c3f8025149f4e059666c2efa7b48c4603e5330c43a0a06e861436382c3
1b4dcfd9663fa842b9868485470925dcda71f52fe91f19479a23b76805f3af4d
4c358343ac8059755a5ebf277dcd1caa16ddf52b298757080a66c8989642ee64
fdd599224a5ea9d63c740fe9a299b4b65744d1ea2dca3ea5c9fd637fb35d25f4
567021b03a6319256facb64df0d0df95d9612ed5504110ae928061a6cd471fed
bc1849c723703706cff1ad60bb125f8f4fee0f17817ee37f7e61453a286d15ad
4825b00f33df44726c9f57b82a94cfeec8814c77c1962160075fbefbfa19468a
25bc3dc94fc67aa24aea7c8b85a34fd618b2e9a4fea3198d6feadb0b91063ff9
1132453d581cc25c7d240e9149e9fb03c63871cc8cd5ca4933545c7603ede66e
082188c91fce0494bbb0e926bbf5f581405f4bf62831d5d40e5ac5afd51273d3
9be2a4cd5c348e91cc3325d6fd0729125aabdd4b7d714dd7c31c9d58c173a9e9
2a44730d1283c48279d7fdeb873c29d27a26452907b36d344bd1a5a9179b7e09
490f830fd67812a3987a7311f85a3b86fdbd771560f970c6abda5f70e1b63ea2
790587705bffbc67c5909867b009e0a00e396d58f226a8a50caf0e647328c912
ef0a31d0ce2003f6365770c23a77662ea31449cd179ce2980ac7bf9d385e4eea
3be28e57fd9cb9e89c48acbac7b57ec72bcbdc99a5bd5520c8e9185c487a89fd
75c3a0ea8959855d57af04ca6ad84f12c270e5a19c4f96f34cb151bcacefa2c0
f9280bd73e8f12edbac8291fca38211bc70eac038a689c2f6fb9a5a28cde835c
a107bf1bfa21e3b119c72aeb875b40f5cf3aead1a8b820b1e9d39281b312ca76
099bfb0f5adf80db59197d488f4dc8d415df37aa91bc5f20521d778427b16159
3578ff721ed4a8a931ac4a1b0228c7e5e2f96cd501505950d175cf9e47e07ee6
f4b88dbce94458221503c1b5af01f43dfd33917f76f6a942dbe072d2eb20036c
bfde6ef55717bf8c840e437aa6aa0560d5f299b94cefbe8d54c03bbef22bdf2d
6d0c872f350f1f440cccd18a8e260f3200c9cfdc070bfbf4ec9d2a80506a262b
cc38d155e80f60b73893fae18a8d9578dd6e1ebac50c19729e7abb1afa9f47a2
0b92145a6f66331fcd77fe98bb8cc82bb9067d8624f781aaf5eaf3865d394504
6d8f6c25e864097696836c9cf7e5183cb0a0b8b9efdc2f75718e4e5903075cdf
071c913f2a9d116a7ab65cb0f0928bc4e2183c1d9fb84a1b6450f1d6cfdea842
bb60deab4b1553523cfd6dde6ec9cbb5b8c400fd68292cfd476fa019c98573c2
dad1b23608e7f906d0a2fb2aceaac5da38e1654da3b9835f7497eaf186e2f849
8035bba0d813ae8a23e53dfb89308ae067b86a72a562ebcf22a4925067477fd5
f4b279d477b885ea1d63caeda43f2273bf576aeb20ac0dbae43f9d37d4ba581e
e409e1705f7d3dd3231d79bfe1660a6428583725a58c11fcae5113eecabf3346
aab3ad3d0da524afcd490a1abaa56aeb7fafdf8692e5be39e7196e85fa47196f
81bbfae4ea9311210860259c31658a1e69c7c6f554c6bb5ccc0a7c43f272b1ee
4e7b03ab478d92907c8a35e908525ee8ce98441bdefaadff0850345c8c07c687
3a5374bd9b73b79384e56b5167adceb00b7509fa929445ee7a2c3cadba63b1e8
b2949d75263c6ec8c1cc08b2a9a90324758add885ef920ba07c50fdbac17dc6e
b69497ff902eaa29788bca9a51b63aeba95f91ba03c181a8a017d8f5480daddb
16bee2ff9609d4c6238a0aed9daa78a6ad820301cf1a701056a7817549464d18
850c6669c0bb7de959565e815091aa846afae46aef9852c0e1e031e3a70eb2ae
e23cf4fc19f3828bc5e2c40f1b728eadba0f1179a22cb06034f6050492bcaecd
5b47060410bae6214a18bf040e2d288aa0f0782438c32802de3f6f1ec0522bb4
f42873023509d2f08b6a754e9a0efe6a3b88f6b3010e00d8412fda9564701037
0d822bed2c308a49ede7e17dabd3de01223fca2df84245b37edcbc8477ea6d91
1d11457c10b36d080eb6bb0b96c41fd26f9d0bb3c15e566395fa8c2c135d7f13
5f8605eeae036de27e85b2fd6d9dccd2e63f1b9390cba15aa0468347809ccb96
af8d2f0b856521e7fe0ebc3d7808b701406b3f7bb9bde1018912286a9a85a89d
f7ef7ba0767d1a1912d43bf5e9f16080105fb96fe412e0e8d2801837719cd4ed
6b2e0bb79353c5ebf0946d32e1baa0e497f059e7accbe8974744b6db8ed1d049
159394db9c5ddf799eab9ff731c8140af2e730fdf8a363968121497f796aeeb9
50bb7ca264589db8bab363cd956c5adcc55c63992fe769d1fee3bb4c476d0cdb
3b59970a138dfd4829bef79f55b0ba143ca831173ac850352f167c1dbefc1d8e
26c69ca802d579adf7aaeab0839eeb24009fccbabc0b6ca11de4f41adb33fcfe
276a49741a455a234d30138a35b59a50cd7347539fb05a0ea6bab93c7c949a1b
76cccb998d44bb71ad961a7f5541e562729ed088451833b78fa8b76d26ec9770
be1dea98e4763fe8e4b875bd356fa430df3c7b026bb7f8a5a8df766d4a47137e
2b8f1d5ccb4bd139e6d5709383ce8cea5416837ba8b13db1a31cd1302d6ce2f3
02851aa474c5e77ad8719d983e14592e8c332638ffed3ae9eea5717e553cc57f
29ce3455c255c21f842570d54d8e80ac3b08bc4c3db24f6ff0535621fc83a0b0
213686a9c899b88beadee3e1234735b2da43e316b5283a2e3aa0c3b168480603
c41d902c2e09f5634f3ca817ca964ad6f4d47037a0074e2ad157aa4f153d022b
b40fd9b3a73a42579440e4f9b41de757cdacb9f5d8d7ee9b2eb302f6ae204199
967533a05db152282aec3e2ce900ebd40cbfc676776219975d6b96cef93c56e6
f651ae14f631157be1150c000976f125c7c1ffc5e8bed8db50c170af3c56b967
a4f74d47275c2da9ef78634ef843b9e32cb4cf29b6b467d02beeb9ef83ce0028
65e4e55159ac034870038ce59d0d65983eb6c32d9e3d26cd0fa8ba6961171266
0d516e7bda448e95522ce5ca377e13dbcf7506945f1767bc529fbca566dba8d2
f82911b2fbf2076b0e11718230872a30874708468ceddc83a651a237feedcb37
d963f43347fd6082e9e7082bb0f115f391389fd468ad6d85914b78144b376de4
f6589da47fd8b5942f78eb230116d2e6e16052a31e00653be0ce57ab2333a688
61e66a06aee5ecf4bd448858aae83d16fcf9feb340c07c0b132e9ffcfd344406
2c41668be016a4c2be8318253b7f89966e5d26a29dd32fc11246ec84a1d54319
22ad8bf11971430976d1298f3be01ac594b49f242a30b9bdd2ea2c6830ef91b6
f92eee96425ffd1efa92d79e0908e530150505d065ca6df0e2735ab79b3c2717
6df923caaa2bf22d778fe76de021697693d58a1213345849af19814caea6eaec
88092aeb6f692f66a3394828a71fadc57e7aca6fd9643c7ba88c21eb4419c2d8
e1971310897c44ed7b07d9f360d679f6b1ed612a518b25da2dc0cbbcb5636afc
c543142f2c0c90566e8dd95eaec1ae4cb0ad3e203003ecf11b92e7fadd31bad4
238e37d919a7d3e0ce019318a28ef3d95a247c2a0adb9b73717073e5cc87f7c1
43d8404b3b84865a19bc03c8cefce9c5a28796086033732941776bb5bdf49356
d9645a845a4b9c7cd365a9e20cf20c7509e39b056b20f390f20fb634579b4672
dfdc7e4e8127850417f066b7f7350c11f7e96fee53b0d42984bd74001caf273b
2986e1635893bb353629cf13dd2a1166356b27a8218d3938f89182d12058fd85
aebe74cf66eba918933c0b61c021cc0323ead32384496f03b3d8833c5d7a5698
8d11245f54f1069164aefe15183a3f4f8cdc6f806590ea421aaa0be66a370d4b
6f1c6574fbc8d0264deb769817330ad53ae7d20fb5f297abb96142cf77ac9814
82c2d67693ca1f31ad6ef1e4c250c7a1adc883256ca0f357096b871f66664f2d
3d5ec40b69fb1b7190fcbd2c489073154e1894b600a9b9584e8873929a08c9ad
85b9917e1622ec283e9d3b5ca0441973d7a51eae2ed1041051d0fe41d3bf6099
f27266f87fbdf68c7b8677a7c825a07607be4caf887f3d2ec8195631b94742d1
a3bd2357fdac0c296be67af010599d19e8ab8a1d3e908f39bb27d744c75b4ace
c3fad38b3bfb1536060c02ba6743921b86a867780f749b762c879597f37dc734
e74e7f15b103ecf1f6c94b507c7064961dfc1465e782aabeb34c312288cca8d9
7771bf0e7b29c5a04260c7b4174563f8b7c7d7336093d334f1b0554d1d8ac8e5
a576b8fd37c4c809a5d22de8acf27c8a82b6904720acfb21f36cdfe079b76e4f
b71d6635eccb855c12da47519dc0039f5fa02cd3639843d0fa65aadec4c37fd2
3ee62dae0927a6e43fa4c8b5e553ff7ee4beb7f91c86c3c854726a6cf42a2759
bb139af9911570d09cc5c0b070aa912ed3c796f33e6060b06575699d65c4295b
f04298f51e895054bdc200543cf4c884e895275b4b70c1862ed91af438ff8e56
2b56b46981d855c5f633b439cd836b05379378794e98d5f068e62fdf04db5487
30b7da4bb91b41bc54631cc5a9646d9091e9267b9ec42171043aeee929a10bbb
0209f32020acb68b44b2426fa17d2763d1f1920a815ca3e62e77d66e6f5bfe9c
941fdb46bc11cebfc2335fad4211de0e8ae70de07a97de939b200a361b18e6bf
fc067d9098f90997a284f5844b86187023f0bb322f5e831c3b6c435b21c19244
6b56f007773fd67d137961a07a403c2271ad69f1a6d216dacb81875f63e88b45
660eb1bfeb57b76e6598c3439b72db21421417289b76fa6605637229ed6a1c45
1dff1dc14c9b9935aef3914f4be247530a2206a0f7b86f9f2e8022a3d89ae9b8
9bf26f7c6b0032b518c786fbb810e89bc41e075bc43472c6b63c5c62b2093c3e
73b72edff5972f8f3062401fe7f8c5b8a45a69b8f1ff851a4993e8b6b5b5d6e0
8e7bd03b3f7bbce45b81442dec3b90aa24350d4482f857a0a16598d6c37edc37
d322038e1cc001904e020df7f65998a516cc72230fd19c9d74d42639e3d6f725
64683249bf609acad59b609cc0a380f0d8ce33ad17ebf95b2308787e6aef3219
731dfb4fcfb659fcf645bc4275f7bd728b86bc5703594e81b7c1c5a798bc422e
12a9e148cbc3243555036b380be282d32a13dbc5348553c7b70a5e2b6891b10d
76a45aa4cd298da54d2224e187eac531efaa243bbc82d7d0a122b960bfb4fc69
604d227b0511b993e0c89abe1d6916c46c87fd77dc904400d99ef9d196d6e45c
ac6beea3597eeb98
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
%%BeginFont: CMTI12
%!PS-AdobeFont-1.1: CMTI12 1.0
%%CreationDate: 1991 Aug 18 21:06:53

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMTI12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 13 /fl put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 49 /one put
dup 52 /four put
dup 53 /five put
dup 57 /nine put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 76 /L put
dup 77 /M put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
/FontBBox{-36 -251 1103 750}readonly def
/UniqueXX 5000829 def
currentdict end
currentfile eexec
9b9c1569015f2c1d2bf560f4c0d52257bacee583a5c939393e012707b47e0c1f
a47d284a1edc9d01a497d772bca8c543388e6dc0d1e2c4944740470e0914f65e
fb0737b0851b2ba713a9a00b36d07da6bcb52920b9b59efe587734027a3c5e65
66aad332fe6fbcced1417802822a3b81d6187875263d6bbda04bbcf6e4870fee
ad60f104bb3c5a766610dd11aea64a6b107b0b04439fa2888b8cc39232bb83f7
695aba81f0260cd5248b9e649cd803271dc8bb1656323089e9e2bb50f2b95088
87d31dc36e555668d9578b338402f8c259f6813b0b71e6cbd95e19c20ced8495
2559e47577e612a4d94de3c1b4c6c41a6a3fa9e2313457242de74c7e4c0d722b
3e224d18baa726369542682e9459b951b2ac638494880c42be4e2175a3c067e5
945bfc1a05d3de8c3e8ab97f80ab6000e1f78fc258b85d3c84b038d7d0f5be85
0d43fe03e26cdfbb41c36d14cb552e8447ca678efea1d275e85503123a2263b1
4077587683de69a8f5a88d666172668411d0d0fed3e037ee468627207505dbb3
59cfdc5d7f526fca5416d741073284f5dd2471e09f5916f4bff1a90eea4d1283
7731f6a36e5ea695f4efc3bf5669b7f60ab606df5819149c0c8a4817f06dc172
0543467645daeffe4457293e0c0407c4ec7857558d0452de2ac773f141783edf
81b30215ae8d2d062aeb3cb69eb0d62bf04780997c9c027a22896f456b784378
7f2ccdd4804375321e7946d3d254521249a4d28a360f4d3163912a688c16e807
15d0440bd27bb78fcbc89bc28028aab2f594f8b641e45b9c599180b69663eef0
03465a2425aa4f8b29dade493002fb335b23eb145108ef3ab828755d3753ea8d
f0683265497b1cb5cb484c13f7a4e003fa6ab3ed5e24fcc6125cee4e33936122
3cc907af3c64e5aaad882c356e673e6ca2509a71920e99549d8797e9af709e51
4ebefe61aa0478a60f3a2b7b3d47542fbd126303e31718e6b9c711d202dff7af
eb7c19098c9e2a52aa57844eb07e1bfe9067dbe7d0bcd87c86f4ea099deb2373
edf149ab7955979e26ad415a5c29c1dfd02b5f0678dc863d3d6e537ad3b40da7
6529df395597aad7f22d53ed7e16573ce620e179f10fc8e66d1eef855b5427e2
9a7aee650c79f4ee340b1bcc4aef263bba31c829effbd9df68ce46b8fd90d280
0c657895727f2ef816ffd5b71c79f575aedc6a4c160d7d85027aaf8c4b628d45
0e1990050a61ac9eb74c6554b13bb0b8cc8070f63cc1ce9fc4b217c1a992478e
9d8863df8cebff13668de949cf4c0d0927e5455c79684530a750359a391adf40
c47ff5f8885c2338474a72d777538d3fe2a0b91146883ff0267cf7579f46cc25
ed9293719b356fbc64917bf481757af78a05f521268f3824d3845e3ca004bafc
23cb78fe81fa203e31c6152621b49c2295765eaad669df4ea27097c687c74914
686d0fa2633adc0732bf0b6c1619bfd9bba771a73612c58165b3607ed8bfae37
51f17ca9a1f3fae4b45983d41f2318df722acd893264aefa6d89bba5135706ae
1e6f08a35415259d182ead86969d25a6ad55e67de3342260cacb283b7e13e4a1
04bb2d417ad321cbe74f80fe9a9a6265fa8e14ee54ce6c6cef8c7b3eebf8dea9
a6fa9ff521468dde62520ff2c33b853fa23e5d8bcc0f7f34efb0634e843fde40
24f170466401ff6aaefaf73caafa8dec2cd75f5633537b64d2889dccd3b300f6
2c319530c48e6d582fc5e20ecc316492dc6d88d60d122e0cd81be49e249eea79
050dafa6906d1e9d8b2a852d02b27e2aa336f2bb7d06573ca6e819323b9e5443
bfbc4f265d9fe25a7fe407080642f89dae618641853aa55049f15a797a0bca1b
b53e683bfd556c81b322897a0fdd56f10bced3117a0c9bfc4d11b7f7fdd4204c
e45227794b2ea7ec7275145772c4fb0bd28262d7dcdb641ed858b206e285ebbf
a20fbe1fbc74c627f6c4372ca612bf567eca6f03f562c82f9f117ef9d9aa04c6
1731d465c5053ec49b52093db087b9472da392bfb5002ed73ecf692608808659
22028abb7c860b7f1ded2b382482293aa2797db496a365e1169c3953c180277f
518bd49b9aeea08ca381b613075f445113ce885597956ec24e10b5d04e705d85
e2c49160b23c4c9cd82252f0075de7551273fd795e51e45bbeb59d49799322ed
f7a034012d17f46f3f746016dde87fc4999e698ab1316bdb025cb0ddae34cf19
9b225adfc53f17ab4e506a400e6556b49a71af63643ae20fdf7db50cb242bac3
c8f9013ac54524d6b5f1b84acce2f8399961f26459f25b3061a7b959275f979d
1c2ad9377ef777bcc5fb09d530dd8c0a2100c2d1b753bca7c2d3e53e923689f9
4f8ab7eeac2ec209a5a2f0a870b9b0cc1d4d2b7fd7bfd2dee254adaf100dd038
203984555b9ca9602e2d7200274ea36ff95a5baa94ca964dc6a80cc074217f11
769435a159f309678a07b73beeec80d62199c9f5773b29a9bb5be0b02485d0a3
5e0d311a297235c75d307fff2a3087b79faa70f955248726b26a224d3e42081a
9656a793ecc89c85ada07349d50cbbe40855afe228dcdd8f552581c87ffca790
5aacf7bc0a300594576458b505009d148fa6fc8408e561fee4e0783a63048993
b5663f465a3e63f55016a73e66a1de2508d9c423818a687c78d3617126a91d7e
333794bfab55f5f65ddc196e88e931b7b29dcf350274133f70a3f06e9053beef
74573527c9e9ef935d4b5ddd737c8a56f549f2337ca66e2b92d0bfa0bd2ee8b6
cc85232c2f4f53f0f3b591c0521c3e492c612751d81b89ebd8e149ad30948c4c
e446a55ac6e048cb65f24d030ebf79849ad154140ff47676fcb7c56b4769df21
d098926aa9db3814a0bf65eb9d2bd6a2963d3d3d267e0096f44ed66fcea6538c
56bb654308c5bbb3cbcfcb6860658cded91b36bea32517e791c2f5740b8e1f26
98c34e9f0189bd839a684badd0c05e3696ab8b223f75c69e04300b8b2ad4b5a8
fc45f12bb7dabbe97486467537d3668560d837f17dd5e7b2c4e0952c0585a109
9d0ffed6fea9f71c1724e7d0ea242e06fc20bbc74f1638d5aec51701e4212cac
059df685689324aa9bcb29fec5ce5305c3c3bbc33ccaa961ac433e46f276505b
9db5e5dfc052c7e95e5f065d25a3dcb915ca3aec92553945e444a34176d8bea1
7af9a465ac7ddbbf42900037c31ffa7978d373226eb6074c70b9fba6a13141f3
25868381a2f365444c7cd6f8d94e5661421c3c30ce81e4ec99b42aa9175b1bb4
7578b1a8e0775488a97d35bb65d22524cf22be63776aee0148aac04f3cd2dc5c
59e31ca8583a6ddf9072981f4f0c8b96b69fd25dc15624913b20b8ab6fb9d233
071f19450f9f9c7d9ce20f10f610c14bdae47ae6325112ee903443f1d1c4f7a4
c4a132321674a72ed8b1cf8134c3ced74a4b02e968cef212d81b6f422580beab
b44583d561c60101c3523d208dd6e87c9a0cf7b243fd9208b4db249fa2a4e811
306673e44d754653d5e41ed069a480069a2f44badce45e16b1039468e28e6aa8
03cf4154ad96c1d69ffd1c9fb28ce1f3778f6d93e7497ace8c1cb83ccf08869f
841812d5fcd03c1f34161fa99354d5683a2d8a52c59ae0c262ce3dd82ae7e99d
e266b376b50489b732de4f0759c9492a507c2591734c0fe6344817188a704634
5792bc0b1aec7ac14499faec4ca1789faaa4ed115118c0129f2823434058d7e5
f3bb4086d06ae992cadfd09d50c29ad2ec2fbceed3c60dd3df7d66dbf295d9db
8626988438817b0ca7cb751c2a48e538ef17536bd9beffebd67b020d57a3ae54
eb99ca8e254da0cc2b04f97071cdae16baf6de31d9d173fa972b613317f7eac6
f93ada82e50095c985dbb924c3444cd3912c8c14ba5b316c443b35713a9459bf
113044d23e297621d49c33b6086a75c63ebd1bdffa78f7107519ad161db48cb7
ba0de1f567624bd549377b70986795567d83c3274451fa6a6d781667b0decac5
6afd8f4409410c382c49c99ffeddc9fcddc01fdaf78f1535add2efb904f57148
2035ff4b47a581e897d436921c773fe9180a7fac6edf5dad1e669d1aaa3a1c77
587c8c140d9685d7dd92cc83cc25d99127c3ac36df19b057d0d041f6c1e6243a
3f7063b02e04cd2d1278739b0b669eb359ad0be3229b3090bc4fd634904bf5ea
1b68f75ac6f5dee91b5ae84fde8fbd835e69b954a0252355480660d55877350a
8f2246a4035afdd711be33948cf7ebb3570ad30fbd92a8774f5d1242195438e7
9dbb5312c206cb37577a6c53dc82d2e62dafed7750e49a009a76227f7312d39e
d482d11c38504db491d5d571c8b0dd6cc5435d423d6c64ad75cda84106d99a33
e766b35a5ffc03fe6925da51a4345b0de4a10742545995d9b602eeaae424d904
884c0c92346f9b6b0db6475a3e5efcaaa1e7ba9ddeb48c17da6db90100937fa1
09defec97b50064734f88481cba52ea9de34942a3b6b497fb4e2930a00ac7d16
54aa13172876d5f0a67b0d711970578b81d31776b2dc775a8e427756cf99d6bc
036ab561eb889381d41630916ce0f46b2a48563ddde22263dc0847746b18f70d
c3d117f47c79b756b1fac0f211deb9870fb39363b7b035b240badb0cbc74be74
fb77c3e858160f3f8aac9fca66a14496d9ebf4e54e4cd5d736ef91cc7bb6ef0c
36b4be5393633003ab0ed28b02080106361283cb768e7227038e1320ea9dd946
71f1cbe9df0f9045840e50cff868303de573f9c2ff7509b8468977759b6a9200
1ff9455312eeb87e6405fefcbd7875dc5b74d0086baa09a9cf07ad4c1a399cc8
46f812a214335fcb6e2af52f921af590873a0b24bf52961a5b1e01c40d9f54db
51e8dda20fcbc77677acd1d3507e5c17082eee300b4f3d39e9b1d84b1b7e8427
4792d2d4d993a3fd370303e63c43dbfb92aa7eb641578cc126874cf0f598f961
0ed9d23982b0c991fe80221c68dd15632eed3c22c545facfa31d76c9dd8f7180
2c948dacf124e44125a379c237654d3b18155afea798f98af24dd9b06eaa0159
5f4e080514ba34d5ae5b904271f28ff94b107c012670d7985d2454511c033f74
51b5f56deb3c67c40d6f1cd2b89fa351ed3bef753e7c9b12839760d88c3802b9
ca6f7a25d9af5e4a559c39c6eb8d775ed36ca415c965af2e26bd4fc557057582
7bc32886438456ae094aa7d827257550d526140d15e96ac8098631c653100693
9b2e74fbc6d8332b01119827ca3b3df3ff19a6a5c18055632729382fd47f6a31
711072a7748c141b50f8359c285b550ba1b0c723f9f65b18ddd34894bd276793
fbbb7aed6545f4ae4af8e4272c028e758aff984ce27010ebe5c7e8fa2e5d6f95
8e95883f651b34e94b676d69cdc43eec02efa65639c0a248e153694b6976817d
f4beeb6d9b10d92dada1a735e6d142642f2bf985c6ecae8cad9cb96c24f0a020
18d981f0d63a1ebbf39be33477c269443eaf3d6f70121b8004413a29dd8de36f
7856e9cb0a7fd38354ad3df553a3453f381009a4cfc2bff450dd466396284e84
0261fb20cafe05d984aafa6aa58f5028b8ef1db1bada8250cb3b7455e364981d
a38aaec281ca07af28065ccbaf425e2ec3fb037a11b811e9b5c6178300c48d74
f2a4db2afe0edda8c9229c9df5ff8f349f888650a9ac16a940b0f6373173ea36
5fd43526bc102284ea0afa8066dfea33f50bbf635e613b6ca628bf556c819508
6df9f5827321deb9d125292c397769e787e957d3e98c7a23612fa1c2d1f6c3d4
410e6a4f3f5a42d185a00959bfc226fa9a3ad922e64f0b7f52dbf3d621852e38
72ee93a0179da21b1abe120a762096aa7aa158f9dd63239f01a8e337e4763f66
0885f6c3af5ab5e6b7fef1d568dd02839f10f72e7eead4759db58529680bed68
fe707a9790f7abd299a14cc836162e27c629389aa61ebba2a72a3c5ae77be320
4ab5d0c142984e738bc28284a05c381626fe1061e0108100821de9bf0b671cd9
fc4d9ee9a3ecc371380c530d83659ca09dd54a3c9b2773e7bb82fd7cf2f3520d
09b8004472a4c0c09288539714cb7d076c2055bd434ba0340c988bb04a9723c3
0f13f2faf0979bcfe86139334ab358838f54087ac685f67b0da917dc3e164efd
7c0cf2e7dd57704ab89efe731aa8d19445f6d47dd92013e39b6dfcfc46e74655
4e65b02657672a479f305b2a8f94ed945a678d4bd3d719fdd4ca6515b7ffb36d
cba093a89f8a391712fe99d1588a80acda1bde371ecacae9f0646ed5af9eff49
fc4ff6e1bf8a73a1f230798c55913de8e24ecdf7f1a78290c7df9967f7eac23c
1c63392a0034cc1a8fa32050f5a24f468f5a17d1c76cbd28ea6e6c2fd3b58774
f3d99391e49eb695c3ffa6f505a8bb91cad86f667f8d35a4c46d4209560b8dc7
a3414dd673142d0a4ed4946f450747ade0c01406dd3052733ead8e4f98d3a8d7
5f82f7cef137717eeed7ade13c0f849c58c1abb802a4b56e57a2a267858e4d11
c143ec679d56c476be89fbd98c95345dfc4d6006f131cf7c43b5ca4be5b7044c
04de40c5fd95918b3c58019af7ce66a3c860211a1491833cbb5e19ac77617067
4a8ce0825058b0188671e6ef16b56bdd9433f9f4a80ec5a471a9bf74a6b6ea3a
e1b0832af1ba24670a2f8823e1632e57223827c6c43cbab16f363e0f1fbf2ba1
dde53d98b85b6db68fd1729b4c2cb618b60130dc79e97c55d81eb13862740383
1146d407ac4b6d226f5a3b5569d74a83f647eb757e7aa88ce6b6f2be8dbd4df6
df9d79c1a3ca2f3687744f19b85a7e384bd3763ab9af131f0884c14e7b8eb8ca
1382cab97252f1379412acb08a71894a25e6d8d9ea9c212e6403532115c00797
e142fc17397e918d3552376181607fe21203767cd29e69e5c2bdca2aeb7f9217
327b42d456cd45e200083439d50e36074b1ce96cb68557bf1e6be48d9bf3cae0
832510b30ab766e7051a537fa6f67e7b3e21c967deb3bfcf257b9660043a0d88
b34f1cb058b0780149294f4eee25a99c04b611996fbb810f869d321aacf5df60
6c49d5144b1945ec0d061d7810c5c94a61740a6556338ea34f8a2b7276d6e57a
0c0aef55e18bdd9956006972837a520aa2bfc6301b20ceb33031e106f0928d97
ad1ba639e8b9f6df1493d765e3fb1f00c5fa9d90bbf72e8ff3a4e6b089bf903f
e9307061b7a56f068bf171c12e3cfa354d71e9b68564fb9d438589c82a0de5b0
54384dcc037ab42f3998cf5fb597ee6f76eb76a0257735dd016ea7d0a764dd51
cc64198b75277363ba89784282adf8ec15e98c390283a021b98c15dee132a6c6
2bf9617dc33352037b57deb345174dd762fa4ef05dfe0f6cb121fa183bf7ef79
7f154ce03a5af24ff99a28d7558d4fda6c60bb84212b2988f2826486ad254957
049d5f78894e3b91f2483b8fab413212645e3b1f91150416539d475b81c4feb2
a3ff5201fcdec8a50d3df04d620dcaad1438e0452f52eb2bece26f35986dfdb9
fbf3d22859432b189f1419335b208c017d968aed26e5d70fc34d2a59c781a9d8
a6eec4701c94ad2990f7fac3b591fb352e6d651ff192e91280ccfc20be5a4a9f
b268c905dfcf6fc3953ff9fa1726bcf449820868438d95f5e9dc1daf4d841745
a7bc6a96c2504f92a8879ab0e1183b93c023c639c07d9fcac3c5dc4e43854aa7
7aa55dd569bbaca8fccc50fb26f77eab060aa621cf81a779c23b2c2bdbb71c2f
859053da28bec586263deeaae6cddede49818f427a26f7732e14e756ec00b604
ec5d484b3e973b221cea5c1ead5b4aa2047b9ffd69e61cb005d3a8846b6e0de5
3f4c14e57793330ff3637b94d17dc9ecdf16a944ea50c822e9060780d91d230d
b9d48867d0e36745e979e5220ff64c4903f6349451ca859a625fdd6bb1be2a54
14573ba534c6a50f15a79e60b8913b91f2d63fbb3154a42a222035b0b98f7064
a33081ff0ea8ff932751b1879559316b68fa8781e51c7deb5e77379a27dc10f3
e9a3ef2a698ed6357d788c3be430d83ee1ea0c2135282f5fd9fd2ad9b5766640
852d31fa872195ff2151d505ab01ff225e42c30c346968ec676bbadffd00b770
604964094e16f4b8a6128bb28b6f3682fd8aed3c73fc3c4b3bf17b1fc8024473
8962e837db399634671a4465b4af2e866561515ce3ae64f42929ab5c63ebfa88
defb120aeec8a6ea7c9e6e4fb523a0ef37873380208b39fe769e6d7056cb8f2b
b86f22c74cdf60dd513feee3a4931b78838e6c733c3e5f55a44e7a17fe8b7cf0
aeb6a14ccbffbdd1c2eb65a813e0eafb169029442eeee72572cbda54e1ac82cb
6cfc00413a83d2c3cc893dea2ab0aaa48d32c3ee00d2ee3dcdee50715682e13f
83231e08a08e74036d879dcf9ff67256880efde27aee90883400f70949d03a8a
ebd5ff8d652982f226e5bf3fb8e742866c0f93d74a8760da183a656d7af08546
9963f288f6a270bf2e6d6a063aaae8d2a6070bd15195ae84c1b0419ad47f808b
74e767621af75b0cc1cd0d45e370584498b317a5c77b36192f84f4be1d7b9fc7
1795f692bfb3e4f048c42cc3b359f5d353d9ef999d98ab0a21ffefac62705a5b
43f65f9bdb127fc0f52462d206d997c1f87ae88de25cc02a8f5e8a4c1dc1938d
f1d379044324bce6b6a41a6a3ab0b12ce9612f80f63916997fd96422be622af0
2a0460d4345f85a68885f3d6d7475494147117e24a8b654a45ad442b46fc0817
d6d0d60615d26357cf049782e57f52c863d8e3fae62f1a945087b8a49289366c
8fbfac1541471cf2fe11f26e746db01589e8b518be63378e782b72e0c47a1d9e
2b579aa8fb6ff38255daf54c0def378934e45d9e5e0d1698bb7689ee17434ace
821d41a3693ccb4d9082e0dc1b50ca319da138fba4ba8b98672b07480c9c54b1
1f17626404351859863e40af5c1b430a3362ee7602dfe80979efd9aeed846fdc
6d66356c1717a92e0a6cb0d58c4fde0c36bfabcb025ac86f57e8345e9083a76e
4cc1e2cebae0cdf5d9afd22b78e7a60780fb4d4facb5733e0da7b01b56ed82c5
f6c74fb149017b8d47e13af362102c1b87ea7932c60c4f169422661aa2e8f233
7fbc5296b15db45dd081f5b5def8392bd32f05b7b5eb2c3be21f5fa955bee829
32d8695bb373157a283cac01ff8d34ed25e283efedece18e78d39d5cdad40712
db5f1f10b6661b86ed3a565d939d603fbbf23644484dccb18d1a7358aa9a87a4
a8220f6f20feae6316597c8197caff66890a457db873759624feab6fdc4a9e1e
be0dbaaf9d69c5aae15c8a725e29b75b0b26dc7f0acabf3e2e9ccca69db21cd7
f26c73fe38d75049d819d824bae265ef3a7a41037da9749159743d3dc3eb0ba1
e086205ec002f35eb16c54c019e2a5ba8d0bd9836ad3353ad1c852501bfa927a
de114bd6d7bc69b6b6b4cbe472c9ee032e362de53c2cd9362814b6698eca986f
697612bb259b097a4da0f81eb914a78fa055fc7245bf92a0d25c5c2b1774777c
5802e0f2cb39afcdf47c37874f6c888026358e4f78707e4557ede9fef1351476
13be4f657e57caf82f5039908585be65c7cc7ae973feddd52fe8c8059191468e
4708b1ebf2a082dad88970ff0d7daabc68e48dd1e5e4d0058809ce6d26d13355
58b344d9f3adb99322313028d46d760474cb7ac7ba6f05f8880f44000d45eeb7
70ebb9ef5561129f8d5c9d2f0f8d70dab48a154e7a27504c8040b16b9f865697
abc61ada4ff7ffdb6ee3e3005ceef1ce8a2b47a9aa7f3c270138cc61837032ea
1dd3019df6de1fbe55bc911dfb24f14d0d4cfcbdd6686b3eef56b72d920fb207
90906da94bcc30bba0fdc6c12b93d648f73619db0ec2a9c7b4daf440e08f55f2
d28a35c2cad27d0079a2ad9bc22aff38e5ec5f2c88ffac6f908aba33c7068422
c2bae765f4e019c281849b679b921f74fba9c2afd7cf5ad2259c4dd13f8a8d03
e53ac2c4645c02ec6303ca0c5aaa35f07171a4fd7cc32132365e37afe65edfc3
86d38091665eefa3f2d5b702ed821d2f314bb83d08dcda3fe36d6e7e596b9e2d
8e8db336fa6a626ae33993cb8486c9158fc3821e2dfe95e046efa6909a1e80e6
7d670dc83782cfb64e62f02ad70bd5125568431a568eaba877f9f869ecb0bf2b
ae464360a95e04bfcaa11d9f89d0e30ed675817d0a0d12a7284defefdf91058e
17f1a7c0c648058a38e1acb324f917bebe24663a37a8c3607758987117d80399
b4a2f6ad0b2ccbc169a1ab925e50e37df07ae15335978015e53ac9c612904be0
5c5093554779218f21263f61767f4818d4399235d87fe549751f03c9f590139b
a8bda56b2f84bf89384e39d73effedbe466d1e331fa90c725b3fee93301e0567
b9e07d80a8acd5912f65cc6b8eaf581f1a9d24e54c576a5260ec9e01388d2ef0
ab961d2e3d75b801c4f966e6a31374313cb684c20f19f61a707b6bcacdf35c0b
03ff78ef00e39605cffc7ad1fe83f39aa4a8f603384e49dd10a7641900abdd5c
e7f8b086823e88719a54233f4e06969dd32b65e5e88b3f7fc6e9c124cbaa25d6
b46740ceaea741a804ce8fb3291e03aaf6365056972cb600a5d9e3b9c98fa2f9
03f338aba4e49fe5a3e1ccef1504d13828232726d4281b5e10bdcacbcdd5433e
046fd585944b6edc7633fcc09c7033a9d3045a2e6c3f062500826b93fc2c7724
47d732d61b22d961bb6f7b76d13c63a0a66a618e81f2dc01efb276c27fd6eadf
233efe228acee7f06b691f338e240d6c5105015950cdbea9e873f4494bf16386
2364db683851b9253caa1f2da6987aea3979e666832b31a7854a4809b484d011
45e56ede3dad993bf456d32d6d2b64a0fb2130e6e773654e7707fd5d77445a1f
52516743f968402428026557c077a2635d819e9b4a0af3ea2ce897ab7c224756
6576a71ae67ec1c599fff5c38b26ac4c4e6a818ea26938149c6c7c3317864b83
4db45bf67ae6e738d88e6e7105b002956e4fa61ef6f394d05843d5a3e66a88a8
a77c9b88e1d6bd59006fb531ff66fedc38cc23938805ddc325f1e95ab9ea866e
ec766a70233eb12781265302e5aa9c04c76c6310f73ab0fdbdc4efbc9d99c9dc
8b53a73b64e4f100a5ff576513057a14c448aad37dd9ae4054b22378f6f6c9fc
0e78fe86252904a1784cf56f8cc9e50dcf09c19bd9aed498b4a1d9c74f71577f
4ba308dc91aafd242755cedd225eec780a55069406ab51c3c3741638dd32e9a3
8d36833b444c924b83f8a33fdfc6425d96d787a0d7f5f38f92a62bbd08afbeba
91eb521964da2fb651dbb4fd8068b17413a9290eeb276d272fe19ce94274a609
8a1402e8e1d9720ea2bd4da078a79592a752b1b4b1b8d87e4c96b0a75ca15401
600c2e527dba7dbcae99666fdcfcc5b54a571419a133d126cd0615ac82ae4d1e
9457222989005a01418f85066386dbf2fb40ecaa91fbb49d45b43219b7595368
ef91495cb521b025c6021621bc6e35c0e61e0a068a8edc745dab5d2f7a2bb2f2
c92218218140817777698469a25f037728a0c11a3d77113860094e51e2cc4546
dab0ed9c1232654fb4a7e8a699818c1af01a7f14ed5498606279a2c0ef74d0f9
77e36379b44c0147c04c140edc0507004d83f115d692a01be46c33a1e59861ca
fcb833391029efdb6e1cab4e5159137722217c39c78953708f96d68b2aac5e39
32b46312f2d5601b855d506f0daf93dead37eed6d4e816c7f6722d865cbf3ba3
9839cc34ae1159d0e8a681a7b55c9bfbecd503ca66a7581608d5a4c3225050b0
0bde7fadf567080c0be4873e3deb7ea49c1cda55ff43fb1c84159d6826e70cf4
beaab3ebf0c5f818173f15e11166dc20395f50cb200f22619dd25551a3eb3d2f
0b5de1d74c6fbef3add21f90768d1cffea5f96b6eb0a310a22550f6ece026efa
fe6e7c339abf668eee23388c9e8e71f421c8a395da530e5f6212a82f01262324
a22dfcadf79aab29283afdde12d46b811a00d46497698ef9b171bccc1c0f1032
1c0aa54cad10830c2c319528d89cc0efa74586eed2f36df64c607791ff83d48c
3b960fb47f4977c76b3e93be7226b6baaf50fe2f520cd999103fc0cb5db18d8e
63460ed386f8de07d8dab979264ad34c76e90cb94e41e7fdfc47d7d7ed772611
4a9f3cee34789d30e9fa71b3c3ac05f0bf98c672f185ca887538bfd67a0a093a
b371e31b58d658c0c2d5e45fa4f4a731b1c24e7292a106fe3dd43586fca7f013
9f9114ca6a1d29f88003a9764e4359bdfb8a9db61231612dac4c346756f7f40b
92143056eaf3724bc14dfae6f951f84080081ec9167cda20d863c0cb003fdb54
11083b9c8f8b60f14ad46251bb02ca34ca5c5d38e1c6e5edc61b60fd5c60342f
05eab5c75dd6800a51abaf4f25127002a30189b04783c4e87f951c09c986b192
a49e77bbfafdad095c18a09b9d8e21cf8a8faececb1944060edc0493b124d381
c0ec831de635c00a6144f379cb53ed6e97c30d6a1967fd5505ec33241bc8b3f8
15f093ec3514747ff8dc6fb6975ddf4328fbe151533479e720a4f8b54d6c121a
37d3e7bfeab86bd7f0e17ca208456046ba31bb4219965880f2297fb9e3b00431
bd7a62f65d34ecbb3eea8268f52af6177acbab15d48db307d7337166b94e0550
9eec3d06ac53ffb4aeb1308512bd1e8aaccd465f9a73502e51f7ef3883c9650b
494908f2f9f4f604e04f007d8ec4e6c135fb6afddd56e917e5c045ad0d31df63
f792e9356a8dc2bf787ca0e9f4c50b182e44517441740b7e6a214d57148caca9
4041a6fbe580285dd0034a2cddab60a991aacd7e56c9e7d7309ca71f24c26258
522daf5dcf9d9ad3e7c7a939e7ce4f2d47c3881f9958b4efed3be03a4948c76d
1ff292b95e2bbfaaddc34bc52a6433f3665bd3c56fca221312d8652cc6d6fca2
7c5e091538db0ecdba86d02b115ccf6b8ad93b6a438e0c5155119f7f5e61ec11
73e574e0c9466df79d46cb65c79e01a107c42f91ce93add22d43a69e0107a6e5
8b2b9f90344a59988632ad2362ba269d673404c58bc7cdc46690faf77f79fd22
f4b6bc09ceeaec581fd160ee9508e8eb1d3251e5e82f0753c4ecb4848adb4f8d
13896a2c57b83238d47c4d069a0c27111db5079d15505467aa1a4d6786399314
8159df7719ca4cfe9325ad8ff3070c84439ddcbc9bee31c265a5b7920d4fc9a0
1c79c259591c923b2431253e7a080f595926fa254c8872b839a80396ba3151ba
2cd04958b94abbd24c5121d83e151ef20696f47694dd64fc8a24f21657d17320
5b5beced6a0a0237b857552387ef8761f51495eed550ed7566784ded9422398e
fedc323f30f29616d82aee78aa9c195b1d2e9e0f544d9b7fbaad1be32462604c
a0fd3796b44a27710a752ea65393d6a76d50ad09d27ecfd29964c7818a67903f
e4de20863d5a9a5f80506c1e2fed6e7f1fb96d424ed2ebd73b69836ad22a6d38
fe9b57f2c3cd9a6796bab887a86e313ce77e0924f88a679bdc2c82d7f96ea864
acc6e652acb7283dbea8542d5e116f40dd6022f05908c59abab699b5f7c384c3
885111a7530823cf6f50a07f9c8c23ba1fe899c798ca8b5725b633e5d390021b
1cabbbcf2aa562595c65b7c4d023e5f35c5c4b61b157ecbc8babf15662a6d634
71eb9b2fdfc4e4d20692054d97421318e9a0f734682f13815d42423217cadd76
9c4997796f2394b0d100eaf1bad25eaeb346a59bf08ccfae858da4923f384973
1ce29ae04b3b088898502cd24ab1f845d189c9ef544bb3210369cb1e660198ad
aae0da395b29c831667b8e4aedea779946b522911bcbc86c87508c4cb0bda868
97ba1a2f554b38625255107697e2cc27a9f4dba001738ecfa9117ebd2c67a961
027d5fba864f014e2c479ea947b3de98431728e5a83cc47cfb53b428e01de67a
6bce96d6b73601ccc765d03aa94276f17296a3ac0c56b3a523b1b3e5b2e3f7c1
92471aa4db021edfab61d743adf64e5d20517fb708dd779d726d06acdf0251d8
c01220313696f34614b026cd519e04914e40e2241df06da25da25490b89d9ad6
9d39eca970ac447fe6650ff32bab3225396e41f8acf961a6d3e831cdd8a7a4f6
8de1424786499ada27f23e09330bc683303c1c47636a259bc3bcb3554e8ca0d9
349718397d43600a90620457ec40cef6827f8699862f5db461042e71d907e726
7c0fa4c17d90dff4351e13be728d6518ccc9ede37a90545fda5583fd29736af1
89d355ed8fef946578c233b42437cc7aafda052026c40a99bae2291bda4c28a6
f7bedbf86444744022aa2532ba86000e26fdc6c721aa2d6bf6fcd640ca8685f8
b6ac96e85aeb61352db8845147562f4c2918474801057e5603c7f6933baba3dd
421be86188eff6a59e0ad074a49cf4e75ac23954abe63c24a6537cc81c8a1e78
da810501aceef48d21d9bfb20344d54f4910313b14838c9d9d74006a19a9d440
a5bc79a034c73421fe83a7ac23bb7d7b47822c93caff4715fded1763da268ce9
6ae2ad91e9a1429c3efe65f3508eeb4cee27a9d1fb0480cc2f179c9851c36df4
c8049b7df492232d9823fdca54fa18f91d3bcc13543e22869cbadbed7fbfc8a6
f3dccd16783e8020501495befee6969f015d9d9ba99b831d2635106e77759b36
3f4b12fbdb68c0cd78a9404cedc049e0abeea429da2a994dcfac0b2510219192
70cfe5365156f956abea4f6294f848a37f874e489cb8f53ab1addfa6dbddc44f
ea19e44eb626181c8f4a0f215ee0ed264bad9ec51d24275736ae9eab8bc9fd3c
a763cdf8ab52ce8b6d76a0715775248b6c5fa2d3d357ae60955b55618082c93b
ec299f339e490e994ca1e1d3d7aed8cb994df2f7654654c6f92d1f0904cc571c
2e13a0b9f37d465dea80230f552515195e8ce3e71bd0a33b61b7ad766cbee6aa
a6b3ebce7c664a3a22b007a8f547c6623525f177f11c9da9c8319783bd3a585d
2df4f615721851739f6ed0f4439ca7fe9c90e5d54943333645ef609ede0535b4
a6c9e26afac2db9f2a8ea3589e373d182016eb3a18d6f846f3d3ad4402d9634a
654416fa7a6a88e3ce9a45b4e096968c1563d4d0bd3361a271c9bf943785341d
cd37f71f2a5879e3992cd21195f9c6d72a2e700ccc88bdae03ff764ea4cdef46
4fcf3cb20f705926bc5e00b6156189072061f0739ed359ed5155d4fb41918ef4
c74627184f87fc5516362b302b94aa8db2848dc68dcd11e09dd8a0ffc8667ca5
9348c844b9fdbb11024be76c268366696e3bc1cb3ae93a19e1541ad310d20b9d
69eb41f655bc3f44c2288335154d728430446ed27e5ef938e27e89af0ad6a2b1
1619b02f532a54b810094902e9d482d0703e070401042b010209ae9f8cc3e9bf
9bbf3e466e3afc85ed517be58ffc944af8037d904cbc5bd7cba21c29307e456e
97106b6b172e877345084ce9a56b31f72632dffad9087e1d9af845a4ed085e75
1ba6cf2945234621b886db5f1cbab0b876d556c1cbc00317b7e20b916d0b317a
b4c08fe92f1f2dacab4fc602df49c7586741e6b6cf1ee8e7cc3ce09ac23a7219
dad6d2c8389e7b77a01390b720d793493880bcedac9228229d038e38dd930f73
73004fe6d8596f8b96e9b28b1fd4d02c148f1dc9d3c1c2868f7d2094d2b3618c
5470259f8205643b23b0d1c60fde29e78b01229fdd381a7171dddf73c639e371
49fbddc84fa953203bdcea0123ec6dfa722e10a78d4f3771a908480bf50d165d
e4db6f62cc4fe79601d15bcb910f6d1a8ca220b8472aa65deb9af2bc403bcca4
d803da714ce8ffcc430c27fdfab62092aef913b3b32e2c5328aba04371b7c166
ae0412decaadae1e4bbc8ec03f837e90d6b69bda5f507928876d464a1ae760a7
47fe94a844dcde41e69d9bec01676fd210b7bf79bd7d094ccfb4e5350cec4a1a
d0f6c5ead3276b9399513a6149b2d6112af70c35c1b62738f5aac56f3dbefd5c
030041717ad685329fde2683e9304ff49af884ff8f1c66c321e9fce512de52df
460678e263380222f490c24bc8be65538ee7caaa303a49e0767e6196f40e7674
9eb2b28d20cf6bb3ac10d0d2ae11427a85189d8d997fe57b8fd9fb68c8ef3553
661f0be9d1fd806540198d5942112e19cd156f64baf1e0c1d129c23db61b9d89
ef04336ebc65823d6be7097d74bad23143212e4ea5bf23f52dd6ed4268f7d2d2
670c55de2322c214125764eb727379b1d395e85309b9b1314c475f5e8dec4929
8e6a0fee2891193c2a8884f84693c4ae62118ae3e3c6aa2f3c16faaf687c408c
e1a7dcb3917a6086f248d822513d01094b7c2ef06c286b634e5f0e911750b7f1
325a657f422d00921884435c77812bdef2daf22f65397a663e7b31280eb5b2e3
49b844a2278a6e5991e49a3affb33351e9f88c47f596ccc6f12cf27d47e1ae54
7b7237379217d68598dc0e8145191caab6a7f9dd38894f078ee136fa63ebbc85
8e299f42e1e5c897b23fb539d104aa697cacbe09ef82e6653827998fdfc563b0
efa1c0db286b1f0cf8d1b85aadc90912095752d78fbb2a59019b039558d5bad1
610e6d26bb13cb2096080ef2f701aa1ec63ef3e0d2a2685d6fa6caee3bb25f10
70b30075a6fa93fb298d9661b4a3f3bf20ca7ccac102ea3e5ad9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.1: CMBX12 1.0
%%CreationDate: 1991 Aug 20 16:34:54

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 35 /numbersign put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 58 /colon put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
/FontBBox{-53 -251 1139 750}readonly def
/UniqueXX 5000769 def
currentdict end
currentfile eexec
9b9c1569015f2c1d2bf560f4c0d52257bacdd6500abda5ed9835f6a016cfc8f0
0b6c052ed76a87856b50f4d80dfaeb508c97f8281f3f88b17e4d3b90c0f65ec3
79791aacdc162a66cbbc5be2f53aad8de72dd113b55a022fbfee658cb95f5bb3
2ba0357b5e050fddf264a07470bef1c52119b6fbd5c77ebed964ac5a2bbec9d8
b3e48ae5bb003a63d545774b922b9d5ff6b0066ece43645a131879b032137d6d
823385fe55f3402d557fd3b4486be79011d1f5bfae5c1f476ee6f05eb1d2caeb
269958b194521197b312fcced4867f3c8fbd030bd715d8ffda1dcd454b174e7a
1a97b59fe770e67702519d9d9b23d61ac08424d555242a8ca08c49aef300945d
99b999a79ce74804ae6bfde623f4463371442f6523a5f6ce19c839a708c02513
2e22c696c8ccade45680e5197189d0f98e7f0d5f955e353970b392cf530a68cc
56b0035ddfbf206c3074beeb0739dcbca272a6e629fb7aea2c5ba7bae50c7b4c
a595df78200c352997ec3ee564df229fbb5473f5e8ccb1cc0153e9a7e299a8ea
a29b69d1b622b1f0cffc58291248759607d91150cb0651120970dc9f743bebef
44f6ae92facec57658999c8bf01f60611560043962c0695e1bb87d090e0fdaab
659d6557208a660be9aeef8ae55f71b8bc76394d792967e41bd8023b6e7f8c3d
9987d5e54c53bf2bbb32855b946473b44833bd78873df8e4c7e668ffff25aabb
8da4148f744b9d0524d6cb8281247b3052cc5d66f3f1bcf8a56a3fb446ea587b
d8be30257652cee035628aeddfd8283b5ad21b8b1480ad24d898970ac8a1e33e
543ce4e3c48f9ee621c5ce3e8ae930f890011b630866c988606068d9e92396eb
f51bb3db204505fc3d09d4701ac703a14d92bbfe27bd7411b363a88e33a8e9a8
025ac31f21e73dc52b333b918d0b1270c54873a490222d041a66e0192612be6d
2c88958a8f70c10390146ee5091df020ab97675e8e6acf98b28b539cd0a20d24
a42f535ae44b8f5e9290b38fc6b02e1bbbdf1aca96558c2dd5afbec53f03ab51
fbce958ed4a65b17fbc03f9defd4aea4a15229f3c320876235f2d8b69bda5f48
03a2798790d35b394c63295997dd487bc603cdd10d18f3e3fcc7f17d2a6afc77
f1d7f6cf69d2a86b104b9d3b260e4a78716927a485ad8a650d610e68378f4514
3610b087981f0a0655090163dd2dd4d0030faf6a953896a9cb2cd033ec988b6f
cd7eb31108291a22bbc656f4d968df891e07bcefd2444dff0ed85a9805afd67d
59f0808a4674448acc13b59635a0aa1853447ee5fa0420bd6146517db52f79cd
1a4336b6c73e70e9b8226ad7e17f3defe543630b326c8e640742faaa0e45bb63
b277822c48621cec6c81984d2edc74bd94800d6e18d57fd5498a533518f8560f
f3eeeed72c7ee7c00ee4372f4cf7d6a8d77175b8248a855c76d326036ca509b6
f95a59d4cf79ebbc43cee295961f3cc61d2c5877c9236c958fbe43a30b65fa9e
3bdeee1dc9cf7ec2b3d12f03171e273b82bae00d97484eac0a5b4adebe2b587d
7c405a004cd4d79e07af30d23969da952226ee910dba07ce1112018629785380
53bf9348676e6d8f427b8d2a8462ab77de3d7759fb0fe06c71dc07ac31f72af1
f9a3e25af6d123bd7edb04ad5dbd03bf1129876c05e3c98793b2d009342db75a
4a05ae142cb80466bbcbd583ba589df9ff722038f6ca5d04226c2d4f96caab6f
613adc51154f4df983f0a1e508cc9761c223cab0f339c7bb92c4b377d018ee5d
278fa89bab3470c5876c7e7c8cfba26b277d5a7a37b0ce5f5f7a0a507522118c
ac40539189d20fa536f1ee80f0e73289176b9757945c2f637124493ae699d101
b9bbff02877f1d3ccf52c0d28cc245748be4d7b4cc929ba197c213461965bf37
60d2c561adc625559360be5e8cebf678740602e0bb98805dde2d76624e97c167
f95d13256d8a88d5243e909aabf3da52b4558e8a374c47e7f794d12b666df176
77ef65b225ba81251f5b980dd957e7856644566e84398e070b0e0d34a4bf85ae
48581e9dbaf9a35fa05a91e1744f2a3cc1990992ff51e10b4ca5cda8d6a2e7b0
4fd5772f35b16ff64fdd0ce9e1809f3b71bc65836fb7e87f33ba9c9065020feb
ec11abfd54bf442f040a5daa4d555ec9c2fb706e2d1058fced7df85115b52745
cb25b00f4c851b1b658d440e19c88129a2c7be0ad56336214062e4c7a741ab7c
98bc2d3283e18d628cf2844285bfeccebd23ff9f145130e9e6c16c99eb54426b
a571561d68149994efaff9a82d22cf2e29140ceb2e9a485dc23fc168253365e9
f94c744ecba3d5b31385578c9eeb18c0817a571ab68d9bcd4d97d8a3e644e26b
8745478cb36522852a86a012fb6af419a8ac99145db4638e38e7e174e5828585
488b86b6a0254a3ac08ec4b25b3a3453ec57008cb3c7069b6cab6435f45b4530
d92ad33314eb4cdca5bf6ad8dcdbb8f96b38a6bd180f616fa0d02f4d7de49a5b
3a8e7d0528e99817c5ad2bb1a88bf63e847f3e81f91434ce25f61495b8ac73c4
9fd405d98608d904dec28bd15e2f0923f2823c4ca30910ffaf562beb79176f98
50cc7e8eae84dc463a1488a67ddf77162da4e37e86cc1da188426c20b5438454
f053a0f924e9842f222b17d2e3ea8563f4ace2fa8615d81ad335583de74f9787
e968a2e1c3677710bcc0e33017d77805b24ea8f2634cea0839837443289a4c6b
91b74a7cf7c6e08d8a276bdd8a171eb05876c9b54eb6c0a1af4c5f8d41c4f472
d4fed5f12651669aafae0e5a36d262c88f829e4e6ffe3f099678d918620b7eeb
f37e1083975f410d9f9b927bac2adf3d9b0109b966a02a3e6cd5f927d93d1929
8bd1319eb1fb7d408689fb4b2d2ff77afcd08210397e11ad963c67b52ed7ed80
90ae46d2c86313ffb7a9d08d471e6b6c9f10a59fb622fa1f2496a01c88117e77
20e6b9552cd9c15fe56440d1348a12c2c0e8285a9acdbbeb9b84e1e3e1e54e95
aea500df835bbf011e6f57818e9368391a0b861249e978ed415ca24fc3098e93
0b7a432b20cdd0014cc2ecf7df0a99fbc303cfc976bee8e07db55795bfd21111
1717da6ad29c22a0776430f605646b0abea53afe3a0484abeb0560841bdf1a45
d6ae82b0c34bd45c8fbad14f1b4e9bd559a3a68a402d04f0f256bd048a891f1c
259271ab4626ca37741113035b1e6ba62b70c3c6886772e14cf1f27130b5a2d8
1c5d0d67399b7325e6afb14f597a9bd6ff1671c455ad50cedba321edb818fd24
aec98620ffa323bf71442edd3379b439e7f4fa0190020029cebec4807816cc9b
d8a9db31c2e6ff7066cf19dc20756c384097578119b9151852c48f7bd0e0f48c
59b3ad26ddde421bbadd21c1a7a05c4d8a33ba8d263081f453c79ea07d60ea2a
78a543145346dea8bf51ba33e44c2664b1e4f72ef63f8e9f8f9329597e8b4bb8
e552d9d0f8c2ea93c4690da84fb110aa41ec5b5c631d4636dca0910c8a983d9d
6a05e8ee5a71ef214f6250efd5088f23fac4be535f85b7e37879cca4826818e1
525e21e520d487955099e3722e8592d8f1811d8a0e85a6b56a616be1596c3692
cd99b7eb52d06ea0d12fb169d18384f91bbcd7a1ceac2b84ba2fe23e458921a5
570ebdb371d91f778854a7ef2fb01b6a370a0a986f83b27291097699ec331859
993227bd1c05559238644901f448a28a22c5c65bc5057f0f34d966b6ee0133fe
63e00c4ad5719a83dcb53aac44724d2e9797063fa4f8ade7c3dbef741781eb3f
5faf7e04d72791f7ab074d1446464d4cb572ff63d4fbf3cf1104fde050858411
e30a41894fb58d1b5ddf93c3068322ac4ac3b4c443fb2e14b22419595e5c6c3a
0283a48352206effbf1c1d175f8e6510b4d03eb16c492cf76f9af3fd08c9184a
b77bfbd67b54d06fd5a3d60f892f861c7cec5b6cd7a20ac1c993d58297e32fb3
0e742f9e54bb769bab49e191c67e05bf5b71eb800cc6beea1726beff9c2270bd
ef3c594b83ee1c9fbfb8fbd0d0b07e2206d30a4a474c5e58df1ba906b75cb68b
af8510aa06b507ea0c666507689e5214ab46a927d514f118a9611c2c80f2f5eb
42ad706775f721bd91603cddd0adf632e2ef3068c7817fed411aa245b1e4e7a1
6ecbaaf5a9886619db05b281fac3ccce09335fb48ce1bb2ede3428c35335acfa
cf04cbd890681de576939419a806dec5479d20d658ee0247321ebdd98e0878bd
fc4decce7e4a7f20246aa2005ebbb116eab3baa9264d1d8f694dd0391c4ddacc
5eee9fbd225b66894d2b8ef85808592b3e2ebb9150611fff8ad5a32b7772d4f8
d9c0d2160583e914fca5e16a822a79bb82d2d50867e1fbd02844601126465fa3
c9adbc72101e0526359b0e79104bdf5117a1f5784ee10b670a71a73c6ceb8141
c809aabb3f29163f70950f8af0187fa6c8efb643eeebd0832c6c5dd5c4a58482
82300db07f16d37ceb57fb59cc216363f35ed15c4546ec02bfc2ade7023b3647
6139246fedfeb85c2310903334a0a91cc5f71c3932ee812008d51e31a5c270ac
0349b3b36031a9f2781f71f5edac5fc45fb4f3805059d2c79477142de8322a5d
f409b28619eba880d6c87295a57d7572a17108a5c1a4ff3150be8f5941081f9c
58ac38e600b64dd1b0ad7b0ec15f01efb4b70589e14dc0d47ef6e87c6c4a9d62
34024c30a174244f7b10a4e8a69673af84b20686878dac19cd3d800fe4b90966
e0326d123bf136cfb177c2ee0b1c17428d386a8c02eb34e3b6394a3715fd60b4
84f1c6c550da5ac09b4fcf5da37813c9b3081efbb76cc7adafa2099f3a15224a
0ada93ec93d9cc9f2243f3cc65362d89c14e8bf37bf83a0b756c4f903df20f0b
988098417ba60d5433ca3d34f15063264616580a90c298674206739be2f77da4
0ac31d414ca35ce2f4a23327ef77a1a54b5024e5b687eee855f6698f8e711a9b
eb46e39856dc9d2414b434d96ccd0e02f8f8fd3eb5671312ce871633421ccce3
194ad485a364dd612a53a9fc560fda0c09b97148b41f05d3930e7675af4b26ea
bbba1f02a6f39a819bc4a7f4d2ed33877078cfe7eb055839d7a9ac9d09a98a2e
54f4740f61e70221661fd7350612e0735f83354caa92d66a1d3bd0f9315cb9ff
9da0430ffd0571e03f0ccf229e40480fbcc0876def7aca2c6776394852fc2320
d88d62b423c0d390379b7e33e8b623e185752ecfc44e4cd8a6d4ad134681b876
eb9b019048c10a4a65f3a21ad182018a6bcad30e02363082cfded76f819f2c7d
f3fa4f6f9a69b1851f2360cf10b9e47f85fd50fc6cc66b43a89f79c4892d1778
0fe9a1d1dfe8b2dc417cc857c2be98f005acc725aaafb3750b0d8049ab1ccaff
ccb07812d78aa634f29dcf39582683cd9e45b8323a8691c9bc17a9bde7a3330e
022cbdb54461cb018d28523a30c63510fc314b558188e39467967facde9c79b0
ec410e65e7960498bca9da91558e3e74e326de60871cad22a391e9dc2118a43e
cafa86a681997de09eb1ce263815d259ee7970846e57f74145d2e6f572703134
4a3e26761db209b478130f39eec204a38abcaf6b935533872b3a573d1b4426c9
e4f7550a1fbd584902a3e108c3ab23f21306561b26146281b248ba6ac9523245
35879557893a97fd1361bb1074f7baa818ab354b2d60be235e6a3a164cd938e8
f1a45f923befb89ce002fb6dd995cbff5c23ac734f9d415c1c0b7fc6f0090c4e
d3fe9c24e80263d82d0fbb979b02f0e3e3fc824bc1a61f7e3f7a7727a7e924c2
25cbec03b6d28984293481df003ea004f20b155ac18610ca37bde9d1bb3cb69c
affbfb11254a9879279fd7dc9942ec5a3e701ccc3bef4ea571f2a049d4e6a43d
c54a9e0796c8c89a0aaa62bd63faab0d29da935489efb144f3b7de8de1abc75a
1e1c6fdc17ba9b7d6c08159c88f7f3664cfd6f75f0fc203c2d13a96324be004d
dcae6929e2f64f7200d45b859592c4f07113e1d84362a2058438b2876bee4ba0
17ecfd631fe79216f667a8d47778f42a07c5b6ab83f71ab9ae766b84621773f2
8ae2aded94c8bdca4fe510e5d9f89eba413adbf1269ff90ff2c75f12bffb4dd1
8fe00cc30b887b03a0471b3c616c5a66bcb680eca984d083887a55ed90c7b0b9
0336e35700c5dccbcdcd4dfc8695ab8bc8bf873a23a489cc172719e57f5f0624
6b8a9e5a33209617c321a12950a9ce48a94033f8df6e7344d8ffcdfc77745912
75f2824e665c6afd2b392885ecee4bd5d79c9c951e34139134af9611bde16276
22f056427180a748793f34ea5905d358f1341f9a7209738511ae04cd17329842
3ae668f2316f7197682a41cc99b13d6a89f146ef567524d24a4c7638ba14e00a
43b2b90f97e4ad0463dfe42cf6fc4aaac7963a52218941a21cec99c038dcb0c4
9c73cc72fb3f8d777608eb6cf0e41c736f0aba0a8dc6c58f23978fc37a4142d6
5e0088afd5841cfb69296ea3972d64cd49891863bb8435b06fef3051facb4222
6054dfcaced84b6169c0597e33df90fb53f4d847ce14af31dc73c88804f76c7c
7e682734537b03fcbc45b9b3274cc164a10f54d29f1d8062a7a94de645b33688
9cb6d9e564f4caecb4db79deeff63771d88b3da59507dfbe1adad779d1355b84
6219fb56678bd17627074bf2a4202703d64985608b07edff53ba2ace70676011
322dd6f96420379b90bf5b2d025bf83e1a2fb3cf8ace45356149686d95bf354a
df27334c366da21500913e17e0c8b8bcfe902dfa2e34242da83a71f446417b6c
3d00bc931e8d1c77bb35f85ac47f51209051c3d9ec26ade16f792fd167ba60c3
ad61bb919a005fe18a4c37fba51bdcd6eca83dc3d8dd10e3b72f4435271b0e88
9af7d3f9082fb771d2abd64815b169a1ea0cb024b86e01588c3f670f26d69660
98450dd9dcb6250badc352e0851e2dd8dbf6d2e2eaa8f6b224496ed0f931552b
1d1b38433fa227b2c62078ae6d37b7599a49e2ef755187fbb891eb2f84cf8eb2
63b5e014c5c9dbad131a4c2a2658e707abde1a0d951d78573a85f98593429124
be33828a31efbc82e1f373227c437cd22e60f471b8b38c4cd3b48589b3ddff11
fb4626146ff9a7b0d8e5fc6550e7282afd22098708e2f61fdaa612b7239dc75e
c130e0341bd5e4c1592c39c0134c68c28f7feb86125dd99f5cd01b92ba42a104
99a209d73a62c4c5b4a5919c1dea4be80515704b5177ccfc0e67e83e8d91f02e
b4a69bf8bf4b6b02bf8a7d64fced9180a1e900c7c8c616595b2d55064d2d1514
d6d67e8fad4d9ae6f645ff40668424192e2281a7975ae400176808ad876ff052
8bcb2df8ea735424a3c452ac3ebd96db4ca16a1489cb7de4d7f422f9d6512aed
32770fa7e7d233df8cb98641f7015f478b9e2eea41370c78f9d5b23236bead39
d0267f1f14d003b3a468776a51a9b4b9a42c300ba8ab2b3ac961e524b1c7eada
13c7b02175f0aba93920bfa5e4eda2a10d9a1ed4d83fdf68ffe194b2bddd7210
340d566b96e56fe4bd37832c947ce95405370510c9b5fb1e4343f59f24691737
7fc91d59dceb688a567b3441b33b10096ecf3b5b29ec4c78788676a0cf70cf0a
9b65a227489c3f37ffbb792c47abc169e5a93271cebfd014064f67f09e4b2132
47bed2f8d7bfd455b90d57989a9df87e2adc1833088803ff101e9289c98e234d
782c17cc6f3a6cc01bbf8b6134b70218b22bf1543cefd275f98992e4a5b831b7
817640e56aad93fbb85fbbeb4d3228ad4b1597603703c05b0d553019303c2603
48f8052b2a7e3b628267c5950c0242ce64849f80766f75c6a9595fa9cfdd494f
6d2502e99b7a5275e49bd0761e90f147cb8721d5fc2cf24fb93ce914e959a71c
d1413aa8c4c766d5f3e701ce0258e430911f9592cb3ed21aaed9175ef0cafd99
e229484efce1271137b32b44fb254c2b8a236299c9d01e75eb1f4b8a799d51e7
e486a40c24f71a015e84d0618dbb3f7c2f30ceeef0cd9c1555896c40ec1f8df3
e95e79632249cb30bce1bb118f29c53de84e41408b75b480910530d0b2d4b7a0
9353c092437406eb77cc595d21947a92d95ff6074ee561827497f17cc21da129
b9e97ccc10443ef87845d0f23eaa63b1afb623180ad7ddf7422a8d3d94492287
cf38020705e7e235edf11b0f3790414ecd1f9d0a2c8fb8cdc3699c6ba4136bfc
e5dcb59c3cd9f6b2cdd3551967c557f3716752143e53aeb87755e4478fb5e0a2
649bb3014e06d239883da1adde48daabc42dd30c6043112dec0da47b1961e2a9
7403758ef9c4960f7812ac4c54745b4acd7a14f005bb1cc228f2664262982998
6121e9bd90e47657b6b7f31ba9aaec8a667030880c02c3ff184edadbc5091ef1
a15b29bd022e99a9b15e0f8d5dd66aca8c608daef5e6bf30cedbada8d3399388
c7539ac2182d3f80bd4048582b5407faa50014a2d6743cdb5cb94a2147cf7b90
7e6c67285daea73932a0dd54134da92d9c49d9c22b6a7c4260f22f9b1b8aff34
61bd4cb0699b644e66365b6f1d9d2567b5caee664b411da03f2abbfebb63e786
7ed67980a6178e0c3d4a1253048c5e948020f5014e4672c87534bbff3fb29444
911b6b232d2ac7b5bfe198cd79f5288349e518a6ddbd46bad915534e84beb73a
57882e1d9904942fee7228ee88a577581735d6415c95ea6548993dee02f17b85
55a4c114129803c91d7e5317e715de762f725b6f4a811cb68cf70afe39093a56
67228578d62a6c2e5ee28560ebe08c73af0c444031fc319b6a159a9b65b35171
e520d61a7416517ed5d4d14d4e0b66791e43e66a8f672972d00cdd18062f88ee
7128da7f7f453e0e8a68fb728091b9b760bf158e50a6a598b5d0f9e88dff67bc
d9fd5908cc66091cb6bec4e81defbd66c090f527a3a72c47c80742822b1fc223
252854881721d88d272bb7619019fe030b82ede33587448e6e103feed46ace53
07752d1c5edc452c332f50f3cf34acd9bec91eabab8021045de02f2a730c0231
77af9eb670cc31198f883b250213ae1054fc04b1e4774549ab4374fb69734063
1cd6ae9bd30ba7f95bc85ad12b8144562246c541a2e1ed77d589e1ba78b945b3
d70f050cc271182ee07ade377c9f36a714db48306bdece066342da57a1d09cc3
97294a2bae152c61faf70d33fc81b674ffb1391319cc97c5074915120a2ea032
3af2971abfcd84ed478dd79f7115cdad2386e25c6fe6c3844e87089584ab1779
19fca8e37e29ee379037dda641c2b878b0099a1816d2ea83cda439b92d7f26ec
868e93a43fdc3e0abbfd60835620ba534becf59ece803636bb4f8a9040eb4550
7a23922d4185761524e1bd1f4b69a55aa737f18599c592dd267d0684cea8b6b4
05512f906c0368f5f930a7ee8f448a2d14eab6cc37fc844cc733b299f1fca101
b68d3383f2af350006e066809769b1d23c6b8642bd429e28f1134b49ef3ab86a
da9a01da0a1f05bf261d5bf634de0df6629e983afed01b0446f7a6c80190c14e
729b05c3a73a1d8e3930584aa509325b604ac62272f8c974457fda277668ed71
dc00d249903b9a65105c17e69bed96fb2784674e2a4dedfb1c43093ae03f26b5
b4e5b26d1ff930d6042d115d09c576a6393798cc902b3e1a3a444668c9c0345c
e84b4e65ae04dffc6178fa0f156f69a32d3d7e9f54ec3eb7bb5fdabc990b0d7d
85e470f06b0257c392f71d4d39529c4e835870313d658aee3384ed5c01ea9893
647c25a44e6738c01c52a8e1357002159e78c1f6535bd987cfa5ae0050020e23
67b9916ab9f2c346a6f33e884f928d7a27787470df42b4abb6d2d848aede60b9
c15078093f772227bbfbb07ad2a34eb37eb55ca57e836d99002ccc3234d50778
f33f074548d26192eca52f84520c6eb9bb9084b48b39fb0273e24c8f3853d002
27762b1443fd0a80a4f2838a041ca35349abf6a9ee5b6c4abeca648599d7911f
5272701d76249ec440faf737721f69f00a82c659f8018dbc8494c67d4151ebe4
6742c66823fdcff4097959acfdd6431865e1ce2ba25f48d89a88552c5d83d7c0
7997e22196529eb80f8fe0e360195ade842edb8fac3a7b49863de69f75a7c16e
d20b85091b0187cdf7ee3b62e418fd333f92c21e61d3d17163bdf401885e5ebc
7413b41ba8d423077a751f73a98d3826d967a5154fa9d9da27e6f7f37c1e6c93
858431dcdabac5d434ac9df63b3f6a257fda290a836cb82d93235586c5525045
a0cda37d2a02dff98cb97c705af0d26552c7a9f4b45aa60f46646cac8af3306b
d28ed6c956d06ed0bdb54aa4983fdb786831e9131f8ed881fa6f46b380f7cae9
06b84710c4e9c9b2809dbd2d48a57c67c1466c790576391e57b45f81b2a43057
608ffd441e806e8e47c2fc150bf657501d35938bb0ff8787f450d6bafce134f8
8558ffbfd0ecd1636d124ced6d56316cb4aa9aac0f9c0073c14d96e43467cf4d
06a5341411fed68a34974326053ed4079fcb8de63f6b6346b6cbcd9c031856c2
8f223aca6f417af401843bcc7c166ac174fca1180c1a209b8f9508a7e28378f0
d85d770bfffc16a1e08ced7ec2f740c62ff8a7d31f22f3ac1fe95f349e0b209b
faca08df0dfe3d974dca76be168ca709d74cb31f1ed741ef9e83d105d41fcc18
8ef2543f64aec43be000ba3bf10ae91f35322e8587aae7a2b490a1177b5532c5
999b4e4a6f5a537afda8987149eeaa78b96601bb2370fe40e78d2e26534f1f81
6fba9572c14237af7911dc7553d6bff69df0df43478400524166037d13ece630
e0b7fd9cacb65d35457db81826dfe2b2892aac723a94177e2135ee5c2eb021a3
75ac64928159ba03c65a54853c2ad1114ac3bfdaf61b419df041686f974e779a
b75286033a89e0270c472626516aa7c09f8549567a74706108f4abeb40e0becb
62262eba1c38cdaab7c03929ac0c679e4cf5013399c096ac0fa199862b5a6722
a3ecc23b6ec9efb7f042688f88ed44548ea664669451b5715586402b3300c414
4feaa12d9d115e43a64f40c9f372094ae822a4385b9f3603208d99208790c179
b68698dda236f8543b693a1a23e755096c7cde9981995ecdab671414b584e033
1f9bfbb58ac8f0d2005f153b6d376d9cb2ba3e8e36cfb15d9ff2b06cb29cbe9b
0bbcd958b70903a4b05fbaf5277cd737ca37a9c79d4a0988e4c447d813ddc21c
20d476f6367a6f6c64a9b47ecaffb7beb7f7eb9fbb87215f72dc41d74a33173f
a694865692ef391b0b74a3adc3c1396a9bd92950cedb5cf6ef28aa535863a054
4d884a24dd6142126029b94b549e27b51d48a6c15013edfe45a8ddb27e212daf
4aa7286e0fae4d786bd4f0f01d2a0f976ec2feea95ea3e65ed0df9ac084489bd
eb76baffc62e9ac3a53f80b78addeb67ec1a9f97cf903f87b457e3b29dd329e9
45a6cc938da288aef2382279f94d93090836f5907026f0fcccdaa44fa45f119c
199ba84c9f5577bf7a8ad010268d21cad304ae3826ea24f556f76b21236ad2e7
cf7687b208dc4669fa08262d13fa060987340fb8ff5f81344d178d55bda07e4d
77d99449c7da1a9ab993509616bb3bc1c46389e291d085c49fa619ab33d8c1fb
1b09e7a9616c97206bef4e2947f020312865ff5bd11d39f5a205c3d5db17d24d
364881ec919123a7566d9bd98fc3e07c445ddd85b63a751f70f2c9723a858551
93c09d1df17a1fd3bfd8e9c3bf74f23733ed203a0ea2da7ee39e0470a020cb56
dd5c4e3d7a642a33a8ebe1a87df1de9cc6eb1c288233fa2f468bc46322ede23e
e74d7631f95ac698c2914868acbed19814846d4e43f57faeb834d1d0f15e7600
91e906b300d25e6127a9aea216a47e28c74a66c9754bad375684d3242e9b4a72
e1dbb31ef3018e5a956fe015fa16f20cd4a9dc454d6347f7280e0bb05937e189
dbbfe593bca813eefb60225d2e1a8308f8985baea97fcaffbdd09d150b97ae21
3ba1e66d9edb3408b3558692a07a67c98cf7f9116fd04e88913d76392356b469
b5262989ab528397d376a15603c01649f3281a314bdc6dde605697ff63ad6426
4a4d426442b504d4dbe418b1f4cee1293318d3589c2d76a360f1eb87cc5220bf
69fb02c46af47e285f4d99d5f1059bdb848fd5e753a04acfea01ea41fa146a53
cee29ea416ce0c67c2e26b4311e6d4031ebca10145fca82f9b53b3b74e8b8377
c47db915150541b6447db30f337e46df1576b412e456a045a7a38dc589ed4239
c3d7bacbe0b376d2e7a244c576a2864af34e1fc4bc7fc6244cdca8e8f685f181
19b5764b4dbcb6088e0b6ad982bcfc76d991338aa11b52d9b5fa9f7db3fe6601
c337ef942e8757121eca94e8636aa014e8e6670300133473163ab888869fe501
214edad878255879173cca2771ecffaa7696b9c6479954701827160a322baeb2
01a2cf3e58332cb8b0e0968fbd09723b34286e8ddeca77649c25338ddd662f82
f346a11f4ba9483b12cbdbfdc5747d18fea662c017d18b28bd2dbd39f9db8f4a
a5015358c4f22d52a2de6ebd4012dec3c0647d268db3c91554b4d0eb3b5444aa
73db21422af8c3221d237a18284bf1060e052fb05e11d0927844bf165416fa5b
4ab743323cad3e69124ba467ad801614dd1c0c9d9b9ce46389664a38c0f32f53
a1349b82dd111a2b066594994de0c8f60886ee746fdd675730d848b2ec71efe6
5a436fabd556076a588ad2f4aa039856a64bd6b762019dac65e37f463002511f
41e031eb81333cedda39a6db8c497676c23b35b8280a6c95230aaede7d80866e
7195f4abd20084c328638a1fe16bd7c46969a0e439b048a3bde0a153c65a7650
70ed01b4c82df207ceb42d66192c9bd756c4dc6fafeb135261fdd14114491186
4c1b08f11babfa4c605fd59a7f2ea80257dea7c83ceaba469351018f1c45298a
15b783bd6cff68c565431e1b9bd12880d31427ad1afb6a0f526b1a8d099fa0c4
ee95a93398a2d423a0a62b85e16aae606b8d06ca9d19ae6d3d3eecb9eeec4b78
c15ccab2e83efff7893a6266b4c6d8d7a3e35ff25e6c993e55f1d7afe0a4a516
a4d7de8bac72803bb91e7d3e346ab3eb27fccb42fe914bf0ecedca5ad4b91d4a
10984984e8971a1fd71c58c9923e06ec4bb1335fe1e450c3cfffef5aba024458
fa3bfa2bcda075eb94c76a267a53e9765ddd77211805b6d2a3fccbc1e1e90747
7f049a12bb318ad27d05522d39c25a3a4c33e96f0493b2cb97b636d0ded47507
b99a4129c84f940b24b17da910a19b6458602e51dded8e1dcf07f87a9923ea6d
41338b384a77f62119bffe0f9ef646035e04683893f8f52dc12c2c80787b53ab
a061c3c4c0c269405f94b341a05acea87c213d9149f111451ee540f6cd87850a
6ab756e3ba555e453b609d0000b7c3c1c837f67321fc5b8ba7027d9c834b69a2
51094bf3ce943f8fb8f936c30574624bc69645d11e75105ad5355f6d1a97f74f
d49eef24435266f5bda00acd4bc3bf8824628b259a3ff3bf985afe24c315fd31
8a0333d7ef290d1886b42a0ce4e03902a40abae775a4e186805c94706619e4f6
34cabab4e3786c8e18f7c38ef6f04a39839b9b00d17fee20518b838b6bda352b
7de1bf2f1b124ab03ec180e2e2b320983b0e8791fb0916eef65b2fc92c2532fb
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.1: CMR12 1.0
%%CreationDate: 1991 Aug 20 16:38:05

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 14 /ffi put
dup 16 /dotlessi put
dup 20 /caron put
dup 22 /macron put
dup 24 /cedilla put
dup 34 /quotedblright put
dup 37 /percent put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 61 /equal put
dup 63 /question put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 89 /Y put
dup 91 /bracketleft put
dup 92 /quotedblleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /endash put
dup 124 /emdash put
dup 127 /dieresis put
readonly def
/FontBBox{-34 -251 988 750}readonly def
/UniqueXX 5000794 def
currentdict end
currentfile eexec
9b9c1569015f2c1d2bf560f4c0d52257bacdd6500abda5ed9835f6a016cfc8f0
0b6c052ed76a87856b50f4d80dfaeb508c97f8281f3f88b17e4d3b90c0f65ec3
79791aacdc162a66cbbc5be2f53aad8de72dd113b55a022fbfee658cb95f5bb3
2ba0357b5e050fddf264a07470bef1c52119b6fbd5c77ebed964ac5a2bbec9d8
b3e48ae5bb003a63d545774b922b9d5ff6b0066ece43645a131879b032137d6d
823385fe55f3402d557fd3b4486858b2a4b5a0cc2e1bf4e2a4a0e748483c3bcf
5de47cc5260a3a967cac70a7a35b88b54315191d0423b4065c7a432987938c6b
edad3b72ad63c2918b6e5a2017457e0d4ebc204a520640fd7c4d05e35ea5486f
a43d0e970787203855daccb1ed0b16325828b13b7c767a1a58c87902f0546ea5
404440fa6526975783c2d7a9572b8e5d5176bac598b8960609f49016aebf3763
89c1adfe6a1ffc0c53b3acd9d168ec3a278fd4f1d9b085dc2df701346c9d0887
3d230a161692b42a45bb5da343b4edd839dd60685a59aaa49fc65cd8e2ad2a9c
5cab953495172a1a9f40d5f38e922443a519dd96f667201a408bd1d89e35f4ab
98e2f68c3366efc14b5afe1018d9c845d808d4f8e07ea8168518a171ab4d6e21
70eeac099eb7ef46eb9781384da1fac3b3133bb718bc80082eaea88759745188
f266b31d0c7e791d633f16ed94e05517a32163e74cbd96dc5db066f2a5313d6d
7f09465608cb404613e0f058073af000e5bdfafbbf9da0c0d5c02a3447f2cdc1
f56481901e34265c26d331ac3f85bdcbc7c51ef9eddf2b9c189c5253f8e74282
d6f053d7d183ae17ea175e5ebc401e67d21a9fea139cbbf3bb1358c713a75843
b39a69aa2b1a7b975f53ff22d1dc3bdf7acd17afa1da21568310c68241b31d3d
03bf404bd30baf9cc19c75b958bce7155f03cb0cfe2cae0327aad4b603284a51
7c26de75b8c6f6aaa9debe4aec08ca4b646d787bab1e702054272909211e814c
1d2c33152bda973de70ec02436551ff9be604d16ffa29b93380b5a04a493f00a
c1d3c429bd6c92508652f7ab7347e9dab047409e478b59e22a73993a96ad13f7
3a58f110ca20a1d65e0577f470498b6faed25a690fcb92f9f19bac5ac431c893
607dfdc528e7d7ccd1a953ffda264220271f146682ae3af7b7d80807576dcb76
0e5c25929b3a4ac45cc6fa965b8ba72eb5f411d089e080b28c17e3345b0fd6cb
57e648b29eb4b4ebcd9c395a38ee2e75adb5d9c87755722d4c5d3ef8277e71d8
3246c82967a7deba806a7c10bb613ef02e19b0ecf025bf949b75297f0f592ec8
603aaab8b41f8634e35de7ba8c8795c87ecd51a33de0f20c3256cbe1943111f8
e089d09e69617133d4d1347077193ca75c77f16d9c81f757695cebbd0c9232c7
fb33181d891c71da93de7c51f9f9bc71ace9e1fde8f9d111d0bf785390e0dec8
2b4d3258699eb7dccd56d984b172cd2ee0ba61d07cbb4949340482814bdb7f19
78fdd47161413fc50d1bd060291688d25801e5ae3e284b6759aa720cc3123744
a73bb92aa6f4cb93fb6d4c96b78ef49db58164739b4d4fb6b8bf5250e7d16ab3
da769ac9b80be0e2d23ebaee27fffaeb957f815cf58d0b38f984aeca8dd0a182
bb7666c50ef8d9ee19dcf7144ec801bc782b0ff964986141f883ea6881387b44
5dabae79847a507ec8c4a5d59f6ebbe47dffebf43cd24cdf1b877659b721eade
c8d90f65da7e0772306b6275397f6df48b2a6c4ec84733b3869b3cffb70cb40f
51ba2e27d8ad445868c50316959dcf092a98e3c2fc4119fbde10202241f0a514
6b9f14f4fe631d1cece65db8510489ae8a7dd4a496b5501d37ba25d343db4c6a
92ceba6039d8650dae3f4f5469c4360e5f36f82e13990c1cbea7d280dfeff2b2
53ad99e6df73e4f2c64ec5114422ee6424cf0548fdd79474e3d63c7bdfe13f9b
84f0cb42bd358dcb5348a7f204bf9a465ff516d8a06416d36119c601d1699069
00fdab4d1ac26b705797c8848d99e63c21412f47f576f90984fa1b85948161b6
f4842f620c81c157fd0918cdb45d961a81b794f59d29ba5089b8cf9af84f88cf
dac7e1f922cc6817a839f6a496f826738c22b99017b6d07e067eb6742d4a3542
85333c57a73d1693cd11e5a5081f9ea28229ae828f10d46ba4625da6e9c0eb1e
dd5e133d61f54b46bdf1826a0b97faa1622b8ed741054ec817bdab9b1e4e0732
63e91047e1172dca31e72bc982335ca677db966be481a724c42deb86f9739a01
fee338fbbc9325b458e9ad98b6f21ee6b334904c1326c17a64ff5cb8fd4700c2
bc6d00dad6fcc11a940e27a3ea028dd25ff94675d4bb4d5c5ee0fe7b180c457b
da752a5f55a9f525700ccaab64e5c85a911926dbab6bc10a831686ae4b1d8649
88e9bfb143aebcf0ac3c340f0075370422005d8249fa56f5078322bb4ef497f1
2ed459e7352a772293f58a7767e36c09923d33f0b31ea20c2b779265c735c86d
1cadabd68d7527822805b2685e0cf91f3d7bc5a4d183cf5f0d4f0102eb01ea86
a336c1e0f82bd49363da519c995d5628ded1400a385857295d67e6fc4130bd1c
33182bd09e06c4b7fad3050bd4f5b90a96324e8ebfe14e5afe00553aa861939d
bc3c514f82f92e4f1ae0c12ca551c3182963c77ef6d748181dcb33539507b6ff
59f7b9445a3c3deb0e8c68abda33ef639b37d74cd8bf7b7bb84954196233fc76
6128ba0149be096692f843626f99c593e165322f30a9bacb556f43109fe2cff7
8878f2e9dd25c2a0e1925a9e001410973b779f96dfea97d7da37a3c35b29ff79
0b5b4407ae80bef63000009193c570d5b3727c3c883d8e2049d8c0903578c16e
3de31d6bbc29cd7440f80018e28c5081e330d44eb7b99fe89e09df3a9d84e98d
206ec64c54547617374d228e2bb5aaccfb0121749e1f75119ba7b1effa96898c
12346725cb671e935877736572c11211b058e152fdb93927936af884f5dac17e
76f7e40fec244578cdc08c913f8e7aed8082eef49c1028c91865da83e55ba557
24e10999b4a06874b3f090945dacea4eb62ab1a171de052a158f3978a0459fe9
9b4c406bac94c348a4a0c6ec8a9d16d06ade23a6f190703315832b0c8e4d8168
8b1fe66b236baa404ec08fc1051a5f0f3c0af2693b1e3058f0c2538a1ef2e153
115e738a555a439d30126b8fc2438f26b59c5f5e157ce0f4a8d102360c950155
3564009e9ea3f3bffc486ac0c75d86ddcce3d02c6556e71d081a433b26bdb49f
91e8ba2cf7cc45fd364cf6f97d28025d4049c11f2af8871f9ea6b2ccb1e6542b
ae993321b308dcbc19b104f228523d8f52b31e1924c80c85867f59458d87b0fd
eb588aaea3524cad56ba04ed340ac0b14f7b280fd333f1a91b36060ffa68a9ff
708b747960aa7bb84b25197766de4653831c8ea6bd631833f60d9dc49c411933
ba8eb4df6aeed638f81046af6ab9539a48a50ea19ccf9e7ee9b94d9a85158d9c
d4d045b6cad4d9af76b15f9ca208cf7d360508e424fbf9766c2dcc0d6923c7fe
04993d9d3467343d8dfbceba3f363498eb4704b60cbb514b5d19a0b8980f2cfe
3f58a08d55e34ec2c2a0dd5d22916707a764294fbaba6cc3dbb7d6fd290e1d60
9470eb0a0f3fee1479441b096c69c4f5e5555474a863f05ec13c389a3db0ddfd
97501cda1ce89b18898d394cc066cbf2e3525ecd8a4cfd50e7569867d8db6d34
3cef87cd35561d53fe26b48f693cf016675155275523972c826bc5b2f1858537
7caceac460bc9ec5266cf8749f34643756e04bcad65d8a906c493fcee61a1042
21a87369aa5d8a08f15d8f0af9787b7831c415368c7c2e5fec97792b5bf8e7ee
1f946fdc3ee7467933c2b6f43914367946d4a5e8054952b8ddebd4c0b4aeebd2
08cd532c3fe39525bf05ce2813578e8477875ed1d877e7bb49419896e5d78c07
08f0130f4996631971d4b5d51b1b658d441def32fea53747a98fadd19955102b
ddac3b42827d210c16817b1a96bf040ba81183bf0e70895ba7eb72cb334bd350
69cf7537dec2b80d4bdf11625183fd8d333805ed500af50eb36bb6d2442ae7e8
9e0e9bda715bc0d2dcd6cfa3efe59838a8485265094d64600edbc27e9242dba5
37aeafd0f83c0a330407ab1781304e5ca0cda990b59d5ccfe5ab635532c265a5
b7d4103a3afc0ad1401d6a3191eb59be83b14f4e5378ba10b9d35113bedf19e0
087c92c106cddcee1730cb13af5a188c62fa97fae01dea835003b83253e7249b
7063d815e8821f7dcd6dad6a841f0a4c33d391e8e15a72ae8b037e77c39f199e
511497399c7b86e587f5b22c7f8446758285babb819696f39404d948841693c9
e1e0c12e6040f43a582ca46da3cdb1a80c121d92f2da653fc4b3ea4485369af0
ec75185bea025aaa7d18ee13a2567cdf666095d08d54c7c2666b167dc22a7cc5
1bc1ae8bc48e109005a20e89b7b7b93714ef00c8b25142a45dfa29c0ff50d5a6
acffece26f0fd2b62071ec2aed56a814f8b3dc5c2e845051ebd3634ee5436780
71fad21f35bbd5f2cc77283d612e1ccdceedd003b2db35870e5b0e6d052a4ac5
3a3c2bb93c351a0098ea8dfe2e880840bf3df843d212d86fe70ac742133c4066
fbcd1aab4c317bb21f39eb460b75e399b82ff2a791796eb157ff3a0675723473
f8ded3e22dbcb14824e492875ba1bc728b798b382e9af3f2f1d6a18cc5e9111d
b9a3de0aeebf9442687913edbb099ce57cd3a2e73a5533a8d8892939a78fbaa4
a94a363f0e046b17ceb7f32616f1d43c4b23d3dbb54cb429b7da2a1e25114c71
1a5681bf0cdc7013d78a1701dec319a73d82d96188612b3d0884b58ad0813439
f7c6176ce1c9c6057008bf22f355faff1c9e6da4a21c361402802bcfaefaa615
5e9d8a4ba41119695d91d39e1d6a6d73712c47f5b171657948e07491f24ec6d2
d0355ff2512c30fd1cbd94f45b57f24ddf40611cfb565ef8f943a6d122d747c7
bcaa996b56df2b86f7a4d5ba8a53e97f5e83d3b93eb865889ee998972593d4ad
99dd0bd3301e9437dea25eeefaee781dd57e3fa34740e4a7d4b0a16de9ecfc92
a8eff415c8972642f43926e74fa390da6c8836f0c77583a5c30d215756d49bed
85d6aed485c4f4cae699e9f2b7f4416246f36178a6d27fff86f555cfc4533b06
60151fdfe85a9fd184970276d40bf2c5494f1f5b4096377138121fb0adb37dbf
33cae7c276c396a88aa695052e73819442be844669fb5e48c18e59d7ddff8348
2afa40387726eef18a8ca042dbe8811030c3a81a011b5f77ade2b926a5afc638
78c57d6832540d360a6dfc67e677ae74749a45d933b6afbe8189e7c9d232fc65
bf45f09d128e4a7782672f2020907205c357f8aa28bcd067db10fc6c333e86d0
3dcb5f9f307a8c23f5691908d083a71e7208a321eef07cb1b9a4e45bc431ea06
f7d886266e93f3d8c437d3f4c38ecd4133b807e74b3f7cc72d3ac37e6340a97d
63c119c910b8745e7e40e03cdbb15ca65867f290572e9991acc7f419e5c043a5
f458b9d4ecef723b5857e5834281a2f9d49e5fc4829e3ba713817e03b88335b4
64373d5db6cbefa5c9276293db233ea92af0ef7634817fde0148b0469245d43a
4606bef91fb84c91531f3e069c0d0f0913698211b18f3a566016fa1132d8b0f8
dc6dc027592e4f7c60c7e5f8f184aa9520a6f7f3ade5f5e84fb020b571bcd51d
009a60517e568109a310f08ffa544c07e6d2c99cb915c6f114e9a46c0da0b471
7fa32c5531bba1bcfcdb946c87bd5426b698df893cd5c07bc1b3306348867dd4
ba591487cb0ee1b729dde5e6bc1f45f00ce5217a13f29a81ea0c8499e5b33b25
bf5008cf80975ae96549d277ba8abc914444aade4966b79b891497dc6d67421d
51e1a400023cbfdadb4abe879b60ea39de767cb0d646880272448ab449e25003
288e111cc4957b9db88484e3c86628f4c9d20eadee592f907cb625e1d330a39e
9c929854ce25e8cde33bb33ed10f63ace13faf8bb1a24ce04bb2f87c3320ce16
e82fe35addb5ab9fcce974cc233aa271b494049b0d22e6fab83ecf62f400aabc
82dc8f1eb246910e524f24452d193a8ff8b677563161ea8c108e9fc23ddd8434
9a5b3a4874632b4b40662448e8473bf23116da08f01a75d27787169d905fdda5
24e4d34781e8a96d5cdc4e081d33af00784794f2468f8b78087b52e1f90930b6
663aa8d2742928caca076ce21d6004e0600efa79c996fe9a7292a755f8f45647
9a4a7ab9d710faa02241fcb3baa57a926c1586f1c2d2352d5ef62283fc1a13f0
453a6c30b008db06810ad84d598bd806d7dd8c5965f2a7b361b71cba16130bfb
27c79032ac2c819f0507db3b06075a17995c18ec2e35e9041269a03afc3629c1
0e32118428130d7d9ed366690ab6262ea2e5e96206d78d643ce9a8cfe6327e29
09b55afc8fdd172781da116e4851553adba372d8dee53a712291fa89727a5392
2e017bde80f475744bd5578ff1acfb0c5fefa3ed896828eeb9bb5e4f7db6cb94
adfa247322e46333f00e2971eb5a189d8ae65d74a36fe6fc461d6c03e89e3f04
69472b82bcbd9ebfef1ba3b46297d920ba7b396815a1059171d470e269e40b55
a4e56554f23232f164b001700421da7077754fdc910d3e842354b46f707b7b1c
64d0cc972757b44d26fc0328569d64a0d491fbcf697c2e2dd1807b214c9dc2ef
a6f79a6fde1c5f71f8ae0ba282f96020a8f41e7bb5181f831db9eaf9d1c053de
a445e945c182ca9186f5b987686f2af777b5044e61f972fb64073e2f3b46df1f
17bb5d8ade6e071b9cb89995b51b66ebfd9c62cc41cdc524919f9a3c4b1ed420
8f4921f1aa54ae200f0aa43615bfe639820e9600aa395ad38a80c6847134c199
bcc5889ed02d5a20be4288bbbff1feb015462a322556a9576bf1052561b87c39
35c751fffc428e0d6d53a1eefef0c3e0758714a80a9e46260f072c78e6ac3339
a6e0dfe1a168e478317f35e3e609bec92fa9659f5da279aae46984d020906ce0
bc846d1db3726fe4b07f9f137edf7a79600bc5ecfd0991ae1e46a4ac4dcfaf73
f9412ae42696f7f15386bf62cb50d373d51213587eeba28f6d14d5f7d2facce0
2c258632234395d3241bdcbdc4477ebe16f086ef26d8b939c7a6a428c65bf870
388b3be1132d68f54d877a4178c8e301686840379aaee5f03fed7c2459424b32
2785b342bbb75b3041a2e5eea28ce2505f41aeb055020e108b5178f64892e441
c72e8bc1d90872ea3f3e1c50cb45fcd321f2cda7856769fa546dc2aee10342d4
23afa50de1c603a428500cd5547ef8953dd5f7b555488295e3c5eeaa1b749404
1304b9cb3eed7341fa2cc27a13cfd8c8cd15a7c21e053029066cb4f18dacf137
a2ee9f1d2b85131ef708ff62d8e4895b631d0b091fdff9c0e43c018b06de2dc9
1e094ed6525ef7541a3e60691e798b2902238fde570c15f3f3fd3264ce210d3c
a2b113e82c376c5c6d0ed695f8b08dbc50c7bd2c92667d59ac0fd0d7a4e8c7a6
280f30e58e935ea8087f5bd8558912bb1c14f96e8ec2bba3b9b96b724d32ea08
2f85959544b549daca3c907944322a5396b7208aa22d6914bd372e22e20c9692
408dd73a1fbe21e20df50b2309927a244aa75d31a28bcd889720237e31649643
fb736af25a5b26dadd9e555f1d7b21a0ee6a9b59fb598f578520a0094e87cd95
36c16ed4e79cee0e08302822c61430c5fd490b4df0c0aaae7aea48f7bb9e7e8e
1a66941ca5543cbfb480b4128d279289a09f36328ded5aefa3196b92663617f2
6d23c574809b83aea1328312d192df848ef6b5403247693ee246a166d4bdfe8c
e47314da77971a31f1f66ebaec6b2509ffca6777545225b9ec156a62869c5f17
58db381805496354264b8e668b7f5b0369e74ffe4fb53cfcf8531f11a8a4830a
366b1e3b29ed99a26b21358e5a24b28f2ab5e049903448c8536040593564bc13
74b8c3391efd7ce54cc40a311de68447b4b6875fec6dd347494a8ac05b7425dd
99964edb3862aa0bb6c3c6a658be959e9d6a68794fbb0b03bdf04d4f4f37bd11
275667ecfcc0084be0a97a03b4ff29f717cad95530b92a93c04101d3a1e2c264
6b6d75ec6a7ed9c462cd9f5738db5c88a46ebfdf13511fa2d55c8833b336b534
4b6223e90a7b00532a52c040db32bb2beab7835534330c83d681d0094be97adb
ca0ed5d688160af12fb69ee8a49ef39bf983f6bd71ab68d84e05ae66aa18e050
5feba93e96663f7a14f889315e85502f7d29220c88e2d6146161660d7b5bc3b4
897cdc9bc21b1239c6dc87e088682d6c33cedc67660b4ad2a3c8c933a96f3a0a
681aa5ed79e830909f0249574d691e0958dab996afad955d3bd4520bdcfae405
614d1e446625129482234a10e06b6481e697c4c48fc829eb37590c835dcf8bc0
24cb2d899181dd0aa283191abd77a88eb654622b5f1daf12b247f01e74e96a23
d7813731ef71f0739184d59ed637d156307d18c6b5a6c4447bd784a70902e335
e29e0260f45c833c96f780c3d3e3e517f2ff6dba3ffa0ba5e69cc4fef7e8e9a2
93c9d23f1a1761e2fe1c44847b0e94e497640a1d754b10049c1f80bead58434c
48e4fd14396e1df90ff85823ddb0a0f29ce33f51128773fd748a53f24ee1410b
e47366739b9718a69a570932e14f68218ecccc3f9d7399ba3d3e39fb835ada25
9de5699189a09b044b75b31a4333c9cfb6e55141d05a210366330968cb444d1e
fed1f326cb10a9f01fb88fa43c3e6e56aea95260052574dc3960f965f4b0e9b5
cb532529778ecd00fd3eca461878aeb898691654bb87a35457f7ae0f2f95a965
f7d053bae9c438385875593dd8f558e7e23fe887206b5f3f4d0c14f9c94eeb02
19b331d33ebdcf43b1ab61bbab88a90d116f2a1cf4b815a9663ba27942fa4f39
1af6f24df701baf4cd329061746e9433e7d92c3f36ce530e41f711e74186df20
ff9f0747500825f92aa58b21adeecaa0c537fa4ca8b64eb82eacaefc3a6dcdac
7f8cffb4bec581476f3d292302d2557ffa1d9bff4e3ae3ea0fb58d179bce0d70
1478e915f0677c8a3c11c7969ffa82521f0111d0b242d7092bcd3530c1fdd872
9b2ada221bfa2a5bb15ac10784e5f1eab6b85e518786b4626b6098c2f6ea69a0
6a8d66355f48c5d2559143170526a4287a8799b76bd2909d61de76e0a14f2afb
bb02deaf1b5bab9d2acc0314d7362d479762317e162fb1e9569e42d280dcfab1
73af922eacff5e7eb80b0e0b28d7a657023046be7f4b5734b90bfb3ee229128d
ceae0311fab218739a07108c696bf7b7d5b6512a658bb898dd872007685c6984
a38d53c6fff1270f2db7192f61ff71ef4c667c5c1651e791c573974b812ea68e
969d1ef32bb08184eb8dbb2ab77020e7991436e341e6657be7652c6a88b7588b
7dd900a0b868a7a4b6abb668cf06d155c175597f039a1628b35f18d82b72e4ba
f31655e9e39d45abbda5c55646d3666c947503777122839d7f5fa2880b523c1a
39ae198127c993063f4a622371957a132b63720103dad5bc8294bda7b5e606e0
9c8b6d26b9e7eac24014225737b84e057c2cc8a2c5f5d0d29bb877eba0607d65
899f0c33f8867d55a07a16d1cc2e49339c2037ef41dd9a9d452fcaecf2ffa8bb
d79e1ee2458e8a7354a9a3a7ba11f2096addb1e369661a088bc6f772c5cf172d
19946c1ddb69edc440f1927c5c9ca43168f795185b38b5665f9cf4a55187cee7
8b799e612279caaa5b155753825d8e24edc7aaf61308c8246d67bd505628277f
ad0e90f81e922d52822b36680efdbd99c6ad62124df9bcd662337cd50b6fbde6
168f45f760d3001e3e2dd075e77c22bd5ab8e39aa0e20b26259e1db2493fce44
30d618417d88ee78381b4e9c6699ab2434ef5de6a10201e5c6d022765de0a331
be5653f997b7fc72504077f0c415e740f4713577d396487b10bb2d16afed0bb9
be1408ec3606bc18c227a87d5f0fba6008039b54a9bf04d5ad217ee3293ce8b0
af81389554e3966cb35ca950347cbf862d3837dbbe07e5e0dca066f819083a5a
a94d208a905dab72c16cd500ed881dc2cbc4ce02ad8991ecbe631363f1e9aa7e
a02dbd90ccd2003f1cfde58c6662a6894b6994d7b42587d6950736b2079ef5d9
ef592b95fa9d44fca76bf41a2f5075727b157326b51fa67a820cfc19bbe815a8
3972e7097b0c8a86ab73d40928037b18770a7d4d19fb9d465750326f0a11dc88
f92f969f9d39ccff1f4fda8bb63c87cdace3042d13888c20d8f05f07448c2c08
c589b4e9c5d3dc00d9b3dd2cc6e1a3752de27dbbe0ba40ce9121c955e1ec3cf2
b7649e9a104d227492a37653db3322bcf45bf7c497bd29663fdaa04421af4f75
253ab162984ec77e2266d1cd4c776a496f03570581ad57bc9afa5db7c64ddfc3
1fd0875566b7a1694d6b40224500f1e239b6ebd0c9cc042802df4f826acf8176
3e346406775a2e5f6f1605ef17e5881622f72800dbd2a867bf3d30a18b2c62b5
4c1cccef2806eb0e8bdaefa9626562fdd3ac5dc5b0778ba469405f691756a414
47dcc4aada60f5f465164f8d02caf46fd843519ee33a5dcf1f21051f0a1623a6
dd3609277d8e673dd3c365671e3c54b9f2567f5250fc11b8c60b480edcc261a5
4fa97c76ab426f374d201f62d0ef079e3177caa743861fe3ec0b137b6d55b10e
a4e277c6e73ce6b240a65de48b2993f51e6e77d2ec02a18e963b4249aa607c32
e641c8c2654013a40a13012e4bdebd4c226342b8d8fa9e40f814c4cee72af558
ee8dc673a898aecbd86bbf7c3dd6ab508fb492450a450db4083b89300e2200c2
ff5e9f8f219a059f0dee1da46c9de2209034a19e462a1c1e07db6c5a0b5b487f
5d3278ec7784e48c3196c3919303addccea4b4216be2bd23c13decd599753d0f
bc39f572c06ca987ef45c5425844df2dc032da25db0e3163951efaba882354f8
92e0437a4742512e4d67417b8d30a23575274f8b8ef0f63dc7d4940b0f32c7db
9ea7c3a6202f743ca915493413601c9235f1fcb8552faf406ba306afd6f54b12
a466e4434cc9c9e0cbe2d36ff4d9c1a991637f247c9d3241616da4b205e70e49
5ddc0d363c718d048c5702a14ca182bf2919eee4b6d82d7ab22dd588e2472894
9efd86f28398e7f896d4a29279274b23dc48813adb727f361adcde406209c1b1
66717a839bc7f681cea5e411dea43529c0726e715db368f50711c4c4eba6b61c
ae097ddb4d44eb4e54b8ee669567b32a4dd0dcee906180526990129251d576ec
6b19f7895d830f6e8d2dd8615ebc483abd6a5e52d58a30993396770ed574f603
3dbb4e6870ae4ccdd3936677444ecf8e5de8833abec3fa9048927016cd9277a7
a5ce658574bc7789cb8490cfd71c9f87aff9a311c640e218ac813b7407832ed7
1d952d67ebfe5d645a0acd52cba65110fc9b05c1aea1515de4e4cbf3c5bf01a3
ba817ad8e301b379a2f57c74df23ad6a13eb47b6e372547165a8fe2489b78c29
9165d46bf4340e7dc1f9a491383df0a071230281283525b637f4d10b714e8a4a
d16ee59ca84667211c0ebcfac948b24f38149c884e1db675189b391db7cbf8a8
e1932f5dea7bdf638289f4d8dac86e572c683ee46683caac0e73b5d21bd37d56
aebde651a428b99e519285436e28068a5a88062df83c3870ed87a63ab68e5008
e484c54cef5f08d3d925970e7c5661916018b9d50653674b21f156fcd5c086ee
3d5f5a5c9110786b295bcbc9f65834c3cbf1f31edfc5d19a985ff2e25a5e9192
2a68bc6cd0218bfb061bdaaa1acbf89ddf8472cbe17eea3001cbad50031c6fc7
6d2f3b94e0b45b2332ba0bf94f80e4ee330f8cfa20bbcc009e1c5c7b5b531f09
00d8f2d12997e6243cc3f31f04a16a36d854b4744dbc3c41a76b98ad4d41349f
42875fd2b9f7145254c40399fc6a6c2f74ba0076639dc67c829d752ff158909b
2095d8c317c144d1db63e7febb112e51ac1d385a9e3f4d2f84028acb48573817
bda9565c120d5775893bdc275ab5a0e694e8c845456c67a9e954c79c615a7bef
3458e329a4c0236b975eb1dcb508ef1a20141fcb34c7e285895376bca74bdbb4
9ae9b2cdb2d3ab5181c2c49e4abba0827d82fa9b4293da5e04d6a2729b9e733d
e5a79c3114d5a594d395da0aee454e872e28d8600d484e5f38a4b3ae88187d91
1bb5891e1de1080272f612ad8155098bcf23bb492584f5b93266cb8a9fa877dc
d236f36ebcf1460e040a203e827e00bd7bab4e58b594dc6db7da35ecf3c82aca
a3d7bfc2f4263bd83601e1f4c3498f0ad86d8c325516cf7cdd27f209df285488
db21929f066575937ee8647084633dfc44bc8d648e975b95b4109eaaf40d72b3
fc7b43955d92d80aeaa5e30155c13b4197f9046f64a83a0fba548b9dee4345b9
d06d99d33792cce442b3ed62acdb5328ba67bc1583d472bfb606908ab1ec1d10
6af30b21ac25333bb7a37b66d79b6c981d812e7a39a741980add022e790d3a31
79beee3f955c43b21b5855830090bc4aadf80e72fcf1500020359ca4f4cd477a
da6b9da451ce139e405ea8f369ee556311f45878536a75bf8c8c95ac125945b0
5cee39f7dc0e1d4f938df58bde6f65fc44c27a68355e75186d2a12548ee59491
6be196f7b565121eb1a9c9113fb12a7c6e4e9efbfed2739e0b5c035bf1f60502
049dd255b06cbf1a64adfb7e84130af62aa1dd5e424e037b538d138b58025909
ae6648f736bd9de056285ad24a86e9b9bacf6698f7f0e1bb5663fa802762521e
a1becb4a7cc8d066431add003682608bc4228388cc5a4ce994f71faacfb10e51
67ff8ed0f7f58ccf1d3f590a65037323fe27d42e0efe2edbfbc2289e299f7c48
a6952b83d88d9f7d9dae356991c929f35d0bed863572dfef4b6f648097a9108b
68ade6a552fd00cd76670b483972e802b1492875f2885dc844d918198999a371
2d4a968721e2c58430060bb1d3603f083e679404d468c4caed66a4279a0783b4
6896c8fffb7e12edb60b04005e737233c1a941268634c0279477c02b9ab2b211
a9ecbd554d3472109a6a9b626222089939a38d7c0a43df64f3b5e467abd3854b
696eb84f6a85991e5404d96bb51940d869de59db3da3836102498c93459b0a01
8baea90db6d1835c73e56c66c27e961861a9f1250237dab624a2489ee1147257
23e5d2a903c08efe7ea6216223da4b0401fb74f04d9135f87cb35d840efb264d
6f6bea29b6c3afac00f0f57a8dee6b4e203375a65a782e114d6808188612e1cb
2e364edca9ecd8319ef5006f30dffb3787d569be74da0c8977dd85b3f8fe55f9
7a16bb1063c0378198d36c7df624d16e9e4f59bd9aeab3a68c622567208fd0d9
a08f9068123c03c600cc5b6549455a0a01d2ea2b2b0e179dc16d40ec4b974598
48e3d37b4a6a44a860517dd64304e3aa290fc95ae61096f463eae73d635a2286
594a64dcd8864961ba1a72c9bc4e02ddabde7aa46236a31c91a0c4d30cf6f29e
c6fb886a959e14de4bf18086d05b05760c1fc5a168c3f329475fc4ea74d711cb
ba11f036d22b8b2f43b73fc8d30c10463506f6789cc47c238e70f372aa3a4caf
427031a6e2b1b1b1d2af397f0e498a5f3b191b0c35148784b3fe5079f6747ecd
c819bf40678aaaf7fbbcc45feddd15639149805df7516620343e347023a00596
45b597fa71ecbe14a0fe9eb288099741ebc6ab2f6d4e08e2afbda8a417bc4f86
2d7e23566ee7f99e8822b609df3cd6e71c5ef7ba751de0cdfd48ec05484479ec
968342145b8ddaf0839334a21c27bfafef4cf6ab58ef95b2076ecc6c524d9412
50b17d74730ffd4056716155d631f2e9ea64cd8ff4b8be31b651ff9e92731d19
b413b6e2dc1e4d5c1f2c9d3513e830be7cfa0c2e8ef085bbe8c3c2ce0d25bf56
329f0b22de8b25db6527a9cb1076902c9c7d824e9ed9ebf478c4c12f5d843305
6120ad9764b07cf825fb2d05970d2478bb8797421eadc91675f1a7cb64d3ca0f
e0ff5cf3b04629dee4adb3a951383dacaf129242240bc42eedc64275d000ab71
e128d536e0e9f41f87c5e297ef4e14ff985bbfc03439378e3a1432aeadd35caa
f4718a11b12c9c79d5f3ff725c19504a9afba94aa19746d299f92a7a2ff088ac
dddc7ed76d2a2bcb77ce7af7d8c3eedf0993ff8179252b35495bae0aabbc3643
715a4465e557fcd7602f485abcecd94220009aa418c4d5840bab7d704bb55060
113a58dc5fea31dcd63116e30ca105bd616e8a7d8f6a3acc9229c4f4b61ce33e
46c278d180b279dc86c7d99cacec8b7751c947eea9bd42210687074ec4a2fc48
4397760144509b424e660db97420d80089312902a6bac1034378e25e98800039
99218fd58bbe2eb7c295f362a49932369a0555365c061144099cfaf32fbf1bd4
a57dd0ffa1494be23de26d89e0716385c7d6727ffefad88bd929001e55cb35aa
6786df8ccab007ac88d37af648aa7917977b542add962b87e789508a52f98394
2a38970049257db6a2c4f867ef0aa4b469fb29ece83539dc8ceb4aa966434843
7de6b824fae0da52080c42c1103656fa8a766c5fda7747f8e254f43ecb5288ae
a770ffd31e94fad5d181b25a957d544046bb5aac1a2b11f18cff887898389c50
b69d334dc42ba5d6443deae286ecdf4e19c23c198656d4ccfb75d8cec55f8063
28de88e26870b093e7423897573213c027156befe82dc4ddcff74c5c87801dec
530a8d063609c7df7c913d3032ef23d3166e81f118e4c8fcbac4bf0f7a3e88c9
9664a725f7ca3e27b5fe56c3f7526684e6d620e66d65e047d15b725a402c5ab3
7562e50c1bf5bada23bf5ac050c5cc51760a7ae8f8326c46dbf07220088c9684
4feb0b03d0e22afbc05cc429352be83898a27d11856b76511cfaf99f982af795
b50cf47f9bdfd8a8d1119f565f61f931c6229abe0fabd7bf8b6d49879c915347
baf97d9c89847b0734d3e981e1881e5ea08b23ef493241a32f7cc932670168c8
cf434ac57169fcb1eaf37c718a81aaabc29cc728b32d943b9c04870fc6bbf39a
e320affc3b0498ae1bac8cf83aeab810fe030ce6c1d8086932be7c71925e08aa
daf4e70f48f67ea91f583bbef50b0a697bd83453bccc4644c185a4dbbf444774
2c3fa95f4bca7908e664a108dfbab3af930eb03d4547eaeec00aa2cb7cd58a6f
ac2c1127f2e00ff0f946294294509cb8ec591f6ad03c45a74cde9eafde95daf7
8aa83e92b9e3a18d5541d26d501512462fe0fad006f46957e85efc5e0eeeed26
44efa7798e3688675a6fc37168625630a55b5d9288d01fb94ee4345a99141af5
15643955118ad95b63794c5fdb2898fa96a8a06e5898091c5e7ba112b79ba437
b573626836c9672fee049497986384d6c2da8d97171aa96d65d8578c33dd8cd0
2becbadfda550128adbdaf4581f09b61efd60a7b3e7227662f474598b39a6d6b
42c2fb5472f112bd397475943113665dad3d749f8f59659e4f165f8bb585558d
0e4173d7bd63b2184b60b850c073b107b599a228f99f7fe414ac5e47f62bda12
e3a297de87a831a7130d4ccf8e51d18029f2f6092c666a37609aae7d62fddc31
b2ed6ccbc0e1683173198aa0e8a6778d7168de61276965bf1c27cff9f4305771
7109f84a2efea7f4a9944f9f7a96678503f95a5fa9c71e2515b15535ecd1d43b
e181b6c7d767c49fc54a5d5e888b5dc683b5117e6ada678e5d580e37dd40d0b9
fccb5f51834e1b99a77b565c85c447c7910e82e047c169205069045a2d7212f1
79cd5c0bd39eb5fb60c20355fdaf5e5c4c634649f2fe0ecb9141e6478492d2ac
ab98b77025d3f17bbcc944603acd0cd1039ded89c1e8cff51c56a77ad50ba57c
a3dee0598b90e8cc607ad5456047a1cf6cc19b06780b31795951fdb226e3378b
e5cd1b6cfdf5a9f1ec4ae93c517d607818b0666e79e89bb75b0af9788fc070fb
811d731903412b282833b60dcf9771d73347c21d11c4cbb20bd0022f8fd755a6
00d806db330eebc12b3e323c1bb639f88ae8e77d4585eb74114ec3b6a3dc89ca
e168af1039d065ef3e3c155e4675b914df269136fd6ca26bf922d0c4365a5c4f
77597915803f95add2ac6f5bfebb695ff697ddf421f08853722da8c36e9f799a
df8dc443cea6b80a6c62a0b607ded4e55d80e0be4fb5f18b0b9ff55f083d6261
45878a5bb7ef33b3885a78fba6dd337aaec8ee612fe3dc3b0724a3416811b38d
93d47315c597a4673af51251c368c3ac7849e1fa35c589a8fe5496967cccd31c
4fe502eb0f25416f91dc03f07a2face09fbd3a75a29001ce138a00c2609fbded
1314529e0d9514ab8ac1cf1bd8cd11eb14930c7cc6fc74230ec0a533fe3f959e
3962418c3b8641e3d1b366ae9e2079866680153ecdcfc561bc200ccd16a56005
94fdbfdae7db0948f8d2a6f42dcde1717151c26fa2faaec7786bd687617d9b9f
5d1f7f79cfd71101274284b899d0519640ab7c5cdc8d7337f54e58e3a1c3c021
714510dcf253f5be7a71997635b63bc927b9ed96b390891d1b51f8a19e0015c4
5c8bd03a68e592382e1f211daa6d0a89c1642ad07f4b44f4a354c549d2ba0a30
e60263349faafadb12aa198e9f63e5091b9c520670354bfdf4728ea07de4eefa
4193e104977def7f23da10b49fdd010d6d7ef7b8007a391a77051ca056e57a3a
d7ddfa50e2d76194eb6f02f1fc65f9586bb9797e5d3694b2efb03d1d50b668fa
03d6dccdc16497dc0f5e458e7c724aa7ab039a898adbfd69add17cdbe9c38a8c
d17b086531c905e7849c520fb5cf19ac4f4b0baf81714a01eec3d79df4a9bb0b
12207bea47f24d5ebabe0a96c92f8514b2bdfebf16ed5dccfb8f4fa749ff9ae6
da9d52ae8b99f8cf9f3640eee11c350c1f3af50411de636a65c0dc630cc8fcc4
97d8f2d499f314fa25191925087d1f335749e8392063f868dfa3bd6c0a3ba28b
0c2b993d3b15259a8419ff99a1e6674bf730e2f07d97c27fad0133b17be8a206
b25a5688ce3a3ceffcc0c96460b436fd4104b13b34625bcd5defc503de65ac63
634c5e08c8617f16481b3a41a9a609fc39e799f0a19f6dfce53d18145dda83f4
d7e8230b4459a7ee9ec3b4412abf9cf98539c191220305f2ceb2939b1456653f
3cea0b20f6dd3544a5dd90bc615b45442b17b5d4fffd4f35f3148354dbfc5621
54e554941e753880f6c412b0af713cee401aba8f4b6edf23a9235135c5c87d6b
8fafa62a220f141c5f91280af6b228646e61402921a26ba9cebd7758154659f3
11e2198bdac0680228a40550c588c0ad3c2fd35840fdcc634fb2c64765e2d3e5
ae8b7e24f300be4892c41bc8549c7e85b64533006d535427bbf1169bfb1040cf
bbea94bb068a26243708794a64bb30a36e106638577404c651e30d90ebfca6ea
0caaf465c7a5681b5f49b625237a1d01fdb08c968d42287973f620ea44a0fc17
9028349a611c6c3384025936d5a56e12997a73efeaa699576fbb2cb4173236bd
5f65857ec1c18f1cd6ff9a2a8ab6c06af2665cd07113299637210cfcc689a555
10de029d9753e14b60bf6c02a44a315350aa026e0527df59b8a306d8a558e4f7
48dd975d40d3b4dfa35db039fcd875d257a4ddd7ebd1b6c685eb719ea7d84519
0190b01ce0fb711d7647e9e290804d42920defe923ffb292549252d2480da763
777ccfa6f06edb56a111abef5d527f40a2e7ae131e51abd37b6a2e65db8fee30
6520356d7460093d757f57c02a03e9c333c3d11e64e9a2a771344dc9cc9a8473
ba4cbb0e34e8dc86f4cae7b9119b7ec98df617b29e9344e333d1b847c1206be5
5d3987141afcd38cada444d87e7fead29a22a58f128319cc7d67dadf14c3ee5c
0211d4ce815c28bde3fcda55bdb92ed19486678f4d4a44817a74ce3a4e91e7ed
21151e79ed500ed0b4a697aec854099b4c2f160a093d7f36bdcf574aa9a0810c
72e833b806455b56f4d524b2f0c362aa5f7d18fce48ffe3e14d751a44321d3c1
49095efa10b35cb7f0bf6916bc88d0bddcfd2752a03ed7b73d8c9a8c8ab873a6
3611e38bf5f1b015fe71d23ca012ac0ecaf52462650f4506868a1fc0a2a787d4
c822e9775bba60f1def2bed609e3faed921e4ab4a59a74692395ad5aa4de927e
a1e9a8412f4675498983b1d46666ccb78cd0f2b372ed7487d180fd6220806952
9421ec31d2cd991a2ce1658c8fbe83196f4c8868ade3ab588c84a110564727f9
951bbcb460a70e9eac0f29af8d90b08bf688843f63813d98a0048d617ce2dd36
ec36c1f917ad8f71c8733165f355e915cb9292d9a3ea5152bd710a8d1d890696
962987a6b37ccb054b4f565579c5bd0f500459dc3c4691449c0817ec70c9299d
1e30bef6d0bf1b2bba4cc88105cbdac03b06ce56b551af0ea9d11a083ddabc6e
5045d8d763a17b9089b4b8c70bfae869713ad22b71ba153520608c2a26f37d35
aa54c902594bb8140cdaad28f0feb6f063f5e03174934afcf70689a026478e3f
d410b0ab05675d0b8d3da60b744d67175d329256b1116362794b487f047753c8
1ffd6f7db6a2151079eef3663ca90c99c0c343fee81715f34e0254668263c177
9864bdb0e071fb94406cb965e2014654c6339d23c234fcbde580eca16a233448
bf7c27836e0cc6606151cd1ec10280ee46f9566982c0b757ad24b936350b0dcf
aa4ca4833e3e04e87908766e44032dd323bede9179f1dbe28c5eaf14a27b1702
69d15685bd57d5edcfce474e9517500b8a4869fba433b9dea8aa38165d6341bb
e370602a61615b3a53559d41c8fdd51438c3bd7a3e252deba8ce83f631f5b222
f3a3864b36169a24213fe92470dd923002a6518ae98b53e2c82bb9067d98a820
0bcf3b98e0519dc9f8fc007e63b050c8875b0c63b13daf77aed04068fdddd863
34ad3365e2cce1c654a614fb3e2ee323f957ec6efa6fc03f18b9715289a09d5d
1c883dcc60bf60c430b8426f6836ca382bfc99791d7de0c7f4bb553c829ce50a
b9e71ec7fcd75bbb4a41bbe66239d947eb43be36ae39851bda1012a6ec728adc
34179d385d4265128883f32dbad958ec305d85d9043dacab36a1bdd6cba4e30e
d6fe84e327d844803c0e7a68db8973871f604e507be8e3c66d4dd160dc083821
4ca9254a2fd2e7e3d4d2af835d864fb53f66b2988b948701c0c9f38eaff04954
eef12fdf287aec7359671f3ff08113a43417f389cf8b12b153127bf2b01535b1
ddf3897438bf43aa6693ddcd0a59873d6a351559c046203e681fa25a634b94ac
bef235dbdfa086089ccfc0750bedc97052f2e69a74f992d81bf91c392dd028aa
459f85512ac68ebce51ddb9d5cdd776eda458a1500340b94443b9741049e6e1f
b212915a6f67576ad60fe93a150f99d90a8f3b44b11a7ed16df73a09c3e2d6d7
d8cb3d1075fea1d48409c3fc1df8eba2885849e27676aaadbf6527a0e39e5081
92639993d58d94af1075c8746f24a1da893a42120515ef7a2f12881c377408f8
44458d1cbabb8549a12c05019c06c54061101dd7d39ed37e96d8baf5de0cc46b
a6767d5e9547dcd73f816c88a8940aaed999be3ae1a0b7ecf9cc589a24ba9a3c
5c27b7379d04cf36dc870ba5a7755d2e1b46ccca7eb1a290cf0236e3a4b6a5ef
be864295150ae062c44914313f3707d57358346e1062b5651969bb689b9aadb2
5b9e819f9baa114743b3cb73cf1d4facf983e626eb51a995df5990500c57f56c
b42970a58375c21fae28f2b4529029df0d19134e4b829db9df6135e0a6ceb371
3f1a755ccea4a1a2c7533d17bd1b9222b9d3d3d8fe7a06148fe932e7ee9e941a
0ef6549b8c8a80ec13d80d8575cb462bdef1ab7505f003013e91493ab2caa568
8d95f27d750e4ee616e25899bea50e4100186fb306beba430c10b7a29d85c9c9
5759639371a908075c876f340ecd13a2428bba82664645fef3ec70dc37ae85ee
086ad6d757838b3496a134a6e392650b1e250a24f268a7c8179b53c18d847b34
fbe035101eddb02f92c2bc70de52fba90b0ed51806a1b18b9abc2ad5ab49048c
f1647203823f84df5cb483096f9d96aee3a2855e479b72a14a67c633ce99c101
cfefae939bf9b02e710d
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
%%BeginFont: CMR17
%!PS-AdobeFont-1.1: CMR17 1.0
%%CreationDate: 1991 Aug 20 16:38:24

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR17) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR17 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 20 /caron put
dup 22 /macron put
dup 24 /cedilla put
dup 74 /J put
dup 83 /S put
dup 97 /a put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 114 /r put
dup 115 /s put
dup 117 /u put
readonly def
/FontBBox{-33 -250 945 749}readonly def
/UniqueXX 5000795 def
currentdict end
currentfile eexec
9b9c1569015f2c1d2bf560f4c0d52257bacdd6500abda5ed9835f6a016cfc8f0
0b6c052ed76a87856b50f4d80dfaeb508c97f8281f3f88b17e4d3b90c0f65ec3
79791aacdc162a66cbbc5be2f53aad8de72dd113b55a022fbfee658cb95f5bb3
2ba0357b5e050fddf264a07470bef1c52119b6fbd5c77ebed964ac5a2bbec9d8
b3e48ae5bb003a63d545774b922b9d5ff6b0066ece43645a131879b032137d6d
823385fe55f3402d557fd3b4486be356c29c3aec91ef17f5d31183b1e489f1fa
559a6693fbdd04d4f7e99886d8cb7cca13d4aa9ceb34a708af22e69ccef0e504
c3997075243585edf60b6447c8d01cffb04b6e3ddbaa7da5891286861322a795
e9d990fd56af2f5c2b35801a0b07874e4ac3170481d232e150443253c92a8b05
513d4a4154a99d91f629ccd30376500f5d16aaa9b203bad6350e4b19424c0e33
75f2949bc1927a6f6221252f8a96618e646aa1b0810753c98becc26b37837775
24bca72b818d314074c1c91f4e1f4148d3d703d12d179ee6970bd55d04aa9a9d
97f63f2c7dbd129ec2ed3ba5f8080270ea5854ea165dbcc061e2f47f1aaf0997
2ac9a689a2a9620b91b53f6b5092884372f5f7afca495f331138d85a97c5bb83
d8072dc88010fc89108b60bc06d4f93c722e8908d7ce3c1ea3c70e9e65edd769
7db17ce0e012ad37d4030f33d30a73fd655b7a2e572f3378ac933dd75082f2f1
68702be19bc60cef6bd5f0ada180d21408c04b7f7db9b6dbaefe09e809a80ddf
a5366d10930d3e68ca53e4721ff525853f4c784f2c2c3aa0129a34d9df00debc
ae4037e4c0fbdce3989f35964b4c07e7817b805bfe8c15f0c0ebf226cff606b6
2954f0f42dff8c214a6537ab666d25389c44db7b5866440bbfc137712bcdcc89
c68cd1adfd85648b1ed29bfb45a564b02172137feef782d604e0d7e1f1737c96
719cca9e4b9dfdc87e5999b886a15ac572183dfafd8c4176cd98430c204d4e7c
e989e1dea814d3088a21d9ae6c5fe7ab3d399b2982fd605e65509a8ed6790c21
a08a23e53dbe70f676d0e7b2e8261b092dc3415ac785635d133d309ac670c0c5
5868fd863ce42542ff1e83e1fa20a7a0e5d680dec3a22700f7f48d2582b8411d
757d17ab7530ceec0c6727c6a80f2493196b0b36e727bd6594e6fc47ac36180f
3c3234bf1f279b4f4dbefe4dbd5a89186e2101c65569101caef249d07c66cb31
3c46cc73cd3a269666a36f569ca738de8a89f62f5ac03f2ea3f5c923597d01b9
9759e9146879f63f1b0402203f1d1007e92cf18341f0f2494f722b88f4d10d06
bdc3fb6e091a0b5d0648d665e77e8c87da18ca365752ec73b17e38a04508feaa
2d1f3dd13b3d4e23a20fa4b081aa21e86ddb343798386d51b18f464911342807
41fd3b0df01d2120fdbb9702900e0b7d1227ea078e0305c6a1521971132ca0a9
c182cb2f5abf77976b9ec137f25f016c6103198771491965bbe262a8370262fc
f1c7f5608f30be87751f95213b2a86305773da6e9ea9b3a7c77061abae8e90b4
c82a55635b2f31ca1c9a38a6bd443a6dc8777ee83885c0e3af03fabfd9a629f9
0a9ea7fc99d4f69882da1d86d53d6da8aab4772d68d98e2385afacbfef98d647
44a799fc2a8dac6bce084c553410bd771b47d17ef93aee8efe20e739ab072558
92736f82e62369739c3f4dd8709d8c80384928297057cd4a6a9a284b3a2c8843
9ea91ff735ea6f94bc3e578814e3fa5da255212fd4d341e575f6477d786bafa8
8d0b9b1629cad33c9617d271d44edea136683d2d4f0b532e73ab6d9cdc9b7af4
3685197d0ce5d2c213a3e6f6ee8a9f38d2fc9a83b160752bf6325313e2b7a97d
2a8d402581c487f2a9b0950b07ce2ed11b11d6192eb1262807bbb85ae55bd6d4
6f814333f623582310eb7a4a5f330ae8e3a8fe022ef9933eed07edb90474d4ca
662319f86c9148df72f086375c3f50b79c37c32ffa5023cef037ee47b2899725
7774f00e6b5a04b61b8e6dd3e03d5eb4bff41e1225866ad4b49c96f4ae6475ec
d3e4c94a8706090cc09f72715f8937c402d2ffc1634131a413104d4b4b0b02de
088715371e20fb90ac983e26be5921dee5bab74d8f11f7aa935d4ef567b67bb7
2daf38834ce7912146a58a2971f5925ce72bf64ac7033e0f653dbb76f57af5d0
71bb66f57df3c5167323474f9fd4b22a32c937850f2bbc64b161663c2f8a865a
1ac487897562ebfeee809785def2a4365338b9f0d16aea497505154a6cd5b23b
668ae868936ad12cdc3a85deae5c9383947512f979f8439f67c7f8a4eca94d73
d5e2dc65238a36730c67c06843626121abec8de6e6112330dadf41f2f1967272
18329d6686f0fbee8fb52977699046ff3429e483024eb3bd702a3cebf5621bcf
0a8355b7a0a85ac3ee7a614679aca328a002d91a187e8a339e29186f4e5f2f31
ad469399830850f8e90c7014d74a2b3eb233c1f81b6ca462bfd0355427288ef3
5c37899f594ec4d7e3b5dba799f833a4b1da444aadf13abb95f0683470e13da1
0423fa36d0201ea382839e09de7e9b9dd342f06b51164b3b22996750a8b3321c
ac85eb42783fefe480c642ec82dad3552c81f927afd090c4fc51ec8d82352b06
91ca32a85fdd280eb720594e4c92ee04196426c30d3eef525fea8271f97e8d14
52afe1c9541355e5d95c74b02fde4a35cb8bf6443b45f16079cba15e8d93fca0
514eada3b4f018c9ff50e915c490292d13e2132679be3297d58889a8aaf3be28
89f373a2b8178a48cdd6127ee1e9454bde273b0c9c9a523ad2b33fffd072758c
a4d9384b9e99001f33ae914ee28787cf3fca854743348050f1acf39e3d153718
49f29c48c9b68fdc0caa9d5b9384aa8c77da79c4e7de703f979feef5c5d9cb62
9a425a0ac0b09328dafa7f43c885c0d1c84392c7d556787d80d9d0555b6d3dc5
bc0edb27c917573a0a40935ac847a5fb59e3835e4f2f492914d670cf969fd181
ffefcfdff86f0be1b73607741a6b9b46e8bca83b4c39d50c510fe2dddd95d742
cfbbe3b2d4061ac2e7f3f9f8838ff98babac3427628ac359ea33b1ee8c016fe4
6e2856a4d5401562740cb2d7187a035d241afa98036bf48c3280bcada0b4193a
250e47333863c882e688152cc65e5d9ad932a254f7e05d744563a69ac1b7912f
86fa8eac1fd3da14179272a76aec76f099d3e5d0ccb10b9aa618f515482f6dc7
dd3c85fd48e9eaabc836d2a9fd41cf9725355338a64ce50298dae2c7e1c1256d
8787cc40d9f6b5ab350bf06fbbeefb0948b2e135db9bf82196d8e12a082adf75
aa2a1a2627768fd062dedb966f9bbd6be71d2bba31532c6ee0c6768ae92c060e
24de63e0e0588a7f4d5027b4cdd8bbfefd67fb29e74ec9fe5148ed88016bcb13
da06d963d795aaaed44f9fb65cb8708b31a8fc8fe65ef14cb818f9b9172b1d6c
1c70eaa8f4bc16dd6b1132dc6784f59460547d4e350816bc5d9b58b7b10c50c6
42a74f2e7d2d3928885ca9f1992135b92aff2513429564c0135fa7b708c75ea3
4fad19db3e2a4a7903ee61d9c503f63d5fa27504dc662b5170438a7ad9a111e7
195e66d42adb2856ad00ad03cb955af9df02d7050624e990a78196db5cd6a20e
f92446c05fccb42a13a0160165a76b0fed156e15dd8f97d1190194438f265fa1
f25646732847b5106121446313551f65009ed05e482c84865c9bc1145a818adc
8ee3a1b4f5d0e701ca550782e4c3b3721c61ea0ab0ce9e24acadbbadbb1b975e
d5cf8e9effe1150a2a0d8a2bda482e198a0ff21bda5e7db3cc5062846464ffdf
e0dd34e8eade713801df67e29e6c9f1a8ed679291602de6b4391cd4652f010a2
6b928e089b71cf4220969ba3d99bb260accf2fb661d20eb4b026b49c4de19e7b
15c18e13705617b3d2d23ddd4ff9b199b4ff1e9ef7f614f4cbeea59a12f110bb
2142fbd71ff8f3b60cf9e9454ce167d7791e540f6f224bbe9180be7a58a796fb
beb6fb4be7f24b539a3c09540f44d7016505fd463c31ed18b88d2a894c42152f
0b09d3e13568c7c8d3f733697b3b3a3a3fdc813023ed4e78c97bb9678d1c2240
ba19795e3cc7bfd3a564c135e5ac6cf7736f87697d3294d4800000b372ab8718
a390a0e47ee69dd43db9439fdc52531a6b442db2242c3ce4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (main.dvi)
@start /Fa 187[35 35 35 35 65[{}4 66.4176 /CMTT8 rf /Fb
146[54 109[{}1 49.8132 /CMMI6 rf /Fc 149[20 57[19 48[{}2
66.4176 /CMSY8 rf /Fd 167[144 25[89 1[89 1[89 1[89 56[{}5
99.6264 /CMEX10 rf /Fe 149[23 106[{}1 83.022 /CMSY10
rf /Ff 207[19 48[{}1 58.1154 /CMSY7 rf /Fg 172[51 83[{}1
83.022 /CMMI10 rf /Fh 136[60 1[46 32 33 33 44 46 42 46
69 3[23 46 1[25 37 46 37 46 42 23[30 11[65 14[23 1[23
44[{}22 83.022 /CMR10 rf /Fi 206[33 49[{}1 58.1154 /CMR7
rf /Fj 149[28 2[50 50 2[44 44 47[66 29[77 16[50 77 1[77{}10
99.6264 /CMSY10 rf /Fk 144[34 43 62 3[24 7[37 13[43 9[31
4[58 68[{}8 66.4176 /CMMI8 rf /Fl 194[55 10[35 35 49[{}3
66.4176 /CMR8 rf /Fm 136[70 1[56 35 46 44 1[49 47 58
85 1[51 40 33 56 2[45 1[42 41 51 13[60 4[78 94 3[43 5[70
4[76 49 76 27 27 46[62 11[{}28 99.6264 /CMMI12 rf /Fn
134[51 51 51 51 51 51 51 51 1[51 51 51 51 51 51 1[51
51 51 51 51 51 51 51 51 1[51 1[51 1[51 51 4[51 1[51 51
1[51 1[51 2[51 1[51 2[51 51 51 51 51 51 2[51 51 1[51
51 6[51 51 51 51 2[51 1[51 1[51 51 2[51 37[{}53 99.6264
/CMTT12 rf /Fo 133[40 47 45 65 45 52 32 40 41 1[50 50
55 80 25 45 30 30 50 45 30 45 50 45 45 50 8[72 97 72
1[70 55 71 1[66 75 1[87 61 1[51 38 72 75 1[66 74 70 69
72 7[50 3[50 50 2[50 1[50 30 35 30 2[40 40 26[57 55 12[{}56
99.6264 /CMTI12 rf /Fp 133[50 59 59 81 59 62 44 44 46
1[62 56 62 93 31 59 34 31 62 56 34 51 62 50 62 54 9[116
2[78 62 84 1[77 84 1[106 67 2[42 88 1[70 74 86 81 80
85 6[31 2[56 56 56 56 56 56 56 56 56 31 37 9[93 22[62
12[{}55 99.6264 /CMBX12 rf /Fq 133[103 123 123 1[123
129 90 92 95 1[129 116 129 194 65 123 1[65 129 116 71
106 129 103 129 113 9[240 2[162 129 173 2[175 1[220 140
2[87 182 1[146 153 1[168 165 175 9[116 116 116 116 116
116 116 49[{}44 206.559 /CMBX12 rf /Fr 133[60 71 71 97
1[75 52 53 55 1[75 67 75 112 37 2[37 75 67 41 61 75 60
75 65 11[103 1[75 100 1[92 101 1[128 3[50 105 1[85 88
1[97 1[102 12[67 67 67 67 2[37 45 45[{}40 119.552 /CMBX12
rf /Fs 128[49 2[98 49 43 51 51 70 51 54 38 38 38 51 54
49 54 81 27 51 30 27 54 49 30 43 54 43 54 49 3[27 49
27 3[100 73 73 70 54 72 1[66 76 73 89 61 76 50 35 73
77 64 66 75 70 69 73 1[46 1[76 1[27 27 49 49 49 49 49
49 49 49 49 49 49 27 33 27 76 1[38 38 27 1[81 2[49 17[27
1[81 54 54 57 11[{}83 99.6264 /CMR12 rf /Ft 242[120 13[{}1
119.552 /CMSY10 rf /Fu 138[73 1[52 51 3[73 111 36 2[36
3[58 3[66 13[73 8[68 49[58 1[66 1[66 20[{}14 143.462
/CMR17 rf /Fv 134[62 2[62 65 46 46 46 62 65 59 65 98
33 2[33 65 59 36 52 65 52 65 59 7[88 3[88 85 65 2[80
91 88 107 73 1[60 42 88 92 76 80 89 85 1[88 10[59 59
2[59 1[59 1[33 1[33 19[52 1[59 1[59 7[65 12[{}49 119.552
/CMR12 rf /Fw 133[72 85 1[117 85 90 63 64 66 1[90 81
90 134 45 85 1[45 90 81 49 74 90 72 1[78 9[167 1[124
1[90 120 1[110 121 1[153 97 2[60 2[101 106 124 117 115
122 9[81 1[81 81 81 81 81 2[45 54 45 31[90 94 11[{}48
143.462 /CMBX12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
letter
%%EndPaperSize

%%EndSetup
%%Page: 1 1
1 0 bop 444 100 a Fw(Cac)l(he)53 b(Optimizations)f(for)i(Stream)g
(Programs)1888 332 y Fv(b)m(y)1502 565 y Fu(J\026)-66
b(anis)42 b(Serm)l(uli)7 b(\030)-66 b(n)-7 b(\024)-59
b(s)150 797 y Fv(Submitted)36 b(to)h(the)g(Departmen)m(t)e(of)i
(Electrical)e(Engineering)g(and)i(Computer)1765 946 y(Science)478
1096 y(in)i(partial)d(ful\014llmen)m(t)g(of)j(the)f(requiremen)m(ts)f
(for)h(the)g(degree)g(of)397 1328 y(Master)g(of)g(Engineering)f(in)h
(Computer)f(Science)i(and)g(Engineering)1797 1561 y(at)f(the)525
1793 y(MASSA)m(CHUSETTS)e(INSTITUTE)i(OF)h(TECHNOLOGY)1701
2026 y(Ma)m(y)g(2005)263 2254 y(c)230 2258 y Ft(\015)f
Fv(Massac)m(h)m(usetts)g(Institute)g(of)g(T)-10 b(ec)m(hnology)36
b(2005.)50 b(All)38 b(righ)m(ts)f(reserv)m(ed.)289 2557
y(The)i(author)e(hereb)m(y)h(gran)m(ts)f(to)h(M.I.T.)g(p)s(ermission)f
(to)h(repro)s(duce)g(and)422 2707 y(distribute)f(publicly)g(pap)s(er)i
(and)f(electronic)f(copies)h(of)h(this)f(thesis)971 2856
y(and)g(to)g(gran)m(t)f(others)h(the)h(righ)m(t)e(to)h(do)g(so.)150
3537 y(Author)29 b(.)17 b(.)h(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f
(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)
f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h
(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)646
3686 y(Departmen)m(t)37 b(of)i(Electrical)c(Engineering)i(and)i
(Computer)d(Science)3122 3836 y(Ma)m(y)j(6,)f(2005)150
4149 y(Certi\014ed)f(b)m(y)13 b(.)18 b(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f
(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)
f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h
(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)2699
4298 y(Saman)38 b(Amarasinghe)2761 4448 y(Asso)s(ciate)f(Professor)2844
4597 y(Thesis)i(Sup)s(ervisor)150 4954 y(Accepted)f(b)m(y)24
b(.)19 b(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)
h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f
(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)
f(.)h(.)f(.)h(.)f(.)2898 5103 y(Arth)m(ur)37 b(C.)h(Smith)785
5253 y(Chairman,)d(Departmen)m(t)i(Committee)f(on)j(Graduate)e(Studen)m
(ts)p eop
%%Page: 2 2
2 1 bop 1926 5649 a Fs(2)p eop
%%Page: 3 3
3 2 bop 695 100 a Fr(Cac)l(he)46 b(Optimizations)g(for)f(Stream)h
(Programs)1888 324 y Fv(b)m(y)1550 548 y(J\026)-59 b(anis)39
b(Serm)m(uli)7 b(\030)-59 b(n)-6 b(\024)-52 b(s)275 892
y Fs(Submitted)34 b(to)e(the)h(Departmen)m(t)g(of)f(Electrical)i
(Engineering)g(and)f(Computer)g(Science)1021 1013 y(on)f(Ma)m(y)i(6,)e
(2005,)g(in)g(partial)h(ful\014llmen)m(t)h(of)e(the)1310
1133 y(requiremen)m(ts)k(for)c(the)h(degree)g(of)656
1254 y(Master)g(of)f(Engineering)i(in)f(Computer)h(Science)g(and)f
(Engineering)150 1617 y Fr(Abstract)150 1802 y Fs(As)h(pro)s(cessor)h
(sp)s(eeds)h(con)m(tin)m(ue)f(to)f(increase,)h(the)g(memory)f(b)s
(ottlenec)m(k)i(remains)f(a)e(primary)150 1922 y(imp)s(edimen)m(t)46
b(to)d(attaining)h(p)s(erformance.)78 b(E\013ectiv)m(e)46
b(use)e(of)g(the)g(memory)h(hierarc)m(h)m(y)h(can)150
2043 y(result)41 b(in)f(signi\014can)m(t)h(p)s(erformance)g(gains.)65
b(This)41 b(thesis)g(fo)s(cuses)g(on)f(a)g(set)g(of)g(transforma-)150
2163 y(tions)30 b(that)f(either)h(reduce)h(cac)m(he-miss)g(rate)e(or)g
(reduce)i(the)f(n)m(um)m(b)s(er)g(of)f(memory)i(accesses)g(for)150
2283 y(the)f(class)g(of)f(streaming)i(applications,)g(whic)m(h)g(are)e
(b)s(ecoming)h(increasingly)i(prev)-5 b(alen)m(t)30 b(in)g(em-)150
2404 y(b)s(edded,)40 b(desktop)e(and)g(high-p)s(erformance)g(pro)s
(cessing.)59 b(A)37 b(fully)h(automated)f(optimization)150
2524 y(algorithm)i(is)g(presen)m(ted)i(that)e(reduces)i(the)e(memory)h
(b)s(ottlenec)m(k)h(for)d(stream)i(applications)150 2645
y(dev)m(elop)s(ed)35 b(in)d(the)h(high-lev)m(el)h(stream)g(programming)
e(language)h(StreamIt.)296 2765 y(This)46 b(thesis)h(presen)m(ts)g
(four)d(memory)i(optimizations:)69 b(1\))45 b(cac)m(he)h(a)m(w)m(are)g
(fusion,)i(whic)m(h)150 2885 y(com)m(bines)35 b(adjacen)m(t)f(program)f
(comp)s(onen)m(ts)i(while)g(resp)s(ecting)g(instruction)f(and)g(data)f
(cac)m(he)150 3006 y(constrain)m(ts,)28 b(2\))c(execution)i(scaling,)h
(whic)m(h)f(judiciously)g(rep)s(eats)g(execution)g(of)e(program)g(com-)
150 3126 y(p)s(onen)m(ts)37 b(to)e(impro)m(v)m(e)i(instruction)g(and)f
(state)g(lo)s(calit)m(y)-8 b(,)36 b(3\))g(scalar)g(replacemen)m(t,)i
(whic)m(h)f(con-)150 3247 y(v)m(erts)48 b(certain)f(data)f(bu\013ers)i
(in)m(to)f(a)f(sequence)k(of)c(scalar)h(v)-5 b(ariables)47
b(that)f(can)h(b)s(e)g(register)150 3367 y(allo)s(cated,)d(and)d(4\))g
(optimized)i(bu\013er)f(managemen)m(t,)j(whic)m(h)e(reduces)g(the)f(o)m
(v)m(erall)h(n)m(um)m(b)s(er)150 3487 y(of)d(memory)h(accesses)h
(issued)g(b)m(y)f(the)f(program.)66 b(The)41 b(cac)m(he)g(a)m(w)m(are)g
(fusion)f(and)g(execution)150 3608 y(scaling)29 b(reduce)h(the)f
(instruction)h(and)e(data)g(cac)m(he-miss)j(rates)e(and)f(are)h
(founded)g(up)s(on)f(a)h(sim-)150 3728 y(ple)35 b(and)f(in)m(tuitiv)m
(e)i(cac)m(he)g(mo)s(del)f(that)f(quan)m(ti\014es)i(the)f(temp)s(oral)f
(lo)s(calit)m(y)h(for)e(a)h(sequence)j(of)150 3848 y(actor)g
(executions.)59 b(The)38 b(scalar)f(replacemen)m(t)i(and)f(optimized)g
(bu\013er)f(managemen)m(t)i(reduce)150 3969 y(the)33
b(n)m(um)m(b)s(er)h(of)e(memory)i(accesses.)296 4089
y(An)41 b(exp)s(erimen)m(tal)h(ev)-5 b(aluation)41 b(of)f(the)h(memory)
g(optimizations)h(is)f(presen)m(ted)h(for)e(three)150
4210 y(di\013eren)m(t)g(arc)m(hitectures:)59 b(StrongARM)39
b(1110,)g(P)m(en)m(tium)i(3)e(and)g(Itanium)h(2.)62 b(Compared)40
b(to)150 4330 y(unoptimized)35 b(StreamIt)g(co)s(de,)f(the)g(memory)h
(optimizations)g(presen)m(ted)h(in)e(this)h(thesis)g(yield)150
4450 y(a)c(257\045)g(sp)s(eedup)i(on)e(the)h(StrongARM,)f(a)g(154\045)g
(sp)s(eedup)i(on)e(the)h(P)m(en)m(tium)i(3,)d(and)g(a)g(152\045)150
4571 y(sp)s(eedup)j(on)e(Itanium)h(2.)44 b(These)34 b(n)m(um)m(b)s(ers)
g(represen)m(t)g(a)m(v)m(erages)g(o)m(v)m(er)g(our)e(streaming)h(b)s
(enc)m(h-)150 4691 y(mark)38 b(suite.)60 b(The)39 b(most)f(impressiv)m
(e)j(sp)s(eedups)f(are)e(demonstrated)h(on)f(an)g(em)m(b)s(edded)i
(pro-)150 4811 y(cessor)33 b(StrongARM,)f(whic)m(h)i(has)e(only)g(a)g
(single)h(data)e(and)h(a)g(single)h(instruction)g(cac)m(he,)g(th)m(us)
150 4932 y(increasing)h(the)f(o)m(v)m(erall)g(cost)g(of)g(memory)g(op)s
(erations)g(and)g(cac)m(he)g(misses.)150 5201 y(Thesis)i(Sup)s
(ervisor:)44 b(Saman)33 b(Amarasinghe)150 5321 y(Title:)44
b(Asso)s(ciate)34 b(Professor)1926 5649 y(3)p eop
%%Page: 4 4
4 3 bop 1926 5649 a Fs(4)p eop
%%Page: 5 5
5 4 bop 150 100 a Fw(Ac)l(kno)l(wledgmen)l(ts)150 379
y Fs(I)25 b(w)m(ould)g(lik)m(e)h(to)e(thank)h(William)g(Thies)h(and)f
(Ro)s(dric)f(Rabbah)h(for)f(their)h(guidance)g(throughout)150
559 y(m)m(y)39 b(w)m(ork)g(that)f(led)g(to)g(this)g(thesis.)62
b(This)39 b(thesis)g(is)g(an)f(expanded)h(v)m(ersion)h(of)d(a)h(pap)s
(er)g([24])150 740 y(b)m(y)46 b(the)g(author,)i(William)e(Thies,)51
b(Ro)s(dric)45 b(Rabbah)g(and)g(Saman)h(Amarasinghe)g(that)f(will)150
921 y(app)s(ear)35 b(in)h(pro)s(ceedings)h(of)e(A)m(CM)i
(SIGPLAN/SIGBED)e(2005)g(Conference)i(on)f(Languages,)150
1101 y(Compilers,)c(and)f(T)-8 b(o)s(ols)30 b(for)g(Em)m(b)s(edded)i
(Systems.)45 b(I)31 b(w)m(ould)g(also)f(lik)m(e)i(to)e(thank)h(all)f
(mem)m(b)s(ers)150 1282 y(of)41 b(the)h(StreamIt)h(group.)70
b(I)42 b(w)m(ould)h(lik)m(e)g(to)e(thank)h(William)h(Thies)g(for)e(his)
h(w)m(ork)h(on)e(\014lter)150 1462 y(fusion)33 b(and)f(lo)s(op)g
(unrolling)g(in)h(the)f(StreamIt)h(compiler.)44 b(I)33
b(w)m(ould)g(lik)m(e)g(to)f(thank)h(Jasp)s(er)g(Lin)150
1643 y(for)41 b(his)g(w)m(ork)h(on)f(scalar)h(replacemen)m(t)h(and)e
(lo)s(op)g(unrolling)g(in)h(the)f(StreamIt)h(compiler.)70
b(I)150 1823 y(w)m(ould)34 b(also)e(lik)m(e)i(to)e(thank)h(m)m(y)h
(advisor,)f(Saman)g(Amarasinghe,)h(for)e(his)h(guidance.)296
2004 y(Most)g(imp)s(ortan)m(tly)-8 b(,)34 b(I)e(w)m(ould)i(lik)m(e)g
(to)e(thank)h(m)m(y)h(paren)m(ts.)1926 5649 y(5)p eop
%%Page: 6 6
6 5 bop 1926 5649 a Fs(6)p eop
%%Page: 7 7
7 6 bop 150 895 a Fq(Con)-6 b(ten)g(ts)150 1517 y Fp(1)90
b(In)m(tro)s(duction)2725 b(13)296 1706 y Fs(1.1)100
b(Ov)m(erview)27 b(.)50 b(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g
(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)
g(.)g(.)g(.)g(.)143 b(14)296 1894 y(1.2)100 b(Organization)h(.)50
b(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g
(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)143
b(16)150 2185 y Fp(2)90 b(Bac)m(kground)2758 b(17)296
2373 y Fs(2.1)100 b(StreamIt)47 b(.)j(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
g(.)f(.)h(.)g(.)g(.)g(.)g(.)143 b(17)521 2561 y(2.1.1)111
b(Hierarc)m(hical)34 b(Streams)74 b(.)50 b(.)g(.)g(.)g(.)g(.)f(.)h(.)g
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)143
b(17)521 2749 y(2.1.2)111 b(Execution)34 b(Mo)s(del)79
b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)143 b(19)521 2937 y(2.1.3)111
b(Compilation)33 b(Pro)s(cess)81 b(.)50 b(.)g(.)g(.)g(.)g(.)f(.)h(.)g
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)143
b(20)521 3125 y(2.1.4)111 b(Implemen)m(tation)34 b(of)e(Cac)m(he)i
(Optimizations)97 b(.)50 b(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)
143 b(21)150 3416 y Fp(3)90 b(Cac)m(he)38 b(Mo)s(del)2700
b(23)296 3604 y Fs(3.1)100 b(Instruction)33 b(Cac)m(he)51
b(.)e(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g
(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)143 b(24)296
3792 y(3.2)100 b(Data)31 b(Cac)m(he)79 b(.)50 b(.)g(.)g(.)f(.)h(.)g(.)g
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
g(.)f(.)h(.)g(.)g(.)g(.)g(.)143 b(28)150 4083 y Fp(4)90
b(Optimization)39 b(Algorithm)2157 b(31)296 4271 y Fs(4.1)100
b(Cac)m(he)34 b(Optimizations)70 b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)g(.)g
(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)
g(.)143 b(32)521 4459 y(4.1.1)111 b(Cac)m(he)34 b(Aw)m(are)f(F)-8
b(usion)86 b(.)50 b(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g
(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)143 b(32)521 4647
y(4.1.2)111 b(Execution)34 b(Scaling)41 b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)
g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g
(.)143 b(35)296 4836 y(4.2)100 b(Scalar)32 b(Replacemen)m(t)48
b(.)i(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g
(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)143 b(37)521
5024 y(4.2.1)111 b(Scalar)32 b(Replacemen)m(t)j(Example)100
b(.)49 b(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)
g(.)143 b(37)521 5212 y(4.2.2)111 b(Implications)34 b(for)e(the)h(Cac)m
(he)h(Aw)m(are)f(F)-8 b(usion)59 b(.)50 b(.)g(.)g(.)g(.)g(.)f(.)h(.)g
(.)g(.)g(.)g(.)143 b(38)521 5400 y(4.2.3)111 b(Implications)34
b(for)e(Unrolling)85 b(.)50 b(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g
(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)143 b(39)1926 5649
y(7)p eop
%%Page: 8 8
8 7 bop 296 100 a Fs(4.3)100 b(Optimized)34 b(Bu\013ering)f(of)f(Liv)m
(e)h(Items)41 b(.)50 b(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
(.)f(.)h(.)g(.)g(.)g(.)g(.)143 b(40)521 280 y(4.3.1)111
b(Mo)s(dulation)79 b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)143
b(41)521 461 y(4.3.2)111 b(Cop)m(y-Shift)39 b(.)49 b(.)h(.)g(.)g(.)g(.)
g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f
(.)h(.)g(.)g(.)g(.)g(.)143 b(42)521 641 y(4.3.3)111 b(Optimized)34
b(Cop)m(y-Shift)100 b(.)50 b(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)
g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)143 b(43)150
919 y Fp(5)90 b(Exp)s(erimen)m(tal)39 b(Ev)-6 b(aluation)2124
b(45)296 1100 y Fs(5.1)100 b(Ev)-5 b(aluation)32 b(of)h(Cac)m(he)h(Aw)m
(are)f(F)-8 b(usion,)33 b(Scaling)g(and)g(Scalar)f(Replacemen)m(t)65
b(.)143 b(47)296 1281 y(5.2)100 b(Ev)-5 b(aluation)32
b(of)h(Cop)m(y-Shift)g(and)g(Mo)s(dulation)e(.)50 b(.)g(.)g(.)g(.)g(.)g
(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)143 b(50)296 1461
y(5.3)100 b(Ev)-5 b(aluation)32 b(of)h(P)m(eek-Scaling)h(and)f(Cut-P)m
(eek)49 b(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g
(.)143 b(53)296 1642 y(5.4)100 b(Comparison)33 b(to)f(Cac)m(he)i(Una)m
(w)m(are)g(F)-8 b(ull)32 b(F)-8 b(usion)55 b(.)50 b(.)g(.)g(.)g(.)g(.)g
(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)143 b(56)296 1822
y(5.5)100 b(Ev)-5 b(aluation)26 b(of)g(Mo)s(di\014ed)i(Cac)m(he)g(Aw)m
(are)f(F)-8 b(usion)27 b(for)f(P)m(en)m(tium)i(3)e(and)h(Itanium)g(2)53
b(58)150 2100 y Fp(6)90 b(Related)38 b(W)-9 b(ork)2659
b(61)150 2379 y(7)90 b(Conclusion)2807 b(65)296 2559
y Fs(7.1)100 b(F)-8 b(uture)32 b(W)-8 b(ork)32 b(.)50
b(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)143
b(66)150 2837 y Fp(A)61 b(Exp)s(erimen)m(tal)39 b(Ev)-6
b(aluation)38 b(of)g(Execution)f(Scaling)h(Heuristic)601
b(67)1926 5649 y Fs(8)p eop
%%Page: 9 9
9 8 bop 150 894 a Fq(List)77 b(of)g(Figures)296 1413
y Fs(2-1)94 b(StreamIt)33 b(co)s(de)g(for)f(an)g(FIR)g(\014lter)102
b(.)50 b(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)
g(.)g(.)g(.)g(.)143 b(18)296 1600 y(2-2)94 b(Hierarc)m(hical)34
b(streams)f(in)g(StreamIt.)83 b(.)50 b(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g
(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)143 b(18)296
1788 y(2-3)94 b(Example)34 b(pip)s(eline)g(with)f(FIR)f(\014lter.)77
b(.)50 b(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)
g(.)g(.)g(.)143 b(19)296 1975 y(2-4)94 b(Example)34 b(pip)s(eline.)44
b(.)49 b(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)
g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)143 b(20)296
2162 y(2-5)94 b(C)33 b(co)s(de)g(for)f(running)h(the)g(steady)g(state)
57 b(.)50 b(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g
(.)g(.)g(.)143 b(20)296 2432 y(3-1)94 b(Impact)33 b(of)f(execution)i
(scaling)g(on)e(p)s(erformance.)73 b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)g(.)f
(.)h(.)g(.)g(.)g(.)g(.)143 b(27)296 2703 y(4-1)94 b(Outline)33
b(of)f(the)h(cac)m(he)h(a)m(w)m(are)f(fusion)g(algorithm)94
b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)143
b(34)296 2890 y(4-2)94 b(Our)32 b(heuristic)i(for)e(calculating)i(the)f
(scaling)g(factor.)k(.)50 b(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g
(.)143 b(35)296 3077 y(4-3)94 b(Example)34 b(StreamIt)f(co)s(de)f(.)50
b(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)143 b(37)296 3264 y(4-4)94
b(Generated)33 b(C)g(co)s(de)g(corresp)s(onding)g(to)f(the)h(fused)h
(\014lter)f(with)g(no)g(unrolling)25 b(.)143 b(38)296
3451 y(4-5)94 b(Generated)34 b(C)g(co)s(de)f(corresp)s(onding)i(to)e
(the)h(fused)g(\014lter)g(with)g(full)g(unrolling)521
3632 y(and)e(scalar)h(replacemen)m(t)62 b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)
g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g
(.)g(.)143 b(38)296 3902 y(5-1)94 b(Impact)33 b(on)f(a)m(v)m(erage)i
(execution)g(time)f(for)f(our)h(b)s(enc)m(hmark)h(suite.)49
b(.)h(.)g(.)g(.)g(.)g(.)143 b(47)296 4089 y(5-2)94 b(P)m(erformance)34
b(results)g(for)e(StrongARM)g(1110)39 b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)g
(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)143 b(49)296 4277
y(5-3)94 b(P)m(erformance)34 b(results)g(for)e(P)m(en)m(tium)i(3)i(.)50
b(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g
(.)g(.)143 b(49)296 4464 y(5-4)94 b(P)m(erformance)34
b(results)g(for)e(Itanium)h(2)56 b(.)50 b(.)g(.)f(.)h(.)g(.)g(.)g(.)g
(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)143 b(49)296
4651 y(5-5)94 b(Original)32 b(StreamIt)h(co)s(de)g(for)f(the)h
(bu\013er)g(test.)91 b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g
(.)g(.)g(.)g(.)143 b(51)296 4838 y(5-6)94 b(P)m(erformance)34
b(of)e(bu\013er)h(managemen)m(t)h(strategies)f(on)g(a)f(StrongARM)h
(1110)38 b(.)143 b(52)296 5026 y(5-7)94 b(P)m(erformance)34
b(of)e(bu\013er)h(managemen)m(t)h(strategies)f(on)g(a)f(P)m(en)m(tium)j
(3)f(.)50 b(.)g(.)g(.)g(.)143 b(52)296 5213 y(5-8)94
b(P)m(erformance)34 b(of)e(bu\013er)h(managemen)m(t)h(strategies)f(on)g
(an)f(Itanium)h(2)78 b(.)50 b(.)g(.)g(.)143 b(52)296
5400 y(5-9)94 b(P)m(erformance)34 b(of)e(p)s(eek-scaling)i(and)e(cut-p)
s(eek)i(on)e(a)h(StrongARM)f(1110)37 b(.)50 b(.)g(.)143
b(55)1926 5649 y(9)p eop
%%Page: 10 10
10 9 bop 296 100 a Fs(5-10)45 b(P)m(erformance)34 b(of)e(p)s
(eek-scaling)i(and)e(cut-p)s(eek)i(on)e(a)h(P)m(en)m(tium)h(3)g(.)49
b(.)h(.)g(.)g(.)g(.)g(.)143 b(55)296 280 y(5-11)45 b(P)m(erformance)34
b(of)e(p)s(eek-scaling)i(and)e(cut-p)s(eek)i(on)e(an)h(Itanium)g(2)76
b(.)50 b(.)g(.)g(.)g(.)g(.)143 b(55)296 461 y(5-12)45
b(Comparison)33 b(to)f(full)h(fusion)g(on)g(a)f(StrongARM)h(1110)j(.)50
b(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)143 b(57)296
641 y(5-13)45 b(Comparison)33 b(to)f(full)h(fusion)g(on)g(a)f(P)m(en)m
(tium)i(3)f(.)50 b(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g
(.)g(.)143 b(57)296 822 y(5-14)45 b(Comparison)33 b(to)f(full)h(fusion)
g(on)g(an)f(Itanium)h(2)76 b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h
(.)g(.)g(.)g(.)g(.)143 b(57)296 1002 y(5-15)45 b(P)m(erformance)26
b(of)f(cac)m(he)i(optimizations)f(after)f(instruction)h(limit)g(mo)s
(di\014cation)521 1183 y(on)32 b(a)g(P)m(en)m(tium)j(3)74
b(.)50 b(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)
g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)143
b(59)296 1364 y(5-16)45 b(P)m(erformance)26 b(of)f(cac)m(he)i
(optimizations)f(after)f(instruction)h(limit)g(mo)s(di\014cation)521
1544 y(on)32 b(an)h(Itanium)g(2)40 b(.)50 b(.)f(.)h(.)g(.)g(.)g(.)g(.)g
(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)
g(.)g(.)g(.)g(.)143 b(59)1901 5649 y(10)p eop
%%Page: 11 11
11 10 bop 150 888 a Fq(List)77 b(of)g(T)-19 b(ables)296
1401 y Fs(5.1)100 b(Ev)-5 b(aluation)32 b(b)s(enc)m(hmark)j(suite.)49
b(.)h(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f
(.)h(.)g(.)g(.)g(.)g(.)143 b(46)296 1582 y(5.2)100 b(The)23
b(b)s(est)g(p)s(erforming)f(bu\013er)h(managemen)m(t)g(strategies)g
(for)f(eac)m(h)h(b)s(enc)m(hmark-)521 1762 y(arc)m(hitecture)34
b(pair)e([along)h(with)g(sp)s(eedup)h(o)m(v)m(er)g(CAF+scaling+SR])96
b(.)50 b(.)g(.)g(.)143 b(53)1901 5649 y(11)p eop
%%Page: 12 12
12 11 bop 1901 5649 a Fs(12)p eop
%%Page: 13 13
13 12 bop 150 894 a Fq(Chapter)78 b(1)150 1439 y(In)-6
b(tro)6 b(duction)150 1958 y Fs(As)34 b(pro)s(cessor)h(sp)s(eeds)h(con)
m(tin)m(ue)f(to)f(increase,)h(the)g(memory)f(b)s(ottlenec)m(k)i
(remains)f(a)e(primary)150 2138 y(imp)s(edimen)m(t)46
b(to)d(attaining)h(p)s(erformance.)78 b(E\013ectiv)m(e)46
b(use)e(of)g(the)g(memory)h(hierarc)m(h)m(y)h(can)150
2319 y(result)34 b(in)f(signi\014can)m(t)h(p)s(erformance)f(gains.)44
b(Curren)m(t)34 b(practices)h(for)d(hiding)h(memory)h(latency)150
2499 y(are)45 b(in)m(v)-5 b(ariably)45 b(exp)s(ensiv)m(e)j(and)c
(complex.)81 b(F)-8 b(or)44 b(example,)49 b(sup)s(erscalar)d(pro)s
(cessors)g(resort)150 2680 y(to)39 b(out-of-order)f(execution)k(to)d
(hide)h(the)g(latency)h(of)e(cac)m(he)h(misses.)67 b(This)40
b(results)h(in)f(large)150 2861 y(p)s(o)m(w)m(er)g(exp)s(enditures)h
(and)e(also)g(increases)i(the)e(cost)h(of)e(the)i(system.)64
b(Compilers)41 b(ha)m(v)m(e)f(also)150 3041 y(emplo)m(y)m(ed)51
b(computation)e(and)g(data)f(reordering)i(to)e(impro)m(v)m(e)i(lo)s
(calit)m(y)-8 b(,)54 b(but)49 b(this)g(requires)150 3222
y(a)d(heroic)i(analysis)g(due)f(to)g(the)g(obscured)h(parallelism)g
(and)f(comm)m(unication)h(patterns)g(in)150 3402 y(traditional)32
b(languages)h(suc)m(h)h(as)f(C.)296 3589 y(F)-8 b(or)39
b(p)s(erformance-critical)h(programs,)h(the)f(complexit)m(y)i
(inevitably)f(propagates)e(all)h(the)150 3769 y(w)m(a)m(y)d(to)f(the)g
(application)g(dev)m(elop)s(er.)55 b(Programs)37 b(are)e(written)i(to)f
(explicitly)i(manage)e(paral-)150 3950 y(lelism)f(and)e(to)g(reorder)h
(the)g(computation)f(so)h(that)f(the)h(instruction)g(and)g(data)e(w)m
(orking)j(sets)150 4130 y(\014t)28 b(within)g(the)g(cac)m(he.)43
b(F)-8 b(or)27 b(example,)j(the)e(inputs)g(and)g(outputs)g(of)f(a)h
(pro)s(cedure)g(migh)m(t)g(b)s(e)g(ar-)150 4311 y(ra)m(ys)g(that)f(are)
g(sp)s(eci\014cally)i(designed)g(to)e(\014t)g(within)h(the)g(data)f
(cac)m(he)h(on)f(a)g(giv)m(en)h(arc)m(hitecture;)150
4491 y(lo)s(op)35 b(b)s(o)s(dies)g(are)h(written)g(at)f(a)g(lev)m(el)i
(of)e(gran)m(ularit)m(y)h(that)f(matc)m(hes)h(the)g(instruction)h(cac)m
(he.)150 4672 y(While)f(man)m(ual)g(tuning)g(can)g(b)s(e)g(e\013ectiv)m
(e,)i(the)e(end)g(solutions)g(are)g(not)f(p)s(ortable.)52
b(They)37 b(are)150 4853 y(also)c(exceedingly)i(di\016cult)f(to)e
(understand,)i(mo)s(dify)-8 b(,)33 b(and)f(debug.)296
5039 y(The)j(recen)m(t)g(emergence)g(of)e(streaming)i(applications)f
(presen)m(ts)i(an)e(opp)s(ortunit)m(y)g(to)f(miti-)150
5219 y(gate)g(these)i(problems)g(using)f(simple)h(transformations)f(in)
g(the)g(compiler.)47 b(Stream)34 b(programs)150 5400
y(are)24 b(ric)m(h)h(with)g(parallelism)g(and)f(regular)g(comm)m
(unication)h(patterns)g(that)f(can)g(b)s(e)h(exploited)g(b)m(y)1901
5649 y(13)p eop
%%Page: 14 14
14 13 bop 150 100 a Fs(the)24 b(compiler)h(to)e(automatically)i(tune)f
(memory)h(p)s(erformance.)41 b(Streaming)25 b(co)s(des)f(encompass)150
280 y(a)41 b(broad)f(sp)s(ectrum)j(of)d(applications,)k(including)e(em)
m(b)s(edded)i(comm)m(unications)f(pro)s(cessing,)150
461 y(m)m(ultimedia)30 b(enco)s(ding)g(and)f(pla)m(ybac)m(k,)j
(compression,)f(and)e(encryption.)44 b(They)30 b(also)f(range)g(to)150
641 y(serv)m(er)35 b(applications,)g(suc)m(h)g(as)e(HDTV)h(editing)g
(and)f(h)m(yp)s(er-sp)s(ectral)i(imaging.)46 b(It)33
b(is)h(natural)150 822 y(to)42 b(express)i(a)e(stream)h(program)f(as)g
(a)g(high-lev)m(el)i(graph)e(of)g(indep)s(enden)m(t)i(comp)s(onen)m
(ts,)i(or)150 1002 y Fo(actors)p Fs(.)d(Actors)32 b(comm)m(unicate)i
(using)e(explicit)h(FIF)m(O)f(c)m(hannels)h(and)f(can)g(execute)h
(whenev)m(er)150 1183 y(a)i(su\016cien)m(t)j(n)m(um)m(b)s(er)e(of)f
(data)g(items)i(are)e(a)m(v)-5 b(ailable)36 b(on)g(their)f(input)h(c)m
(hannels.)54 b(In)36 b(a)f(stream)150 1364 y(graph,)i(actors)g(can)f(b)
s(e)h(freely)g(com)m(bined)h(and)f(reordered)g(to)f(impro)m(v)m(e)i
(cac)m(hing)g(b)s(eha)m(vior)f(as)150 1544 y(long)d(as)g(there)h(are)e
(su\016cien)m(t)k(inputs)e(to)e(complete)i(eac)m(h)g(execution.)50
b(Suc)m(h)35 b(transformations)150 1725 y(can)29 b(serv)m(e)i(to)e
(automate)g(tedious)h(approac)m(hes)g(that)f(are)g(p)s(erformed)g(man)m
(ually)i(using)e(to)s(da)m(y's)150 1905 y(languages;)h(they)f(are)f(to)
s(o)f(complex)j(to)e(p)s(erform)g(automatically)h(in)f(hardw)m(are)h
(or)f(in)g(the)h(most)150 2086 y(aggressiv)m(e)34 b(of)e(C)h
(compilers.)150 2565 y Fw(1.1)161 b(Ov)l(erview)150 2863
y Fs(A)29 b(na)-11 b(\177)-38 b(\020v)m(e)30 b(w)m(a)m(y)g(to)e
(execute)j(a)d(stream)i(program)e(on)h(a)f(unipro)s(cessor)i(is)g(to)e
(execute)j(all)d(program)150 3044 y(comp)s(onen)m(ts)d(in)e(some)h
(precomputed)h(order.)40 b(Ho)m(w)m(ev)m(er,)28 b(the)23
b(size)i(of)d(the)i(instruction)g(fo)s(otprin)m(t)150
3224 y(of)31 b(the)i(whole)f(program)g(ma)m(y)g(not)g(\014t)g(in)m(to)g
(the)g(instruction)h(cac)m(he.)45 b(Th)m(us)33 b(w)m(e)g(need)g(to)f
(divide)150 3405 y(the)j(stream)f(program)g(in)m(to)h(parts)f(suc)m(h)i
(that)e(eac)m(h)h(part)f(has)g(an)g(instruction)h(fo)s(otprin)m(t)f
(that)150 3585 y(\014ts)k(in)m(to)f(the)h(instruction)g(cac)m(he;)j(w)m
(e)d(then)g(scale)g(the)g(execution)h(of)e(the)g(parts)h(to)e(amortize)
150 3766 y(the)k(instruction)h(and)f(data)f(cac)m(he)i(misses)h(asso)s
(ciated)e(with)h(loading)e(the)i(instructions)g(and)150
3946 y(state)f(v)-5 b(ariables)40 b(asso)s(ciated)h(with)f(eac)m(h)h
(part)e(in)m(to)h(the)g(instruction)h(and)f(data)f(cac)m(he.)66
b(The)150 4127 y(execution)33 b(scaling)e(needs)i(to)d(b)s(e)h
(judicious)h(so)f(that)g(the)g(data)g(pro)s(duced)h(b)m(y)g(a)e(scaled)
i(stream)150 4308 y(program)g(part)h(do)s(es)g(not)f(exceed)j(the)e
(data)f(cac)m(he.)296 4497 y(This)42 b(thesis)g(presen)m(ts)g(four)e
(memory)i(optimizations)f(for)f(stream)h(programs:)59
b Fo(\(i\))40 b Fs(cac)m(he)150 4678 y(a)m(w)m(are)27
b(fusion,)h Fo(\(ii\))d Fs(execution)j(scaling,)g Fo(\(iii\))e
Fs(scalar)g(replacemen)m(t,)k(and)c Fo(\(iv\))f Fs(optimized)i
(bu\013er)150 4858 y(managemen)m(t.)43 b(This)30 b(thesis)f(also)f
(presen)m(ts)j(a)d(simple)h(quan)m(titativ)m(e)h(mo)s(del)f(of)e(cac)m
(hing)i(b)s(eha)m(v-)150 5039 y(ior)j(for)g(streaming)i(w)m(orkloads,)f
(pro)m(viding)h(a)e(foundation)g(to)h(reason)g(ab)s(out)f(the)h
(transforma-)150 5219 y(tions)43 b(that)f(impro)m(v)m(e)i(cac)m(he)g
(usage.)73 b(W)-8 b(ork)43 b(in)f(this)h(thesis)h(is)f(done)g(in)f(the)
h(con)m(text)h(of)e(the)150 5400 y(Sync)m(hronous)35
b(Data\015o)m(w)e([18)o(])g(mo)s(del)g(of)g(computation,)h(in)f(whic)m
(h)h(eac)m(h)g(actor)f(in)g(the)g(stream)1901 5649 y(14)p
eop
%%Page: 15 15
15 14 bop 150 100 a Fs(graph)30 b(has)g(a)g(kno)m(wn)h(input)f(and)g
(output)g(rate.)43 b(This)31 b(is)g(a)e(p)s(opular)h(mo)s(del)g(for)g
(a)f(broad)h(range)150 280 y(of)i(signal)h(pro)s(cessing)h(and)f(em)m
(b)s(edded)h(applications.)296 474 y(Cac)m(he)k(a)m(w)m(are)g(fusion)f
(com)m(bines)h(adjacen)m(t)g(actors)e(in)m(to)h(a)g(single)g(function.)
56 b(This)38 b(allo)m(ws)150 654 y(the)33 b(compiler)h(to)e(optimize)i
(across)f(actor)g(b)s(oundaries.)44 b(The)34 b(fusion)f(algorithm)g
(presen)m(ted)i(in)150 835 y(this)f(thesis)h(is)f(cac)m(he)h(a)m(w)m
(are)f(in)g(that)f(it)g(nev)m(er)j(fuses)e(a)f(pair)h(of)f(actors)h
(that)f(will)h(result)g(in)g(an)150 1015 y(o)m(v)m(er\015o)m(w)i(of)e
(the)h(data)f(or)g(the)h(instruction)h(cac)m(he.)51 b(Ho)m(w)m(ev)m
(er,)37 b(our)d(exp)s(erimen)m(tal)j(ev)-5 b(aluation)150
1196 y(will)31 b(sho)m(w)h(that)e(on)g(some)h(arc)m(hitectures)i(w)m(e)
e(can)g(relax)g(the)g(instruction)g(cac)m(he)h(constrain)m(t)f(to)150
1376 y(allo)m(w)i(more)g(aggressiv)m(e)h(optimization)f(across)h(actor)
e(b)s(oundaries.)296 1570 y(Execution)41 b(scaling)f(is)g(a)e
(transformation)h(that)g(impro)m(v)m(es)i(instruction)g(lo)s(calit)m(y)
e(b)m(y)h(exe-)150 1750 y(cuting)c(eac)m(h)g(fused)g(actor)e(in)i(the)f
(stream)h(graph)f(m)m(ultiple)i(times)f(b)s(efore)f(mo)m(ving)h(on)f
(to)g(the)150 1931 y(next)h(actor.)49 b(Since)36 b(an)f(actor)f(that)h
(has)g(b)s(een)g(pro)s(duced)h(using)f(cac)m(he)h(a)m(w)m(are)f(fusion)
h(usually)150 2111 y(\014ts)j(within)h(the)f(cac)m(he,)i(the)f(rep)s
(eated)f(executions)i(serv)m(e)f(to)f(amortize)g(the)g(cost)g(of)f
(loading)150 2292 y(the)31 b(actors)g(instruction)h(stream)g(and)e
(state)i(from)e(o\013-c)m(hip)h(memory)-8 b(.)44 b(Ho)m(w)m(ev)m(er,)34
b(as)c(the)i(cac)m(he)150 2473 y(mo)s(del)d(will)g(sho)m(w,)i(actors)e
(should)h(not)e(b)s(e)h(scaled)h(excessiv)m(ely)-8 b(,)34
b(as)29 b(their)g(outputs)g(will)g(ev)m(en)m(tu-)150
2653 y(ally)h(o)m(v)m(er\015o)m(w)g(the)g(data)f(cac)m(he.)43
b(This)31 b(thesis)f(presen)m(ts)i(a)c(simple)j(and)e(e\013ectiv)m(e)j
(algorithm)c(for)150 2834 y(calculating)33 b(a)g(scaling)h(factor)e
(that)h(resp)s(ects)h(b)s(oth)f(instruction)h(and)f(data)f(constrain)m
(ts.)46 b(The)150 3014 y(cac)m(he)30 b(a)m(w)m(are)g(fusion)g(in)f
(conjunction)h(with)g(execution)g(scaling)g(represen)m(t)h(a)e
Fo(uni\014e)-5 b(d)31 b(appr)-5 b(o)g(ach)150 3195 y
Fs(that)32 b(sim)m(ultaneously)k(considers)e(the)f(instruction)h(and)e
(data)h(w)m(orking)g(sets.)296 3388 y(As)g(actors)g(are)f(fused)h
(together,)g(new)g(bu\013er)g(managemen)m(t)h(strategies)f(b)s(ecome)h
(p)s(ossible.)150 3569 y(The)j(most)g(aggressiv)m(e)h(of)e(these,)i
(termed)g(scalar)e(replacemen)m(t,)k(serv)m(es)e(to)e(replace)i(an)e
(arra)m(y)150 3749 y(with)31 b(a)g(series)h(of)f(lo)s(cal)f(scalar)i(v)
-5 b(ariables.)43 b(Unlik)m(e)33 b(arra)m(y)e(references,)i(scalar)e(v)
-5 b(ariables)32 b(can)f(b)s(e)150 3930 y(register)i(allo)s(cated,)g
(leading)g(to)f(large)h(p)s(erformance)g(gains.)296 4123
y(W)-8 b(e)25 b(also)f(presen)m(t)i(sev)m(eral)g(optimized)g(bu\013er)f
(managemen)m(t)g(strategies)g(for)f(FIF)m(O)g(c)m(hannels)150
4304 y(that)43 b(alw)m(a)m(ys)h(ha)m(v)m(e)h(to)d(retain)i(a)e(set)i
(of)f(liv)m(e)h(items.)76 b(W)-8 b(e)43 b(compare)h(t)m(w)m(o)g
(implemen)m(tations:)150 4484 y(using)h(a)e(circular)i(bu\013er,)i(and)
d(p)s(erio)s(dically)h(shifting)g(the)f(liv)m(e)h(items)g(to)f(the)g
(start)g(of)g(the)150 4665 y(bu\013er.)52 b(Our)36 b(exp)s(erimen)m
(tal)h(ev)-5 b(aluation)35 b(suggests)i(that)e(shifting)h(the)g(liv)m
(e)g(items)h(is)f(the)f(b)s(est)150 4846 y(implemen)m(tation)f(if)f
(the)g(shifting)g(is)g(p)s(erformed)g(infrequen)m(tly)-8
b(.)296 5039 y(The)44 b(memory)f(optimizations)g(presen)m(ted)i(in)d
(this)h(thesis)h(are)e(implemen)m(ted)j(as)d(part)g(of)150
5219 y(StreamIt,)c(a)e(language)g(and)h(compiler)g(infrastructure)h
(for)e(stream)h(programming)f([27].)55 b(W)-8 b(e)150
5400 y(ev)j(aluate)23 b(the)f(optimizations)h(on)g(three)g(arc)m
(hitectures.)42 b(The)23 b(StrongARM)f(1110)f(represen)m(ts)k(an)1901
5649 y(15)p eop
%%Page: 16 16
16 15 bop 150 100 a Fs(em)m(b)s(edded)32 b(system)g(without)f(a)e
(secondary)j(cac)m(he,)g(the)e(P)m(en)m(tium)i(3)e(represen)m(ts)i(a)e
(sup)s(erscalar)150 280 y(pro)s(cessor)i(and)e(the)h(Itanium)g(2)g
(represen)m(ts)i(a)d(VLIW)h(pro)s(cessor.)44 b(W)-8 b(e)31
b(\014nd)g(that)f(cac)m(he)i(a)m(w)m(are)150 461 y(fusion,)i(scalar)f
(replacemen)m(t,)j(execution)f(scaling)e(and)h(optimized)g(bu\013er)g
(managemen)m(t)g(eac)m(h)150 641 y(o\013er)d(signi\014can)m(t)i(p)s
(erformance)f(gains,)g(and)f(the)h(most)g(consisten)m(t)h(sp)s(eedups)g
(result)g(when)f(all)150 822 y(are)43 b(applied)h(together.)76
b(Compared)44 b(to)f(unoptimized)i(StreamIt)f(co)s(de,)i(the)e
(optimizations)150 1002 y(presen)m(ted)30 b(in)e(this)g(thesis)h(yield)
g(a)f(257\045)f(sp)s(eedup)i(on)f(the)g(StrongARM,)g(a)f(154\045)h(sp)s
(eedup)h(on)150 1183 y(the)g(P)m(en)m(tium)h(3,)e(and)h(a)f(152\045)f
(sp)s(eedup)j(on)e(Itanium)h(2.)41 b(These)30 b(n)m(um)m(b)s(ers)g
(represen)m(t)g(a)m(v)m(erages)150 1364 y(o)m(v)m(er)k(our)e(streaming)
h(b)s(enc)m(hmark)i(suite.)150 1788 y Fw(1.2)161 b(Organization)150
2067 y Fs(This)38 b(thesis)h(is)f(organized)g(as)f(follo)m(ws.)58
b(Chapter)38 b(2)f(giv)m(es)i(bac)m(kground)f(information)f(on)h(the)
150 2248 y(StreamIt)28 b(language.)42 b(Chapter)28 b(3)f(la)m(ys)h(the)
g(foundation)f(for)g(the)h(cac)m(he)g(optimizations)h(b)m(y)f(pre-)150
2428 y(sen)m(ting)f(a)f(quan)m(titativ)m(e)i(mo)s(del)e(of)g(cac)m
(hing)h(b)s(eha)m(vior)f(for)g(an)m(y)h(sequence)h(of)e(actor)g
(executions.)150 2609 y(Chapter)i(4)f(describ)s(es)i(cac)m(he)f(a)m(w)m
(are)g(fusion,)h(execution)g(scaling,)g(scalar)e(replacemen)m(t)i(and)f
(op-)150 2789 y(timized)33 b(bu\013er)g(managemen)m(t)g(in)f(detail.)44
b(Chapter)33 b(5)e(ev)-5 b(aluates)33 b(optimizations)g(prop)s(osed)g
(in)150 2970 y(this)40 b(thesis)g(as)g(they)g(w)m(ere)g(implemen)m(ted)
i(in)d(the)h(StreamIt)f(compiler.)64 b(Finally)-8 b(,)41
b(Chapter)f(6)150 3150 y(describ)s(es)35 b(related)e(w)m(ork)g(and)g
(Chapter)g(7)g(concludes)h(the)f(thesis.)1901 5649 y(16)p
eop
%%Page: 17 17
17 16 bop 150 897 a Fq(Chapter)78 b(2)150 1445 y(Bac)-6
b(kground)150 1966 y Fs(In)32 b(this)h(c)m(hapter)g(w)m(e)g(presen)m(t)
g(StreamIt,)g(a)e(high)h(lev)m(el)i(stream)f(programming)e(language)h
([27].)150 2441 y Fw(2.1)161 b(StreamIt)150 2737 y Fs(StreamIt)43
b(is)g(an)g(arc)m(hitecture)h(indep)s(enden)m(t)h(language)d(that)h(is)
g(designed)h(for)e(stream)i(pro-)150 2918 y(gramming.)57
b(In)38 b(StreamIt,)g(programs)g(are)f(represen)m(ted)i(as)f(graphs)f
(where)h(no)s(des)g(represen)m(t)150 3098 y(computation)i(and)g(edges)h
(represen)m(t)h(FIF)m(O-ordered)d(comm)m(unication)j(of)d(data)h(o)m(v)
m(er)g(tap)s(es.)150 3279 y(See)33 b([27],)g([10)o(],)g([28],)f([17])h
(and)f([14])h(for)f(more)h(information)f(and)h(researc)m(h)h(ab)s(out)e
(StreamIt.)150 3694 y Fr(2.1.1)136 b(Hierarc)l(hical)47
b(Streams)150 3955 y Fs(In)i(StreamIt,)j(the)d(basic)g(programmable)g
(unit)f(\(i.e.,)53 b(an)48 b(actor\))g(is)h(a)f Fo(\014lter)p
Fs(.)90 b(Eac)m(h)49 b(\014lter)150 4136 y(con)m(tains)36
b(a)f(sp)s(ecial)i(function)e(\(called)h Fn(work)h Fs(function\))e
(that)h(executes)h(atomically)-8 b(,)37 b(p)s(opping)150
4317 y(\(i.e.,)f(reading\))f(a)f(\014xed)i(n)m(um)m(b)s(er)g(of)e
(items)i(from)e(the)h(\014lter's)h(input)f(tap)s(e)g(and)g(pushing)g
(\(i.e.,)150 4497 y(writing\))i(a)f(\014xed)i(n)m(um)m(b)s(er)g(of)e
(items)i(to)e(the)h(\014lter's)h(output)f(tap)s(e.)55
b(A)37 b(\014lter)g(ma)m(y)g(also)g Fn(peek)150 4678
y Fs(at)c(a)g(giv)m(en)i(index)g(on)e(its)h(input)h(tap)s(e)e(without)h
(consuming)h(the)f(item;)h(this)f(mak)m(es)h(it)e(simple)150
4858 y(to)h(represen)m(t)i(computation)e(o)m(v)m(er)i(a)d(sliding)i
(windo)m(w.)50 b(The)35 b Fn(push)p Fs(,)h Fn(pop)p Fs(,)f(and)f
Fn(peek)h Fs(rates)g(are)150 5039 y(declared)j(as)f(part)f(of)g(the)i
(w)m(ork)f(function,)i(thereb)m(y)f(enabling)f(the)g(compiler)h(to)e
(construct)i(a)150 5219 y(static)e(sc)m(hedule)i(of)d(\014lter)h
(executions.)55 b(An)36 b(example)h(implemen)m(tation)g(of)e(a)g
(Finite)h(Impulse)150 5400 y(Resp)s(onse)e(\(FIR\))e(\014lter)h(app)s
(ears)g(in)g(Figure)f(2-1.)1901 5649 y(17)p eop
%%Page: 18 18
18 17 bop 406 3 3089 4 v 406 1253 4 1250 v 434 1228 a
@beginspecial 81 @llx 567 @lly 441 @urx 711 @ury 3600
@rwi @setspecial
%%BeginDocument: code1.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Microsoft Word - code-fig.doc)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050505140453-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 81 567 441 711
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
81 567 moveto 441 567 lineto 441 711 lineto 81 711 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: file Pscript_CFF PSVER
userdict/ct_CffDict 6 dict put ct_CffDict begin/F0Subr{systemdict/internaldict
known{1183615869 systemdict/internaldict get exec/FlxProc known{save true}{
false}ifelse}{userdict/internaldict known not{userdict/internaldict{count 0 eq
{/internaldict errordict/invalidaccess get exec}if dup type/integertype ne{
/internaldict errordict/invalidaccess get exec}if dup 1183615869 eq{pop 0}{
/internaldict errordict/invalidaccess get exec}ifelse}dup 14 get 1 25 dict put
bind executeonly put}if 1183615869 userdict/internaldict get exec/FlxProc
known{save true}{false}ifelse}ifelse[systemdict/internaldict known not{100
dict/begin cvx/mtx matrix/def cvx}if systemdict/currentpacking known{
currentpacking true setpacking}if{systemdict/internaldict known{1183615869
systemdict/internaldict get exec dup/$FlxDict known not{dup dup length exch
maxlength eq{pop userdict dup/$FlxDict known not{100 dict begin/mtx matrix def
dup/$FlxDict currentdict put end}if}{100 dict begin/mtx matrix def dup
/$FlxDict currentdict put end}ifelse}if/$FlxDict get begin}if grestore/exdef{
exch def}def/dmin exch abs 100 div def/epX exdef/epY exdef/c4y2 exdef/c4x2
exdef/c4y1 exdef/c4x1 exdef/c4y0 exdef/c4x0 exdef/c3y2 exdef/c3x2 exdef/c3y1
exdef/c3x1 exdef/c3y0 exdef/c3x0 exdef/c1y2 exdef/c1x2 exdef/c2x2 c4x2 def
/c2y2 c4y2 def/yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def/PickCoords{{
c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2}{c3x0 c3y0 c3x1
c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2}ifelse/y5 exdef/x5 exdef/y4 exdef
/x4 exdef/y3 exdef/x3 exdef/y2 exdef/x2 exdef/y1 exdef/x1 exdef/y0 exdef/x0
exdef}def mtx currentmatrix pop mtx 0 get abs 1e-05 lt mtx 3 get abs 1e-05 lt
or{/flipXY -1 def}{mtx 1 get abs 1e-05 lt mtx 2 get abs 1e-05 lt or{/flipXY 1
def}{/flipXY 0 def}ifelse}ifelse/erosion 1 def systemdict/internaldict known{
1183615869 systemdict/internaldict get exec dup/erosion known{/erosion get
/erosion exch def}{pop}ifelse}if yflag{flipXY 0 eq c3y2 c4y2 eq or{false
PickCoords}{/shrink c3y2 c4y2 eq{0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs}ifelse
def/yshrink{c4y2 sub shrink mul c4y2 add}def/c1y0 c3y0 yshrink def/c1y1 c3y1
yshrink def/c2y0 c4y0 yshrink def/c2y1 c4y1 yshrink def/c1x0 c3x0 def/c1x1
c3x1 def/c2x0 c4x0 def/c2x1 c4x1 def/dY 0 c3y2 c1y2 sub round dtransform
flipXY 1 eq{exch}if pop abs def dY dmin lt PickCoords y2 c1y2 sub abs .001 gt{
c1x2 c1y2 transform flipXY 1 eq{exch}if/cx exch def/cy exch def/dY 0 y2 c1y2
sub round dtransform flipXY 1 eq{exch}if pop def dY round dup 0 ne{/dY exdef}{
pop dY 0 lt{-1}{1}ifelse/dY exdef}ifelse/erode PaintType 2 ne erosion .5 ge
and def erode{/cy cy .5 sub def}if/ey cy dY add def/ey ey ceiling ey sub ey
floor add def erode{/ey ey .5 add def}if ey cx flipXY 1 eq{exch}if itransform
exch pop y2 sub/eShift exch def/y1 y1 eShift add def/y2 y2 eShift add def/y3
y3 eShift add def}if}ifelse}{flipXY 0 eq c3x2 c4x2 eq or{false PickCoords}{
/shrink c3x2 c4x2 eq{0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs}ifelse def/xshrink
{c4x2 sub shrink mul c4x2 add}def/c1x0 c3x0 xshrink def/c1x1 c3x1 xshrink def
/c2x0 c4x0 xshrink def/c2x1 c4x1 xshrink def/c1y0 c3y0 def/c1y1 c3y1 def/c2y0
c4y0 def/c2y1 c4y1 def/dX c3x2 c1x2 sub round 0 dtransform flipXY -1 eq{exch}
if pop abs def dX dmin lt PickCoords x2 c1x2 sub abs .001 gt{c1x2 c1y2
transform flipXY -1 eq{exch}if/cy exch def/cx exch def/dX x2 c1x2 sub round 0
dtransform flipXY -1 eq{exch}if pop def dX round dup 0 ne{/dX exdef}{pop dX 0
lt{-1}{1}ifelse/dX exdef}ifelse/erode PaintType 2 ne erosion .5 ge and def
erode{/cx cx .5 sub def}if/ex cx dX add def/ex ex ceiling ex sub ex floor add
def erode{/ex ex .5 add def}if ex cy flipXY -1 eq{exch}if itransform pop x2
sub/eShift exch def/x1 x1 eShift add def/x2 x2 eShift add def/x3 x3 eShift add
def}if}ifelse}ifelse x2 x5 eq y2 y5 eq or{x5 y5 lineto}{x0 y0 x1 y1 x2 y2
curveto x3 y3 x4 y4 x5 y5 curveto}ifelse epY epX}systemdict/currentpacking
known{exch setpacking}if/exec cvx/end cvx]cvx executeonly exch{pop true exch
restore}{systemdict/internaldict known not{1183615869 userdict/internaldict
get exec exch/FlxProc exch put true}{1183615869 systemdict/internaldict get
exec dup length exch maxlength eq{false}{1183615869 systemdict/internaldict
get exec exch/FlxProc exch put true}ifelse}ifelse}ifelse{systemdict
/internaldict known{1183615869 systemdict/internaldict get exec/FlxProc get
exec}{1183615869 userdict/internaldict get exec/FlxProc get exec}ifelse}if}
executeonly def/F1Subr{gsave currentpoint newpath moveto}bind def/F2Subr{
currentpoint grestore gsave currentpoint newpath moveto}bind def/HSSubr{
systemdict/internaldict known not{pop 3}{1183615869 systemdict/internaldict
get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck
get exec}{pop 3}ifelse}ifelse}ifelse}bind def end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Courier-Bold
[/N15/Courier-Bold 1 TZ
%%IncludeResource Courier
[/N11/Courier 1 TZ
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
81 567 359 143 rectclip
/N13 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font OOLJOM+TimesNewRoman
11 dict begin
/FontName /OOLJOM+TimesNewRoman def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b8302fd45b0609d6bde5a48b0240d44d91aabd11b7ee50303a
812fda6ed97443c437b8d3bea589> ND 
/space 
<10bf317079c757bf91> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/OOLJOM+TimesNewRoman findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 160 /space put
pop
%%EndResource
[/N10/OOLJOM+TimesNewRoman 1 TZ
false setSA
0 0 0 setrgbcolor
90 697.68 m
/N11 10.02 Tf
(float->float filter FIRFilter \(int N, float[] weights\) { )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 ] pdfxs
102 686.58 m
/N15 10.02 Tf
(// declare work function along with I/O rates)
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 ] pdfxs
90 675 m
/N11 10.02 Tf
(  work push 1 pop 1 peek N { )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
90 663.72 m
(    float sum = 0; )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
90 652.381 m
(    for \(int i = 0; i < N; i++\) { )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 ] pdfxs
126 641.28 m
/N15 10.02 Tf
(// examine items on the input queue )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 ] pdfxs
90 629.7 m
/N11 10.02 Tf
(      sum += peek\(i\) * weights[i]; )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 ] pdfxs
90 618.361 m
(    } )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
90 607.321 m
(    pop\(\); )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
] pdfxs
156 607.321 m
/N15 10.02 Tf
(// remove an item from the input queue)
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
90.0001 595.981 m
/N11 10.02 Tf
(    push\(sum\); )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 ] pdfxs
180 595.981 m
/N15 10.02 Tf
(// enqueue the sum onto the output queue)
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
90.0001 584.401 m
/N11 10.02 Tf
(  } )
[5.99983 5.99983 5.99983 5.99983 ] pdfxs
90.0001 573.061 m
(}) show
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%DocumentNeededResources:
%%+ font Courier
%%+ font Courier-Bold
%%EOF

%%EndDocument
 @endspecial 3491 1253 V 406 1256 3089 4 v 1035 1390
a Fs(Figure)32 b(2-1:)43 b(StreamIt)33 b(co)s(de)g(for)f(an)g(FIR)h
(\014lter)p 869 1702 2162 4 v 869 2781 4 1079 v 930 2756
a @beginspecial 71 @llx 618 @lly 297 @urx 732 @ury 2448
@rwi @setspecial
%%BeginDocument: constructs-eg.eps
%!PS-Adobe-3.0 EPSF-3.0

%%Title: (main.dvi)

%%Version: 1 4

%%Creator: (dvips\(k\) 5.92b Copyright 2002 Radical Eye Software)

%%CreationDate: (D:20041213151354-05'00')

%%DocumentData: Clean7Bit

%%BoundingBox: 71 618 297 732

%%Pages: 0

%%DocumentProcessColors: Black

%%DocumentNeededResources: (atend)

%%DocumentSuppliedResources:

%%+ procset (Adobe Acrobat - PDF operators) 1.2 0

%%+ procset (Adobe Acrobat - type operators) 1.2 0

%%+ procset (Adobe Acrobat - general image support) 1.2 0

%%+ procset (Adobe Acrobat - monochrome image support) 1.2 0

%%+ procset (Adobe Acrobat - color image support) 1.2 0

%%+ procset (Adobe Acrobat - indexed color image support) 1.2 0

%%EndComments

71 618 moveto 297 618 lineto 297 732 lineto 71 732 lineto closepath clip newpath

%%BeginProlog

%%EndProlog

%%BeginSetup

%%BeginResource: file Pscript_CFF PSVER

userdict/ct_CffDict 6 dict put ct_CffDict begin/F0Subr{systemdict/internaldict

known{1183615869 systemdict/internaldict get exec/FlxProc known{save true}{

false}ifelse}{userdict/internaldict known not{userdict/internaldict{count 0 eq

{/internaldict errordict/invalidaccess get exec}if dup type/integertype ne{

/internaldict errordict/invalidaccess get exec}if dup 1183615869 eq{pop 0}{

/internaldict errordict/invalidaccess get exec}ifelse}dup 14 get 1 25 dict put

bind executeonly put}if 1183615869 userdict/internaldict get exec/FlxProc

known{save true}{false}ifelse}ifelse[systemdict/internaldict known not{100

dict/begin cvx/mtx matrix/def cvx}if systemdict/currentpacking known{

currentpacking true setpacking}if{systemdict/internaldict known{1183615869

systemdict/internaldict get exec dup/$FlxDict known not{dup dup length exch

maxlength eq{pop userdict dup/$FlxDict known not{100 dict begin/mtx matrix def

dup/$FlxDict currentdict put end}if}{100 dict begin/mtx matrix def dup

/$FlxDict currentdict put end}ifelse}if/$FlxDict get begin}if grestore/exdef{

exch def}def/dmin exch abs 100 div def/epX exdef/epY exdef/c4y2 exdef/c4x2

exdef/c4y1 exdef/c4x1 exdef/c4y0 exdef/c4x0 exdef/c3y2 exdef/c3x2 exdef/c3y1

exdef/c3x1 exdef/c3y0 exdef/c3x0 exdef/c1y2 exdef/c1x2 exdef/c2x2 c4x2 def

/c2y2 c4y2 def/yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def/PickCoords{{

c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2}{c3x0 c3y0 c3x1

c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2}ifelse/y5 exdef/x5 exdef/y4 exdef

/x4 exdef/y3 exdef/x3 exdef/y2 exdef/x2 exdef/y1 exdef/x1 exdef/y0 exdef/x0

exdef}def mtx currentmatrix pop mtx 0 get abs 1e-05 lt mtx 3 get abs 1e-05 lt

or{/flipXY -1 def}{mtx 1 get abs 1e-05 lt mtx 2 get abs 1e-05 lt or{/flipXY 1

def}{/flipXY 0 def}ifelse}ifelse/erosion 1 def systemdict/internaldict known{

1183615869 systemdict/internaldict get exec dup/erosion known{/erosion get

/erosion exch def}{pop}ifelse}if yflag{flipXY 0 eq c3y2 c4y2 eq or{false

PickCoords}{/shrink c3y2 c4y2 eq{0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs}ifelse

def/yshrink{c4y2 sub shrink mul c4y2 add}def/c1y0 c3y0 yshrink def/c1y1 c3y1

yshrink def/c2y0 c4y0 yshrink def/c2y1 c4y1 yshrink def/c1x0 c3x0 def/c1x1

c3x1 def/c2x0 c4x0 def/c2x1 c4x1 def/dY 0 c3y2 c1y2 sub round dtransform

flipXY 1 eq{exch}if pop abs def dY dmin lt PickCoords y2 c1y2 sub abs .001 gt{

c1x2 c1y2 transform flipXY 1 eq{exch}if/cx exch def/cy exch def/dY 0 y2 c1y2

sub round dtransform flipXY 1 eq{exch}if pop def dY round dup 0 ne{/dY exdef}{

pop dY 0 lt{-1}{1}ifelse/dY exdef}ifelse/erode PaintType 2 ne erosion .5 ge

and def erode{/cy cy .5 sub def}if/ey cy dY add def/ey ey ceiling ey sub ey

floor add def erode{/ey ey .5 add def}if ey cx flipXY 1 eq{exch}if itransform

exch pop y2 sub/eShift exch def/y1 y1 eShift add def/y2 y2 eShift add def/y3

y3 eShift add def}if}ifelse}{flipXY 0 eq c3x2 c4x2 eq or{false PickCoords}{

/shrink c3x2 c4x2 eq{0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs}ifelse def/xshrink

{c4x2 sub shrink mul c4x2 add}def/c1x0 c3x0 xshrink def/c1x1 c3x1 xshrink def

/c2x0 c4x0 xshrink def/c2x1 c4x1 xshrink def/c1y0 c3y0 def/c1y1 c3y1 def/c2y0

c4y0 def/c2y1 c4y1 def/dX c3x2 c1x2 sub round 0 dtransform flipXY -1 eq{exch}

if pop abs def dX dmin lt PickCoords x2 c1x2 sub abs .001 gt{c1x2 c1y2

transform flipXY -1 eq{exch}if/cy exch def/cx exch def/dX x2 c1x2 sub round 0

dtransform flipXY -1 eq{exch}if pop def dX round dup 0 ne{/dX exdef}{pop dX 0

lt{-1}{1}ifelse/dX exdef}ifelse/erode PaintType 2 ne erosion .5 ge and def

erode{/cx cx .5 sub def}if/ex cx dX add def/ex ex ceiling ex sub ex floor add

def erode{/ex ex .5 add def}if ex cy flipXY -1 eq{exch}if itransform pop x2

sub/eShift exch def/x1 x1 eShift add def/x2 x2 eShift add def/x3 x3 eShift add

def}if}ifelse}ifelse x2 x5 eq y2 y5 eq or{x5 y5 lineto}{x0 y0 x1 y1 x2 y2

curveto x3 y3 x4 y4 x5 y5 curveto}ifelse epY epX}systemdict/currentpacking

known{exch setpacking}if/exec cvx/end cvx]cvx executeonly exch{pop true exch

restore}{systemdict/internaldict known not{1183615869 userdict/internaldict

get exec exch/FlxProc exch put true}{1183615869 systemdict/internaldict get

exec dup length exch maxlength eq{false}{1183615869 systemdict/internaldict

get exec exch/FlxProc exch put true}ifelse}ifelse}ifelse{systemdict

/internaldict known{1183615869 systemdict/internaldict get exec/FlxProc get

exec}{1183615869 userdict/internaldict get exec/FlxProc get exec}ifelse}if}

executeonly def/F1Subr{gsave currentpoint newpath moveto}bind def/F2Subr{

currentpoint grestore gsave currentpoint newpath moveto}bind def/HSSubr{

systemdict/internaldict known not{pop 3}{1183615869 systemdict/internaldict

get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck

get exec}{pop 3}ifelse}ifelse}ifelse}bind def end

%%EndResource

/currentpacking where{pop currentpacking true setpacking}if

%%BeginResource: procset pdfvars

%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.

%%Version: 5.0 6

%%Title: definition of dictionary of variables used by PDF & PDFText procsets

userdict /PDF 160 dict put

userdict /PDFVars 89 dict dup begin put

/docSetupDone false def

/InitAll 0 def

/TermAll 0 def

/DocInitAll 0 def

/DocTermAll 0 def

/_pdfEncodings 2 array def

/_pdf_str1 1 string def

/_pdf_i 0 def

/_pdf_na 0 def

/_pdf_showproc 0 def

/_italMtx [1 0 .212557 1 0 0] def

/_italMtx_WMode1 [1 -.212557 0 1 0 0] def

/_italMtxType0 [1 0 .1062785 1 0 0] def

/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def

/_basefont 0 def

/_basefonto 0 def

/_pdf_oldCIDInit null def

/_pdf_FontDirectory 30 dict def

/_categories 10 dict def

/_sa? true def

/_ColorSep5044? false def

/nulldict 0 dict def

/_processColors 0 def

/overprintstack null def

/_defaulttransfer currenttransfer def

/_defaultflatness currentflat def

/_defaulthalftone null def

/_defaultcolortransfer null def

/_defaultblackgeneration null def

/_defaultundercolorremoval null def

/_defaultcolortransfer null def

PDF begin

[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W

/applyInterpFunc/applystitchFunc/domainClip/encodeInput

/initgs/int/limit/rangeClip

/defineRes/findRes/setSA/pl

%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver

/? /! /| /: /+ /GetGlyphDirectory

/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage

/pdf_shfill /pdf_sethalftone

] {null def} bind forall

end

end

%%EndResource

PDFVars begin PDF begin

%%BeginResource: procset pdfutil

%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.

%%Version: 4.0 2

%%Title: Basic utilities used by other PDF procsets

/bd {bind def} bind def

/ld {load def} bd

/bld {

dup length dict begin

{ null def } forall

bind

end

def

} bd

/dd { PDFVars 3 1 roll put } bd

/xdd { exch dd } bd

/Level2?

systemdict /languagelevel known

{ systemdict /languagelevel get 2 ge } { false } ifelse

def

/Level1? Level2? not def

/Level3?

systemdict /languagelevel known

{systemdict /languagelevel get 3 eq } { false } ifelse

def

/getifknown {

2 copy known { get true } { pop pop false } ifelse

} bd

/here {

currentdict exch getifknown

} bd

/isdefined? { where { pop true } { false } ifelse } bd

%%EndResource

%%BeginResource: l2compat

%%Version: 5.0 10

%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.

%%LanguageLevel: 1

%%Title: Level 1 emulation of level 2 operators

/setcmykcolor isdefined? not

{

/setcmykcolor {

1 sub 4 1 roll

3 {

3 index add neg dup 0 lt { pop 0 } if

3 1 roll

} repeat

setrgbcolor

pop

} bd

} if

/rectclip isdefined? not

{

/rectclip { newpath re clip newpath } bd

} if

/rectfill isdefined? not

{

/rectfill { gsave newpath re fill grestore } bd

} if

/sethalftone isdefined? not

{

/sethalftone {

begin

HalftoneType 1 eq

{ Frequency Angle /SpotFunction load setscreen }

if

end

} bd

} if

Level1?

{

/pdf_show {show} bd

/xshow

{

PDFVars /_pdf_showproc /pdf_show load put

pdf_xshow

} bd

/yshow

{

PDFVars /_pdf_showproc /pdf_show load put

pdf_yshow

} bd

/xyshow

{

PDFVars /_pdf_showproc /pdf_show load put

pdf_xyshow

} bd

} if

/getrampcolor {

/indx exch def

[

0 1 NumComp 1 sub {

dup

Samples exch get

dup type /stringtype eq { indx get } if

exch

Scaling exch get aload pop

3 1 roll

mul add

} for

]

L1setcolor

} bd

/sssetbackground { L1setcolor } bd

%%EndResource

%%BeginResource: procset pdf

%%Version: 5.0 7

%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.

%%Title: General operators for PDF, common to all Language Levels.

/cm { matrix astore concat } bd

/d /setdash ld

/f /fill ld

/h /closepath ld

/i {dup 0 eq {pop _defaultflatness} if setflat} bd

/j /setlinejoin ld

/J /setlinecap ld

/M /setmiterlimit ld

/n /newpath ld

/S /stroke ld

/w /setlinewidth ld

/W /clip ld

/initgs {

0 setgray

[] 0 d

0 j

0 J

10 M

1 w

false setSA

/_defaulttransfer load settransfer

0 i

/RelativeColorimetric ri

newpath

} bd

/int {

dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul

exch pop add exch pop

} bd

/limit {

dup 2 index le { exch } if pop

dup 2 index ge { exch } if pop

} bd

/domainClip {

Domain aload pop 3 2 roll

limit

} [/Domain] bld

/applyInterpFunc {

0 1 DimOut 1 sub

{

dup C0 exch get exch

dup C1 exch get exch

3 1 roll

1 index sub

3 index

N exp mul add

exch

currentdict /Range_lo known

{

dup Range_lo exch get exch

Range_hi exch get

3 2 roll limit

}

{

pop

}

ifelse

exch

} for

pop

} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld

/encodeInput {

NumParts 1 sub

0 1 2 index

{

dup Bounds exch get

2 index gt

{ exit }

{ dup

3 index eq

{ exit }

{ pop } ifelse

} ifelse

} for

3 2 roll pop

dup Bounds exch get exch

dup 1 add Bounds exch get exch

2 mul

dup Encode exch get exch

1 add Encode exch get

int

} [/NumParts /Bounds /Encode] bld

/rangeClip {

exch dup Range_lo exch get

exch Range_hi exch get

3 2 roll

limit

} [/Range_lo /Range_hi] bld

/applyStitchFunc {

Functions exch get exec

currentdict /Range_lo known {

0 1 DimOut 1 sub {

DimOut 1 add -1 roll

rangeClip

} for

} if

} [/Functions /Range_lo /DimOut] bld

/pdf_flushfilters

{

aload length

{ dup status

1 index currentfile ne and

{ dup flushfile closefile }

{ pop }

ifelse

} repeat

} bd

/pdf_readstring

{

1 index dup length 1 sub get

exch readstring pop

exch pdf_flushfilters

} bind def

/pdf_dictOp

{

3 2 roll

10 dict copy

begin

_Filters dup length 1 sub get def

currentdict exch exec

_Filters pdf_flushfilters

end

} [/_Filters] bld

/pdf_image {{image} /DataSource pdf_dictOp} bd

/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd

/pdf_shfill {{sh} /DataSource pdf_dictOp} bd

/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd

/pdf_maskedImage

{

10 dict copy begin

/miDict currentdict def

/DataDict DataDict 10 dict copy def

DataDict begin

/DataSource

_Filters dup length 1 sub get

def

miDict image

_Filters pdf_flushfilters

end

end

} [/miDict /DataDict /_Filters] bld

/RadialShade {

40 dict begin

/background exch def

/ext1 exch def

/ext0 exch def

/BBox exch def

/r2 exch def

/c2y exch def

/c2x exch def

/r1 exch def

/c1y exch def

/c1x exch def

/rampdict exch def

gsave

BBox length 0 gt {

newpath

BBox 0 get BBox 1 get moveto

BBox 2 get BBox 0 get sub 0 rlineto

0 BBox 3 get BBox 1 get sub rlineto

BBox 2 get BBox 0 get sub neg 0 rlineto

closepath

clip

newpath

} if

c1x c2x eq

{

c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse

}

{

/slope c2y c1y sub c2x c1x sub div def

/theta slope 1 atan def

c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if

c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if

}

ifelse

gsave

clippath

c1x c1y translate

theta rotate

-90 rotate

{ pathbbox } stopped

{ 0 0 0 0 } if

/yMax exch def

/xMax exch def

/yMin exch def

/xMin exch def

grestore

xMax xMin eq yMax yMin eq or

{

grestore

end

}

{

rampdict begin

40 dict begin

background length 0 gt { background sssetbackground gsave clippath fill grestore } if

gsave

c1x c1y translate

theta rotate

-90 rotate

/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def

/c1y 0 def

/c1x 0 def

/c2x 0 def

ext0 {

0 getrampcolor

c2y r2 add r1 lt

{

c1x c1y r1 360 0 arcn

xMin yMin moveto

xMax yMin lineto

xMax yMax lineto

xMin yMax lineto

xMin yMin lineto

eofill

}

{

c2y r1 add r2 le

{

c1x c1y r1 0 360 arc

fill

}

{

c2x c2y r2 0 360 arc fill

r1 r2 eq

{

/p1x r1 neg def

/p1y c1y def

/p2x r1 def

/p2y c1y def

p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto

fill

}

{

/AA r2 r1 sub c2y div def

/theta AA 1 AA dup mul sub sqrt div 1 atan def

/SS1 90 theta add dup sin exch cos div def

/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def

/p1y p1x SS1 div neg def

/SS2 90 theta sub dup sin exch cos div def

/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def

/p2y p2x SS2 div neg def

r1 r2 gt

{

/L1maxX p1x yMin p1y sub SS1 div add def

/L2maxX p2x yMin p2y sub SS2 div add def

}

{

/L1maxX 0 def

/L2maxX 0 def

}ifelse

p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto

L1maxX L1maxX p1x sub SS1 mul p1y add lineto

fill

}

ifelse

}

ifelse

} ifelse

} if

c1x c2x sub dup mul

c1y c2y sub dup mul

add 0.5 exp

0 dtransform

dup mul exch dup mul add 0.5 exp 72 div

0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt

72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt

1 index 1 index lt { exch } if pop

/hires exch def

hires mul

/numpix exch def

/numsteps NumSamples def

/rampIndxInc 1 def

/subsampling false def

numpix 0 ne

{

NumSamples numpix div 0.5 gt

{

/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def

/rampIndxInc NumSamples 1 sub numsteps div def

/subsampling true def

} if

} if

/xInc c2x c1x sub numsteps div def

/yInc c2y c1y sub numsteps div def

/rInc r2 r1 sub numsteps div def

/cx c1x def

/cy c1y def

/radius r1 def

newpath

xInc 0 eq yInc 0 eq rInc 0 eq and and

{

0 getrampcolor

cx cy radius 0 360 arc

stroke

NumSamples 1 sub getrampcolor

cx cy radius 72 hires div add 0 360 arc

0 setlinewidth

stroke

}

{

0

numsteps

{

dup

subsampling { round cvi } if

getrampcolor

cx cy radius 0 360 arc

/cx cx xInc add def

/cy cy yInc add def

/radius radius rInc add def

cx cy radius 360 0 arcn

eofill

rampIndxInc add

}

repeat

pop

} ifelse

ext1 {

c2y r2 add r1 lt

{

c2x c2y r2 0 360 arc

fill

}

{

c2y r1 add r2 le

{

c2x c2y r2 360 0 arcn

xMin yMin moveto

xMax yMin lineto

xMax yMax lineto

xMin yMax lineto

xMin yMin lineto

eofill

}

{

c2x c2y r2 0 360 arc fill

r1 r2 eq

{

/p1x r2 neg def

/p1y c2y def

/p2x r2 def

/p2y c2y def

p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto

fill

}

{

/AA r2 r1 sub c2y div def

/theta AA 1 AA dup mul sub sqrt div 1 atan def

/SS1 90 theta add dup sin exch cos div def

/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def

/p1y c2y p1x SS1 div sub def

/SS2 90 theta sub dup sin exch cos div def

/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def

/p2y c2y p2x SS2 div sub def

r1 r2 lt

{

/L1maxX p1x yMax p1y sub SS1 div add def

/L2maxX p2x yMax p2y sub SS2 div add def

}

{

/L1maxX 0 def

/L2maxX 0 def

}ifelse

p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto

L1maxX L1maxX p1x sub SS1 mul p1y add lineto

fill

}

ifelse

}

ifelse

} ifelse

} if

grestore

grestore

end

end

end

} ifelse

} bd

/GenStrips {

40 dict begin

/background exch def

/ext1 exch def

/ext0 exch def

/BBox exch def

/y2 exch def

/x2 exch def

/y1 exch def

/x1 exch def

/rampdict exch def

gsave

BBox length 0 gt {

newpath

BBox 0 get BBox 1 get moveto

BBox 2 get BBox 0 get sub 0 rlineto

0 BBox 3 get BBox 1 get sub rlineto

BBox 2 get BBox 0 get sub neg 0 rlineto

closepath

clip

newpath

} if

x1 x2 eq

{

y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse

}

{

/slope y2 y1 sub x2 x1 sub div def

/theta slope 1 atan def

x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if

x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if

}

ifelse

gsave

clippath

x1 y1 translate

theta rotate

{ pathbbox } stopped

{ 0 0 0 0 } if

/yMax exch def

/xMax exch def

/yMin exch def

/xMin exch def

grestore

xMax xMin eq yMax yMin eq or

{

grestore

end

}

{

rampdict begin

20 dict begin

background length 0 gt { background sssetbackground gsave clippath fill grestore } if

gsave

x1 y1 translate

theta rotate

/xStart 0 def

/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def

/ySpan yMax yMin sub def

/numsteps NumSamples def

/rampIndxInc 1 def

/subsampling false def

xStart 0 transform

xEnd 0 transform

3 -1 roll

sub dup mul

3 1 roll

sub dup mul

add 0.5 exp 72 div

0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt

72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt

1 index 1 index lt { exch } if pop

mul

/numpix exch def

numpix 0 ne

{

NumSamples numpix div 0.5 gt

{

/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def

/rampIndxInc NumSamples 1 sub numsteps div def

/subsampling true def

} if

} if

ext0 {

0 getrampcolor

xMin xStart lt

{ xMin yMin xMin neg ySpan rectfill } if

} if

/xInc xEnd xStart sub numsteps div def

/x xStart def

0

numsteps

{

dup

subsampling { round cvi } if

getrampcolor

x yMin xInc ySpan rectfill

/x x xInc add def

rampIndxInc add

}

repeat

pop

ext1 {

xMax xEnd gt

{ xEnd yMin xMax xEnd sub ySpan rectfill } if

} if

grestore

grestore

end

end

end

} ifelse

} bd

%%EndResource

%%BeginResource: procset sep_ops

%%Version: 4.0 1

%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.

%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044

userdict /sep_ops 50 dict dup begin put

/bdef {bind def} bind def

/xdef {exch def} bdef

/colorimagebuffer {

0 1 2 index length 1 sub {

dup 2 index exch get 255 exch sub 2 index 3 1 roll put

} for

} bdef

/addprocs {

[ 3 1 roll

/exec load

dup 3 1 roll

] cvx

} bdef

/L1? {

systemdict /languagelevel known {

systemdict /languagelevel get 2 lt

}{

true

} ifelse

} bdef

/colorexists {

statusdict /processcolors known {

statusdict /processcolors get exec

}{

/deviceinfo where {

pop deviceinfo /Colors known {

deviceinfo /Colors get

statusdict /processcolors {

deviceinfo /Colors known {

deviceinfo /Colors get

}{

1

} ifelse

} put

}{

1

} ifelse

}{

1

} ifelse

} ifelse

1 gt

} bdef

/colorplate colorexists { 0 } { 5 } ifelse def

/negativecolorplate false def

/setcmykcolor where {

pop

gsave

1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub

0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub

0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub

0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub

4 {4 copy} repeat

grestore

1 dict begin

/foureq {

4 index eq 8 1 roll

4 index eq 8 1 roll

4 index eq 8 1 roll

4 index eq 8 1 roll

pop pop pop pop and and and

} def

1 0 0 0 foureq {/colorplate 1 store} if

0 1 0 0 foureq {/colorplate 2 store} if

0 0 1 0 foureq {/colorplate 3 store} if

0 0 0 1 foureq {/colorplate 4 store} if

0 0 0 0 foureq {/colorplate 6 store} if

end

} if

0 systemdict /currenttransfer get exec exec

1 systemdict /currenttransfer get exec exec

2 copy

eq

{

/colorplate 6 store

pop

/negativecolorplate exch 0.5 lt store

}

{

gt /negativecolorplate exch store

}

ifelse

/findcmykcustomcolor where { pop }

{

/findcmykcustomcolor {

[ 6 1 roll ] readonly

} bdef

} ifelse

/setoverprint where {

pop

}{

/setoverprint {

pop

} bdef

} ifelse

/currentoverprint where {

pop

}{

/currentoverprint {

false

} bdef

} ifelse

/setcustomcolor where {

pop

}{

L1? {

/setcustomcolor {

exch

aload pop pop

4 { 4 index mul 4 1 roll } repeat

5 -1 roll pop

setcmykcolor

} bdef

}{

/setcustomcolor {

exch

[ exch /Separation exch dup 4 get exch /DeviceCMYK exch

0 4 getinterval

[ exch /dup load exch cvx {mul exch dup}

/forall load /pop load dup] cvx

] setcolorspace setcolor

} bdef

} ifelse

} ifelse

/ik 0 def

/iy 0 def

/im 0 def

/ic 0 def

/imagetint {

ic .3 mul

im .59 mul

iy .11 mul

ik add add add dup

1 gt {pop 1} if

} bdef

/setcmykcolor where {

pop

}{

/setcmykcolor {

/ik xdef /iy xdef /im xdef /ic xdef

imagetint

1 exch sub setgray

} bdef

} ifelse

/customcolorimage where {

pop

}{

L1? {

/customcolorimage{

gsave

colorexists {

aload pop pop

/ik xdef /iy xdef /im xdef /ic xdef

currentcolortransfer

{ik mul ik sub 1 add} addprocs

4 1 roll {iy mul iy sub 1 add} addprocs

4 1 roll {im mul im sub 1 add} addprocs

4 1 roll {ic mul ic sub 1 add} addprocs

4 1 roll setcolortransfer

/magentabuf 0 string def

/yellowbuf 0 string def

/blackbuf 0 string def

{

colorimagebuffer dup length magentabuf length ne

{

dup length dup dup

/magentabuf exch string def

/yellowbuf exch string def

/blackbuf exch string def

} if

dup magentabuf copy yellowbuf copy

blackbuf copy pop

} addprocs

{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage

}{

aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint

imagetint def

currenttransfer

{tint mul 1 tint sub add} addprocs settransfer image

} ifelse

grestore

} bdef

}{

/customcolorimage {

gsave

[ exch /Separation exch dup 4 get exch /DeviceCMYK exch

0 4 getinterval

[ exch /dup load exch cvx {mul exch dup}

/forall load /pop load dup] cvx

] setcolorspace

10 dict begin

/ImageType 1 def

/DataSource exch def

/ImageMatrix exch def

/BitsPerComponent exch def

/Height exch def

/Width exch def

/Decode [1 0] def

currentdict end

image

grestore

} bdef

} ifelse

} ifelse

/setseparationgray where {

pop

}{

L1? {

/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef

}{

/setseparationgray {

[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace

1 exch sub setcolor

} bdef

} ifelse

} ifelse

/separationimage where { pop }

{

/separationimage {

gsave

1 1 1 1 (All)

findcmykcustomcolor customcolorimage

grestore

} bdef

} ifelse

currentdict readonly pop end

%%EndResource

%%BeginResource: procset pdflev15044

%%Version: 5.0 13

%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.

%%LanguageLevel: 1

%%Title: PDF operators, Level 1, with emulated separations (TN 5044)

/_ColorSep5044? true dd

/docinitialize {

PDF begin

/_defaulthalftone

/currenthalftone where

{ pop currenthalftone }

{ 4 dict dup begin

currentscreen

/SpotFunction exch def

/Angle exch def

/Frequency exch def

/HalftoneType 1 def

end }

ifelse

dd

/currentcolortransfer where

{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }

{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }

ifelse

end

} bd

/initialize {

/overprintstack null dd

sep_ops begin

50 dict begin

_defaulthalftone sethalftone

} bd

/terminate {

end end

} bd

/currentcolortransfer where

{ pop }

{

/setcolortransfer

{

settransfer pop pop pop

} bd

} ifelse

/pl {

transform

0.25 sub round 0.25 add exch

0.25 sub round 0.25 add exch

itransform

} bd

/m { _sa? { pl } if moveto } bd

/l { _sa? { pl } if lineto } bd

/c

{

_sa? {3 {pl 6 2 roll} repeat} if

curveto

} bd

/ri/pop ld

/setSA { /_sa? xdd } bd

/re

{

_sa?

{

8 dict begin

/:h exch def

/:w exch def

/:y exch def

/:x exch def

:x :y pl

/:ymin exch def /:xmin exch def

:x :w add :y :h add pl

/:ymax exch def /:xmax exch def

:xmin :ymin moveto

:xmax :ymin lineto

:xmax :ymax lineto

:xmin :ymax lineto

closepath

end

}

{

4 2 roll moveto

1 index 0 rlineto

0 exch rlineto

neg 0 rlineto

closepath

} ifelse

} bd

/q

{

gsave

[currentoverprint overprintstack] /overprintstack xdd

}

[/overprintstack] bld

/Q

{

overprintstack aload pop /overprintstack xdd setoverprint

grestore

}

[/overprintstack] bld

/AlmostFull?

{ dup maxlength exch length sub 2 le

} bd

/Expand

{ 1 index maxlength mul cvi dict

dup begin exch { def } forall end

} bd

/xput

{ 3 2 roll

dup 3 index known not

{ dup AlmostFull? { 1.5 Expand } if

} if

dup 4 2 roll put

} bd

/defineRes

{ _categories 1 index known not

{ /_categories _categories 2 index 10 dict xput store

} if

_categories exch 2 copy get 5 -1 roll 4 index xput put

} bd

/findRes {

_categories exch get exch get

} bd

/L1setcolor {

aload length

dup 0 eq

{ pop .5 setgray }

{ dup 1 eq

{ pop setgray }

{ 3 eq

{ setrgbcolor }

{ setcmykcolor }

ifelse }

ifelse }

ifelse

} bind dd

/concattransferfuncs {

[ 3 1 roll /exec load exch /exec load ] cvx

} bd

/concatandsettransfer {

/_defaulttransfer load concattransferfuncs settransfer

} bd

/concatandsetcolortransfer {

colorplate 0 eq

{

_defaultcolortransfer aload pop

8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll

6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll

4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll

concattransferfuncs

setcolortransfer

} if

colorplate 1 ge colorplate 4 le and

{

4 colorplate sub index 4 { exch pop } repeat

concatandsettransfer

} if

colorplate 5 ge

{

0 index 4 { exch pop } repeat

concatandsettransfer

} if

} bd

/tn5044sethalftone

{

begin

HalftoneType 5 eq

{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]

colorplate get

here not {

/Default here not { currentdict } if

} if

}

{ currentdict }

ifelse

end

begin

/TransferFunction here

{

concatandsettransfer

currentdict dup length dict

begin

{

1 index /TransferFunction ne { def } { pop pop } ifelse

} forall

currentdict

end

}

{

currentdict

} ifelse

end

sethalftone

} bd

/paintimage

{

colorplate 0 eq

{

{ {currentfile cyanstr readstring pop}

{currentfile magentastr readstring pop}

{currentfile yellowstr readstring pop}

{currentfile blackstr readstring pop

currentfile graystr readstring pop pop}

}

{ {currentfile cyanstr readhexstring pop}

{currentfile magentastr readhexstring pop}

{currentfile yellowstr readhexstring pop}

{currentfile blackstr readhexstring pop

currentfile graystr readhexstring pop pop}

} ifelse

true 4 colorimage

}

{

3 dict begin

/binaryOK exch def

[

1 1 5 {

dup

/currentfile cvx

[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]

3 -1 roll 1 sub get cvx

binaryOK { /readstring } { /readhexstring } ifelse cvx

/pop cvx

5 -1 roll

colorplate dup 5 gt { pop 5 } if

eq not { /pop cvx } if

} for

] cvx bind

end

[

colorplate 6 eq {

/pop cvx

negativecolorplate { 0 } { 1 } ifelse

} if

colorplate 4 le

{

1 /exch cvx /sub cvx

} if

colorplate 6 ne

{

systemdict /currenttransfer get exec

aload pop

} if

] cvx

gsave

systemdict /settransfer get exec

systemdict /image get exec

grestore

} ifelse

} bd

%%EndResource

%%BeginResource: procset pdftext

%%Version: 5.0 6

%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.

%%Title: Text operators for PDF

PDF /PDFText 78 dict dup begin put

/docinitialize

{

/resourcestatus where {

pop

/CIDParams /ProcSet resourcestatus {

pop pop

false /CIDParams /ProcSet findresource /SetBuildCompatible get exec

} if

} if

PDF begin

PDFText /_pdfDefineIdentity-H known

{ PDFText /_pdfDefineIdentity-H get exec}

if

end

} bd

/initialize {

PDFText begin

} bd

/terminate { end } bd

Level2?

{

/_safeput

{

3 -1 roll load 3 1 roll put

}

bd

}

{

/_safeput

{

2 index load dup dup length exch maxlength ge

{ dup length 5 add dict copy

3 index xdd

}

{ pop }

ifelse

3 -1 roll load 3 1 roll put

}

bd

}

ifelse

/pdf_has_composefont? systemdict /composefont known def

/CopyFont {

{

1 index /FID ne 2 index /UniqueID ne and

{ def } { pop pop } ifelse

} forall

} bd

/Type0CopyFont

{

exch

dup length dict

begin

CopyFont

[

exch

FDepVector

{

dup /FontType get 0 eq

{

1 index Type0CopyFont

/_pdfType0 exch definefont

}

{

/_pdfBaseFont exch

2 index exec

}

ifelse

exch

}

forall

pop

]

/FDepVector exch def

currentdict

end

} bd

Level2? {currentglobal true setglobal} if

/cHexEncoding

[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12

/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25

/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38

/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B

/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E

/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71

/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84

/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97

/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA

/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD

/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0

/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3

/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6

/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def

Level2? {setglobal} if

/modEnc {

/_enc xdd

/_icode 0 dd

counttomark 1 sub -1 0

{

index

dup type /nametype eq

{

_enc _icode 3 -1 roll put

_icode 1 add

}

if

/_icode xdd

} for

cleartomark

_enc

} bd

/trEnc {

/_enc xdd

255 -1 0 {

exch dup -1 eq

{ pop /.notdef }

{ Encoding exch get }

ifelse

_enc 3 1 roll put

} for

pop

_enc

} bd

/TE {

/_i xdd

StandardEncoding 256 array copy modEnc

_pdfEncodings exch _i exch put

} bd

/TZ

{

/_usePDFEncoding xdd

findfont

dup length 6 add dict

begin

{

1 index /FID ne { def } { pop pop } ifelse

} forall

/pdf_origFontName FontName def

/FontName exch def

currentdict /PaintType known

{ PaintType 2 eq {/PaintType 0 def} if }

if

_usePDFEncoding 0 ge

{

/Encoding _pdfEncodings _usePDFEncoding get def

pop

}

{

_usePDFEncoding -1 eq

{

counttomark 0 eq

{ pop }

{

Encoding 256 array copy

modEnc /Encoding exch def

}

ifelse

}

{

256 array

trEnc /Encoding exch def

}

ifelse

}

ifelse

pdf_EuroProcSet pdf_origFontName known

{

pdf_origFontName pdf_AddEuroGlyphProc

} if

Level2?

{

currentdict /pdf_origFontName undef

} if

FontName currentdict

end

definefont pop

}

bd

Level2?

{

/TZG

{

currentglobal true setglobal

2 index _pdfFontStatus

{

2 index findfont

false setglobal

3 index findfont

true setglobal

ne

{

2 index findfont dup rcheck

{

dup length dict begin

{

1 index /FID ne { def } { pop pop } ifelse

} forall

currentdict end

}

if

3 index exch definefont pop

}

if

} if

setglobal

TZ

} bd

}

{

/TZG {TZ} bd

} ifelse

Level2?

{

currentglobal false setglobal

userdict /pdftext_data 5 dict put

pdftext_data

begin

/saveStacks

{

pdftext_data

begin

/vmmode currentglobal def

false setglobal

count array astore /os exch def

end

countdictstack array dictstack pdftext_data exch /ds exch put

cleardictstack pdftext_data /dscount countdictstack put

pdftext_data /vmmode get setglobal

} bind def

/restoreStacks

{

pdftext_data /vmmode currentglobal put false setglobal

clear cleardictstack

pdftext_data /ds get dup

pdftext_data /dscount get 1 2 index length 1 sub

{ get begin dup } for

pop pop

pdftext_data /os get aload pop

pdftext_data /vmmode get setglobal

} bind def

/testForClonePrinterBug

{

currentglobal true setglobal

/undefinedCategory /Generic /Category findresource

dup length dict copy /Category defineresource pop

setglobal

pdftext_data /saveStacks get exec

pdftext_data /vmmode currentglobal put false setglobal

/undefined /undefinedCategory { resourcestatus } stopped

pdftext_data exch /bugFound exch put

pdftext_data /vmmode get setglobal

pdftext_data /restoreStacks get exec

pdftext_data /bugFound get

} bind def

end

setglobal

/pdf_resourcestatus

pdftext_data /testForClonePrinterBug get exec

{

{

pdftext_data /saveStacks get exec

pdftext_data /os get dup dup length 1 sub

dup 1 sub dup 0 lt { pop 0 } if

exch 1 exch { get exch dup } for

pop pop

{ resourcestatus }

stopped

{

clear cleardictstack pdftext_data /restoreStacks get exec

{ pop pop } stopped pop false

}

{

count array astore pdftext_data exch /results exch put

pdftext_data /restoreStacks get exec pop pop

pdftext_data /results get aload pop

}

ifelse

}

}

{ { resourcestatus } }

ifelse

bd

}

if

Level2?

{

/_pdfUndefineResource

{

currentglobal 3 1 roll

_pdf_FontDirectory 2 index 2 copy known

{undef}

{pop pop}

ifelse

1 index (pdf) exch _pdfConcatNames 1 index

1 index 1 _pdfConcatNames 1 index

5 index 1 _pdfConcatNames 1 index

4

{

2 copy pdf_resourcestatus

{

pop 2 lt

{2 copy findresource gcheck setglobal undefineresource}

{pop pop}

ifelse

}

{ pop pop}

ifelse

} repeat

setglobal

} bd

}

{

/_pdfUndefineResource { pop pop} bd

}

ifelse

Level2?

{

/_pdfFontStatus

{

currentglobal exch

/Font pdf_resourcestatus

{pop pop true}

{false}

ifelse

exch setglobal

} bd

}

{

/_pdfFontStatusString 50 string def

_pdfFontStatusString 0 (fonts/) putinterval

/_pdfFontStatus

{

FontDirectory 1 index known

{ pop true }

{

_pdfFontStatusString 6 42 getinterval

cvs length 6 add

_pdfFontStatusString exch 0 exch getinterval

{ status } stopped

{pop false}

{

{ pop pop pop pop true}

{ false }

ifelse

}

ifelse

}

ifelse

} bd

}

ifelse

Level2?

{

/_pdfCIDFontStatus

{

/CIDFont /Category pdf_resourcestatus

{

pop pop

/CIDFont pdf_resourcestatus

{pop pop true}

{false}

ifelse

}

{ pop false }

ifelse

} bd

}

if

/_pdfString100 100 string def

/_pdfComposeFontName

{

dup length 1 eq

{

0 get

1 index

type /nametype eq

{

_pdfString100 cvs

length dup dup _pdfString100 exch (-) putinterval

_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval

2 index exch cvs length

add 1 add _pdfString100 exch 0 exch getinterval

exch pop

true

}

{

pop pop

false

}

ifelse

}

{

false

}

ifelse

dup {exch cvn exch} if

} bd

/_pdfConcatNames

{

exch

_pdfString100 cvs

length dup dup _pdfString100 exch (-) putinterval

_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval

3 -1 roll exch cvs length

add 1 add _pdfString100 exch 0 exch getinterval

cvn

} bind def

/_pdfTextTempString 50 string def

/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def

/_pdf_CheckCIDSystemInfo

{

1 index _pdfTextTempString cvs

(Identity) anchorsearch

{

pop pop pop pop true

}

{

false

_pdfRegOrderingArray

{

2 index exch

anchorsearch

{ pop pop pop true exit}

{ pop }

ifelse

}

forall

exch pop

exch /CIDFont findresource

/CIDSystemInfo get

3 -1 roll /CMap findresource

/CIDSystemInfo get

exch

3 -1 roll

{

2 copy

/Supplement get

exch

dup type /dicttype eq

{/Supplement get}

{pop 0 }

ifelse

ge

}

{ true }

ifelse

{

dup /Registry get

2 index /Registry get eq

{

/Ordering get

exch /Ordering get

dup type /arraytype eq

{

1 index type /arraytype eq

{

true

1 index length 1 sub -1 0

{

dup 2 index exch get exch 3 index exch get ne

{ pop false exit}

if

} for

exch pop exch pop

}

{ pop pop false }

ifelse

}

{

eq

}

ifelse

}

{ pop pop false }

ifelse

}

{ pop pop false }

ifelse

}

ifelse

} bind def

pdf_has_composefont?

{

/_pdfComposeFont

{

2 copy _pdfComposeFontName not

{

2 index

}

if

(pdf) exch _pdfConcatNames

dup _pdfFontStatus

{ dup findfont 5 2 roll pop pop pop true}

{

4 1 roll

1 index /CMap pdf_resourcestatus

{

pop pop

true

}

{false}

ifelse

1 index true exch

{

_pdfCIDFontStatus not

{pop false exit}

if

}

forall

and

{

1 index 1 index 0 get _pdf_CheckCIDSystemInfo

{

3 -1 roll pop

2 index 3 1 roll

composefont true

}

{

pop pop exch pop false

}

ifelse

}

{

_pdfComposeFontName

{

dup _pdfFontStatus

{

exch pop

1 index exch

findfont definefont true

}

{

pop exch pop

false

}

ifelse

}

{

exch pop

false

}

ifelse

}

ifelse

{ true }

{

dup _pdfFontStatus

{ dup findfont true }

{ pop false }

ifelse

}

ifelse

}

ifelse

} bd

}

{

/_pdfComposeFont

{

_pdfComposeFontName not

{

dup

}

if

dup

_pdfFontStatus

{exch pop dup findfont true}

{

1 index

dup type /nametype eq

{pop}

{cvn}

ifelse

eq

{pop false}

{

dup _pdfFontStatus

{dup findfont true}

{pop false}

ifelse

}

ifelse

}

ifelse

} bd

}

ifelse

/_pdfStyleDicts 4 dict dup begin

/Adobe-Japan1 4 dict dup begin

Level2?

{

/Serif

/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus

{/HeiseiMin-W3}

{

/HeiseiMin-W3 _pdfCIDFontStatus

{/HeiseiMin-W3}

{/Ryumin-Light}

ifelse

}

ifelse

def

/SansSerif

/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus

{/HeiseiKakuGo-W5}

{

/HeiseiKakuGo-W5 _pdfCIDFontStatus

{/HeiseiKakuGo-W5}

{/GothicBBB-Medium}

ifelse

}

ifelse

def

/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus

{/HeiseiMaruGo-W4}

{

/HeiseiMaruGo-W4 _pdfCIDFontStatus

{/HeiseiMaruGo-W4}

{

/Jun101-Light-RKSJ-H _pdfFontStatus

{ /Jun101-Light }

{ SansSerif }

ifelse

}

ifelse

}

ifelse

/RoundSansSerif exch def

/Default Serif def

}

{

/Serif /Ryumin-Light def

/SansSerif /GothicBBB-Medium def

{

(fonts/Jun101-Light-83pv-RKSJ-H) status

}stopped

{pop}{

{ pop pop pop pop /Jun101-Light }

{ SansSerif }

ifelse

/RoundSansSerif exch def

}ifelse

/Default Serif def

}

ifelse

end

def

/Adobe-Korea1 4 dict dup begin

/Serif /HYSMyeongJo-Medium def

/SansSerif /HYGoThic-Medium def

/RoundSansSerif SansSerif def

/Default Serif def

end

def

/Adobe-GB1 4 dict dup begin

/Serif /STSong-Light def

/SansSerif /STHeiti-Regular def

/RoundSansSerif SansSerif def

/Default Serif def

end

def

/Adobe-CNS1 4 dict dup begin

/Serif /MKai-Medium def

/SansSerif /MHei-Medium def

/RoundSansSerif SansSerif def

/Default Serif def

end

def

end

def

/TZzero

{

/_wmode xdd

/_styleArr xdd

/_regOrdering xdd

3 copy

_pdfComposeFont

{

5 2 roll pop pop pop

}

{

[

0 1 _styleArr length 1 sub

{

_styleArr exch get

_pdfStyleDicts _regOrdering 2 copy known

{

get

exch 2 copy known not

{ pop /Default }

if

get

}

{

pop pop pop /Unknown

}

ifelse

}

for

]

exch pop

2 index 3 1 roll

_pdfComposeFont

{3 -1 roll pop}

{

findfont dup /FontName get exch

}

ifelse

}

ifelse

dup /WMode 2 copy known

{ get _wmode ne }

{ pop pop _wmode 1 eq}

ifelse

{

exch _wmode _pdfConcatNames

dup _pdfFontStatus

{ exch pop dup findfont false}

{ exch true }

ifelse

}

{

dup /FontType get 0 ne

}

ifelse

{

dup /FontType get 3 eq _wmode 1 eq and

{

_pdfVerticalRomanT3Font dup length 10 add dict copy

begin

/_basefont exch

dup length 3 add dict

begin

{1 index /FID ne {def}{pop pop} ifelse }

forall

/Encoding Encoding dup length array copy

dup 16#27 /quotesingle put

dup 16#60 /grave put

_regOrdering /Adobe-Japan1 eq

{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}

if

def

FontName

currentdict

end

definefont

def

/Encoding _basefont /Encoding get def

/_fauxfont true def

}

{

dup length 3 add dict

begin

{1 index /FID ne {def}{pop pop} ifelse }

forall

FontType 0 ne

{

/Encoding Encoding dup length array copy

dup 16#27 /quotesingle put

dup 16#60 /grave put

_regOrdering /Adobe-Japan1 eq

{dup 16#5c /yen put}

if

def

/_fauxfont true def

} if

} ifelse

/WMode _wmode def

dup dup /FontName exch def

currentdict

end

definefont pop

}

{

pop

}

ifelse

/_pdf_FontDirectory 3 1 roll _safeput

}

bd

Level2?

{

/Tf {

_pdf_FontDirectory 2 index 2 copy known

{get exch 3 -1 roll pop}

{pop pop}

ifelse

selectfont

} bd

}

{

/Tf {

_pdf_FontDirectory 2 index 2 copy known

{get exch 3 -1 roll pop}

{pop pop}

ifelse

exch findfont exch

dup type /arraytype eq

{makefont}

{scalefont}

ifelse

setfont

} bd

}

ifelse

/cshow where

{

pop /pdf_cshow /cshow load dd

/pdf_remove2 {pop pop} dd

}

{

/pdf_cshow {exch forall} dd

/pdf_remove2 {} dd

} ifelse

/pdf_xshow

{

/_pdf_na xdd

/_pdf_i 0 dd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

{

pdf_remove2

_pdf_str1 exch 0 exch put

_pdf_str1 /_pdf_showproc load exec

{_pdf_na _pdf_i get} stopped

{ pop pop }

{

_pdf_x _pdf_y moveto

0

rmoveto

}

ifelse

_pdf_i 1 add /_pdf_i xdd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

}

exch

pdf_cshow

} bd

/pdf_yshow

{

/_pdf_na xdd

/_pdf_i 0 dd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

{

pdf_remove2

_pdf_str1 exch 0 exch put

_pdf_str1 /_pdf_showproc load exec

{_pdf_na _pdf_i get} stopped

{ pop pop }

{

_pdf_x _pdf_y moveto

0 exch

rmoveto

}

ifelse

_pdf_i 1 add /_pdf_i xdd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

}

exch

pdf_cshow

} bd

/pdf_xyshow

{

/_pdf_na xdd

/_pdf_i 0 dd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

{

pdf_remove2

_pdf_str1 exch 0 exch put

_pdf_str1 /_pdf_showproc load exec

{_pdf_na _pdf_i get} stopped

{ pop pop }

{

{_pdf_na _pdf_i 1 add get} stopped

{ pop pop pop}

{

_pdf_x _pdf_y moveto

rmoveto

}

ifelse

}

ifelse

_pdf_i 2 add /_pdf_i xdd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

}

exch

pdf_cshow

} bd

/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd

/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd

/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd

Level2? _ColorSep5044? not and

{

/pdfxs {{xshow} stopped {pdfl1xs} if} bd

/pdfys {{yshow} stopped {pdfl1ys} if} bd

/pdfxys {{xyshow} stopped {pdfl1xys} if} bd

}

{

/pdfxs /pdfl1xs load dd

/pdfys /pdfl1ys load dd

/pdfxys /pdfl1xys load dd

} ifelse

/pdf_charpath {false charpath} bd

/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd

/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd

/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd

/pdf_strokepath

{

{

pdf_remove2

_pdf_str1 exch 0 exch put

_pdf_str1 false charpath

currentpoint S moveto

} bind

exch pdf_cshow

} bd

/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd

/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd

/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd

Level2? {currentglobal true setglobal} if

/d0/setcharwidth ld

/nND {{/.notdef} repeat} bd

/T3Defs {

/BuildChar

{

1 index /Encoding get exch get

1 index /BuildGlyph get exec

}

def

/BuildGlyph {

exch begin

GlyphProcs exch get exec

end

} def

/_pdfT3Font true def

} bd

/_pdfBoldRomanWidthProc

{

stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth

0 0

} bd

/_pdfType0WidthProc

{

dup stringwidth 0 0 moveto

2 index true charpath pathbbox

0 -1

7 index 2 div .88

setcachedevice2

pop

0 0

} bd

/_pdfType0WMode1WidthProc

{

dup stringwidth

pop 2 div neg -0.88

2 copy

moveto

0 -1

5 -1 roll true charpath pathbbox

setcachedevice

} bd

/_pdfBoldBaseFont

11 dict begin

/FontType 3 def

/FontMatrix[1 0 0 1 0 0]def

/FontBBox[0 0 1 1]def

/Encoding cHexEncoding def

/_setwidthProc /_pdfBoldRomanWidthProc load def

/_bcstr1 1 string def

/BuildChar

{

exch begin

_basefont setfont

_bcstr1 dup 0 4 -1 roll put

dup

_setwidthProc

3 copy

moveto

show

_basefonto setfont

moveto

show

end

}bd

currentdict

end

def

pdf_has_composefont?

{

/_pdfBoldBaseCIDFont

11 dict begin

/CIDFontType 1 def

/CIDFontName /_pdfBoldBaseCIDFont def

/FontMatrix[1 0 0 1 0 0]def

/FontBBox[0 0 1 1]def

/_setwidthProc /_pdfType0WidthProc load def

/_bcstr2 2 string def

/BuildGlyph

{

exch begin

_basefont setfont

_bcstr2 1 2 index 256 mod put

_bcstr2 0 3 -1 roll 256 idiv put

_bcstr2 dup _setwidthProc

3 copy

moveto

show

_basefonto setfont

moveto

show

end

}bd

currentdict

end

def

/_pdfDefineIdentity-H

{

/Identity-H /CMap PDFText /pdf_resourcestatus get exec

{

pop pop

}

{

/CIDInit/ProcSet findresource begin 12 dict begin

begincmap

/CIDSystemInfo

3 dict begin

/Registry (Adobe) def

/Ordering (Identity) def

/Supplement 0 def

currentdict

end

def

/CMapName /Identity-H def

/CMapVersion 1 def

/CMapType 1 def

1 begincodespacerange

<0000> <ffff>

endcodespacerange

1 begincidrange

<0000> <ffff> 0

endcidrange

endcmap

CMapName currentdict/CMap defineresource pop

end

end

} ifelse

} def

} if

/_pdfVerticalRomanT3Font

10 dict begin

/FontType 3 def

/FontMatrix[1 0 0 1 0 0]def

/FontBBox[0 0 1 1]def

/_bcstr1 1 string def

/BuildChar

{

exch begin

_basefont setfont

_bcstr1 dup 0 4 -1 roll put

dup

_pdfType0WidthProc

moveto

show

end

}bd

currentdict

end

def

Level2? {setglobal} if

/MakeBoldFont

{

dup /ct_SyntheticBold known

{

dup length 3 add dict begin

CopyFont

/ct_StrokeWidth .03 0 FontMatrix idtransform pop def

/ct_SyntheticBold true def

currentdict

end

definefont

}

{

dup dup length 3 add dict

begin

CopyFont

/PaintType 2 def

/StrokeWidth .03 0 FontMatrix idtransform pop def

/dummybold currentdict

end

definefont

dup /FontType get dup 9 ge exch 11 le and

{

_pdfBoldBaseCIDFont

dup length 3 add dict copy begin

dup /CIDSystemInfo get /CIDSystemInfo exch def

/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont

/_basefont exch def

/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont

/_basefonto exch def

currentdict

end

/CIDFont defineresource

}

{

_pdfBoldBaseFont

dup length 3 add dict copy begin

/_basefont exch def

/_basefonto exch def

currentdict

end

definefont

}

ifelse

}

ifelse

} bd

/MakeBold {

1 index

_pdf_FontDirectory 2 index 2 copy known

{get}

{exch pop}

ifelse

findfont

dup

/FontType get 0 eq

{

dup /WMode known {dup /WMode get 1 eq }{false} ifelse

version length 4 ge

and

{version 0 4 getinterval cvi 2015 ge }

{true}

ifelse

{/_pdfType0WidthProc}

{/_pdfType0WMode1WidthProc}

ifelse

_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put

{MakeBoldFont} Type0CopyFont definefont

}

{

dup /_fauxfont known not 1 index /SubstMaster known not and

{

_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put

MakeBoldFont

}

{

2 index 2 index eq

{ exch pop }

{

dup length dict begin

CopyFont

currentdict

end

definefont

}

ifelse

}

ifelse

}

ifelse

pop pop

dup /dummybold ne

{/_pdf_FontDirectory exch dup _safeput }

{ pop }

ifelse

}bd

/MakeItalic {

_pdf_FontDirectory exch 2 copy known

{get}

{exch pop}

ifelse

dup findfont

dup /FontInfo 2 copy known

{

get

/ItalicAngle 2 copy known

{get 0 eq }

{ pop pop true}

ifelse

}

{ pop pop true}

ifelse

{

exch pop

dup /FontType get 0 eq Level2? not and

{ dup /FMapType get 6 eq }

{ false }

ifelse

{

dup /WMode 2 copy known

{

get 1 eq

{ _italMtx_WMode1Type0 }

{ _italMtxType0 }

ifelse

}

{ pop pop _italMtxType0 }

ifelse

}

{

dup /WMode 2 copy known

{

get 1 eq

{ _italMtx_WMode1 }

{ _italMtx }

ifelse

}

{ pop pop _italMtx }

ifelse

}

ifelse

makefont

dup /FontType get 42 eq Level2? not or

{

dup length dict begin

CopyFont

currentdict

end

}

if

1 index exch

definefont pop

/_pdf_FontDirectory exch dup _safeput

}

{

pop

2 copy ne

{

/_pdf_FontDirectory 3 1 roll _safeput

}

{ pop pop }

ifelse

}

ifelse

}bd

/MakeBoldItalic {

/dummybold exch

MakeBold

/dummybold

MakeItalic

}bd

Level2?

{

/pdf_CopyDict

{1 index length add dict copy}

def

}

{

/pdf_CopyDict

{

1 index length add dict

1 index wcheck

{ copy }

{ begin

{def} forall

currentdict

end

}

ifelse

}

def

}

ifelse

/pdf_AddEuroGlyphProc

{

currentdict /CharStrings known

{

CharStrings /Euro known not

{

dup

/CharStrings

CharStrings 1 pdf_CopyDict

begin

/Euro pdf_EuroProcSet 4 -1 roll get def

currentdict

end

def

/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def

/pdf_PathOps /pdf_PathOps load def

/Symbol eq

{

/Encoding Encoding dup length array copy

dup 160 /Euro put def

}

if

}

{ pop

}

ifelse

}

{ pop

}

ifelse

}

def

Level2? {currentglobal true setglobal} if

/pdf_PathOps 4 dict dup begin

/m {moveto} def

/l {lineto} def

/c {curveto} def

/cp {closepath} def

end

def

/pdf_PSBuildGlyph

{

gsave

8 -1 roll pop

7 1 roll

currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse

dup 9 1 roll

{

currentdict /StrokeWidth 2 copy known

{

get 2 div

5 1 roll

4 -1 roll 4 index sub

4 1 roll

3 -1 roll 4 index sub

3 1 roll

exch 4 index add exch

4 index add

5 -1 roll pop

}

{

pop pop

}

ifelse

}

if

setcachedevice

pdf_PathOps begin

exec

end

{

currentdict /StrokeWidth 2 copy known

{ get }

{ pop pop 0 }

ifelse

setlinewidth stroke

}

{

fill

}

ifelse

grestore

} def

/pdf_EuroProcSet 13 dict def

pdf_EuroProcSet

begin

/Courier-Bold

{

600 0 6 -12 585 612

{

385 274 m

180 274 l

179 283 179 293 179 303 c

179 310 179 316 180 323 c

398 323 l

423 404 l

197 404 l

219 477 273 520 357 520 c

409 520 466 490 487 454 c

487 389 l

579 389 l

579 612 l

487 612 l

487 560 l

449 595 394 612 349 612 c

222 612 130 529 98 404 c

31 404 l

6 323 l

86 323 l

86 304 l

86 294 86 284 87 274 c

31 274 l

6 193 l

99 193 l

129 77 211 -12 359 -12 c

398 -12 509 8 585 77 c

529 145 l

497 123 436 80 356 80 c

285 80 227 122 198 193 c

360 193 l

cp

600 0 m

}

pdf_PSBuildGlyph

} def

/Courier-BoldOblique /Courier-Bold load def

/Courier

{

600 0 17 -12 578 584

{

17 204 m

97 204 l

126 81 214 -12 361 -12 c

440 -12 517 17 578 62 c

554 109 l

501 70 434 43 366 43 c

266 43 184 101 154 204 c

380 204 l

400 259 l

144 259 l

144 270 143 281 143 292 c

143 299 143 307 144 314 c

418 314 l

438 369 l

153 369 l

177 464 249 529 345 529 c

415 529 484 503 522 463 c

522 391 l

576 391 l

576 584 l

522 584 l

522 531 l

473 566 420 584 348 584 c

216 584 122 490 95 369 c

37 369 l

17 314 l

87 314 l

87 297 l

87 284 88 272 89 259 c

37 259 l

cp

600 0 m

}

pdf_PSBuildGlyph

} def

/Courier-Oblique /Courier load def

/Helvetica

{

556 0 24 -19 541 703

{

541 628 m

510 669 442 703 354 703 c

201 703 117 607 101 444 c

50 444 l

25 372 l

97 372 l

97 301 l

49 301 l

24 229 l

103 229 l

124 67 209 -19 350 -19 c

435 -19 501 25 509 32 c

509 131 l

492 105 417 60 343 60 c

267 60 204 127 197 229 c

406 229 l

430 301 l

191 301 l

191 372 l

455 372 l

479 444 l

194 444 l

201 531 245 624 348 624 c

433 624 484 583 509 534 c

cp

556 0 m

}

pdf_PSBuildGlyph

} def

/Helvetica-Oblique /Helvetica load def

/Helvetica-Bold

{

556 0 12 -19 563 710

{

563 621 m

537 659 463 710 363 710 c

216 710 125 620 101 462 c

51 462 l

12 367 l

92 367 l

92 346 l

92 337 93 328 93 319 c

52 319 l

12 224 l

102 224 l

131 58 228 -19 363 -19 c

417 -19 471 -12 517 18 c

517 146 l

481 115 426 93 363 93 c

283 93 254 166 246 224 c

398 224 l

438 319 l

236 319 l

236 367 l

457 367 l

497 462 l

244 462 l

259 552 298 598 363 598 c

425 598 464 570 486 547 c

507 526 513 517 517 509 c

cp

556 0 m

}

pdf_PSBuildGlyph

} def

/Helvetica-BoldOblique /Helvetica-Bold load def

/Symbol

{

750 0 20 -12 714 685

{

714 581 m

650 645 560 685 465 685 c

304 685 165 580 128 432 c

50 432 l

20 369 l

116 369 l

115 356 115 347 115 337 c

115 328 115 319 116 306 c

50 306 l

20 243 l

128 243 l

165 97 300 -12 465 -12 c

560 -12 635 25 685 65 c

685 155 l

633 91 551 51 465 51 c

340 51 238 131 199 243 c

555 243 l

585 306 l

184 306 l

183 317 182 326 182 336 c

182 346 183 356 184 369 c

614 369 l 644 432 l

199 432 l

233 540 340 622 465 622 c

555 622 636 580 685 520 c

cp

750 0 m

}

pdf_PSBuildGlyph

} def

/Times-Bold

{

500 0 16 -14 478 700

{

367 308 m

224 308 l

224 368 l

375 368 l

380 414 l

225 414 l

230 589 257 653 315 653 c

402 653 431 521 444 457 c

473 457 l

473 698 l

444 697 l

441 679 437 662 418 662 c

393 662 365 700 310 700 c

211 700 97 597 73 414 c

21 414 l

16 368 l

69 368 l

69 359 68 350 68 341 c

68 330 68 319 69 308 c

21 308 l

16 262 l

73 262 l

91 119 161 -14 301 -14 c

380 -14 443 50 478 116 c

448 136 l

415 84 382 40 323 40 c

262 40 231 77 225 262 c

362 262 l

cp

500 0 m

}

pdf_PSBuildGlyph

} def

/Times-BoldItalic

{

500 0 9 -20 542 686

{

542 686 m

518 686 l

513 673 507 660 495 660 c

475 660 457 683 384 683 c

285 683 170 584 122 430 c

58 430 l

34 369 l

105 369 l

101 354 92 328 90 312 c

34 312 l

9 251 l

86 251 l

85 238 84 223 84 207 c

84 112 117 -14 272 -14 c

326 -14 349 9 381 9 c

393 9 393 -10 394 -20 c

420 -20 l

461 148 l

429 148 l

416 109 362 15 292 15 c

227 15 197 55 197 128 c

197 162 204 203 216 251 c

378 251 l

402 312 l

227 312 l

229 325 236 356 241 369 c

425 369 l

450 430 l

255 430 l

257 435 264 458 274 488 c

298 561 337 654 394 654 c

437 654 484 621 484 530 c

484 516 l

516 516 l

cp

500 0 m

}

pdf_PSBuildGlyph

} def

/Times-Italic

{

500 0 23 -10 595 692

{

399 317 m

196 317 l

199 340 203 363 209 386 c

429 386 l

444 424 l

219 424 l

246 514 307 648 418 648 c

448 648 471 638 492 616 c

529 576 524 529 527 479 c

549 475 l

595 687 l

570 687 l

562 674 558 664 542 664 c

518 664 474 692 423 692 c

275 692 162 551 116 424 c

67 424 l

53 386 l

104 386 l

98 363 93 340 90 317 c

37 317 l

23 279 l

86 279 l

85 266 85 253 85 240 c

85 118 137 -10 277 -10 c

370 -10 436 58 488 128 c

466 149 l

424 101 375 48 307 48 c

212 48 190 160 190 234 c

190 249 191 264 192 279 c

384 279 l

cp

500 0 m

}

pdf_PSBuildGlyph

} def

/Times-Roman

{

500 0 10 -12 484 692

{

347 298 m

171 298 l

170 310 170 322 170 335 c

170 362 l

362 362 l

374 403 l

172 403 l

184 580 244 642 308 642 c

380 642 434 574 457 457 c

481 462 l

474 691 l

449 691 l

433 670 429 657 410 657 c

394 657 360 692 299 692 c

204 692 94 604 73 403 c

22 403 l

10 362 l

70 362 l

69 352 69 341 69 330 c

69 319 69 308 70 298 c

22 298 l

10 257 l

73 257 l

97 57 216 -12 295 -12 c

364 -12 427 25 484 123 c

458 142 l

425 101 384 37 316 37 c

256 37 189 84 173 257 c

335 257 l

cp

500 0 m

}

pdf_PSBuildGlyph

} def

end

Level2? {setglobal} if

currentdict readonly pop end

%%EndResource

PDFText begin

[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis

/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute

/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde

/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex

/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls

/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash

/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef

/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash

/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef

/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe

/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide

/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright

/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand

/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex

/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex

/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla

/hungarumlaut/ogonek/caron

0 TE

[1/dotlessi/caron 39/quotesingle 96/grave 

127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis

/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE

/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft

/quotedblright/bullet/endash/emdash/tilde/trademark/scaron

/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling

/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine

/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus

/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla

/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters

/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla

/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis

/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash

/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave

/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute

/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde

/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute

/ucircumflex/udieresis/yacute/thorn/ydieresis

1 TE

end

currentdict readonly pop

end end

/currentpacking where {pop setpacking}if

PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin

PDFVars/DocInitAll get exec PDFVars/InitAll get exec

%%IncludeResource Courier

[/N60/Courier -1 TZ

%%IncludeResource Times-Italic

[ 2 /fi 32 /space/exclam/quotedbl/numbersign/dollar

/percent/ampersand/quoteright/parenleft/parenright/asterisk

/plus/comma/hyphen/period/slash/zero

/one/two/three/four/five/six

/seven/eight/nine/colon/semicolon/less

/equal/greater/question/at/A/B

/C/D/E/F/G/H

/I/J/K/L/M/N

/O/P/Q/R/S/T

/U/V/W/X/Y/Z

/bracketleft/backslash/bracketright/asciicircum/underscore/quoteleft

/a/b/c/d/e/f

/g/h/i/j/k/l

/m/n/o/p/q/r

/s/t/u/v/w/x

/y/z/braceleft/bar/braceright/asciitilde

/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/.notdef/exclamdown/cent

/sterling/fraction/yen/florin/section/currency

/quotesingle/quotedblleft/guillemotleft/guilsinglleft/guilsinglright/fi

/fl/.notdef/endash/dagger/daggerdbl/periodcentered

/.notdef/paragraph/bullet/quotesinglbase/quotedblbase/quotedblright

/guillemotright/ellipsis/perthousand/.notdef/questiondown/.notdef

/grave/acute/circumflex/tilde/macron/breve

/dotaccent/dieresis/.notdef/ring/cedilla/.notdef

/hungarumlaut/ogonek/caron/emdash/.notdef/.notdef

/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/AE/.notdef/ordfeminine/.notdef

/.notdef/.notdef/.notdef/Lslash/Oslash/OE

/ordmasculine/.notdef/.notdef/.notdef/.notdef/.notdef

/ae/.notdef/.notdef/.notdef/dotlessi/.notdef

/.notdef/lslash/oslash/oe/germandbls/.notdef

/.notdef/.notdef/.notdef

/N57/Times-Italic -1 TZ

%%IncludeResource Times-Bold

[/N45/Times-Bold -1 TZ

%%IncludeResource Times-Bold

[/N46/Times-Bold -1 TZ

%%IncludeResource Times-Roman

[ 2 /fi/fl 32 /space/exclam/quotedbl/numbersign

/dollar/percent/ampersand/quoteright/parenleft/parenright

/asterisk/plus/comma/hyphen/period/slash

/zero/one/two/three/four/five

/six/seven/eight/nine/colon/semicolon

/less/equal/greater/question/at/A

/B/C/D/E/F/G

/H/I/J/K/L/M

/N/O/P/Q/R/S

/T/U/V/W/X/Y

/Z/bracketleft/backslash/bracketright/asciicircum/underscore

/quoteleft/a/b/c/d/e

/f/g/h/i/j/k

/l/m/n/o/p/q

/r/s/t/u/v/w

/x/y/z/braceleft/bar/braceright

/asciitilde/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/quotedblleft/quotedblright/.notdef

/endash/emdash/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/.notdef/.notdef/exclamdown

/cent/sterling/fraction/yen/florin/section

/currency/quotesingle/quotedblleft/guillemotleft/guilsinglleft/guilsinglright

/fi/fl/.notdef/endash/dagger/daggerdbl

/periodcentered/.notdef/paragraph/bullet/quotesinglbase/quotedblbase

/quotedblright/guillemotright/ellipsis/perthousand/.notdef/questiondown

/.notdef/grave/acute/circumflex/tilde/macron

/breve/dotaccent/dieresis/.notdef/ring/cedilla

/.notdef/hungarumlaut/ogonek/caron/emdash/.notdef

/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/AE/.notdef/ordfeminine

/.notdef/.notdef/.notdef/.notdef/Lslash/Oslash

/OE/ordmasculine/.notdef/.notdef/.notdef/.notdef

/.notdef/ae/.notdef/.notdef/.notdef/dotlessi

/.notdef/.notdef/lslash/oslash/oe/germandbls

/.notdef/.notdef/.notdef/.notdef

/N47/Times-Roman -1 TZ

%%IncludeResource TimesNewRomanPSMT

[/N81/TimesNewRomanPSMT 1 TZ

%%IncludeResource TimesNewRomanPSMT

[/N41/TimesNewRomanPSMT 1 TZ

%%IncludeResource Times-Roman

[/N39/Times-Roman -1 TZ

%%IncludeResource ArialMT

[/N52/ArialMT 1 TZ

PDFVars/TermAll get exec end end



%%EndSetup

PDFVars begin PDF begin PDFVars/InitAll get exec

71 618 226 113 rectclip

%%BeginResource: font TWPPMU+ArialMT~47

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /TWPPMU+ArialMT~47 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A259BC9984DB874CFBF432DC23D7457637070526912FD9815BE031

9519877F20C9609B5B58AAB0EFD1AB99AE9E6EBBFFF6479EB9E420D146762F01

59B41831A5312789C775520554EB9FEF7F7C5A0B69609D183F654CC9E516843D

39D400085ABA9646DA481FF9468E167556FF2D2521815E2A32874AB03E72C7AB

1024243EA677680BE387625F955E87713831EB3219318ED24174C839554897C7

213358F9708DABA15D2FB9C8340A6A684CCB04C1845415C81C9AF8E6861BDE41

2BF46CF45BE4D7B4D65A6D990C67FC10310576CC8DBBA7765CAB918E883BACBB

97147F7D72EA3A2E1B3AECC1CD984BBA20123B0FE78C02B6687368159B715447

9EB249424F55DD2FEBBB88CB2CB3D9E6BD1F5E41B28EA25FB4982745B9EFFDDC

58FFC60A0CDD5990D0AC927857559AC8A39DA004A9E99A94FCD78B20D94429DE

3D17CC2BDC4A3CC75392C8C38FD13BD6BF369D0E51989A9E405EFF62FA317CB6

9C49F642460F43F7896B919594E672389A0AB10BB6A0319B7DA61A23386151B2

6CD0BEBAE4A37E391BE5FCEACDFF7AFA8793CDAEF8FB4AAE31057301D2D43C3B

0BC75E9F333139988AD175E4DCA73E35F4AD723D4B6D08AA2622B36413277BAA

9C65600C5FD300866842A91675A392048FFF0F8EA0B04869B01F1BEFEE9D2543

1864509A8B7AC913BFEAACE31AC4B2245B1A474E8331D296456B3484E2AF77B2

3D0E0A705F9684A816F6F3303D2D635CD57FD9CCC01AFED57B312FECF713D2EA

4FCA1A4FCA1D0518FBEC3BA59B13EF7E015ACFA7393D0C6C32FCE02073F6457A

4A86547BD5CBB44261D74A216C4D91B11B0CD0D131CA56CC8B39E7D39E08F133

F4BE00F38E4E9B63DEEAE3B9614612C111C007FCC425B672842DB76BFC

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/TWPPMU+ArialMT~47 findfont /Encoding get

dup 0 /.notdef put

pop

end

/TWPPMU+ArialMT~47 findfont /Encoding get

dup 0 /.notdef put

dup 79 /O put

dup 112 /p put

dup 116 /t put

pop

%%EndResource

[/N48/TWPPMU+ArialMT~47 -1 TZ

%%BeginResource: font OGCUNH+ArialMT~41

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /OGCUNH+ArialMT~41 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A18BEBA8D67DD8AD36B7F2459BDD5018192B26B1196D9822275B7E

7116DA2B71C1A0BD3FF9F3FCBFA20466CF1F99EF43F07D8EEBE6D20CD1F74810

527EF849CA7D3A47A075C579CABC23DFA76068EB6C2545483BEDE3F5036AD096

95D44D3AF1F3DE68B49C231BA72A6C0F914ED70519CC4C1E28E058061A7D304D

FCA2C36D91A36B15655F225FB9DE99B3072122C81748CC079616345904F8F37C

C7F95A75EB51E927A490401ECFAD06CB01C4EB75FBAF00E3DE83EF1F35C94410

04E7B1D25AD35361E694D89ECC0A72C605EB4C9D7D88A29FC9115CE89A379FD4

C1A4E52ADB52D3C654A49B201C33A0E64899F3935FB11EC87C168D736D95D91E

CD594E4FAF03BF485818BA103ECAC3E87F72AE5856D990E4536CCAB54D452CE9

BE3C07AA91A93F489997B9845FBC29CE29CEA04959987633F2F395973D9BCC1E

F1D642C62512AC59555F83DF8FB03C9F5328563D36909495C6CAA400AF2803E9

805F933A5E8469E2F7D8CF8A58C3FDC26C3F6BC5A6A197174E29185023335B31

49C04C2065931AFBDA4267C1C0DC4D966E0D373B1FAE511F636707FDE0428D27

8CD58E604F898A821A607E115D78DC72DA764158960D53157D53BB98A4750E89

0791B4931367FA9297B8F57AB9972B85446060B224348392C259001C556CA4FF

28344533E4D528C7ED3C4AEFFFDD6E256FA0E42203430943A3FC456E777EAC14

C9BF3B7D09525AACAE4A6687834BB5FFAD6D2E1A6D254A25445F3DFEADA91B9E

B63EDC882598237FA32519923EC02D15A0D25E4ABE5A571EF333F6BF909B231C

D842ED1DC55AE14DAE113A288504DF4849AECB8CC9C823CA48BEF1F9B13A2D3F

C46539206CF0CEF63BB8F6552BE9364D67D6B39778D4BD2569B935FD862C8EA2

4E26795DE934852A7018E3B85CE303AFFA2182984F2EE5ACE4F39D970A502AFA

F9CBE6D9EBA5CE0E114C24D87E11B9E14BDFAB759A637774FAB8B429AC0A0036

EFAC9429FD3F5B15AE3B4E8C1201637BA3434279592BD2552309725ABB188F59

6B747B36D1BF0D3493FBBAD3F5EB2D7F40C818DD9ECFFB1EB8D896C481DDD06B

35EB9551DE18D5BBF26714656CD44754C6B2088C110B82B8D4B3661EAA663D32

F104CC46F44C2ACFC76FED41A0F2B05B7B41EFF4A37F7C0D5DC28C35E17F6140

019D18B7BBB5116D61F535122FC1D6E7351F19E0DB3E12A9156BD90771E21877

107BEE9A31AC1E5B36695DE9CEC2019EB79CB7271A579F459C886F87D2B10358

83BCB25720684831CCABC45EC31548BBCA6C7C3CAA7D6533D90C1E8DF8CD9C1D

768155AAC4C84085EDA4C7D6E53D50850C87EC5700B6A0096EB9EE2987951B49

D8F300EDB61DFFF0BBC71A93DEFFF6467E3B50E99ECE362A8C9C066D613026E5

A9C940B5968967BC8A6F1C9E663E4281DF5FA67C13AABF9087CB59EFC9717659

ED4B3E22F50B0A5964D490EDEA4C8912279A80D6959C1A04DCE4B59BF46537BD

3DF45737103A25DC0AB7238687BBC7D18AA8725E95880EDC87EAA210BDDD4EA3

6D0233BE65271564FF7D61537088B0874D1DF9D41C40368399A80433D3743DE1

C433

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/OGCUNH+ArialMT~41 findfont /Encoding get

dup 0 /.notdef put

pop

end

/OGCUNH+ArialMT~41 findfont /Encoding get

dup 0 /.notdef put

dup 83 /S put

dup 99 /c put

dup 101 /e put

dup 111 /o put

dup 114 /r put

dup 117 /u put

pop

%%EndResource

[/N51/OGCUNH+ArialMT~41 -1 TZ

%%BeginResource: font ZJMUMW+ArialMT~3d

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /ZJMUMW+ArialMT~3d def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A5D5842D86A6C9AFDD18ECD5CAF2DE803E7A7BA868FAB984229798

ADDAAE49C9EA48A5D2DB77F25DC348952B5767EA25D6B45FB5128D1FE19A13A9

7002F975B66C9D5CC3EE3F1761A538F9022226136BFAAB026D01E0FB9845A9FE

FBF6A04BAC4A2EFBBB973EE935BFE23007877F33299A211C3D90A328B2D7C191

4958A3E05057A5E462736BEAFAB78E885644D62D94E30F82AFE894F988F779CF

9FECE9B95C4F0A5D21D3723DDEEEF96400AA484030C6D05D838398C95647491D

BC0D333156ECCE454ACFE3ED1588C866DA6139A7EB9B135E23DFA3D54FEB26E8

85DA2226E79F8E7312B94721BECB4B311B600555662D256B8CD5585E1A77D228

599954C42563DD55EA8E81E3A3B44E0C96461FA8CDB355140EFB150C899B1AF5

37A3FC4CF21D77AAC53D78C1170AC920B8BCC1F418BB5D809E8B5631E57CA8F7

75BE0997CD1D3F3B3A30C75702DCD9034E4FA07ACB4C393BAE91E3C20B4BDD4E

28A6A9CD35E53FB9F88C1B35641F104F43BDB3F882BB141DB7A2F75BF71D1459

ECBD8B040579BEDC02A93FB8415F4664B67A8144C5B87CCE66E97F06383B941C

CCBE2DB149D5EDF7F367DFCFBB082942F3D7E23805E65524D091B9F5A5584661

9F5E55E9EFCE8D71696618CADF4E39319329E4F972DD9C09FDD1028715633E72

59879F0D45B306F85B8106B92F3F1348EB73C59334DEBBF2A21F8CF93E27DB62

FD955F2BE3E29D052F407C73EE62ABE49C0C94EC1B981ED469673AA03BBED205

FFC5E80BA4A37C0DBCA8188EEFC8C7CFDFA65B91493574F1E7262FC78F0C0542

71EE9C3A061E656D4272EBB7D12365555D7204E649AF46C97A3C8FEF0A10899D

11EB37CF1E612071DD9C2942B129B3E92A213AA82860EC9D6692E3AE4CE6AC93

14BE238EBD9BDE963D77AF3597349C77140E15582FD8B52D509FFC323BE1ADA8

B51971030F7BC855D9E03B25A6A91EF9675677F85A8071DB1E6F6C6FB86355A7

DFE10ADB40E2921CA88485C759AE50713BC70F2C1D5E78CE8D79A6C7D93217AA

7773FB631E4E1DF000C771D9771919891CF147FD0CC90D7C9A0B609A32EC976A

9E9EEA77363D633A09CA6076FB8ED55FDD55EB40E56B25D0B9D4B5B8FE5015B8

6AF68FFA9FE5F12D655A6EC26BAB77154C9CD88F4084858A93E7743E07ED3F63

F6BA61D50895F12884CFE801EF1E9C987C9A1EFC11C3C5F0DDDCFBD738C80425

DAA05AB310FA7642C111A041B1766A84CFCA1679970F3BAA698B686ADDA540F1

451621FEB3A37E236BA5627BA833E2A29EA883EE9F7F683067DE7740BC114F24

83A2C5270B7ECCAAA522E8BF1CBF5749C30B2989C9A103433F3E023BD94A8BDB

49917F0B42B1DC5C4F323AEC77C18934D1233169AF3531231A9900918F8A4024

5E0F44AAB9276B3F672B215E6A462BC856028A3B19FAFD409C2853E826A43DE4

51A02050A1FEA0763EF8D4E1EEEBBCC889D066689193444F5B4A46F229055443

720765B15EC8AAA278A9D0D2A1524CD3643CE3DDF69F815CAF88623DC03039D5

E5CFC7BCBFC86598C0F062BEA4CF2C27B3C7BA0DFD4B16EAFD214A6886C41D52

D8329097BEE435D2106A74E6E51F5CB649562B97AB5BEAC905218D6BF0A79B67

4B8032EFECD6C19088EAD58CD0166F8E7A79C45362352DEA2F277F08001B1660

544395B9EC7C2D0D9AACA76851AB9AD4100AD0C567B465B5F91C0B49D33FA82A

A3A0C745BE9C2B0EC02D6177BA60BFE8042F52777EAFC54027966E18CBBC5B51

63BD1D296C9EFD52D0D73214EB1CD435396EAAD4E084E505FC17D071F11923A9

1478D795489531ECB5DAA57EB300704E23050AC45CE0AB131D477926B88A07E5

F67B6A9D5A64697E4195FBEAAF786A2724C9011FDB18D61CAC897690075DCB4A

736B7F630A15BD57254F71DFBB7D7BF090CBA999D00ED8D4807424AB5726A62F

034A8D58BB2E9464DF5D983ECF8BA2DE9A60A8B9688DE2DAAC3F9B577CEB6745

58DC45C7297575AD8E5B6EB6BF7C3AFDA0B7A853A661DD60BFEA39C62FB948AC

872CB6426305B83275016574E83C92E7C07943D0A144EBF39610F304C3868878

AB7FA0FB84C5ED9B960E3A6F8B4226C90AFD5383569C2D9E335396B5F49CF971

9A9596FD7C1B839C1890B3740DEF54192195CB0D309C263AD847B425A6ED1B5B

BB45769D4AA7B68D4F9E0558B78AD191EDC11EFABA1C21619817A0975C7B85C4

81B917B6DF02E299CE03FB28B3E3427835A46A6C6E3E42049557B2B6F0DCD638

459632CE39595EC4F4B175D029D3435A7A6DF88708B0C44AFDF87F9620A78F4D

B3572925D02DA44168BEF45D2A22C792E44DB695856B9DCE3BE8F7E84DA97097

3373B8C2C5E5AF3379573EAC8246BE7612CF5A6D307C1D1E580D09CBACD6FA96

2FBFDFB3C8353538F68B7218192407192FC89ECDB18C734007AE1C2238B0C473

32F9082ED05C7B5B8E4F51766B59493518CDFE9C179470ABA8A5EB83DE85CF9F

1AD9E27752A48966084CE2EE5A473910AA7B06FA5CD8C226BE874027E01A982C

0FF4B05039AAE1927379A2E813EC79D64A72793AF00F79CE4CE3A9E0DECFD7EB

DF19029DE1501F13BDE1FF44C42FC612034CFA9FA1EB25D9B98B18742F96C129

1DD81217052467D592FD34F518BE92EB76C816ACADE8314EE7DC962B395A0BC6

3FE384DAEA52014EF575EBD64857B497036639548F55A246F831E8B9A065A46C

C2315AAE195323A9FB246E6F6E2F3F12D307EE091F970F01DE342954091FAD25

314B02044670722C2EABF99A377EF4E167FEA22873DA59DC8AAB1154774B515F

E9F668707E971689BFC528EC480892CFFE1162B7C69EED8878BB1AF60B59FEE6

C539BBEDCEC9A8D913D734DD23C761E6D028AA850B1CD714EDD514FCE806C05B

0A073BF863CC48C54A234CE3D5E462846188D458AA7955D76F13D600A9C381E5

E6F5310370CF6B0042824F15015234A8941E0EECEA5DC233281D01CC026127F6

FBDB31059AC5708DCFE489B27DA1FFFF6543E2949814B7EF03E1C2EF480F2A58

F981F9AC424A1B8C4102E36C4A01A20F460060086D6BB45D98C723FA755155D5

C7C2350A023F797D9E6CB1D05B0EABFAD46DE2F09B01D93A3FF3EF67CC3513EE

79D6D80F4BF3F01DD011C3B84177E29DF962254ADFE27636F6340188B2ACCF4E

87895E2D78A26729BC34D8AF2CE26050E71BC005475EB201A12DB65EC44BC224

DA445D09E5BAC0656FFA332241E88B68F09089D601911778EB4EAC3364544866

35EA7C557D837A11986E0D102FC99B713D4B48C5E5D6D6072AC9374EDEB7F5D6

B42B83D55716C569A06E185684634F2B64EF1EDF3289E21058B1EFB9AA8881C5

1CD2DC040F0E44DAEC8B0341E96EBB16469FB3D27901237ADFC5BD531A973588

77BF5B676D0691CF5BB9BA388DEB865F64B4F0F4707D794344C2C80988F7CF47

F9F64E84396549A4B8FAB47235A51CF6C12A3CC6B7B1F37F5BD55B83AEA14034

87C6B347A870F8036F57ED14E02382A9B5870CAB82B9A8F6714425D76B352A27

48907A4A985E23CCE50B97D6458B0190C84B801314A1A00944BDD2C66C42EF78

4F2332A91CD9E90AD99B90FB4F5D270CC32221820EE05E7E065F6254A9F49057

89F3B8A2A09CF9B14941859299EC4BAA9B4B5D96C9AE103490106CE5EBE0558D

2A0C5EF7897D597AE945881A020178DF88A1F63B9A7F5749978A19C055C61164

0C793B008BCDFF36AB34E048D452B712AAD28077AC5968C1B69D596D2B3806CB

8A9916062723F9D5BD43149139ADEC44E5E89CEDAA0377F69CA33B9759C2CE1C

3FC6B883DF939E457480C8DEDABB35806E42EF26B6B0ED4383DE3D74B3D746DD

D00D49C8EBF0A6652F9B13150A96ECE8838E75F4D1112421CC327FCF79EF422A

DD8AEF7AC64316EE0F2F6CEF56F2C8494A862AAFB5C545AE4D83F8DB042E7770

52F93AB726CE0B823394A22ED0B3379482E96F9C90A64C349173226EBBF4D9D0

6C3D205DE96D299BBC31780906AAEEBD7D3B1702D8B3924F7BCDF168D132BF4C

F5A1880C72CC23D5D90DF01BB07DE8839E0A9EFFD9AE64BDD5444D50E6E2451C

42649A6B0DCD9CF4ABBB3B9CB0465728FEBEC98EE1DDFC840B3EDC41DC49714F

76D2D4AD4E92CB2498FF6BC40863FB2A51A3E5D92BA7F023E595F54155BE3501

559E2412BAF8D1145CF5D50BF972D9D39340E935A7912CF31EB3362BB226D477

A95FE2733C29427C49F2315347235B5B63ECAB17E55E5E78DEEFD339437CD5D3

7F1E2F9EDC6219FE4C8B79665654F1C541BCA64DBEAC4E0CF6D7960D25D9C5C6

C3A83FA3A95397EB32C17A0D370DDF841BF0AACE574AB95B4D4BD13DC93F92F5

186D9D693B3CF21FC0AE8AC128CBF505D21753692D4D56B64C0CAE92DEE58B38

1272C1C610E19F18975C46BD2032DE17BB733F8D4C14CD779BE0CBCE441017D1

9089521DF299E2D347C74D22E5627D7C1184D2007C23A68726DCD75C4F9D3A90

D3543492D836B47DE2F2DEE582784A756EADBDA009DDB2C8EEDD4397340144D6

DE09FFAB597F8E74A95142356568C36170AC576D90DBFC95A803DEB787AA2627

E5F4118A1FD1E23A566168BA9428177DD9AF7BF7448550E653DAF214C7E26D0E

F8A35D67F7B4C88BCF80E214CCB3DDAC500F770937EFDED41EDAE04AC523C6DE

6D34B29F5BF480CE5FBF16E6D42FBD1923E90B37E1AA50D1FEF0603CEE6356D7

821C343C42526EE2CDEE8B0C572E717F121C29D5CA45EACB9EC293ECF0D13C34

306BD4E1FA566ED1040D5AE89947EEFA9121BF4F7E71B466DBEA1FDC7DA24F2E

1F7BC63389583687AF8D3FE1D0B8E79B4BD6EA99133141BFFF3015CA97F6BC42

926639AB0C23CC04029CB7514E97FD9C33A8D6DC50F904B2CD43BB91117A1AC7

BCC9A6F9897C1CFE2B7DA2C1E06C7FAB265A4F86BF92B875FC69791F1AA74A3D

8883E0C5EB7D6EF2E19FDEE63E67CB80F482B6AD3FA0F00A7B42BE8889ECBEA8

64D79CB9C31823C41E77FC401341339050944D7463AE34D5A13A20E11A5F2400

37DA6C7A15CC7C21FEF312FB742FAA4D0A7B7D87999E6BD21EDFB185AB09207B

25AC54CD36403BEF3BA0552DE8F7F1CAD140C8327636634943C60E4199E417BF

8A6FCB745A07B484A2B0BEE550C4828B5157E0A4F40B67A98ADBDA8B21A45909

D7AA6EF52972E6BAE7F3DFA432FB6EA12889899EECAC223F6E11692310EF59EB

105341CADE92F4D8EF95EF042D33A18FFB22D46DE27F89EB273E098B7E0AC4D2

AC4FCF74225E6E9A6F6B3CB2B9FF1F97F4140B310E02049CAE392373D5B03CCD

C00489C4493D3FB62ADA16A62F7B4519ED2C9FAD29557B6980E5DD0821A81A11

2B60591CC10BF67D29BC7826F3082C3D36939C8DD26B053D9ABBBA351A00D89E

C684133984EAEAA33C6FDD99229ACDC6972CB8F8B29E949732766E0C8B80346A

D7E3B426FF64981FB86C85276671BECD88D08FCE30F3AEF6B0B4A897216E4672

092EF65FF2EE3E14F972503805712540029088A77FDE93BD32887D80C1677BDD

03ED24C7A7DB72A6921BD56FA1232F7DFAE46579DD11F88B7EFD0ACDC1912170

840806652BBE0CF48830971D9CDD5EDA6139482F8F2113E69739FE03E3EB7B40

E49C35CABEE2B4091D2CC00FA2DC221F4D0C58DC87841743E6D4533BFEC8A821

7AEC889671BF0F69E662B05BB7F80CB0

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/ZJMUMW+ArialMT~3d findfont /Encoding get

dup 0 /.notdef put

pop

end

/ZJMUMW+ArialMT~3d findfont /Encoding get

dup 0 /.notdef put

dup 32 /space put

dup 40 /parenleft put

dup 41 /parenright put

dup 45 /hyphen put

dup 47 /slash put

dup 59 /semicolon put

dup 62 /greater put

dup 73 /I put

dup 77 /M put

dup 79 /O put

dup 82 /R put

dup 83 /S put

dup 97 /a put

dup 99 /c put

dup 100 /d put

dup 101 /e put

dup 102 /f put

dup 104 /h put

dup 105 /i put

dup 108 /l put

dup 110 /n put

dup 111 /o put

dup 112 /p put

dup 114 /r put

dup 115 /s put

dup 116 /t put

dup 117 /u put

dup 119 /w put

dup 123 /braceleft put

dup 125 /braceright put

pop

%%EndResource

[/N35/ZJMUMW+ArialMT~3d -1 TZ

%%BeginResource: font HCLPKB+ArialMT~37

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /HCLPKB+ArialMT~37 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A5C48AB7AF79B79D736D42CDE21F0363666AFD1B2E8230C07E3DD1

B4503AAD5E63ED2314400EEB16531F7335B34CD2BD4FD38F90ECA74DA87497C1

756F7178A45C7EC0ED25E0AE233807F0EAF3DDE653C42453A43F319A023AA37C

F4C2DBD26BEF155A2AE1A880A254FA8518170FE7B76A5120CBB49ADCA57CF20A

5502FF35F5488673A03F11BF1E2CDAD7A1AACCCF7C7B8C675A403D9FD5A91866

C8734B5BF8B99A08AABB8F8BE438653FFD4546A739EDE655ADC8879321A48918

747722A92947A50FFE4166290F65482F2E1F537BD1FF45615BC89138EFBB97B5

18206D6A14E8BA71991D8108E7FD66A5AA3187AA0E3ED0D01111C2658D4401E5

7CF7C0CEB595C755F2288DC8B956839AB45B82A9FA6FC65E12F789DC971375C5

59E78953B748AAF161932139ABF91185E985FD840D0E94BB747D02F2D869B2B9

7679D51D6FC355BE7639CF23DA069EB6972666AC0910F99A6213751D65A79D78

53808C86826FBB367C74E196FD5A8F8ACF13FB23F581F788E2961D2795

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/HCLPKB+ArialMT~37 findfont /Encoding get

dup 0 /.notdef put

pop

end

/HCLPKB+ArialMT~37 findfont /Encoding get

dup 0 /.notdef put

dup 108 /l put

dup 112 /p put

pop

%%EndResource

[/N30/HCLPKB+ArialMT~37 -1 TZ

%%BeginResource: font MMCJHH+ArialMT~34

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /MMCJHH+ArialMT~34 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A367D85BFE7DCF51A4B1428D17CCFBB38855B20F264AED104C7F38

0432D121C51BCA5B423A43BE147BE85241E84318442F2F0386B31CBCF75E8A7F

E1CA92CAED009304155349E29FFF3AF4467E81183A43F1761371EFE7737293B8

358D800562B41E3621FDD577A69DECCD8D0530A8DF883DFD5D67645B9BEC58D3

502AF80CD62D1D9FD8CE8A1247ED876FAFD508DE5585EC27F7E12FB08A7E7B54

7927081BEC6D2D40DF6A5C5F4EC8157CA160480C1335517C6D996921616AB728

62B9120577C3B434E4F8D9D12D32C45B3EB2529D380566BF6B104F36CB5C2044

629CCCB40C98D5A293B50825C29AEBD6B3811270B24D5545C4EFF656E0B04F07

7888E86FEC1C5D2C17633DC251D04B1108A681D971B0E499860873AD0824A075

CEEEA405C6AD57F3CD6B70CEE8A2883DEFF36FBDA1C30491A54424A4F4BBE58E

49487DE6042DB85A5A460EEBFDD0CA09A5FAB3EB284F3BDF09B4DD5B6F9A1014

C8CBB593BFFC0EC32FD35E731EA7D45878BC90EC90223B8B26026ABF5C0660C5

65824FC595F60775A5F5283B91C1A53A42624A63CCF36F92112C7394A37D59CA

F70BB7023E0CDE5857C62A104B20E5CD9961DF84AA5470800CD224C2BDE69A48

4D3A51CF1B2C8A47CD84D0DE91BF0B7A2F14D106D15CA95AD2C7B55AF66C1BD2

0A378FAA84A369135296C0AC81CA4FBC98A3179B748D7517418B14A52C138997

D09F7FE4FA0E079836C72BF9E4D5D0A352E7267049FE9956D7EF7B7E8BBF8BD8

E4A3FFE12AEF054D8CEFDC0DB6EB732BF81CD9D7D46C937E5FE28E03526E731A

22C444CDC18BD7E7CE950EF1314846288FF371D289E8DDF3A5C9ED328811516A

21019740849CA9C5404CEE3F03F530FBE0981E2F48E6D7AE998A3467D3E2B630

31818C37C24FF6C70323A35090C6C2940952F35ADCACADFE59CA8E964019E251

03EE3957A63256B87854847C1B7A557EBC6A29F469E75156646647E28E6D439B

092A6B0A084C1AFB4F658713954CC7B063C9C78100C87441EC7B651FE7AF9B4C

309A1D7993BA383BDDF41BEA7D233C6CECE1316FF277B1A1315D9608AD5D5D4E

AE521F6B548DF8073BC2C934E7A77F8A5FBF79AFCE6044CE7E4BA3785AB9E70F

CEB938955F8DBC72F66C92EAAAB284EF3C75CF6B91B9AE809ECF5CBD3F52800D

C9E155E147DE889B57BC2DA0C3FD3E58AAB00A81BE3340B48C9720B527F48774

E5C3520217C9B8C60A46E56AA2CB940A6CC0A108850E5CC61542F5903E4690E4

22642811DB0402900ADAEB14507B6C15979156DA031E7BC192E22AF79086D405

36251C43A35299C9D14D5CF81343F92371D4140B53965767CD8B06C820573CA3

3554234A2D01DCA5948CE41084019EFE6B4CDC1FFD09A527FD345A3E7A3C6A2B

49

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/MMCJHH+ArialMT~34 findfont /Encoding get

dup 0 /.notdef put

pop

end

/MMCJHH+ArialMT~34 findfont /Encoding get

dup 0 /.notdef put

dup 97 /a put

dup 109 /m put

dup 115 /s put

dup 116 /t put

pop

%%EndResource

[/N31/MMCJHH+ArialMT~34 -1 TZ

%%BeginResource: font XSJKPF+ArialMT~31

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /XSJKPF+ArialMT~31 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A18BEBA8D67DD8AD36B7F2459BDD5018192B26B1196D9822275B7E

7116DA2B71C1A0BD3FF9F3FCBFA20466CF1F99EF43F07D8EEBE6D20CD1F74810

527EF849CA7D3A47A075C579CABC23DFA76068EB6C2545458FF8936FE9391A64

D5A8A1448880D50715145534E59E9430613005EEE7550C409CE0503BF1650BE2

AC03F7B38C2F3285304B4579EFA5B3CBAED6250C9F4DAAB3FA6B1299E9AEEA4D

89055CD9A2356AA207C739E3FCE13B5376C7FC9655A96F77B53B5395FB2D1D5C

A6E537CCB83F391C30C5C1E35A28DC8E05B1CAE62C372B995DFDC8D9352128B8

0332D44F401A72524C8529754BC7EB888F7DD93AE1BA8F7CFDBCA8CAC8D46E33

C3E360213B048E8C336A64593C0DB302F64BCD36B9D4202D62559E89CF92116A

9E4AD7B511A3B3A99802350257C4FB11BA65A93DE9F2DBDD14B2EFBC02FFE11C

BE40569379BB56F037476787964F569781CBDE85B006DBDBE83F4C751FE1C84E

C59FB946A9DFF2F34F66E93DC0F2A4B50973BD4E8D4F8EE8C58587576EAE51AA

6E05B48F6193A0C0207A91C0DDC6A66A271A15B0FBFB1C5E2A16C33223C49DF4

DCA79D03F41A25C0008ECA85745010FB9369D716CA1183878B7B056B67A1BFEA

A16CB0E0DD34FF661D09A734DEA1EDA628A258425BDE9EFFFB47A6188FA620D9

90E61FC284890A03B53F3B93B1001E2AD219890A32A288E56A2D1F8630179D1C

BDE8DDA5D1A0A6FEE9B2CA73C1B46049A28CA22B01F593F62F1F37DFDD2E98BC

7F5DEE60B7758E6FBC084657A4F4F9B6FD1D2FC5529454B74E410DD11BA015A5

F46B45AF40754189BCDC6E97F56FD759E085B5051A7252F6188DC15907A180DA

FC336FA0407579581ABDDD82F170F156058D16BE7E00D8C20971C98CBFC4D9DC

1638C7E38683846D351E56D7F5AC39DF7EEA520D08C9636F7279835087EC393F

C8959A3A91DFCB8426BBA2FE13D9DFC5A15C285D52A2B30F55A256522BEB5A5E

B2A17654E0A187C375F3704CF3BF62FBBB6EF10E90752DC77005FE35B9781DC4

419D8D436789EAA572C4C4B6DEEBB2DC731238A56CC448F095B8CB6159B9AD80

EE7A7E28E479715C42C9C98933215B1BB6599DD1C0B8ABC83DEDDA0C4ECABA6C

404BBA756A7EEC6AC8053FD25FFF91671FF50AFD4F92A1C9143A20B54D05621E

392D86DA33F7F91757F5FFFA4CA1357BB5

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/XSJKPF+ArialMT~31 findfont /Encoding get

dup 0 /.notdef put

pop

end

/XSJKPF+ArialMT~31 findfont /Encoding get

dup 0 /.notdef put

dup 101 /e put

dup 105 /i put

dup 106 /j put

dup 110 /n put

dup 111 /o put

dup 114 /r put

pop

%%EndResource

[/N22/XSJKPF+ArialMT~31 -1 TZ

%%BeginResource: font EJJJJY+ArialMT~2b

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /EJJJJY+ArialMT~2b def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A259BC9984DB874CFBF432DC23D7457637070526912FD9815BE031

9519877F20C9609B5B58AAB0EFD1AB99AE9E6EBBFFF6479EB9E420D146762F01

59B41831A5312789C775520554EB9FEF7F7C5A0B69609D06BB445313C1AE65B5

055AA6C2F10ACF37CD93A18D299BC54BAC72233B536005468912FE2EDF704209

3AD85F2CCA921758866AA49E3391AEAB38B488FAB48502A5D59AA8E116A63C5C

E16B261FC70D20F99994A05A9E4F68E13797C960FE85CE505538DC81E566874A

DD22D8AB5A0B41F9133B0C14297F848195D257DAEEF3AAA7C690A83288BD36AB

BA90578795D7A69444A6349248FF73BACC549CBE9624844EF53A411F846B483B

8F9C2F7CEFD97134C14818AD0F56951B266C90AF15360BEB94E9FA1335EDD738

BFFC1FA4EA624DFE346C68137FF7231A277C1F682A1BA7BB409963FD73F7FA59

9E159AD9D118B4A0C2049390DC206A6029129B53C03137C52BEEDE577B724C9B

08BC47F19CA319547465D2C2CCA901B156A8A2D4FCD1061374CC93E9D8149F84

3262CC1BD8296C5F80F3855D36805393862268ED0A0FCDF216A33D4D6F20F41E

7B7769246455A14737859F61DECE8FE760FCF7184E2312FC210532A79DDF0232

7B2A275E043BB90EC83CA9947BE41882A69361905CEF78666AA2A11E487E739C

254598C6CC7416F1010540F1533262B5FFF2F2B7AE592EF6E9A7E369FE560BF4

9EB4664C976372B5A91FE8C0C2D8F3DB27D6707DA400F934A9E5BAB9CD83C1

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/EJJJJY+ArialMT~2b findfont /Encoding get

dup 0 /.notdef put

pop

end

/EJJJJY+ArialMT~2b findfont /Encoding get

dup 0 /.notdef put

dup 106 /j put

dup 110 /n put

dup 111 /o put

pop

%%EndResource

[/N25/EJJJJY+ArialMT~2b -1 TZ

%%BeginResource: font UKEUSF+ArialMT~28

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /UKEUSF+ArialMT~28 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A5C48AB7AF79B79D736D42CDE21F0363666AFD1B2E8230C07E3DD1

B4503AAD5E63ED2314400EEB16531F7335B34CD2BD4FD38F90ECA74DA87497C1

756F7178A45C7EC0ED25E0AE233807F0EAF3DDE653C42442EF75F21F39891C8B

A70C0530EDA7B6EE6158617516D4BD56DA39F92E5D3910BFD5E78B2873E2A362

3C5D0B72D7F91C0BF8ED3A4BEDDEB61B4803889554E9F574B27F18D6F6043CED

187AB1E1FB29E62C0BDBB27C95B28F01513D918C23D0898A86125A8833E01E95

90D7B7A8E66A3DDE45E4BA8946929A0301895EEB31A1451BC8C529D8A7C1F218

41C4EC16177C67F72529C8773B7ABA6A9D252D50BEA83F17BAB783DF30B61E5F

4D95AAE12D93C10172975BABD5DEFC456EABF928E66D8E67989A1214133FADEC

FC8CA966567DB6FABA54C6A15117808BF88D6437944511BA4D1D8A1FF025165D

10C59E3BB0DC4C7445238CFF643D10CD8E0DC2ECE931F902E67289B101B23BE4

3BF42448455214E6548D72735128C4F70843AE421C2F1F7C6E19D132902F94FA

B732D2E97DB8EBD6D50B1B5D6AC6F2B2C471E6A4C609D2605E27F4137163468E

443559DFC474EB21C75B28F2D092E0A4D0DE9D2370FE1845434303BAA9E51F0A

6448239471F42272931D0BE8816DACA5456D0D3D188C498EEA0FA232CE25344E

A7B05B17038A0898CADE06699C5448D8C5EF0F83F78D0244B7D873EF7036DFE8

96F74DF438EC0433FDA9B74F58152C491525CF57F960E366FA9B5E63A6914774

2B4DBB41D65CC5F0A329384537BD9CA65B60D1A5928594A31DD7CB747E831C05

4095F937EBE5DFD79515C455B4298EB94A61F2D6EA299FDC30C175511BBCD7A2

6A44F7450DD1B1F22A2D6060E34D490187

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/UKEUSF+ArialMT~28 findfont /Encoding get

dup 0 /.notdef put

pop

end

/UKEUSF+ArialMT~28 findfont /Encoding get

dup 0 /.notdef put

dup 97 /a put

dup 109 /m put

pop

%%EndResource

[/N15/UKEUSF+ArialMT~28 -1 TZ

%%BeginResource: font ZCXVXN+ArialMT~25

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /ZCXVXN+ArialMT~25 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69AE06434ED40772B6ED119BDFC5AB0F936AB651C8D4814E518C158C

7718948C0ABBBA27C52DC58DC45A8973C9D632CD4EE579DEFF0C423553562E82

3403D332EA07F8778AE77033ABB687FB865B70DEC32AFE39DCC06FABC17D9F43

D753287663EBA22D0DAC42A026E48F70E11DE02158E802FD7C03B8B9C6857C8A

1303E6C9967D0EF4B0314CF24F523A8613CDF2FD64C9B184667B1B3875DFFFEE

EC92480310DC697A16D5213FA2BC675D76882B0E99F3558B48AF0555B5BC5E42

08A62047312393248CE0DDA42A7D909EE72024D667B07BF05228DA08931AA36B

C3F0CA2C04401ED41D4F303251A65F174785D613878BD5B21E78EF3D8251366E

8D6451F4F0642D015A327B08DEB0D437AB9E8D779E1F370DBA5F713090C4DCCF

2AB7BEE450463F5DA2AF0AACAD2043F404EB970E9E664D61A6D488C615EE95F8

8EECF31C773E465FBB0D4664D3A5ED7B301A8F71C04F973AAC25F779B2759A5D

EEF87A7B341F5E839E65A9B9649FE77663BC1C7CF630A27C4FB14D42C15CE1C5

AD1AEA2332136D745768F95BFED8AF6FB40C4CF2208FA3975360510F90A993A3

62696388803B0CD8FC5C05961CA8138C6A833CD3F5052D3B1F8A99CEEA41D869

D7F96C5CCB9E44CDA3634D26E3B344F1A360810FD4DD3E26214E14CAE4AF2CDF

B52D721394BA2F6CBA09B5A83DC682A7582FFE2AFEC0411FB3BEDDE2393F96EA

717D12FCD7B0418DEDDFE8AD772D723986A2D441804FE584BEF0FDBCC6CCC0B7

73C003A248714158C821F3A68D84742546DF0E898FFDF8C2FADEDC10AA3FD3E7

0CA76EB7EB516D0CE4DF7CC748686723BA2A93D24405B4BC46809C722319FDCC

86E267D47526082EE1FA6F2655E1A1D73038518FC88DC26D97496EBF28C7C4A3

9924B65AB7E2597B7D87E02006FB9C16355E672F49AA82003EA63ABF2A4119E1

EF7F2BD6092D85DDEB66DFA985EA5681F41D94451E6BA8DDAF86FB58F6D31936

8CE8A1555345631B843C298CEF712B2CF2C9FECC5CBD3C4DA21A18B64204042A

89025302C560AEB8B86FFB921C48F61AACD908A82053A9393508BFB1D2380282

74CB0CFCB0D05A228B155AA7C5E32F81197D3D9AED2352B76A4C18297D1DFBFF

C8D2CBDABBD14ED268E39499CB546469ADB9FCB86C3B243B96317E42C7D6110A

D960FCC279C401E7C882D15AD9D6DF451FB17061E0A5A715EC682FDE6B655ACB

2A0617DEFCC4A8C666313ADB0D0EFE48807C5316135E0E073392E36E98281F94

7A1B40CD4BAE404E52BBF7C0D29E5DB983B8342EEFCB1713D2F06C50E2042A21

DFEC8FC5D0EF1F2C43A22E80B81B6965A679A050461F0DEFCA41702F42F823F3

FCEEEA125259A4B861723458811FD12703E55174DFB1E00AE6AB9E6962098D47

ADA41ABE730CB5F014522D7AE9CE8483B1134C6C735DAC1528FE1F7FE1A5241B

56489DF0B20F281006429AF012560157B91EA8F657C17D9F0886FAD0225254

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/ZCXVXN+ArialMT~25 findfont /Encoding get

dup 0 /.notdef put

pop

end

/ZCXVXN+ArialMT~25 findfont /Encoding get

dup 0 /.notdef put

dup 101 /e put

dup 105 /i put

dup 108 /l put

dup 112 /p put

dup 114 /r put

dup 115 /s put

dup 116 /t put

pop

%%EndResource

[/N10/ZCXVXN+ArialMT~25 -1 TZ

%%BeginResource: font JZYFAL+ArialMT

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /JZYFAL+ArialMT def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A18BEBA8D67DD8AD36B7F2459BDD5018192B26B1196D9822275B7E

7116DA2B71C1A0BD3FF9F3FCBFA20466CF1F99EF43F07D8EEBE6D20CD1F74810

527EF849CA7D3A47A075C579CABC23DFA76068EB6C25454ED15E53C2441C7231

1EF68C9867B0ACDDBFA3E2DD56A038DD3C8AE91DB0346212B7222BA5DA1FB9C8

FF5798B34471E9A6032BEA5FAED9106462D5864132BEC9E58895050FFF88FA46

C6A0DCE4F54F27C00FADD7FB86F5A0BAB252841FE8860F278CF57A56C83AE01E

682DE23E2530839CBCD0AE1726D33386D1676CB0077AC9A14F7BB546D1415AFF

5A47F9BDB61F4BA3D9E41F64C6FF2F38A048290DDABEA363458B780F0131F662

A4138AED0DAF7350358C98B600EE7209D28A6D9CEB550D01647EF6DEB82F150D

B27D7E9E80721EA69A8DB573A3CFAE4BE135A0D6EFE01D2102525BFE4FFE835E

7C1AAE631CB155E9023050408D7C50FDE32B5BDF51D7B336045F8E98BF5AC5E4

3EEC3903963418DED2780B0B73AB743BB148EBCB1EE6FA5DD63E400E2B6D648F

4BC175BE360B324868807600753727F50A25D6D15738BA7064658973F10DB372

49ABDEE0FC2B3827952F46306843D68D5E5DE8FC4A57242D756D06CFE1DF22A3

B706249CB0BCF18CEF4A17464FCA0AFBFCEB0052E655E42B7FAC1B11838730C3

627D4EA20259513732468D99F027FC9AE569D7AEFE18DD3DD92A7CA229E481CB

E759125FE87D308DDFC34BCB3490819DB2788DDD5BF20672F2EF0AB044D85C0D

E8A2FF135B2854E3635DA5E212DE2EEE9242E9FBFE9604A85C8477C390A2C275

A83CE1A180F6125CCEB7763CBF72603D5CC24D6A31B6FDF9C2B31D3A2CF755F9

A6BF5A5C8FA28FCE19ABD07D27BD7ADB476B90CB79FA00D1F53702D92ED17DD5

69D2D4808DAC05CF1433983058C7152F1441D77F7AFE2D7FFD9B914BDC7690C0

DFBD0D38C052FACD4969E9DB47AA717DD78E1AA110A028240880F601E8CAA9E5

600E1DE6FBBD26752370E97EFB67FFE04BE8B3E4CAC83B78857472F51EA3E7A4

80B7FC4687057F713EAB1B4C536ED0C0918D5ED4F0FCB11F8F505F9799915D7C

81F2EE0130722D8FCB7E0B8A7EF94542471475705635635C75A05C2C73848264

1D72DEBDEA70C283547071074BA3CBDC3056CF0F9916464EA359F51ED8F7B951

F1A661B6EB3D0434E765DA44EEA2ED67DB4287AA4368A96F214ED2CA94AC9815

82E9DB02DBFD3C307269B158521E7F3389C26FE1D70401B6BA3683CCEF780F16

E841456F69B6D777E81BDF100F709489C21B1BCD54CB6E8CB19F5BB0B4832B64

9D993C9331904BB09C2FE1D8CDC0A4D9D2E41140E959CB5B848871A4818AB81C

8FD2A5CF8EA076D9566AB4150E5E2C033238F78F78D22A4133C7093FC96DD57E

C11B959538125BC06023CD18A46DE510E9994BFE48336968C298C2BDA2923913

3BF7E5CA9F5F7E8ACC5324CE8261FCFCCBD5917E6FA417441192A485895C45C5

843A9E984EAE0B2CF70BB797602876B5F8ECBA62344F154A0472D8B5D7F57377

EE95779533CBA56671A81E40E637993B85A22DC9633EBF6AD4480C985675FA95

C95E8C917CB4494E4980E19B7E802F34B355FEBBB2AE46BA2CAE712873D78264

23DC6EDC5AE5760D330A788E094EAB06B957B52A339236BB0230CBCAED587FEA

90D0204AEE120070CA8B8EB56A14DEE9B9B6FF01F6DB6222086C76337883DB76

3A811FE7EAE5EEB76A6ABDBD510E7215B0D18E6D78B21EA59BDA7CB53199B8A4



0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/JZYFAL+ArialMT findfont /Encoding get

dup 0 /.notdef put

pop

end

/JZYFAL+ArialMT findfont /Encoding get

dup 0 /.notdef put

dup 97 /a put

dup 101 /e put

dup 109 /m put

dup 114 /r put

dup 115 /s put

dup 116 /t put

pop

%%EndResource

[/N9/JZYFAL+ArialMT -1 TZ

70.776 618.485 226.483 113.035 re

W

n

q

0.100006 0 0 0.100006 0 0 cm

n

798 7298.59 m

798 6475.2 l

1129 6475.2 l

1129 7298.59 l

W

n

2.10831 w

4 M

n

1127.95 7134.85 m

1127.95 7120.87 1121.68 7109.55 1113.95 7109.55 c

813.048 7109.55 l

805.321 7109.55 799.054 7120.87 799.054 7134.85 c

799.054 7208.64 l

799.054 7222.61 805.321 7233.94 813.048 7233.94 c

1113.95 7233.94 l

1121.68 7233.94 1127.95 7222.61 1127.95 7208.64 c

1127.95 7134.85 l

h

0 setgray

S

9.9994 0 0 9.9994 0 0 cm

85.7903 715.22 m

/N9 6.98335 Tf

(stream) show

0.100006 0 0 0.100006 0 0 cm

n

963.5 7110.95 m

963.5 7064.57 l

f

n

963.5 7058.21 m

962.388 7061.2 960.494 7064.92 958.488 7067.22 c

963.5 7065.4 l

968.511 7067.22 l

966.506 7064.92 964.609 7061.2 963.5 7058.21 c

f

6.3248 w

n

963.5 7110.95 m

963.5 7064.57 l

S

n

963.5 7045.48 m

960.168 7054.46 954.482 7065.61 948.463 7072.51 c

963.5 7067.07 l

978.538 7072.51 l

972.517 7065.61 966.831 7054.46 963.5 7045.48 c

f

n

963.5 6919.1 m

963.5 6872.72 l

f

n

963.5 6866.35 m

962.388 6869.35 960.494 6873.06 958.488 6875.36 c

963.5 6873.55 l

968.511 6875.36 l

966.506 6873.06 964.609 6869.35 963.5 6866.35 c

f

n

963.5 6919.1 m

963.5 6872.72 l

S

n

963.5 6853.63 m

960.168 6862.61 954.482 6873.75 948.463 6880.66 c

963.5 6875.22 l

978.538 6880.66 l

972.517 6873.75 966.831 6862.61 963.5 6853.63 c

f

n

963.5 6731.46 m

963.5 6685.08 l

f

n

963.5 6678.72 m

962.388 6681.71 960.494 6685.43 958.488 6687.73 c

963.5 6685.91 l

968.511 6687.73 l

966.506 6685.43 964.609 6681.71 963.5 6678.72 c

f

n

963.5 6731.46 m

963.5 6685.08 l

S

n

963.5 6665.99 m

960.168 6674.97 954.482 6686.12 948.463 6693.02 c

963.5 6687.58 l

978.538 6693.02 l

972.517 6686.12 966.831 6674.97 963.5 6665.99 c

f

n

963.5 7298.59 m

963.5 7252.21 l

f

n

963.5 7245.84 m

962.388 7248.84 960.494 7252.55 958.488 7254.85 c

963.5 7253.04 l

968.511 7254.85 l

966.506 7252.55 964.609 7248.84 963.5 7245.84 c

f

n

963.5 7298.59 m

963.5 7252.21 l

S

n

963.5 7233.12 m

960.168 7242.1 954.482 7253.24 948.463 7260.15 c

963.5 7254.71 l

978.538 7260.15 l

972.517 7253.24 966.831 7242.1 963.5 7233.12 c

f

2.10831 w

n

1127.95 6944.29 m

1127.95 6930.32 1121.68 6918.99 1113.95 6918.99 c

813.048 6918.99 l

805.321 6918.99 799.054 6930.32 799.054 6944.29 c

799.054 7018.08 l

799.054 7032.05 805.321 7043.38 813.048 7043.38 c

1113.95 7043.38 l

1121.68 7043.38 1127.95 7032.05 1127.95 7018.08 c

1127.95 6944.29 l

h

S

9.9994 0 0 9.9994 0 0 cm

85.7905 696.253 m

(stream) show

0.100006 0 0 0.100006 0 0 cm

n

1127.95 6758.4 m

1127.95 6744.42 1121.68 6733.1 1113.95 6733.1 c

813.048 6733.1 l

805.321 6733.1 799.054 6744.42 799.054 6758.4 c

799.054 6832.19 l

799.054 6846.16 805.321 6857.49 813.048 6857.49 c

1113.95 6857.49 l

1121.68 6857.49 1127.95 6846.16 1127.95 6832.19 c

1127.95 6758.4 l

h

S

9.9994 0 0 9.9994 0 0 cm

85.7906 677.286 m

(stream) show

0.100006 0 0 0.100006 0 0 cm

n

963.5 6540.67 m

963.5 6494.28 l

f

n

963.5 6487.92 m

962.388 6490.92 960.494 6494.63 958.488 6496.93 c

963.5 6495.12 l

968.511 6496.93 l

966.506 6494.63 964.609 6490.92 963.5 6487.92 c

f

6.3248 w

n

963.5 6540.67 m

963.5 6494.28 l

S

n

963.5 6475.2 m

960.168 6484.18 954.482 6495.32 948.463 6502.23 c

963.5 6496.79 l

978.538 6502.23 l

972.517 6495.32 966.831 6484.18 963.5 6475.2 c

f

2.10831 w

n

1127.95 6565.86 m

1127.95 6551.89 1121.68 6540.57 1113.95 6540.57 c

813.048 6540.57 l

805.321 6540.57 799.054 6551.89 799.054 6565.86 c

799.054 6639.65 l

799.054 6653.63 805.321 6664.95 813.048 6664.95 c

1113.95 6664.95 l

1121.68 6664.95 1127.95 6653.63 1127.95 6639.65 c

1127.95 6565.86 l

h

S

9.9994 0 0 9.9994 0 0 cm

85.7907 658.32 m

(stream) show

Q

q

0.100006 0 0 0.100006 0 0 cm

n

1207.2 7325.09 m

1207.2 6450 l

2142.67 6450 l

2142.67 7325.09 l

W

n

9.9994 0 0 9.9994 0 0 cm

0 setgray

157.068 717.664 m

/N10 7.04625 Tf

(splitter) show

0.100006 0 0 0.100006 0 0 cm

2.1273 w

4 M

n

1811.21 7161.09 m

1811.21 7147 1806.11 7135.57 1799.81 7135.57 c

1554.58 7135.57 l

1548.28 7135.57 1543.18 7147 1543.18 7161.09 c

1543.18 7235.55 l

1543.18 7249.65 1548.28 7261.08 1554.58 7261.08 c

1799.81 7261.08 l

1806.11 7261.08 1811.21 7249.65 1811.21 7235.55 c

1811.21 7161.09 l

h

S

n

1677.29 7134.41 m

1357.58 6949.8 l

f

n

1352.02 6946.59 m

1354.08 6949.07 1356.37 6952.6 1357.37 6955.52 c

1358.31 6950.22 l

1362.42 6946.76 l

1359.4 6947.35 1355.2 6947.13 1352.02 6946.59 c

f

6.38181 w

n

1677.29 7134.41 m

1357.58 6949.8 l

S

n

1340.9 6940.17 m

1347.07 6947.61 1353.94 6958.2 1356.93 6966.95 c

1359.77 6951.06 l

1372.11 6940.67 l

1363.04 6942.44 1350.43 6941.79 1340.9 6940.17 c

f

n

1674.93 7131.07 m

1570.37 6947.78 l

f

n

1567.19 6942.21 m

1567.72 6945.38 1567.91 6949.59 1567.3 6952.61 c

1570.79 6948.51 l

1576.09 6947.6 l

1573.18 6946.58 1569.66 6944.27 1567.19 6942.21 c

f

n

1674.93 7131.07 m

1570.37 6947.78 l

S

n

1560.83 6931.05 m

1562.4 6940.59 1562.99 6953.2 1561.17 6962.26 c

1571.63 6949.98 l

1587.52 6947.22 l

1578.8 6944.18 1568.24 6937.26 1560.83 6931.05 c

f

n

1671.48 6516.06 m

1671.48 6469.26 l

f

n

1671.48 6462.84 m

1670.35 6465.86 1668.44 6469.61 1666.42 6471.93 c

1671.48 6470.1 l

1676.53 6471.93 l

1674.51 6469.61 1672.6 6465.86 1671.48 6462.84 c

f

n

1671.48 6516.06 m

1671.48 6469.26 l

S

n

1671.48 6450 m

1668.11 6459.06 1662.38 6470.3 1656.3 6477.27 c

1671.48 6471.78 l

1686.65 6477.27 l

1680.58 6470.3 1674.84 6459.06 1671.48 6450 c

f

n

1675.2 7325.09 m

1675.2 7278.29 l

f

n

1675.2 7271.87 m

1674.08 7274.9 1672.17 7278.64 1670.14 7280.97 c

1675.2 7279.14 l

1680.25 7280.97 l

1678.23 7278.64 1676.32 7274.9 1675.2 7271.87 c

f

n

1675.2 7325.09 m

1675.2 7278.29 l

S

n

1675.2 7259.04 m

1671.84 7268.1 1666.1 7279.34 1660.03 7286.31 c

1675.2 7280.82 l

1690.37 7286.31 l

1684.3 7279.34 1678.56 7268.1 1675.2 7259.04 c

f

9.9994 0 0 9.9994 0 0 cm

123.044 685.855 m

(stre) show

134.79 685.855 m

/N15 7.04625 Tf

(am) show

0.100006 0 0 0.100006 0 0 cm

2.1273 w

n

1476.3 6838.76 m

1476.3 6824.66 1471.19 6813.24 1464.89 6813.24 c

1219.67 6813.24 l

1213.37 6813.24 1208.26 6824.66 1208.26 6838.76 c

1208.26 6913.22 l

1208.26 6927.32 1213.37 6938.75 1219.67 6938.75 c

1464.89 6938.75 l

1471.19 6938.75 1476.3 6927.32 1476.3 6913.22 c

1476.3 6838.76 l

h

S

n

1675.25 7133.16 m

1994.96 6948.55 l

f

n

2000.52 6945.34 m

1997.34 6945.88 1993.14 6946.1 1990.12 6945.51 c

1994.23 6948.97 l

1995.18 6954.26 l

1996.18 6951.35 1998.46 6947.82 2000.52 6945.34 c

f

6.38181 w

n

1675.25 7133.16 m

1994.96 6948.55 l

S

n

2011.64 6938.92 m

2002.11 6940.54 1989.5 6941.19 1980.43 6939.42 c

1992.77 6949.81 l

1995.61 6965.7 l

1998.6 6956.95 2005.47 6946.36 2011.64 6938.92 c

f

n

1674.5 7132.35 m

1779.06 6949.06 l

f

n

1782.24 6943.49 m

1779.77 6945.56 1776.26 6947.86 1773.35 6948.88 c

1778.64 6949.79 l

1782.13 6953.89 l

1781.53 6950.87 1781.72 6946.66 1782.24 6943.49 c

f

n

1674.5 7132.35 m

1779.06 6949.06 l

S

n

1788.6 6932.34 m

1781.2 6938.54 1770.64 6945.46 1761.91 6948.51 c

1777.81 6951.26 l

1788.27 6963.54 l

1786.45 6954.48 1787.03 6941.87 1788.6 6932.34 c

f

n

1604.04 6887.87 m

1604.04 6884.34 1601.18 6881.49 1597.66 6881.49 c

1594.14 6881.49 1591.28 6884.34 1591.28 6887.87 c

1591.28 6891.39 1594.14 6894.25 1597.66 6894.25 c

1601.18 6894.25 1604.04 6891.39 1604.04 6887.87 c

f

n

1550.21 6887.5 m

1550.01 6883.98 1546.99 6881.29 1543.47 6881.5 c

1539.95 6881.7 1537.27 6884.72 1537.47 6888.24 c

1537.67 6891.76 1540.69 6894.44 1544.21 6894.24 c

1547.73 6894.03 1550.41 6891.02 1550.21 6887.5 c

f

n

1819.32 6887.87 m

1819.32 6884.34 1816.46 6881.49 1812.94 6881.49 c

1809.42 6881.49 1806.56 6884.34 1806.56 6887.87 c

1806.56 6891.39 1809.42 6894.25 1812.94 6894.25 c

1816.46 6894.25 1819.32 6891.39 1819.32 6887.87 c

f

n

1765.5 6887.87 m

1765.5 6884.34 1762.64 6881.49 1759.12 6881.49 c

1755.6 6881.49 1752.74 6884.34 1752.74 6887.87 c

1752.74 6891.39 1755.6 6894.25 1759.12 6894.25 c

1762.64 6894.25 1765.5 6891.39 1765.5 6887.87 c

f

n

1711.68 6887.87 m

1711.68 6884.34 1708.82 6881.49 1705.3 6881.49 c

1701.78 6881.49 1698.92 6884.34 1698.92 6887.87 c

1698.92 6891.39 1701.78 6894.25 1705.3 6894.25 c

1708.82 6894.25 1711.68 6891.39 1711.68 6887.87 c

f

n

1657.86 6887.87 m

1657.86 6884.34 1655 6881.49 1651.48 6881.49 c

1647.96 6881.49 1645.1 6884.34 1645.1 6887.87 c

1645.1 6891.39 1647.96 6894.25 1651.48 6894.25 c

1655 6894.25 1657.86 6891.39 1657.86 6887.87 c

f

n

1784.94 6818.09 m

1697.37 6658.7 l

f

n

1694.28 6653.07 m

1694.76 6656.26 1694.88 6660.46 1694.23 6663.47 c

1697.78 6659.44 l

1703.09 6658.6 l

1700.2 6657.54 1696.72 6655.18 1694.28 6653.07 c

f

n

1784.94 6818.09 m

1697.37 6658.7 l

S

n

1688.1 6641.82 m

1689.52 6651.38 1689.91 6664 1687.94 6673.03 c

1698.59 6660.91 l

1714.53 6658.42 l

1705.86 6655.23 1695.41 6648.14 1688.1 6641.82 c

f

9.9994 0 0 9.9994 0 0 cm

189.792 685.77 m

/N10 7.04625 Tf

(stre) show

201.539 685.77 m

/N15 7.04625 Tf

(am) show

0.100006 0 0 0.100006 0 0 cm

2.1273 w

n

2141.6 6837.9 m

2141.6 6823.8 2136.5 6812.37 2130.2 6812.37 c

1884.97 6812.37 l

1878.68 6812.37 1873.57 6823.8 1873.57 6837.9 c

1873.57 6912.36 l

1873.57 6926.45 1878.68 6937.88 1884.97 6937.88 c

2130.2 6937.88 l

2136.5 6937.88 2141.6 6926.45 2141.6 6912.36 c

2141.6 6837.9 l

h

S

n

1339.48 6811.94 m

1615.08 6652.8 l

f

n

1620.64 6649.59 m

1617.47 6650.13 1613.26 6650.35 1610.24 6649.76 c

1614.35 6653.22 l

1615.3 6658.51 l

1616.3 6655.6 1618.59 6652.07 1620.64 6649.59 c

f

6.38181 w

n

1339.48 6811.94 m

1615.08 6652.8 l

S

n

1631.76 6643.17 m

1622.23 6644.79 1609.63 6645.44 1600.56 6643.67 c

1612.89 6654.06 l

1615.73 6669.95 l

1618.73 6661.2 1625.59 6650.61 1631.76 6643.17 c

f

n

1561.76 6819.65 m

1653.59 6658.66 l

f

n

1656.77 6653.09 m

1654.3 6655.16 1650.79 6657.46 1647.88 6658.48 c

1653.17 6659.39 l

1656.66 6663.49 l

1656.05 6660.47 1656.25 6656.27 1656.77 6653.09 c

f

n

1561.76 6819.65 m

1653.59 6658.66 l

S

n

1663.13 6641.94 m

1655.72 6648.14 1645.17 6655.06 1636.44 6658.11 c

1652.34 6660.86 l

1662.8 6673.14 l

1660.98 6664.08 1661.56 6651.47 1663.13 6641.94 c

f

n

2011.98 6811.94 m

1735.96 6652.56 l

f

n

1730.4 6649.35 m

1732.46 6651.83 1734.75 6655.36 1735.75 6658.27 c

1736.69 6652.98 l

1740.8 6649.52 l

1737.78 6650.11 1733.58 6649.89 1730.4 6649.35 c

f

n

2011.98 6811.94 m

1735.96 6652.56 l

S

n

1719.29 6642.93 m

1725.45 6650.37 1732.32 6660.96 1735.32 6669.71 c

1738.15 6653.82 l

1750.49 6643.43 l

1741.42 6645.2 1728.82 6644.55 1719.29 6642.93 c

f

9.9994 0 0 9.9994 0 0 cm

158.825 655.793 m

/N25 [7.04615 -0.0162331 0.0162331 7.04615 0 0] Tf

(jo) show

164.309 655.78 m

/N10 [7.04615 -0.0162331 0.0162331 7.04615 0 0] Tf

(i) show

165.874 655.777 m

/N25 [7.04615 -0.0162331 0.0162331 7.04615 0 0] Tf

(n) show

169.793 655.768 m

/N10 [7.04615 -0.0162331 0.0162331 7.04615 0 0] Tf

(er) show

0.100006 0 0 0.100006 0 0 cm

2.1273 w

n

1805.41 6541.9 m

1805.37 6527.8 1800.24 6516.38 1793.94 6516.4 c

1548.72 6516.97 l

1542.42 6516.98 1537.34 6528.42 1537.37 6542.52 c

1537.55 6616.98 l

1537.58 6631.08 1542.71 6642.49 1549.01 6642.48 c

1794.24 6641.91 l

1800.53 6641.89 1805.61 6630.45 1805.58 6616.35 c

1805.41 6541.9 l

h

S

Q

q

0.100006 0 0 0.100006 0 0 cm

n

2220 7201.65 m

2220 6572.4 l

2952.64 6572.4 l

2952.64 7201.65 l

W

n

2.09711 w

4 M

n

2548.2 7038.78 m

2548.2 7024.88 2541.97 7013.61 2534.28 7013.61 c

2234.97 7013.61 l

2227.28 7013.61 2221.05 7024.88 2221.05 7038.78 c

2221.05 7112.18 l

2221.05 7126.08 2227.28 7137.34 2234.97 7137.34 c

2534.28 7137.34 l

2541.97 7137.34 2548.2 7126.08 2548.2 7112.18 c

2548.2 7038.78 l

h

0 setgray

S

9.9994 0 0 9.9994 0 0 cm

230.402 705.393 m

/N22 6.94644 Tf

(joiner) show

0.100006 0 0 0.100006 0 0 cm

n

2386.72 7015.01 m

2386.72 6968.87 l

f

n

2386.72 6962.54 m

2385.62 6965.52 2383.73 6969.22 2381.74 6971.5 c

2386.72 6969.7 l

2391.71 6971.5 l

2389.71 6969.22 2387.83 6965.52 2386.72 6962.54 c

f

6.2914 w

n

2386.72 7015.01 m

2386.72 6968.87 l

S

n

2386.72 6949.89 m

2383.41 6958.82 2377.75 6969.9 2371.76 6976.77 c

2386.72 6971.36 l

2401.68 6976.77 l

2395.69 6969.9 2390.03 6958.82 2386.72 6949.89 c

f

n

2386.72 6824.17 m

2386.72 6778.03 l

f

n

2386.72 6771.7 m

2385.62 6774.68 2383.73 6778.38 2381.74 6780.66 c

2386.72 6778.86 l

2391.71 6780.66 l

2389.71 6778.38 2387.83 6774.68 2386.72 6771.7 c

f

n

2386.72 6824.17 m

2386.72 6778.03 l

S

n

2386.72 6759.05 m

2383.41 6767.98 2377.75 6779.06 2371.76 6785.93 c

2386.72 6780.52 l

2401.68 6785.93 l

2395.69 6779.06 2390.03 6767.98 2386.72 6759.05 c

f

n

2386.72 6637.52 m

2386.72 6591.39 l

f

n

2386.72 6585.06 m

2385.62 6588.03 2383.73 6591.73 2381.74 6594.02 c

2386.72 6592.21 l

2391.71 6594.02 l

2389.71 6591.73 2387.83 6588.03 2386.72 6585.06 c

f

n

2386.72 6637.52 m

2386.72 6591.39 l

S

n

2386.72 6572.4 m

2383.41 6581.33 2377.75 6592.42 2371.76 6599.29 c

2386.72 6593.88 l

2401.68 6599.29 l

2395.69 6592.42 2390.03 6581.33 2386.72 6572.4 c

f

n

2386.72 7201.65 m

2386.72 7155.52 l

f

n

2386.72 7149.19 m

2385.62 7152.17 2383.73 7155.86 2381.74 7158.15 c

2386.72 7156.35 l

2391.71 7158.15 l

2389.71 7155.86 2387.83 7152.17 2386.72 7149.19 c

f

n

2386.72 7201.65 m

2386.72 7155.52 l

S

n

2386.72 7136.53 m

2383.41 7145.46 2377.75 7156.55 2371.76 7163.42 c

2386.72 7158.01 l

2401.68 7163.42 l

2395.69 7156.55 2390.03 7145.46 2386.72 7136.53 c

f

2.09711 w

n

2548.2 6849.23 m

2548.2 6835.33 2541.97 6824.06 2534.28 6824.06 c

2234.97 6824.06 l

2227.28 6824.06 2221.05 6835.33 2221.05 6849.23 c

2221.05 6922.63 l

2221.05 6936.53 2227.28 6947.8 2234.97 6947.8 c

2534.28 6947.8 l

2541.97 6947.8 2548.2 6936.53 2548.2 6922.63 c

2548.2 6849.23 l

h

S

9.9994 0 0 9.9994 0 0 cm

228.283 686.438 m

/N31 6.94644 Tf

(st) show

233.686 686.438 m

/N22 6.94644 Tf

(re) show

239.862 686.438 m

/N31 6.94644 Tf

(am) show

0.100006 0 0 0.100006 0 0 cm

n

2548.2 6664.32 m

2548.2 6650.42 2541.97 6639.15 2534.28 6639.15 c

2234.97 6639.15 l

2227.28 6639.15 2221.05 6650.42 2221.05 6664.32 c

2221.05 6737.72 l

2221.05 6751.61 2227.28 6762.88 2234.97 6762.88 c

2534.28 6762.88 l

2541.97 6762.88 2548.2 6751.61 2548.2 6737.72 c

2548.2 6664.32 l

h

S

9.9994 0 0 9.9994 0 0 cm

228.668 667.947 m

(s) show

232.141 667.947 m

/N30 6.94644 Tf

(pl) show

237.548 667.947 m

/N22 6.94644 Tf

(i) show

239.091 667.947 m

/N31 6.94644 Tf

(tt) show

242.951 667.947 m

/N22 6.94644 Tf

(er) show

0.100006 0 0 0.100006 0 0 cm

n

2951.59 6849.23 m

2951.59 6835.33 2945.35 6824.06 2937.67 6824.06 c

2638.35 6824.06 l

2630.67 6824.06 2624.43 6835.33 2624.43 6849.23 c

2624.43 6922.63 l

2624.43 6936.53 2630.67 6947.8 2638.35 6947.8 c

2937.67 6947.8 l

2945.35 6947.8 2951.59 6936.53 2951.59 6922.63 c

2951.59 6849.23 l

h

S

9.9994 0 0 9.9994 0 0 cm

268.625 686.44 m

/N31 6.94644 Tf

(st) show

274.028 686.44 m

/N22 6.94644 Tf

(re) show

280.205 686.44 m

/N31 6.94644 Tf

(am) show

0.100006 0 0 0.100006 0 0 cm

6.2914 w

n

2554.49 6698.28 m

2783.08 6698.28 l

S

n

2785.18 6694.09 m

2785.18 6811.59 l

f

n

2785.18 6817.92 m

2786.28 6814.94 2788.17 6811.24 2790.16 6808.96 c

2785.18 6810.76 l

2780.19 6808.96 l

2782.19 6811.24 2784.07 6814.94 2785.18 6817.92 c

f

n

2785.18 6694.09 m

2785.18 6811.59 l

S

n

2785.18 6830.57 m

2788.49 6821.64 2794.15 6810.56 2800.14 6803.69 c

2785.18 6809.1 l

2770.22 6803.69 l

2776.21 6810.56 2781.86 6821.64 2785.18 6830.57 c

f

n

2554.46 7079.96 m

2557.43 7081.07 2561.13 7082.95 2563.42 7084.95 c

2561.61 7079.96 l

2563.42 7074.98 l

2561.13 7076.97 2557.43 7078.86 2554.46 7079.96 c

1  setgray

f

n

2787.28 6943.65 m

2787.28 7079.96 l

2560.79 7079.96 l

0  setgray

S

n

2541.8 7079.96 m

2550.73 7083.28 2561.82 7088.93 2568.69 7094.92 c

2563.27 7079.96 l

2568.69 7065.01 l

2561.82 7070.99 2550.73 7076.65 2541.8 7079.96 c

f

Q

q

0.100006 0 0 0.100006 0 0 cm

n

3240 7006.14 m

3240 6397.2 l

4908.56 6397.2 l

4908.56 7006.14 l

W

n

9.9994 0 0 9.9994 0 0 cm

Q

q

0.100006 0 0 0.100006 0 0 cm

n

5068.8 7018.95 m

5068.8 6516 l

5399.8 6516 l

5399.8 7018.95 l

W

n

2.10831 w

4 M

9.9994 0 0 9.9994 0 0 cm

0.100006 0 0 0.100006 0 0 cm

6.3248 w

2.10831 w

9.9994 0 0 9.9994 0 0 cm

0.100006 0 0 0.100006 0 0 cm

9.9994 0 0 9.9994 0 0 cm

Q

0 setgray

72.0044 625.238 m

/N39 9.96367 Tf

(\(a)

[3.35766 4.43375 ] pdfxs

79.7958 625.238 m

(\)) show

85.5537 625.238 m

(pipelin)

[5.03155 2.75986 5.03155 4.43375 2.75986 2.75986 5.03155 ] pdfxs

113.362 625.238 m

/N41 9.96367 Tf

(e) show

146.17 625.238 m

/N39 9.96367 Tf

(\(b)

[3.35766 5.03155 ] pdfxs

154.559 625.238 m

/N41 9.96367 Tf

(\)) show

160.277 625.238 m

/N39 9.96367 Tf

(splitjoin)

[3.83596 5.03155 2.75986 2.75986 2.75986 2.75986 5.03155 2.75986 5.03155 ] pdfxs

217.916 625.238 m

(\(c)

[3.35766 4.43375 ] pdfxs

225.707 625.238 m

(\)) show

231.345 625.238 m

(feedback)

[3.35766 4.43375 4.43375 5.03155 5.03155 4.43375 4.43375 5.03155 ] pdfxs

270.024 625.238 m

(loop)

[2.75986 5.03155 5.03155 5.03155 ] pdfxs

q

468.149 0 0 -0.479996 71.9924 592.944 cm

Q

PDFVars/TermAll get exec end end

%%PageTrailer

%%EndPage

%%Trailer

%%DocumentNeededResources:

%%+ font ArialMT

%%+ font TimesNewRomanPSMT

%%+ font Times-Roman

%%+ font Courier

%%+ font Times-Italic

%%+ font Times-Bold

%%+ font TimesNewRomanPSMT

%%+ font Times-Bold

%%+ font Times-Roman

%%EOF


%%EndDocument
 @endspecial 3027 2781 V 869 2784 2162 4 v 987 2960 a(Figure)f(2-2:)43
b(Hierarc)m(hical)34 b(streams)g(in)e(StreamIt.)296 3393
y(The)d(w)m(ork)h(function)e(is)h(in)m(v)m(ok)m(ed)h(\(\014red\))f
(whenev)m(er)i(there)e(is)g(su\016cien)m(t)h(data)e(on)g(the)g(input)
150 3574 y(tap)s(e.)87 b(F)-8 b(or)47 b(the)h(FIR)e(example)j(in)f
(Figure)f(2-1,)j(the)e(\014lter)f(requires)i(at)e(least)h
Fn(N)g Fs(elemen)m(ts)150 3755 y(b)s(efore)42 b(it)f(can)h(execute.)72
b(The)43 b(v)-5 b(alue)42 b(of)48 b Fn(N)42 b Fs(is)g(kno)m(wn)h(at)e
(compile)i(time)f(when)g(the)g(\014lter)g(is)150 3935
y(constructed.)i(A)31 b(\014lter)g(is)g(akin)g(to)f(a)g(class)i(in)f
(ob)5 b(ject)31 b(orien)m(ted)h(programming)e(with)h(the)g(w)m(ork)150
4116 y(function)26 b(serving)h(as)e(the)h(main)g(metho)s(d.)42
b(The)26 b(parameters)g(to)g(a)f(\014lter)h(\(e.g.,)h
Fn(N)f Fs(and)f Fn(weights)p Fs(\))150 4296 y(are)33
b(equiv)-5 b(alen)m(t)34 b(to)e(parameters)i(passed)g(to)e(a)g(class)i
(constructor.)296 4497 y(In)c(StreamIt,)h(the)g(application)f(dev)m
(elop)s(er)h(fo)s(cuses)g(on)f(the)g(hierarc)m(hical)h(assem)m(bly)h
(of)e(the)150 4678 y(stream)38 b(graph)f(and)g(its)h(comm)m(unication)h
(top)s(ology)-8 b(,)37 b(rather)h(than)f(on)g(the)h(explicit)g(manage-)
150 4858 y(men)m(t)e(of)f(the)h(data)f(bu\013ers)i(b)s(et)m(w)m(een)g
(\014lters.)53 b(StreamIt)36 b(pro)m(vides)i(three)e(hierarc)m(hical)h
(struc-)150 5039 y(tures)i(for)f(comp)s(osing)h(\014lters)g(in)m(to)f
(larger)g(stream)h(graphs)g(\(see)g(Figure)g(2-2\).)59
b(The)39 b Fo(pip)-5 b(eline)150 5219 y Fs(construct)44
b(comp)s(oses)g(streams)g(in)f(sequence,)48 b(with)c(the)f(output)g(of)
f(one)i(connected)g(to)f(the)150 5400 y(input)33 b(of)f(the)h(next.)45
b(An)32 b(example)j(of)d(a)g(pip)s(eline)i(app)s(ears)f(in)g(Figure)f
(2-3.)1901 5649 y(18)p eop
%%Page: 19 19
19 18 bop 869 -96 2162 4 v 869 468 4 565 v 930 443 a
@beginspecial 320 @llx 648 @lly 542 @urx 704 @ury 2448
@rwi @setspecial
%%BeginDocument: pipeline-eg.eps
%!PS-Adobe-3.0 EPSF-3.0

%%Title: (main.dvi)

%%Version: 1 4

%%Creator: (dvips\(k\) 5.92b Copyright 2002 Radical Eye Software)

%%CreationDate: (D:20041213151454-05'00')

%%DocumentData: Clean7Bit

%%BoundingBox: 320 648 542 704

%%Pages: 0

%%DocumentProcessColors: Black

%%DocumentNeededResources: (atend)

%%DocumentSuppliedResources:

%%+ procset (Adobe Acrobat - PDF operators) 1.2 0

%%+ procset (Adobe Acrobat - type operators) 1.2 0

%%+ procset (Adobe Acrobat - general image support) 1.2 0

%%+ procset (Adobe Acrobat - monochrome image support) 1.2 0

%%+ procset (Adobe Acrobat - color image support) 1.2 0

%%+ procset (Adobe Acrobat - indexed color image support) 1.2 0

%%EndComments

320 648 moveto 542 648 lineto 542 704 lineto 320 704 lineto closepath clip newpath

%%BeginProlog

%%EndProlog

%%BeginSetup

%%BeginResource: file Pscript_CFF PSVER

userdict/ct_CffDict 6 dict put ct_CffDict begin/F0Subr{systemdict/internaldict

known{1183615869 systemdict/internaldict get exec/FlxProc known{save true}{

false}ifelse}{userdict/internaldict known not{userdict/internaldict{count 0 eq

{/internaldict errordict/invalidaccess get exec}if dup type/integertype ne{

/internaldict errordict/invalidaccess get exec}if dup 1183615869 eq{pop 0}{

/internaldict errordict/invalidaccess get exec}ifelse}dup 14 get 1 25 dict put

bind executeonly put}if 1183615869 userdict/internaldict get exec/FlxProc

known{save true}{false}ifelse}ifelse[systemdict/internaldict known not{100

dict/begin cvx/mtx matrix/def cvx}if systemdict/currentpacking known{

currentpacking true setpacking}if{systemdict/internaldict known{1183615869

systemdict/internaldict get exec dup/$FlxDict known not{dup dup length exch

maxlength eq{pop userdict dup/$FlxDict known not{100 dict begin/mtx matrix def

dup/$FlxDict currentdict put end}if}{100 dict begin/mtx matrix def dup

/$FlxDict currentdict put end}ifelse}if/$FlxDict get begin}if grestore/exdef{

exch def}def/dmin exch abs 100 div def/epX exdef/epY exdef/c4y2 exdef/c4x2

exdef/c4y1 exdef/c4x1 exdef/c4y0 exdef/c4x0 exdef/c3y2 exdef/c3x2 exdef/c3y1

exdef/c3x1 exdef/c3y0 exdef/c3x0 exdef/c1y2 exdef/c1x2 exdef/c2x2 c4x2 def

/c2y2 c4y2 def/yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def/PickCoords{{

c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2}{c3x0 c3y0 c3x1

c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2}ifelse/y5 exdef/x5 exdef/y4 exdef

/x4 exdef/y3 exdef/x3 exdef/y2 exdef/x2 exdef/y1 exdef/x1 exdef/y0 exdef/x0

exdef}def mtx currentmatrix pop mtx 0 get abs 1e-05 lt mtx 3 get abs 1e-05 lt

or{/flipXY -1 def}{mtx 1 get abs 1e-05 lt mtx 2 get abs 1e-05 lt or{/flipXY 1

def}{/flipXY 0 def}ifelse}ifelse/erosion 1 def systemdict/internaldict known{

1183615869 systemdict/internaldict get exec dup/erosion known{/erosion get

/erosion exch def}{pop}ifelse}if yflag{flipXY 0 eq c3y2 c4y2 eq or{false

PickCoords}{/shrink c3y2 c4y2 eq{0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs}ifelse

def/yshrink{c4y2 sub shrink mul c4y2 add}def/c1y0 c3y0 yshrink def/c1y1 c3y1

yshrink def/c2y0 c4y0 yshrink def/c2y1 c4y1 yshrink def/c1x0 c3x0 def/c1x1

c3x1 def/c2x0 c4x0 def/c2x1 c4x1 def/dY 0 c3y2 c1y2 sub round dtransform

flipXY 1 eq{exch}if pop abs def dY dmin lt PickCoords y2 c1y2 sub abs .001 gt{

c1x2 c1y2 transform flipXY 1 eq{exch}if/cx exch def/cy exch def/dY 0 y2 c1y2

sub round dtransform flipXY 1 eq{exch}if pop def dY round dup 0 ne{/dY exdef}{

pop dY 0 lt{-1}{1}ifelse/dY exdef}ifelse/erode PaintType 2 ne erosion .5 ge

and def erode{/cy cy .5 sub def}if/ey cy dY add def/ey ey ceiling ey sub ey

floor add def erode{/ey ey .5 add def}if ey cx flipXY 1 eq{exch}if itransform

exch pop y2 sub/eShift exch def/y1 y1 eShift add def/y2 y2 eShift add def/y3

y3 eShift add def}if}ifelse}{flipXY 0 eq c3x2 c4x2 eq or{false PickCoords}{

/shrink c3x2 c4x2 eq{0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs}ifelse def/xshrink

{c4x2 sub shrink mul c4x2 add}def/c1x0 c3x0 xshrink def/c1x1 c3x1 xshrink def

/c2x0 c4x0 xshrink def/c2x1 c4x1 xshrink def/c1y0 c3y0 def/c1y1 c3y1 def/c2y0

c4y0 def/c2y1 c4y1 def/dX c3x2 c1x2 sub round 0 dtransform flipXY -1 eq{exch}

if pop abs def dX dmin lt PickCoords x2 c1x2 sub abs .001 gt{c1x2 c1y2

transform flipXY -1 eq{exch}if/cy exch def/cx exch def/dX x2 c1x2 sub round 0

dtransform flipXY -1 eq{exch}if pop def dX round dup 0 ne{/dX exdef}{pop dX 0

lt{-1}{1}ifelse/dX exdef}ifelse/erode PaintType 2 ne erosion .5 ge and def

erode{/cx cx .5 sub def}if/ex cx dX add def/ex ex ceiling ex sub ex floor add

def erode{/ex ex .5 add def}if ex cy flipXY -1 eq{exch}if itransform pop x2

sub/eShift exch def/x1 x1 eShift add def/x2 x2 eShift add def/x3 x3 eShift add

def}if}ifelse}ifelse x2 x5 eq y2 y5 eq or{x5 y5 lineto}{x0 y0 x1 y1 x2 y2

curveto x3 y3 x4 y4 x5 y5 curveto}ifelse epY epX}systemdict/currentpacking

known{exch setpacking}if/exec cvx/end cvx]cvx executeonly exch{pop true exch

restore}{systemdict/internaldict known not{1183615869 userdict/internaldict

get exec exch/FlxProc exch put true}{1183615869 systemdict/internaldict get

exec dup length exch maxlength eq{false}{1183615869 systemdict/internaldict

get exec exch/FlxProc exch put true}ifelse}ifelse}ifelse{systemdict

/internaldict known{1183615869 systemdict/internaldict get exec/FlxProc get

exec}{1183615869 userdict/internaldict get exec/FlxProc get exec}ifelse}if}

executeonly def/F1Subr{gsave currentpoint newpath moveto}bind def/F2Subr{

currentpoint grestore gsave currentpoint newpath moveto}bind def/HSSubr{

systemdict/internaldict known not{pop 3}{1183615869 systemdict/internaldict

get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck

get exec}{pop 3}ifelse}ifelse}ifelse}bind def end

%%EndResource

/currentpacking where{pop currentpacking true setpacking}if

%%BeginResource: procset pdfvars

%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.

%%Version: 5.0 6

%%Title: definition of dictionary of variables used by PDF & PDFText procsets

userdict /PDF 160 dict put

userdict /PDFVars 89 dict dup begin put

/docSetupDone false def

/InitAll 0 def

/TermAll 0 def

/DocInitAll 0 def

/DocTermAll 0 def

/_pdfEncodings 2 array def

/_pdf_str1 1 string def

/_pdf_i 0 def

/_pdf_na 0 def

/_pdf_showproc 0 def

/_italMtx [1 0 .212557 1 0 0] def

/_italMtx_WMode1 [1 -.212557 0 1 0 0] def

/_italMtxType0 [1 0 .1062785 1 0 0] def

/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def

/_basefont 0 def

/_basefonto 0 def

/_pdf_oldCIDInit null def

/_pdf_FontDirectory 30 dict def

/_categories 10 dict def

/_sa? true def

/_ColorSep5044? false def

/nulldict 0 dict def

/_processColors 0 def

/overprintstack null def

/_defaulttransfer currenttransfer def

/_defaultflatness currentflat def

/_defaulthalftone null def

/_defaultcolortransfer null def

/_defaultblackgeneration null def

/_defaultundercolorremoval null def

/_defaultcolortransfer null def

PDF begin

[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W

/applyInterpFunc/applystitchFunc/domainClip/encodeInput

/initgs/int/limit/rangeClip

/defineRes/findRes/setSA/pl

%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver

/? /! /| /: /+ /GetGlyphDirectory

/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage

/pdf_shfill /pdf_sethalftone

] {null def} bind forall

end

end

%%EndResource

PDFVars begin PDF begin

%%BeginResource: procset pdfutil

%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.

%%Version: 4.0 2

%%Title: Basic utilities used by other PDF procsets

/bd {bind def} bind def

/ld {load def} bd

/bld {

dup length dict begin

{ null def } forall

bind

end

def

} bd

/dd { PDFVars 3 1 roll put } bd

/xdd { exch dd } bd

/Level2?

systemdict /languagelevel known

{ systemdict /languagelevel get 2 ge } { false } ifelse

def

/Level1? Level2? not def

/Level3?

systemdict /languagelevel known

{systemdict /languagelevel get 3 eq } { false } ifelse

def

/getifknown {

2 copy known { get true } { pop pop false } ifelse

} bd

/here {

currentdict exch getifknown

} bd

/isdefined? { where { pop true } { false } ifelse } bd

%%EndResource

%%BeginResource: l2compat

%%Version: 5.0 10

%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.

%%LanguageLevel: 1

%%Title: Level 1 emulation of level 2 operators

/setcmykcolor isdefined? not

{

/setcmykcolor {

1 sub 4 1 roll

3 {

3 index add neg dup 0 lt { pop 0 } if

3 1 roll

} repeat

setrgbcolor

pop

} bd

} if

/rectclip isdefined? not

{

/rectclip { newpath re clip newpath } bd

} if

/rectfill isdefined? not

{

/rectfill { gsave newpath re fill grestore } bd

} if

/sethalftone isdefined? not

{

/sethalftone {

begin

HalftoneType 1 eq

{ Frequency Angle /SpotFunction load setscreen }

if

end

} bd

} if

Level1?

{

/pdf_show {show} bd

/xshow

{

PDFVars /_pdf_showproc /pdf_show load put

pdf_xshow

} bd

/yshow

{

PDFVars /_pdf_showproc /pdf_show load put

pdf_yshow

} bd

/xyshow

{

PDFVars /_pdf_showproc /pdf_show load put

pdf_xyshow

} bd

} if

/getrampcolor {

/indx exch def

[

0 1 NumComp 1 sub {

dup

Samples exch get

dup type /stringtype eq { indx get } if

exch

Scaling exch get aload pop

3 1 roll

mul add

} for

]

L1setcolor

} bd

/sssetbackground { L1setcolor } bd

%%EndResource

%%BeginResource: procset pdf

%%Version: 5.0 7

%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.

%%Title: General operators for PDF, common to all Language Levels.

/cm { matrix astore concat } bd

/d /setdash ld

/f /fill ld

/h /closepath ld

/i {dup 0 eq {pop _defaultflatness} if setflat} bd

/j /setlinejoin ld

/J /setlinecap ld

/M /setmiterlimit ld

/n /newpath ld

/S /stroke ld

/w /setlinewidth ld

/W /clip ld

/initgs {

0 setgray

[] 0 d

0 j

0 J

10 M

1 w

false setSA

/_defaulttransfer load settransfer

0 i

/RelativeColorimetric ri

newpath

} bd

/int {

dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul

exch pop add exch pop

} bd

/limit {

dup 2 index le { exch } if pop

dup 2 index ge { exch } if pop

} bd

/domainClip {

Domain aload pop 3 2 roll

limit

} [/Domain] bld

/applyInterpFunc {

0 1 DimOut 1 sub

{

dup C0 exch get exch

dup C1 exch get exch

3 1 roll

1 index sub

3 index

N exp mul add

exch

currentdict /Range_lo known

{

dup Range_lo exch get exch

Range_hi exch get

3 2 roll limit

}

{

pop

}

ifelse

exch

} for

pop

} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld

/encodeInput {

NumParts 1 sub

0 1 2 index

{

dup Bounds exch get

2 index gt

{ exit }

{ dup

3 index eq

{ exit }

{ pop } ifelse

} ifelse

} for

3 2 roll pop

dup Bounds exch get exch

dup 1 add Bounds exch get exch

2 mul

dup Encode exch get exch

1 add Encode exch get

int

} [/NumParts /Bounds /Encode] bld

/rangeClip {

exch dup Range_lo exch get

exch Range_hi exch get

3 2 roll

limit

} [/Range_lo /Range_hi] bld

/applyStitchFunc {

Functions exch get exec

currentdict /Range_lo known {

0 1 DimOut 1 sub {

DimOut 1 add -1 roll

rangeClip

} for

} if

} [/Functions /Range_lo /DimOut] bld

/pdf_flushfilters

{

aload length

{ dup status

1 index currentfile ne and

{ dup flushfile closefile }

{ pop }

ifelse

} repeat

} bd

/pdf_readstring

{

1 index dup length 1 sub get

exch readstring pop

exch pdf_flushfilters

} bind def

/pdf_dictOp

{

3 2 roll

10 dict copy

begin

_Filters dup length 1 sub get def

currentdict exch exec

_Filters pdf_flushfilters

end

} [/_Filters] bld

/pdf_image {{image} /DataSource pdf_dictOp} bd

/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd

/pdf_shfill {{sh} /DataSource pdf_dictOp} bd

/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd

/pdf_maskedImage

{

10 dict copy begin

/miDict currentdict def

/DataDict DataDict 10 dict copy def

DataDict begin

/DataSource

_Filters dup length 1 sub get

def

miDict image

_Filters pdf_flushfilters

end

end

} [/miDict /DataDict /_Filters] bld

/RadialShade {

40 dict begin

/background exch def

/ext1 exch def

/ext0 exch def

/BBox exch def

/r2 exch def

/c2y exch def

/c2x exch def

/r1 exch def

/c1y exch def

/c1x exch def

/rampdict exch def

gsave

BBox length 0 gt {

newpath

BBox 0 get BBox 1 get moveto

BBox 2 get BBox 0 get sub 0 rlineto

0 BBox 3 get BBox 1 get sub rlineto

BBox 2 get BBox 0 get sub neg 0 rlineto

closepath

clip

newpath

} if

c1x c2x eq

{

c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse

}

{

/slope c2y c1y sub c2x c1x sub div def

/theta slope 1 atan def

c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if

c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if

}

ifelse

gsave

clippath

c1x c1y translate

theta rotate

-90 rotate

{ pathbbox } stopped

{ 0 0 0 0 } if

/yMax exch def

/xMax exch def

/yMin exch def

/xMin exch def

grestore

xMax xMin eq yMax yMin eq or

{

grestore

end

}

{

rampdict begin

40 dict begin

background length 0 gt { background sssetbackground gsave clippath fill grestore } if

gsave

c1x c1y translate

theta rotate

-90 rotate

/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def

/c1y 0 def

/c1x 0 def

/c2x 0 def

ext0 {

0 getrampcolor

c2y r2 add r1 lt

{

c1x c1y r1 360 0 arcn

xMin yMin moveto

xMax yMin lineto

xMax yMax lineto

xMin yMax lineto

xMin yMin lineto

eofill

}

{

c2y r1 add r2 le

{

c1x c1y r1 0 360 arc

fill

}

{

c2x c2y r2 0 360 arc fill

r1 r2 eq

{

/p1x r1 neg def

/p1y c1y def

/p2x r1 def

/p2y c1y def

p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto

fill

}

{

/AA r2 r1 sub c2y div def

/theta AA 1 AA dup mul sub sqrt div 1 atan def

/SS1 90 theta add dup sin exch cos div def

/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def

/p1y p1x SS1 div neg def

/SS2 90 theta sub dup sin exch cos div def

/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def

/p2y p2x SS2 div neg def

r1 r2 gt

{

/L1maxX p1x yMin p1y sub SS1 div add def

/L2maxX p2x yMin p2y sub SS2 div add def

}

{

/L1maxX 0 def

/L2maxX 0 def

}ifelse

p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto

L1maxX L1maxX p1x sub SS1 mul p1y add lineto

fill

}

ifelse

}

ifelse

} ifelse

} if

c1x c2x sub dup mul

c1y c2y sub dup mul

add 0.5 exp

0 dtransform

dup mul exch dup mul add 0.5 exp 72 div

0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt

72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt

1 index 1 index lt { exch } if pop

/hires exch def

hires mul

/numpix exch def

/numsteps NumSamples def

/rampIndxInc 1 def

/subsampling false def

numpix 0 ne

{

NumSamples numpix div 0.5 gt

{

/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def

/rampIndxInc NumSamples 1 sub numsteps div def

/subsampling true def

} if

} if

/xInc c2x c1x sub numsteps div def

/yInc c2y c1y sub numsteps div def

/rInc r2 r1 sub numsteps div def

/cx c1x def

/cy c1y def

/radius r1 def

newpath

xInc 0 eq yInc 0 eq rInc 0 eq and and

{

0 getrampcolor

cx cy radius 0 360 arc

stroke

NumSamples 1 sub getrampcolor

cx cy radius 72 hires div add 0 360 arc

0 setlinewidth

stroke

}

{

0

numsteps

{

dup

subsampling { round cvi } if

getrampcolor

cx cy radius 0 360 arc

/cx cx xInc add def

/cy cy yInc add def

/radius radius rInc add def

cx cy radius 360 0 arcn

eofill

rampIndxInc add

}

repeat

pop

} ifelse

ext1 {

c2y r2 add r1 lt

{

c2x c2y r2 0 360 arc

fill

}

{

c2y r1 add r2 le

{

c2x c2y r2 360 0 arcn

xMin yMin moveto

xMax yMin lineto

xMax yMax lineto

xMin yMax lineto

xMin yMin lineto

eofill

}

{

c2x c2y r2 0 360 arc fill

r1 r2 eq

{

/p1x r2 neg def

/p1y c2y def

/p2x r2 def

/p2y c2y def

p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto

fill

}

{

/AA r2 r1 sub c2y div def

/theta AA 1 AA dup mul sub sqrt div 1 atan def

/SS1 90 theta add dup sin exch cos div def

/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def

/p1y c2y p1x SS1 div sub def

/SS2 90 theta sub dup sin exch cos div def

/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def

/p2y c2y p2x SS2 div sub def

r1 r2 lt

{

/L1maxX p1x yMax p1y sub SS1 div add def

/L2maxX p2x yMax p2y sub SS2 div add def

}

{

/L1maxX 0 def

/L2maxX 0 def

}ifelse

p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto

L1maxX L1maxX p1x sub SS1 mul p1y add lineto

fill

}

ifelse

}

ifelse

} ifelse

} if

grestore

grestore

end

end

end

} ifelse

} bd

/GenStrips {

40 dict begin

/background exch def

/ext1 exch def

/ext0 exch def

/BBox exch def

/y2 exch def

/x2 exch def

/y1 exch def

/x1 exch def

/rampdict exch def

gsave

BBox length 0 gt {

newpath

BBox 0 get BBox 1 get moveto

BBox 2 get BBox 0 get sub 0 rlineto

0 BBox 3 get BBox 1 get sub rlineto

BBox 2 get BBox 0 get sub neg 0 rlineto

closepath

clip

newpath

} if

x1 x2 eq

{

y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse

}

{

/slope y2 y1 sub x2 x1 sub div def

/theta slope 1 atan def

x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if

x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if

}

ifelse

gsave

clippath

x1 y1 translate

theta rotate

{ pathbbox } stopped

{ 0 0 0 0 } if

/yMax exch def

/xMax exch def

/yMin exch def

/xMin exch def

grestore

xMax xMin eq yMax yMin eq or

{

grestore

end

}

{

rampdict begin

20 dict begin

background length 0 gt { background sssetbackground gsave clippath fill grestore } if

gsave

x1 y1 translate

theta rotate

/xStart 0 def

/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def

/ySpan yMax yMin sub def

/numsteps NumSamples def

/rampIndxInc 1 def

/subsampling false def

xStart 0 transform

xEnd 0 transform

3 -1 roll

sub dup mul

3 1 roll

sub dup mul

add 0.5 exp 72 div

0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt

72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt

1 index 1 index lt { exch } if pop

mul

/numpix exch def

numpix 0 ne

{

NumSamples numpix div 0.5 gt

{

/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def

/rampIndxInc NumSamples 1 sub numsteps div def

/subsampling true def

} if

} if

ext0 {

0 getrampcolor

xMin xStart lt

{ xMin yMin xMin neg ySpan rectfill } if

} if

/xInc xEnd xStart sub numsteps div def

/x xStart def

0

numsteps

{

dup

subsampling { round cvi } if

getrampcolor

x yMin xInc ySpan rectfill

/x x xInc add def

rampIndxInc add

}

repeat

pop

ext1 {

xMax xEnd gt

{ xEnd yMin xMax xEnd sub ySpan rectfill } if

} if

grestore

grestore

end

end

end

} ifelse

} bd

%%EndResource

%%BeginResource: procset sep_ops

%%Version: 4.0 1

%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.

%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044

userdict /sep_ops 50 dict dup begin put

/bdef {bind def} bind def

/xdef {exch def} bdef

/colorimagebuffer {

0 1 2 index length 1 sub {

dup 2 index exch get 255 exch sub 2 index 3 1 roll put

} for

} bdef

/addprocs {

[ 3 1 roll

/exec load

dup 3 1 roll

] cvx

} bdef

/L1? {

systemdict /languagelevel known {

systemdict /languagelevel get 2 lt

}{

true

} ifelse

} bdef

/colorexists {

statusdict /processcolors known {

statusdict /processcolors get exec

}{

/deviceinfo where {

pop deviceinfo /Colors known {

deviceinfo /Colors get

statusdict /processcolors {

deviceinfo /Colors known {

deviceinfo /Colors get

}{

1

} ifelse

} put

}{

1

} ifelse

}{

1

} ifelse

} ifelse

1 gt

} bdef

/colorplate colorexists { 0 } { 5 } ifelse def

/negativecolorplate false def

/setcmykcolor where {

pop

gsave

1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub

0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub

0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub

0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub

4 {4 copy} repeat

grestore

1 dict begin

/foureq {

4 index eq 8 1 roll

4 index eq 8 1 roll

4 index eq 8 1 roll

4 index eq 8 1 roll

pop pop pop pop and and and

} def

1 0 0 0 foureq {/colorplate 1 store} if

0 1 0 0 foureq {/colorplate 2 store} if

0 0 1 0 foureq {/colorplate 3 store} if

0 0 0 1 foureq {/colorplate 4 store} if

0 0 0 0 foureq {/colorplate 6 store} if

end

} if

0 systemdict /currenttransfer get exec exec

1 systemdict /currenttransfer get exec exec

2 copy

eq

{

/colorplate 6 store

pop

/negativecolorplate exch 0.5 lt store

}

{

gt /negativecolorplate exch store

}

ifelse

/findcmykcustomcolor where { pop }

{

/findcmykcustomcolor {

[ 6 1 roll ] readonly

} bdef

} ifelse

/setoverprint where {

pop

}{

/setoverprint {

pop

} bdef

} ifelse

/currentoverprint where {

pop

}{

/currentoverprint {

false

} bdef

} ifelse

/setcustomcolor where {

pop

}{

L1? {

/setcustomcolor {

exch

aload pop pop

4 { 4 index mul 4 1 roll } repeat

5 -1 roll pop

setcmykcolor

} bdef

}{

/setcustomcolor {

exch

[ exch /Separation exch dup 4 get exch /DeviceCMYK exch

0 4 getinterval

[ exch /dup load exch cvx {mul exch dup}

/forall load /pop load dup] cvx

] setcolorspace setcolor

} bdef

} ifelse

} ifelse

/ik 0 def

/iy 0 def

/im 0 def

/ic 0 def

/imagetint {

ic .3 mul

im .59 mul

iy .11 mul

ik add add add dup

1 gt {pop 1} if

} bdef

/setcmykcolor where {

pop

}{

/setcmykcolor {

/ik xdef /iy xdef /im xdef /ic xdef

imagetint

1 exch sub setgray

} bdef

} ifelse

/customcolorimage where {

pop

}{

L1? {

/customcolorimage{

gsave

colorexists {

aload pop pop

/ik xdef /iy xdef /im xdef /ic xdef

currentcolortransfer

{ik mul ik sub 1 add} addprocs

4 1 roll {iy mul iy sub 1 add} addprocs

4 1 roll {im mul im sub 1 add} addprocs

4 1 roll {ic mul ic sub 1 add} addprocs

4 1 roll setcolortransfer

/magentabuf 0 string def

/yellowbuf 0 string def

/blackbuf 0 string def

{

colorimagebuffer dup length magentabuf length ne

{

dup length dup dup

/magentabuf exch string def

/yellowbuf exch string def

/blackbuf exch string def

} if

dup magentabuf copy yellowbuf copy

blackbuf copy pop

} addprocs

{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage

}{

aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint

imagetint def

currenttransfer

{tint mul 1 tint sub add} addprocs settransfer image

} ifelse

grestore

} bdef

}{

/customcolorimage {

gsave

[ exch /Separation exch dup 4 get exch /DeviceCMYK exch

0 4 getinterval

[ exch /dup load exch cvx {mul exch dup}

/forall load /pop load dup] cvx

] setcolorspace

10 dict begin

/ImageType 1 def

/DataSource exch def

/ImageMatrix exch def

/BitsPerComponent exch def

/Height exch def

/Width exch def

/Decode [1 0] def

currentdict end

image

grestore

} bdef

} ifelse

} ifelse

/setseparationgray where {

pop

}{

L1? {

/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef

}{

/setseparationgray {

[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace

1 exch sub setcolor

} bdef

} ifelse

} ifelse

/separationimage where { pop }

{

/separationimage {

gsave

1 1 1 1 (All)

findcmykcustomcolor customcolorimage

grestore

} bdef

} ifelse

currentdict readonly pop end

%%EndResource

%%BeginResource: procset pdflev15044

%%Version: 5.0 13

%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.

%%LanguageLevel: 1

%%Title: PDF operators, Level 1, with emulated separations (TN 5044)

/_ColorSep5044? true dd

/docinitialize {

PDF begin

/_defaulthalftone

/currenthalftone where

{ pop currenthalftone }

{ 4 dict dup begin

currentscreen

/SpotFunction exch def

/Angle exch def

/Frequency exch def

/HalftoneType 1 def

end }

ifelse

dd

/currentcolortransfer where

{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }

{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }

ifelse

end

} bd

/initialize {

/overprintstack null dd

sep_ops begin

50 dict begin

_defaulthalftone sethalftone

} bd

/terminate {

end end

} bd

/currentcolortransfer where

{ pop }

{

/setcolortransfer

{

settransfer pop pop pop

} bd

} ifelse

/pl {

transform

0.25 sub round 0.25 add exch

0.25 sub round 0.25 add exch

itransform

} bd

/m { _sa? { pl } if moveto } bd

/l { _sa? { pl } if lineto } bd

/c

{

_sa? {3 {pl 6 2 roll} repeat} if

curveto

} bd

/ri/pop ld

/setSA { /_sa? xdd } bd

/re

{

_sa?

{

8 dict begin

/:h exch def

/:w exch def

/:y exch def

/:x exch def

:x :y pl

/:ymin exch def /:xmin exch def

:x :w add :y :h add pl

/:ymax exch def /:xmax exch def

:xmin :ymin moveto

:xmax :ymin lineto

:xmax :ymax lineto

:xmin :ymax lineto

closepath

end

}

{

4 2 roll moveto

1 index 0 rlineto

0 exch rlineto

neg 0 rlineto

closepath

} ifelse

} bd

/q

{

gsave

[currentoverprint overprintstack] /overprintstack xdd

}

[/overprintstack] bld

/Q

{

overprintstack aload pop /overprintstack xdd setoverprint

grestore

}

[/overprintstack] bld

/AlmostFull?

{ dup maxlength exch length sub 2 le

} bd

/Expand

{ 1 index maxlength mul cvi dict

dup begin exch { def } forall end

} bd

/xput

{ 3 2 roll

dup 3 index known not

{ dup AlmostFull? { 1.5 Expand } if

} if

dup 4 2 roll put

} bd

/defineRes

{ _categories 1 index known not

{ /_categories _categories 2 index 10 dict xput store

} if

_categories exch 2 copy get 5 -1 roll 4 index xput put

} bd

/findRes {

_categories exch get exch get

} bd

/L1setcolor {

aload length

dup 0 eq

{ pop .5 setgray }

{ dup 1 eq

{ pop setgray }

{ 3 eq

{ setrgbcolor }

{ setcmykcolor }

ifelse }

ifelse }

ifelse

} bind dd

/concattransferfuncs {

[ 3 1 roll /exec load exch /exec load ] cvx

} bd

/concatandsettransfer {

/_defaulttransfer load concattransferfuncs settransfer

} bd

/concatandsetcolortransfer {

colorplate 0 eq

{

_defaultcolortransfer aload pop

8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll

6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll

4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll

concattransferfuncs

setcolortransfer

} if

colorplate 1 ge colorplate 4 le and

{

4 colorplate sub index 4 { exch pop } repeat

concatandsettransfer

} if

colorplate 5 ge

{

0 index 4 { exch pop } repeat

concatandsettransfer

} if

} bd

/tn5044sethalftone

{

begin

HalftoneType 5 eq

{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]

colorplate get

here not {

/Default here not { currentdict } if

} if

}

{ currentdict }

ifelse

end

begin

/TransferFunction here

{

concatandsettransfer

currentdict dup length dict

begin

{

1 index /TransferFunction ne { def } { pop pop } ifelse

} forall

currentdict

end

}

{

currentdict

} ifelse

end

sethalftone

} bd

/paintimage

{

colorplate 0 eq

{

{ {currentfile cyanstr readstring pop}

{currentfile magentastr readstring pop}

{currentfile yellowstr readstring pop}

{currentfile blackstr readstring pop

currentfile graystr readstring pop pop}

}

{ {currentfile cyanstr readhexstring pop}

{currentfile magentastr readhexstring pop}

{currentfile yellowstr readhexstring pop}

{currentfile blackstr readhexstring pop

currentfile graystr readhexstring pop pop}

} ifelse

true 4 colorimage

}

{

3 dict begin

/binaryOK exch def

[

1 1 5 {

dup

/currentfile cvx

[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]

3 -1 roll 1 sub get cvx

binaryOK { /readstring } { /readhexstring } ifelse cvx

/pop cvx

5 -1 roll

colorplate dup 5 gt { pop 5 } if

eq not { /pop cvx } if

} for

] cvx bind

end

[

colorplate 6 eq {

/pop cvx

negativecolorplate { 0 } { 1 } ifelse

} if

colorplate 4 le

{

1 /exch cvx /sub cvx

} if

colorplate 6 ne

{

systemdict /currenttransfer get exec

aload pop

} if

] cvx

gsave

systemdict /settransfer get exec

systemdict /image get exec

grestore

} ifelse

} bd

%%EndResource

%%BeginResource: procset pdftext

%%Version: 5.0 6

%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.

%%Title: Text operators for PDF

PDF /PDFText 78 dict dup begin put

/docinitialize

{

/resourcestatus where {

pop

/CIDParams /ProcSet resourcestatus {

pop pop

false /CIDParams /ProcSet findresource /SetBuildCompatible get exec

} if

} if

PDF begin

PDFText /_pdfDefineIdentity-H known

{ PDFText /_pdfDefineIdentity-H get exec}

if

end

} bd

/initialize {

PDFText begin

} bd

/terminate { end } bd

Level2?

{

/_safeput

{

3 -1 roll load 3 1 roll put

}

bd

}

{

/_safeput

{

2 index load dup dup length exch maxlength ge

{ dup length 5 add dict copy

3 index xdd

}

{ pop }

ifelse

3 -1 roll load 3 1 roll put

}

bd

}

ifelse

/pdf_has_composefont? systemdict /composefont known def

/CopyFont {

{

1 index /FID ne 2 index /UniqueID ne and

{ def } { pop pop } ifelse

} forall

} bd

/Type0CopyFont

{

exch

dup length dict

begin

CopyFont

[

exch

FDepVector

{

dup /FontType get 0 eq

{

1 index Type0CopyFont

/_pdfType0 exch definefont

}

{

/_pdfBaseFont exch

2 index exec

}

ifelse

exch

}

forall

pop

]

/FDepVector exch def

currentdict

end

} bd

Level2? {currentglobal true setglobal} if

/cHexEncoding

[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12

/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25

/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38

/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B

/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E

/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71

/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84

/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97

/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA

/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD

/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0

/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3

/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6

/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def

Level2? {setglobal} if

/modEnc {

/_enc xdd

/_icode 0 dd

counttomark 1 sub -1 0

{

index

dup type /nametype eq

{

_enc _icode 3 -1 roll put

_icode 1 add

}

if

/_icode xdd

} for

cleartomark

_enc

} bd

/trEnc {

/_enc xdd

255 -1 0 {

exch dup -1 eq

{ pop /.notdef }

{ Encoding exch get }

ifelse

_enc 3 1 roll put

} for

pop

_enc

} bd

/TE {

/_i xdd

StandardEncoding 256 array copy modEnc

_pdfEncodings exch _i exch put

} bd

/TZ

{

/_usePDFEncoding xdd

findfont

dup length 6 add dict

begin

{

1 index /FID ne { def } { pop pop } ifelse

} forall

/pdf_origFontName FontName def

/FontName exch def

currentdict /PaintType known

{ PaintType 2 eq {/PaintType 0 def} if }

if

_usePDFEncoding 0 ge

{

/Encoding _pdfEncodings _usePDFEncoding get def

pop

}

{

_usePDFEncoding -1 eq

{

counttomark 0 eq

{ pop }

{

Encoding 256 array copy

modEnc /Encoding exch def

}

ifelse

}

{

256 array

trEnc /Encoding exch def

}

ifelse

}

ifelse

pdf_EuroProcSet pdf_origFontName known

{

pdf_origFontName pdf_AddEuroGlyphProc

} if

Level2?

{

currentdict /pdf_origFontName undef

} if

FontName currentdict

end

definefont pop

}

bd

Level2?

{

/TZG

{

currentglobal true setglobal

2 index _pdfFontStatus

{

2 index findfont

false setglobal

3 index findfont

true setglobal

ne

{

2 index findfont dup rcheck

{

dup length dict begin

{

1 index /FID ne { def } { pop pop } ifelse

} forall

currentdict end

}

if

3 index exch definefont pop

}

if

} if

setglobal

TZ

} bd

}

{

/TZG {TZ} bd

} ifelse

Level2?

{

currentglobal false setglobal

userdict /pdftext_data 5 dict put

pdftext_data

begin

/saveStacks

{

pdftext_data

begin

/vmmode currentglobal def

false setglobal

count array astore /os exch def

end

countdictstack array dictstack pdftext_data exch /ds exch put

cleardictstack pdftext_data /dscount countdictstack put

pdftext_data /vmmode get setglobal

} bind def

/restoreStacks

{

pdftext_data /vmmode currentglobal put false setglobal

clear cleardictstack

pdftext_data /ds get dup

pdftext_data /dscount get 1 2 index length 1 sub

{ get begin dup } for

pop pop

pdftext_data /os get aload pop

pdftext_data /vmmode get setglobal

} bind def

/testForClonePrinterBug

{

currentglobal true setglobal

/undefinedCategory /Generic /Category findresource

dup length dict copy /Category defineresource pop

setglobal

pdftext_data /saveStacks get exec

pdftext_data /vmmode currentglobal put false setglobal

/undefined /undefinedCategory { resourcestatus } stopped

pdftext_data exch /bugFound exch put

pdftext_data /vmmode get setglobal

pdftext_data /restoreStacks get exec

pdftext_data /bugFound get

} bind def

end

setglobal

/pdf_resourcestatus

pdftext_data /testForClonePrinterBug get exec

{

{

pdftext_data /saveStacks get exec

pdftext_data /os get dup dup length 1 sub

dup 1 sub dup 0 lt { pop 0 } if

exch 1 exch { get exch dup } for

pop pop

{ resourcestatus }

stopped

{

clear cleardictstack pdftext_data /restoreStacks get exec

{ pop pop } stopped pop false

}

{

count array astore pdftext_data exch /results exch put

pdftext_data /restoreStacks get exec pop pop

pdftext_data /results get aload pop

}

ifelse

}

}

{ { resourcestatus } }

ifelse

bd

}

if

Level2?

{

/_pdfUndefineResource

{

currentglobal 3 1 roll

_pdf_FontDirectory 2 index 2 copy known

{undef}

{pop pop}

ifelse

1 index (pdf) exch _pdfConcatNames 1 index

1 index 1 _pdfConcatNames 1 index

5 index 1 _pdfConcatNames 1 index

4

{

2 copy pdf_resourcestatus

{

pop 2 lt

{2 copy findresource gcheck setglobal undefineresource}

{pop pop}

ifelse

}

{ pop pop}

ifelse

} repeat

setglobal

} bd

}

{

/_pdfUndefineResource { pop pop} bd

}

ifelse

Level2?

{

/_pdfFontStatus

{

currentglobal exch

/Font pdf_resourcestatus

{pop pop true}

{false}

ifelse

exch setglobal

} bd

}

{

/_pdfFontStatusString 50 string def

_pdfFontStatusString 0 (fonts/) putinterval

/_pdfFontStatus

{

FontDirectory 1 index known

{ pop true }

{

_pdfFontStatusString 6 42 getinterval

cvs length 6 add

_pdfFontStatusString exch 0 exch getinterval

{ status } stopped

{pop false}

{

{ pop pop pop pop true}

{ false }

ifelse

}

ifelse

}

ifelse

} bd

}

ifelse

Level2?

{

/_pdfCIDFontStatus

{

/CIDFont /Category pdf_resourcestatus

{

pop pop

/CIDFont pdf_resourcestatus

{pop pop true}

{false}

ifelse

}

{ pop false }

ifelse

} bd

}

if

/_pdfString100 100 string def

/_pdfComposeFontName

{

dup length 1 eq

{

0 get

1 index

type /nametype eq

{

_pdfString100 cvs

length dup dup _pdfString100 exch (-) putinterval

_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval

2 index exch cvs length

add 1 add _pdfString100 exch 0 exch getinterval

exch pop

true

}

{

pop pop

false

}

ifelse

}

{

false

}

ifelse

dup {exch cvn exch} if

} bd

/_pdfConcatNames

{

exch

_pdfString100 cvs

length dup dup _pdfString100 exch (-) putinterval

_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval

3 -1 roll exch cvs length

add 1 add _pdfString100 exch 0 exch getinterval

cvn

} bind def

/_pdfTextTempString 50 string def

/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def

/_pdf_CheckCIDSystemInfo

{

1 index _pdfTextTempString cvs

(Identity) anchorsearch

{

pop pop pop pop true

}

{

false

_pdfRegOrderingArray

{

2 index exch

anchorsearch

{ pop pop pop true exit}

{ pop }

ifelse

}

forall

exch pop

exch /CIDFont findresource

/CIDSystemInfo get

3 -1 roll /CMap findresource

/CIDSystemInfo get

exch

3 -1 roll

{

2 copy

/Supplement get

exch

dup type /dicttype eq

{/Supplement get}

{pop 0 }

ifelse

ge

}

{ true }

ifelse

{

dup /Registry get

2 index /Registry get eq

{

/Ordering get

exch /Ordering get

dup type /arraytype eq

{

1 index type /arraytype eq

{

true

1 index length 1 sub -1 0

{

dup 2 index exch get exch 3 index exch get ne

{ pop false exit}

if

} for

exch pop exch pop

}

{ pop pop false }

ifelse

}

{

eq

}

ifelse

}

{ pop pop false }

ifelse

}

{ pop pop false }

ifelse

}

ifelse

} bind def

pdf_has_composefont?

{

/_pdfComposeFont

{

2 copy _pdfComposeFontName not

{

2 index

}

if

(pdf) exch _pdfConcatNames

dup _pdfFontStatus

{ dup findfont 5 2 roll pop pop pop true}

{

4 1 roll

1 index /CMap pdf_resourcestatus

{

pop pop

true

}

{false}

ifelse

1 index true exch

{

_pdfCIDFontStatus not

{pop false exit}

if

}

forall

and

{

1 index 1 index 0 get _pdf_CheckCIDSystemInfo

{

3 -1 roll pop

2 index 3 1 roll

composefont true

}

{

pop pop exch pop false

}

ifelse

}

{

_pdfComposeFontName

{

dup _pdfFontStatus

{

exch pop

1 index exch

findfont definefont true

}

{

pop exch pop

false

}

ifelse

}

{

exch pop

false

}

ifelse

}

ifelse

{ true }

{

dup _pdfFontStatus

{ dup findfont true }

{ pop false }

ifelse

}

ifelse

}

ifelse

} bd

}

{

/_pdfComposeFont

{

_pdfComposeFontName not

{

dup

}

if

dup

_pdfFontStatus

{exch pop dup findfont true}

{

1 index

dup type /nametype eq

{pop}

{cvn}

ifelse

eq

{pop false}

{

dup _pdfFontStatus

{dup findfont true}

{pop false}

ifelse

}

ifelse

}

ifelse

} bd

}

ifelse

/_pdfStyleDicts 4 dict dup begin

/Adobe-Japan1 4 dict dup begin

Level2?

{

/Serif

/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus

{/HeiseiMin-W3}

{

/HeiseiMin-W3 _pdfCIDFontStatus

{/HeiseiMin-W3}

{/Ryumin-Light}

ifelse

}

ifelse

def

/SansSerif

/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus

{/HeiseiKakuGo-W5}

{

/HeiseiKakuGo-W5 _pdfCIDFontStatus

{/HeiseiKakuGo-W5}

{/GothicBBB-Medium}

ifelse

}

ifelse

def

/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus

{/HeiseiMaruGo-W4}

{

/HeiseiMaruGo-W4 _pdfCIDFontStatus

{/HeiseiMaruGo-W4}

{

/Jun101-Light-RKSJ-H _pdfFontStatus

{ /Jun101-Light }

{ SansSerif }

ifelse

}

ifelse

}

ifelse

/RoundSansSerif exch def

/Default Serif def

}

{

/Serif /Ryumin-Light def

/SansSerif /GothicBBB-Medium def

{

(fonts/Jun101-Light-83pv-RKSJ-H) status

}stopped

{pop}{

{ pop pop pop pop /Jun101-Light }

{ SansSerif }

ifelse

/RoundSansSerif exch def

}ifelse

/Default Serif def

}

ifelse

end

def

/Adobe-Korea1 4 dict dup begin

/Serif /HYSMyeongJo-Medium def

/SansSerif /HYGoThic-Medium def

/RoundSansSerif SansSerif def

/Default Serif def

end

def

/Adobe-GB1 4 dict dup begin

/Serif /STSong-Light def

/SansSerif /STHeiti-Regular def

/RoundSansSerif SansSerif def

/Default Serif def

end

def

/Adobe-CNS1 4 dict dup begin

/Serif /MKai-Medium def

/SansSerif /MHei-Medium def

/RoundSansSerif SansSerif def

/Default Serif def

end

def

end

def

/TZzero

{

/_wmode xdd

/_styleArr xdd

/_regOrdering xdd

3 copy

_pdfComposeFont

{

5 2 roll pop pop pop

}

{

[

0 1 _styleArr length 1 sub

{

_styleArr exch get

_pdfStyleDicts _regOrdering 2 copy known

{

get

exch 2 copy known not

{ pop /Default }

if

get

}

{

pop pop pop /Unknown

}

ifelse

}

for

]

exch pop

2 index 3 1 roll

_pdfComposeFont

{3 -1 roll pop}

{

findfont dup /FontName get exch

}

ifelse

}

ifelse

dup /WMode 2 copy known

{ get _wmode ne }

{ pop pop _wmode 1 eq}

ifelse

{

exch _wmode _pdfConcatNames

dup _pdfFontStatus

{ exch pop dup findfont false}

{ exch true }

ifelse

}

{

dup /FontType get 0 ne

}

ifelse

{

dup /FontType get 3 eq _wmode 1 eq and

{

_pdfVerticalRomanT3Font dup length 10 add dict copy

begin

/_basefont exch

dup length 3 add dict

begin

{1 index /FID ne {def}{pop pop} ifelse }

forall

/Encoding Encoding dup length array copy

dup 16#27 /quotesingle put

dup 16#60 /grave put

_regOrdering /Adobe-Japan1 eq

{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}

if

def

FontName

currentdict

end

definefont

def

/Encoding _basefont /Encoding get def

/_fauxfont true def

}

{

dup length 3 add dict

begin

{1 index /FID ne {def}{pop pop} ifelse }

forall

FontType 0 ne

{

/Encoding Encoding dup length array copy

dup 16#27 /quotesingle put

dup 16#60 /grave put

_regOrdering /Adobe-Japan1 eq

{dup 16#5c /yen put}

if

def

/_fauxfont true def

} if

} ifelse

/WMode _wmode def

dup dup /FontName exch def

currentdict

end

definefont pop

}

{

pop

}

ifelse

/_pdf_FontDirectory 3 1 roll _safeput

}

bd

Level2?

{

/Tf {

_pdf_FontDirectory 2 index 2 copy known

{get exch 3 -1 roll pop}

{pop pop}

ifelse

selectfont

} bd

}

{

/Tf {

_pdf_FontDirectory 2 index 2 copy known

{get exch 3 -1 roll pop}

{pop pop}

ifelse

exch findfont exch

dup type /arraytype eq

{makefont}

{scalefont}

ifelse

setfont

} bd

}

ifelse

/cshow where

{

pop /pdf_cshow /cshow load dd

/pdf_remove2 {pop pop} dd

}

{

/pdf_cshow {exch forall} dd

/pdf_remove2 {} dd

} ifelse

/pdf_xshow

{

/_pdf_na xdd

/_pdf_i 0 dd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

{

pdf_remove2

_pdf_str1 exch 0 exch put

_pdf_str1 /_pdf_showproc load exec

{_pdf_na _pdf_i get} stopped

{ pop pop }

{

_pdf_x _pdf_y moveto

0

rmoveto

}

ifelse

_pdf_i 1 add /_pdf_i xdd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

}

exch

pdf_cshow

} bd

/pdf_yshow

{

/_pdf_na xdd

/_pdf_i 0 dd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

{

pdf_remove2

_pdf_str1 exch 0 exch put

_pdf_str1 /_pdf_showproc load exec

{_pdf_na _pdf_i get} stopped

{ pop pop }

{

_pdf_x _pdf_y moveto

0 exch

rmoveto

}

ifelse

_pdf_i 1 add /_pdf_i xdd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

}

exch

pdf_cshow

} bd

/pdf_xyshow

{

/_pdf_na xdd

/_pdf_i 0 dd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

{

pdf_remove2

_pdf_str1 exch 0 exch put

_pdf_str1 /_pdf_showproc load exec

{_pdf_na _pdf_i get} stopped

{ pop pop }

{

{_pdf_na _pdf_i 1 add get} stopped

{ pop pop pop}

{

_pdf_x _pdf_y moveto

rmoveto

}

ifelse

}

ifelse

_pdf_i 2 add /_pdf_i xdd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

}

exch

pdf_cshow

} bd

/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd

/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd

/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd

Level2? _ColorSep5044? not and

{

/pdfxs {{xshow} stopped {pdfl1xs} if} bd

/pdfys {{yshow} stopped {pdfl1ys} if} bd

/pdfxys {{xyshow} stopped {pdfl1xys} if} bd

}

{

/pdfxs /pdfl1xs load dd

/pdfys /pdfl1ys load dd

/pdfxys /pdfl1xys load dd

} ifelse

/pdf_charpath {false charpath} bd

/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd

/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd

/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd

/pdf_strokepath

{

{

pdf_remove2

_pdf_str1 exch 0 exch put

_pdf_str1 false charpath

currentpoint S moveto

} bind

exch pdf_cshow

} bd

/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd

/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd

/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd

Level2? {currentglobal true setglobal} if

/d0/setcharwidth ld

/nND {{/.notdef} repeat} bd

/T3Defs {

/BuildChar

{

1 index /Encoding get exch get

1 index /BuildGlyph get exec

}

def

/BuildGlyph {

exch begin

GlyphProcs exch get exec

end

} def

/_pdfT3Font true def

} bd

/_pdfBoldRomanWidthProc

{

stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth

0 0

} bd

/_pdfType0WidthProc

{

dup stringwidth 0 0 moveto

2 index true charpath pathbbox

0 -1

7 index 2 div .88

setcachedevice2

pop

0 0

} bd

/_pdfType0WMode1WidthProc

{

dup stringwidth

pop 2 div neg -0.88

2 copy

moveto

0 -1

5 -1 roll true charpath pathbbox

setcachedevice

} bd

/_pdfBoldBaseFont

11 dict begin

/FontType 3 def

/FontMatrix[1 0 0 1 0 0]def

/FontBBox[0 0 1 1]def

/Encoding cHexEncoding def

/_setwidthProc /_pdfBoldRomanWidthProc load def

/_bcstr1 1 string def

/BuildChar

{

exch begin

_basefont setfont

_bcstr1 dup 0 4 -1 roll put

dup

_setwidthProc

3 copy

moveto

show

_basefonto setfont

moveto

show

end

}bd

currentdict

end

def

pdf_has_composefont?

{

/_pdfBoldBaseCIDFont

11 dict begin

/CIDFontType 1 def

/CIDFontName /_pdfBoldBaseCIDFont def

/FontMatrix[1 0 0 1 0 0]def

/FontBBox[0 0 1 1]def

/_setwidthProc /_pdfType0WidthProc load def

/_bcstr2 2 string def

/BuildGlyph

{

exch begin

_basefont setfont

_bcstr2 1 2 index 256 mod put

_bcstr2 0 3 -1 roll 256 idiv put

_bcstr2 dup _setwidthProc

3 copy

moveto

show

_basefonto setfont

moveto

show

end

}bd

currentdict

end

def

/_pdfDefineIdentity-H

{

/Identity-H /CMap PDFText /pdf_resourcestatus get exec

{

pop pop

}

{

/CIDInit/ProcSet findresource begin 12 dict begin

begincmap

/CIDSystemInfo

3 dict begin

/Registry (Adobe) def

/Ordering (Identity) def

/Supplement 0 def

currentdict

end

def

/CMapName /Identity-H def

/CMapVersion 1 def

/CMapType 1 def

1 begincodespacerange

<0000> <ffff>

endcodespacerange

1 begincidrange

<0000> <ffff> 0

endcidrange

endcmap

CMapName currentdict/CMap defineresource pop

end

end

} ifelse

} def

} if

/_pdfVerticalRomanT3Font

10 dict begin

/FontType 3 def

/FontMatrix[1 0 0 1 0 0]def

/FontBBox[0 0 1 1]def

/_bcstr1 1 string def

/BuildChar

{

exch begin

_basefont setfont

_bcstr1 dup 0 4 -1 roll put

dup

_pdfType0WidthProc

moveto

show

end

}bd

currentdict

end

def

Level2? {setglobal} if

/MakeBoldFont

{

dup /ct_SyntheticBold known

{

dup length 3 add dict begin

CopyFont

/ct_StrokeWidth .03 0 FontMatrix idtransform pop def

/ct_SyntheticBold true def

currentdict

end

definefont

}

{

dup dup length 3 add dict

begin

CopyFont

/PaintType 2 def

/StrokeWidth .03 0 FontMatrix idtransform pop def

/dummybold currentdict

end

definefont

dup /FontType get dup 9 ge exch 11 le and

{

_pdfBoldBaseCIDFont

dup length 3 add dict copy begin

dup /CIDSystemInfo get /CIDSystemInfo exch def

/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont

/_basefont exch def

/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont

/_basefonto exch def

currentdict

end

/CIDFont defineresource

}

{

_pdfBoldBaseFont

dup length 3 add dict copy begin

/_basefont exch def

/_basefonto exch def

currentdict

end

definefont

}

ifelse

}

ifelse

} bd

/MakeBold {

1 index

_pdf_FontDirectory 2 index 2 copy known

{get}

{exch pop}

ifelse

findfont

dup

/FontType get 0 eq

{

dup /WMode known {dup /WMode get 1 eq }{false} ifelse

version length 4 ge

and

{version 0 4 getinterval cvi 2015 ge }

{true}

ifelse

{/_pdfType0WidthProc}

{/_pdfType0WMode1WidthProc}

ifelse

_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put

{MakeBoldFont} Type0CopyFont definefont

}

{

dup /_fauxfont known not 1 index /SubstMaster known not and

{

_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put

MakeBoldFont

}

{

2 index 2 index eq

{ exch pop }

{

dup length dict begin

CopyFont

currentdict

end

definefont

}

ifelse

}

ifelse

}

ifelse

pop pop

dup /dummybold ne

{/_pdf_FontDirectory exch dup _safeput }

{ pop }

ifelse

}bd

/MakeItalic {

_pdf_FontDirectory exch 2 copy known

{get}

{exch pop}

ifelse

dup findfont

dup /FontInfo 2 copy known

{

get

/ItalicAngle 2 copy known

{get 0 eq }

{ pop pop true}

ifelse

}

{ pop pop true}

ifelse

{

exch pop

dup /FontType get 0 eq Level2? not and

{ dup /FMapType get 6 eq }

{ false }

ifelse

{

dup /WMode 2 copy known

{

get 1 eq

{ _italMtx_WMode1Type0 }

{ _italMtxType0 }

ifelse

}

{ pop pop _italMtxType0 }

ifelse

}

{

dup /WMode 2 copy known

{

get 1 eq

{ _italMtx_WMode1 }

{ _italMtx }

ifelse

}

{ pop pop _italMtx }

ifelse

}

ifelse

makefont

dup /FontType get 42 eq Level2? not or

{

dup length dict begin

CopyFont

currentdict

end

}

if

1 index exch

definefont pop

/_pdf_FontDirectory exch dup _safeput

}

{

pop

2 copy ne

{

/_pdf_FontDirectory 3 1 roll _safeput

}

{ pop pop }

ifelse

}

ifelse

}bd

/MakeBoldItalic {

/dummybold exch

MakeBold

/dummybold

MakeItalic

}bd

Level2?

{

/pdf_CopyDict

{1 index length add dict copy}

def

}

{

/pdf_CopyDict

{

1 index length add dict

1 index wcheck

{ copy }

{ begin

{def} forall

currentdict

end

}

ifelse

}

def

}

ifelse

/pdf_AddEuroGlyphProc

{

currentdict /CharStrings known

{

CharStrings /Euro known not

{

dup

/CharStrings

CharStrings 1 pdf_CopyDict

begin

/Euro pdf_EuroProcSet 4 -1 roll get def

currentdict

end

def

/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def

/pdf_PathOps /pdf_PathOps load def

/Symbol eq

{

/Encoding Encoding dup length array copy

dup 160 /Euro put def

}

if

}

{ pop

}

ifelse

}

{ pop

}

ifelse

}

def

Level2? {currentglobal true setglobal} if

/pdf_PathOps 4 dict dup begin

/m {moveto} def

/l {lineto} def

/c {curveto} def

/cp {closepath} def

end

def

/pdf_PSBuildGlyph

{

gsave

8 -1 roll pop

7 1 roll

currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse

dup 9 1 roll

{

currentdict /StrokeWidth 2 copy known

{

get 2 div

5 1 roll

4 -1 roll 4 index sub

4 1 roll

3 -1 roll 4 index sub

3 1 roll

exch 4 index add exch

4 index add

5 -1 roll pop

}

{

pop pop

}

ifelse

}

if

setcachedevice

pdf_PathOps begin

exec

end

{

currentdict /StrokeWidth 2 copy known

{ get }

{ pop pop 0 }

ifelse

setlinewidth stroke

}

{

fill

}

ifelse

grestore

} def

/pdf_EuroProcSet 13 dict def

pdf_EuroProcSet

begin

/Courier-Bold

{

600 0 6 -12 585 612

{

385 274 m

180 274 l

179 283 179 293 179 303 c

179 310 179 316 180 323 c

398 323 l

423 404 l

197 404 l

219 477 273 520 357 520 c

409 520 466 490 487 454 c

487 389 l

579 389 l

579 612 l

487 612 l

487 560 l

449 595 394 612 349 612 c

222 612 130 529 98 404 c

31 404 l

6 323 l

86 323 l

86 304 l

86 294 86 284 87 274 c

31 274 l

6 193 l

99 193 l

129 77 211 -12 359 -12 c

398 -12 509 8 585 77 c

529 145 l

497 123 436 80 356 80 c

285 80 227 122 198 193 c

360 193 l

cp

600 0 m

}

pdf_PSBuildGlyph

} def

/Courier-BoldOblique /Courier-Bold load def

/Courier

{

600 0 17 -12 578 584

{

17 204 m

97 204 l

126 81 214 -12 361 -12 c

440 -12 517 17 578 62 c

554 109 l

501 70 434 43 366 43 c

266 43 184 101 154 204 c

380 204 l

400 259 l

144 259 l

144 270 143 281 143 292 c

143 299 143 307 144 314 c

418 314 l

438 369 l

153 369 l

177 464 249 529 345 529 c

415 529 484 503 522 463 c

522 391 l

576 391 l

576 584 l

522 584 l

522 531 l

473 566 420 584 348 584 c

216 584 122 490 95 369 c

37 369 l

17 314 l

87 314 l

87 297 l

87 284 88 272 89 259 c

37 259 l

cp

600 0 m

}

pdf_PSBuildGlyph

} def

/Courier-Oblique /Courier load def

/Helvetica

{

556 0 24 -19 541 703

{

541 628 m

510 669 442 703 354 703 c

201 703 117 607 101 444 c

50 444 l

25 372 l

97 372 l

97 301 l

49 301 l

24 229 l

103 229 l

124 67 209 -19 350 -19 c

435 -19 501 25 509 32 c

509 131 l

492 105 417 60 343 60 c

267 60 204 127 197 229 c

406 229 l

430 301 l

191 301 l

191 372 l

455 372 l

479 444 l

194 444 l

201 531 245 624 348 624 c

433 624 484 583 509 534 c

cp

556 0 m

}

pdf_PSBuildGlyph

} def

/Helvetica-Oblique /Helvetica load def

/Helvetica-Bold

{

556 0 12 -19 563 710

{

563 621 m

537 659 463 710 363 710 c

216 710 125 620 101 462 c

51 462 l

12 367 l

92 367 l

92 346 l

92 337 93 328 93 319 c

52 319 l

12 224 l

102 224 l

131 58 228 -19 363 -19 c

417 -19 471 -12 517 18 c

517 146 l

481 115 426 93 363 93 c

283 93 254 166 246 224 c

398 224 l

438 319 l

236 319 l

236 367 l

457 367 l

497 462 l

244 462 l

259 552 298 598 363 598 c

425 598 464 570 486 547 c

507 526 513 517 517 509 c

cp

556 0 m

}

pdf_PSBuildGlyph

} def

/Helvetica-BoldOblique /Helvetica-Bold load def

/Symbol

{

750 0 20 -12 714 685

{

714 581 m

650 645 560 685 465 685 c

304 685 165 580 128 432 c

50 432 l

20 369 l

116 369 l

115 356 115 347 115 337 c

115 328 115 319 116 306 c

50 306 l

20 243 l

128 243 l

165 97 300 -12 465 -12 c

560 -12 635 25 685 65 c

685 155 l

633 91 551 51 465 51 c

340 51 238 131 199 243 c

555 243 l

585 306 l

184 306 l

183 317 182 326 182 336 c

182 346 183 356 184 369 c

614 369 l 644 432 l

199 432 l

233 540 340 622 465 622 c

555 622 636 580 685 520 c

cp

750 0 m

}

pdf_PSBuildGlyph

} def

/Times-Bold

{

500 0 16 -14 478 700

{

367 308 m

224 308 l

224 368 l

375 368 l

380 414 l

225 414 l

230 589 257 653 315 653 c

402 653 431 521 444 457 c

473 457 l

473 698 l

444 697 l

441 679 437 662 418 662 c

393 662 365 700 310 700 c

211 700 97 597 73 414 c

21 414 l

16 368 l

69 368 l

69 359 68 350 68 341 c

68 330 68 319 69 308 c

21 308 l

16 262 l

73 262 l

91 119 161 -14 301 -14 c

380 -14 443 50 478 116 c

448 136 l

415 84 382 40 323 40 c

262 40 231 77 225 262 c

362 262 l

cp

500 0 m

}

pdf_PSBuildGlyph

} def

/Times-BoldItalic

{

500 0 9 -20 542 686

{

542 686 m

518 686 l

513 673 507 660 495 660 c

475 660 457 683 384 683 c

285 683 170 584 122 430 c

58 430 l

34 369 l

105 369 l

101 354 92 328 90 312 c

34 312 l

9 251 l

86 251 l

85 238 84 223 84 207 c

84 112 117 -14 272 -14 c

326 -14 349 9 381 9 c

393 9 393 -10 394 -20 c

420 -20 l

461 148 l

429 148 l

416 109 362 15 292 15 c

227 15 197 55 197 128 c

197 162 204 203 216 251 c

378 251 l

402 312 l

227 312 l

229 325 236 356 241 369 c

425 369 l

450 430 l

255 430 l

257 435 264 458 274 488 c

298 561 337 654 394 654 c

437 654 484 621 484 530 c

484 516 l

516 516 l

cp

500 0 m

}

pdf_PSBuildGlyph

} def

/Times-Italic

{

500 0 23 -10 595 692

{

399 317 m

196 317 l

199 340 203 363 209 386 c

429 386 l

444 424 l

219 424 l

246 514 307 648 418 648 c

448 648 471 638 492 616 c

529 576 524 529 527 479 c

549 475 l

595 687 l

570 687 l

562 674 558 664 542 664 c

518 664 474 692 423 692 c

275 692 162 551 116 424 c

67 424 l

53 386 l

104 386 l

98 363 93 340 90 317 c

37 317 l

23 279 l

86 279 l

85 266 85 253 85 240 c

85 118 137 -10 277 -10 c

370 -10 436 58 488 128 c

466 149 l

424 101 375 48 307 48 c

212 48 190 160 190 234 c

190 249 191 264 192 279 c

384 279 l

cp

500 0 m

}

pdf_PSBuildGlyph

} def

/Times-Roman

{

500 0 10 -12 484 692

{

347 298 m

171 298 l

170 310 170 322 170 335 c

170 362 l

362 362 l

374 403 l

172 403 l

184 580 244 642 308 642 c

380 642 434 574 457 457 c

481 462 l

474 691 l

449 691 l

433 670 429 657 410 657 c

394 657 360 692 299 692 c

204 692 94 604 73 403 c

22 403 l

10 362 l

70 362 l

69 352 69 341 69 330 c

69 319 69 308 70 298 c

22 298 l

10 257 l

73 257 l

97 57 216 -12 295 -12 c

364 -12 427 25 484 123 c

458 142 l

425 101 384 37 316 37 c

256 37 189 84 173 257 c

335 257 l

cp

500 0 m

}

pdf_PSBuildGlyph

} def

end

Level2? {setglobal} if

currentdict readonly pop end

%%EndResource

PDFText begin

[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis

/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute

/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde

/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex

/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls

/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash

/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef

/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash

/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef

/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe

/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide

/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright

/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand

/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex

/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex

/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla

/hungarumlaut/ogonek/caron

0 TE

[1/dotlessi/caron 39/quotesingle 96/grave 

127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis

/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE

/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft

/quotedblright/bullet/endash/emdash/tilde/trademark/scaron

/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling

/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine

/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus

/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla

/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters

/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla

/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis

/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash

/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave

/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute

/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde

/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute

/ucircumflex/udieresis/yacute/thorn/ydieresis

1 TE

end

currentdict readonly pop

end end

/currentpacking where {pop setpacking}if

PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin

PDFVars/DocInitAll get exec PDFVars/InitAll get exec

%%IncludeResource Courier

[/N60/Courier -1 TZ

%%IncludeResource Times-Italic

[ 2 /fi 32 /space/exclam/quotedbl/numbersign/dollar

/percent/ampersand/quoteright/parenleft/parenright/asterisk

/plus/comma/hyphen/period/slash/zero

/one/two/three/four/five/six

/seven/eight/nine/colon/semicolon/less

/equal/greater/question/at/A/B

/C/D/E/F/G/H

/I/J/K/L/M/N

/O/P/Q/R/S/T

/U/V/W/X/Y/Z

/bracketleft/backslash/bracketright/asciicircum/underscore/quoteleft

/a/b/c/d/e/f

/g/h/i/j/k/l

/m/n/o/p/q/r

/s/t/u/v/w/x

/y/z/braceleft/bar/braceright/asciitilde

/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/.notdef/exclamdown/cent

/sterling/fraction/yen/florin/section/currency

/quotesingle/quotedblleft/guillemotleft/guilsinglleft/guilsinglright/fi

/fl/.notdef/endash/dagger/daggerdbl/periodcentered

/.notdef/paragraph/bullet/quotesinglbase/quotedblbase/quotedblright

/guillemotright/ellipsis/perthousand/.notdef/questiondown/.notdef

/grave/acute/circumflex/tilde/macron/breve

/dotaccent/dieresis/.notdef/ring/cedilla/.notdef

/hungarumlaut/ogonek/caron/emdash/.notdef/.notdef

/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/AE/.notdef/ordfeminine/.notdef

/.notdef/.notdef/.notdef/Lslash/Oslash/OE

/ordmasculine/.notdef/.notdef/.notdef/.notdef/.notdef

/ae/.notdef/.notdef/.notdef/dotlessi/.notdef

/.notdef/lslash/oslash/oe/germandbls/.notdef

/.notdef/.notdef/.notdef

/N57/Times-Italic -1 TZ

%%IncludeResource Times-Bold

[/N45/Times-Bold -1 TZ

%%IncludeResource Times-Bold

[/N46/Times-Bold -1 TZ

%%IncludeResource Times-Roman

[ 2 /fi/fl 32 /space/exclam/quotedbl/numbersign

/dollar/percent/ampersand/quoteright/parenleft/parenright

/asterisk/plus/comma/hyphen/period/slash

/zero/one/two/three/four/five

/six/seven/eight/nine/colon/semicolon

/less/equal/greater/question/at/A

/B/C/D/E/F/G

/H/I/J/K/L/M

/N/O/P/Q/R/S

/T/U/V/W/X/Y

/Z/bracketleft/backslash/bracketright/asciicircum/underscore

/quoteleft/a/b/c/d/e

/f/g/h/i/j/k

/l/m/n/o/p/q

/r/s/t/u/v/w

/x/y/z/braceleft/bar/braceright

/asciitilde/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/quotedblleft/quotedblright/.notdef

/endash/emdash/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/.notdef/.notdef/exclamdown

/cent/sterling/fraction/yen/florin/section

/currency/quotesingle/quotedblleft/guillemotleft/guilsinglleft/guilsinglright

/fi/fl/.notdef/endash/dagger/daggerdbl

/periodcentered/.notdef/paragraph/bullet/quotesinglbase/quotedblbase

/quotedblright/guillemotright/ellipsis/perthousand/.notdef/questiondown

/.notdef/grave/acute/circumflex/tilde/macron

/breve/dotaccent/dieresis/.notdef/ring/cedilla

/.notdef/hungarumlaut/ogonek/caron/emdash/.notdef

/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef

/.notdef/.notdef/.notdef/AE/.notdef/ordfeminine

/.notdef/.notdef/.notdef/.notdef/Lslash/Oslash

/OE/ordmasculine/.notdef/.notdef/.notdef/.notdef

/.notdef/ae/.notdef/.notdef/.notdef/dotlessi

/.notdef/.notdef/lslash/oslash/oe/germandbls

/.notdef/.notdef/.notdef/.notdef

/N47/Times-Roman -1 TZ

%%IncludeResource TimesNewRomanPSMT

[/N41/TimesNewRomanPSMT 1 TZ

%%IncludeResource Times-Roman

[/N39/Times-Roman -1 TZ

%%IncludeResource ArialMT

[/N52/ArialMT 1 TZ

PDFVars/TermAll get exec end end



%%EndSetup

PDFVars begin PDF begin PDFVars/InitAll get exec

320 648 221 56 rectclip

%%BeginResource: font TWPPMU+ArialMT~47

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /TWPPMU+ArialMT~47 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A259BC9984DB874CFBF432DC23D7457637070526912FD9815BE031

9519877F20C9609B5B58AAB0EFD1AB99AE9E6EBBFFF6479EB9E420D146762F01

59B41831A5312789C775520554EB9FEF7F7C5A0B69609D183F654CC9E516843D

39D400085ABA9646DA481FF9468E167556FF2D2521815E2A32874AB03E72C7AB

1024243EA677680BE387625F955E87713831EB3219318ED24174C839554897C7

213358F9708DABA15D2FB9C8340A6A684CCB04C1845415C81C9AF8E6861BDE41

2BF46CF45BE4D7B4D65A6D990C67FC10310576CC8DBBA7765CAB918E883BACBB

97147F7D72EA3A2E1B3AECC1CD984BBA20123B0FE78C02B6687368159B715447

9EB249424F55DD2FEBBB88CB2CB3D9E6BD1F5E41B28EA25FB4982745B9EFFDDC

58FFC60A0CDD5990D0AC927857559AC8A39DA004A9E99A94FCD78B20D94429DE

3D17CC2BDC4A3CC75392C8C38FD13BD6BF369D0E51989A9E405EFF62FA317CB6

9C49F642460F43F7896B919594E672389A0AB10BB6A0319B7DA61A23386151B2

6CD0BEBAE4A37E391BE5FCEACDFF7AFA8793CDAEF8FB4AAE31057301D2D43C3B

0BC75E9F333139988AD175E4DCA73E35F4AD723D4B6D08AA2622B36413277BAA

9C65600C5FD300866842A91675A392048FFF0F8EA0B04869B01F1BEFEE9D2543

1864509A8B7AC913BFEAACE31AC4B2245B1A474E8331D296456B3484E2AF77B2

3D0E0A705F9684A816F6F3303D2D635CD57FD9CCC01AFED57B312FECF713D2EA

4FCA1A4FCA1D0518FBEC3BA59B13EF7E015ACFA7393D0C6C32FCE02073F6457A

4A86547BD5CBB44261D74A216C4D91B11B0CD0D131CA56CC8B39E7D39E08F133

F4BE00F38E4E9B63DEEAE3B9614612C111C007FCC425B672842DB76BFC

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/TWPPMU+ArialMT~47 findfont /Encoding get

dup 0 /.notdef put

pop

end

/TWPPMU+ArialMT~47 findfont /Encoding get

dup 0 /.notdef put

dup 79 /O put

dup 112 /p put

dup 116 /t put

pop

%%EndResource

[/N48/TWPPMU+ArialMT~47 -1 TZ

%%BeginResource: font OGCUNH+ArialMT~41

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /OGCUNH+ArialMT~41 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A18BEBA8D67DD8AD36B7F2459BDD5018192B26B1196D9822275B7E

7116DA2B71C1A0BD3FF9F3FCBFA20466CF1F99EF43F07D8EEBE6D20CD1F74810

527EF849CA7D3A47A075C579CABC23DFA76068EB6C2545483BEDE3F5036AD096

95D44D3AF1F3DE68B49C231BA72A6C0F914ED70519CC4C1E28E058061A7D304D

FCA2C36D91A36B15655F225FB9DE99B3072122C81748CC079616345904F8F37C

C7F95A75EB51E927A490401ECFAD06CB01C4EB75FBAF00E3DE83EF1F35C94410

04E7B1D25AD35361E694D89ECC0A72C605EB4C9D7D88A29FC9115CE89A379FD4

C1A4E52ADB52D3C654A49B201C33A0E64899F3935FB11EC87C168D736D95D91E

CD594E4FAF03BF485818BA103ECAC3E87F72AE5856D990E4536CCAB54D452CE9

BE3C07AA91A93F489997B9845FBC29CE29CEA04959987633F2F395973D9BCC1E

F1D642C62512AC59555F83DF8FB03C9F5328563D36909495C6CAA400AF2803E9

805F933A5E8469E2F7D8CF8A58C3FDC26C3F6BC5A6A197174E29185023335B31

49C04C2065931AFBDA4267C1C0DC4D966E0D373B1FAE511F636707FDE0428D27

8CD58E604F898A821A607E115D78DC72DA764158960D53157D53BB98A4750E89

0791B4931367FA9297B8F57AB9972B85446060B224348392C259001C556CA4FF

28344533E4D528C7ED3C4AEFFFDD6E256FA0E42203430943A3FC456E777EAC14

C9BF3B7D09525AACAE4A6687834BB5FFAD6D2E1A6D254A25445F3DFEADA91B9E

B63EDC882598237FA32519923EC02D15A0D25E4ABE5A571EF333F6BF909B231C

D842ED1DC55AE14DAE113A288504DF4849AECB8CC9C823CA48BEF1F9B13A2D3F

C46539206CF0CEF63BB8F6552BE9364D67D6B39778D4BD2569B935FD862C8EA2

4E26795DE934852A7018E3B85CE303AFFA2182984F2EE5ACE4F39D970A502AFA

F9CBE6D9EBA5CE0E114C24D87E11B9E14BDFAB759A637774FAB8B429AC0A0036

EFAC9429FD3F5B15AE3B4E8C1201637BA3434279592BD2552309725ABB188F59

6B747B36D1BF0D3493FBBAD3F5EB2D7F40C818DD9ECFFB1EB8D896C481DDD06B

35EB9551DE18D5BBF26714656CD44754C6B2088C110B82B8D4B3661EAA663D32

F104CC46F44C2ACFC76FED41A0F2B05B7B41EFF4A37F7C0D5DC28C35E17F6140

019D18B7BBB5116D61F535122FC1D6E7351F19E0DB3E12A9156BD90771E21877

107BEE9A31AC1E5B36695DE9CEC2019EB79CB7271A579F459C886F87D2B10358

83BCB25720684831CCABC45EC31548BBCA6C7C3CAA7D6533D90C1E8DF8CD9C1D

768155AAC4C84085EDA4C7D6E53D50850C87EC5700B6A0096EB9EE2987951B49

D8F300EDB61DFFF0BBC71A93DEFFF6467E3B50E99ECE362A8C9C066D613026E5

A9C940B5968967BC8A6F1C9E663E4281DF5FA67C13AABF9087CB59EFC9717659

ED4B3E22F50B0A5964D490EDEA4C8912279A80D6959C1A04DCE4B59BF46537BD

3DF45737103A25DC0AB7238687BBC7D18AA8725E95880EDC87EAA210BDDD4EA3

6D0233BE65271564FF7D61537088B0874D1DF9D41C40368399A80433D3743DE1

C433

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/OGCUNH+ArialMT~41 findfont /Encoding get

dup 0 /.notdef put

pop

end

/OGCUNH+ArialMT~41 findfont /Encoding get

dup 0 /.notdef put

dup 83 /S put

dup 99 /c put

dup 101 /e put

dup 111 /o put

dup 114 /r put

dup 117 /u put

pop

%%EndResource

[/N51/OGCUNH+ArialMT~41 -1 TZ

%%BeginResource: font ZJMUMW+ArialMT~3d

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /ZJMUMW+ArialMT~3d def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A5D5842D86A6C9AFDD18ECD5CAF2DE803E7A7BA868FAB984229798

ADDAAE49C9EA48A5D2DB77F25DC348952B5767EA25D6B45FB5128D1FE19A13A9

7002F975B66C9D5CC3EE3F1761A538F9022226136BFAAB026D01E0FB9845A9FE

FBF6A04BAC4A2EFBBB973EE935BFE23007877F33299A211C3D90A328B2D7C191

4958A3E05057A5E462736BEAFAB78E885644D62D94E30F82AFE894F988F779CF

9FECE9B95C4F0A5D21D3723DDEEEF96400AA484030C6D05D838398C95647491D

BC0D333156ECCE454ACFE3ED1588C866DA6139A7EB9B135E23DFA3D54FEB26E8

85DA2226E79F8E7312B94721BECB4B311B600555662D256B8CD5585E1A77D228

599954C42563DD55EA8E81E3A3B44E0C96461FA8CDB355140EFB150C899B1AF5

37A3FC4CF21D77AAC53D78C1170AC920B8BCC1F418BB5D809E8B5631E57CA8F7

75BE0997CD1D3F3B3A30C75702DCD9034E4FA07ACB4C393BAE91E3C20B4BDD4E

28A6A9CD35E53FB9F88C1B35641F104F43BDB3F882BB141DB7A2F75BF71D1459

ECBD8B040579BEDC02A93FB8415F4664B67A8144C5B87CCE66E97F06383B941C

CCBE2DB149D5EDF7F367DFCFBB082942F3D7E23805E65524D091B9F5A5584661

9F5E55E9EFCE8D71696618CADF4E39319329E4F972DD9C09FDD1028715633E72

59879F0D45B306F85B8106B92F3F1348EB73C59334DEBBF2A21F8CF93E27DB62

FD955F2BE3E29D052F407C73EE62ABE49C0C94EC1B981ED469673AA03BBED205

FFC5E80BA4A37C0DBCA8188EEFC8C7CFDFA65B91493574F1E7262FC78F0C0542

71EE9C3A061E656D4272EBB7D12365555D7204E649AF46C97A3C8FEF0A10899D

11EB37CF1E612071DD9C2942B129B3E92A213AA82860EC9D6692E3AE4CE6AC93

14BE238EBD9BDE963D77AF3597349C77140E15582FD8B52D509FFC323BE1ADA8

B51971030F7BC855D9E03B25A6A91EF9675677F85A8071DB1E6F6C6FB86355A7

DFE10ADB40E2921CA88485C759AE50713BC70F2C1D5E78CE8D79A6C7D93217AA

7773FB631E4E1DF000C771D9771919891CF147FD0CC90D7C9A0B609A32EC976A

9E9EEA77363D633A09CA6076FB8ED55FDD55EB40E56B25D0B9D4B5B8FE5015B8

6AF68FFA9FE5F12D655A6EC26BAB77154C9CD88F4084858A93E7743E07ED3F63

F6BA61D50895F12884CFE801EF1E9C987C9A1EFC11C3C5F0DDDCFBD738C80425

DAA05AB310FA7642C111A041B1766A84CFCA1679970F3BAA698B686ADDA540F1

451621FEB3A37E236BA5627BA833E2A29EA883EE9F7F683067DE7740BC114F24

83A2C5270B7ECCAAA522E8BF1CBF5749C30B2989C9A103433F3E023BD94A8BDB

49917F0B42B1DC5C4F323AEC77C18934D1233169AF3531231A9900918F8A4024

5E0F44AAB9276B3F672B215E6A462BC856028A3B19FAFD409C2853E826A43DE4

51A02050A1FEA0763EF8D4E1EEEBBCC889D066689193444F5B4A46F229055443

720765B15EC8AAA278A9D0D2A1524CD3643CE3DDF69F815CAF88623DC03039D5

E5CFC7BCBFC86598C0F062BEA4CF2C27B3C7BA0DFD4B16EAFD214A6886C41D52

D8329097BEE435D2106A74E6E51F5CB649562B97AB5BEAC905218D6BF0A79B67

4B8032EFECD6C19088EAD58CD0166F8E7A79C45362352DEA2F277F08001B1660

544395B9EC7C2D0D9AACA76851AB9AD4100AD0C567B465B5F91C0B49D33FA82A

A3A0C745BE9C2B0EC02D6177BA60BFE8042F52777EAFC54027966E18CBBC5B51

63BD1D296C9EFD52D0D73214EB1CD435396EAAD4E084E505FC17D071F11923A9

1478D795489531ECB5DAA57EB300704E23050AC45CE0AB131D477926B88A07E5

F67B6A9D5A64697E4195FBEAAF786A2724C9011FDB18D61CAC897690075DCB4A

736B7F630A15BD57254F71DFBB7D7BF090CBA999D00ED8D4807424AB5726A62F

034A8D58BB2E9464DF5D983ECF8BA2DE9A60A8B9688DE2DAAC3F9B577CEB6745

58DC45C7297575AD8E5B6EB6BF7C3AFDA0B7A853A661DD60BFEA39C62FB948AC

872CB6426305B83275016574E83C92E7C07943D0A144EBF39610F304C3868878

AB7FA0FB84C5ED9B960E3A6F8B4226C90AFD5383569C2D9E335396B5F49CF971

9A9596FD7C1B839C1890B3740DEF54192195CB0D309C263AD847B425A6ED1B5B

BB45769D4AA7B68D4F9E0558B78AD191EDC11EFABA1C21619817A0975C7B85C4

81B917B6DF02E299CE03FB28B3E3427835A46A6C6E3E42049557B2B6F0DCD638

459632CE39595EC4F4B175D029D3435A7A6DF88708B0C44AFDF87F9620A78F4D

B3572925D02DA44168BEF45D2A22C792E44DB695856B9DCE3BE8F7E84DA97097

3373B8C2C5E5AF3379573EAC8246BE7612CF5A6D307C1D1E580D09CBACD6FA96

2FBFDFB3C8353538F68B7218192407192FC89ECDB18C734007AE1C2238B0C473

32F9082ED05C7B5B8E4F51766B59493518CDFE9C179470ABA8A5EB83DE85CF9F

1AD9E27752A48966084CE2EE5A473910AA7B06FA5CD8C226BE874027E01A982C

0FF4B05039AAE1927379A2E813EC79D64A72793AF00F79CE4CE3A9E0DECFD7EB

DF19029DE1501F13BDE1FF44C42FC612034CFA9FA1EB25D9B98B18742F96C129

1DD81217052467D592FD34F518BE92EB76C816ACADE8314EE7DC962B395A0BC6

3FE384DAEA52014EF575EBD64857B497036639548F55A246F831E8B9A065A46C

C2315AAE195323A9FB246E6F6E2F3F12D307EE091F970F01DE342954091FAD25

314B02044670722C2EABF99A377EF4E167FEA22873DA59DC8AAB1154774B515F

E9F668707E971689BFC528EC480892CFFE1162B7C69EED8878BB1AF60B59FEE6

C539BBEDCEC9A8D913D734DD23C761E6D028AA850B1CD714EDD514FCE806C05B

0A073BF863CC48C54A234CE3D5E462846188D458AA7955D76F13D600A9C381E5

E6F5310370CF6B0042824F15015234A8941E0EECEA5DC233281D01CC026127F6

FBDB31059AC5708DCFE489B27DA1FFFF6543E2949814B7EF03E1C2EF480F2A58

F981F9AC424A1B8C4102E36C4A01A20F460060086D6BB45D98C723FA755155D5

C7C2350A023F797D9E6CB1D05B0EABFAD46DE2F09B01D93A3FF3EF67CC3513EE

79D6D80F4BF3F01DD011C3B84177E29DF962254ADFE27636F6340188B2ACCF4E

87895E2D78A26729BC34D8AF2CE26050E71BC005475EB201A12DB65EC44BC224

DA445D09E5BAC0656FFA332241E88B68F09089D601911778EB4EAC3364544866

35EA7C557D837A11986E0D102FC99B713D4B48C5E5D6D6072AC9374EDEB7F5D6

B42B83D55716C569A06E185684634F2B64EF1EDF3289E21058B1EFB9AA8881C5

1CD2DC040F0E44DAEC8B0341E96EBB16469FB3D27901237ADFC5BD531A973588

77BF5B676D0691CF5BB9BA388DEB865F64B4F0F4707D794344C2C80988F7CF47

F9F64E84396549A4B8FAB47235A51CF6C12A3CC6B7B1F37F5BD55B83AEA14034

87C6B347A870F8036F57ED14E02382A9B5870CAB82B9A8F6714425D76B352A27

48907A4A985E23CCE50B97D6458B0190C84B801314A1A00944BDD2C66C42EF78

4F2332A91CD9E90AD99B90FB4F5D270CC32221820EE05E7E065F6254A9F49057

89F3B8A2A09CF9B14941859299EC4BAA9B4B5D96C9AE103490106CE5EBE0558D

2A0C5EF7897D597AE945881A020178DF88A1F63B9A7F5749978A19C055C61164

0C793B008BCDFF36AB34E048D452B712AAD28077AC5968C1B69D596D2B3806CB

8A9916062723F9D5BD43149139ADEC44E5E89CEDAA0377F69CA33B9759C2CE1C

3FC6B883DF939E457480C8DEDABB35806E42EF26B6B0ED4383DE3D74B3D746DD

D00D49C8EBF0A6652F9B13150A96ECE8838E75F4D1112421CC327FCF79EF422A

DD8AEF7AC64316EE0F2F6CEF56F2C8494A862AAFB5C545AE4D83F8DB042E7770

52F93AB726CE0B823394A22ED0B3379482E96F9C90A64C349173226EBBF4D9D0

6C3D205DE96D299BBC31780906AAEEBD7D3B1702D8B3924F7BCDF168D132BF4C

F5A1880C72CC23D5D90DF01BB07DE8839E0A9EFFD9AE64BDD5444D50E6E2451C

42649A6B0DCD9CF4ABBB3B9CB0465728FEBEC98EE1DDFC840B3EDC41DC49714F

76D2D4AD4E92CB2498FF6BC40863FB2A51A3E5D92BA7F023E595F54155BE3501

559E2412BAF8D1145CF5D50BF972D9D39340E935A7912CF31EB3362BB226D477

A95FE2733C29427C49F2315347235B5B63ECAB17E55E5E78DEEFD339437CD5D3

7F1E2F9EDC6219FE4C8B79665654F1C541BCA64DBEAC4E0CF6D7960D25D9C5C6

C3A83FA3A95397EB32C17A0D370DDF841BF0AACE574AB95B4D4BD13DC93F92F5

186D9D693B3CF21FC0AE8AC128CBF505D21753692D4D56B64C0CAE92DEE58B38

1272C1C610E19F18975C46BD2032DE17BB733F8D4C14CD779BE0CBCE441017D1

9089521DF299E2D347C74D22E5627D7C1184D2007C23A68726DCD75C4F9D3A90

D3543492D836B47DE2F2DEE582784A756EADBDA009DDB2C8EEDD4397340144D6

DE09FFAB597F8E74A95142356568C36170AC576D90DBFC95A803DEB787AA2627

E5F4118A1FD1E23A566168BA9428177DD9AF7BF7448550E653DAF214C7E26D0E

F8A35D67F7B4C88BCF80E214CCB3DDAC500F770937EFDED41EDAE04AC523C6DE

6D34B29F5BF480CE5FBF16E6D42FBD1923E90B37E1AA50D1FEF0603CEE6356D7

821C343C42526EE2CDEE8B0C572E717F121C29D5CA45EACB9EC293ECF0D13C34

306BD4E1FA566ED1040D5AE89947EEFA9121BF4F7E71B466DBEA1FDC7DA24F2E

1F7BC63389583687AF8D3FE1D0B8E79B4BD6EA99133141BFFF3015CA97F6BC42

926639AB0C23CC04029CB7514E97FD9C33A8D6DC50F904B2CD43BB91117A1AC7

BCC9A6F9897C1CFE2B7DA2C1E06C7FAB265A4F86BF92B875FC69791F1AA74A3D

8883E0C5EB7D6EF2E19FDEE63E67CB80F482B6AD3FA0F00A7B42BE8889ECBEA8

64D79CB9C31823C41E77FC401341339050944D7463AE34D5A13A20E11A5F2400

37DA6C7A15CC7C21FEF312FB742FAA4D0A7B7D87999E6BD21EDFB185AB09207B

25AC54CD36403BEF3BA0552DE8F7F1CAD140C8327636634943C60E4199E417BF

8A6FCB745A07B484A2B0BEE550C4828B5157E0A4F40B67A98ADBDA8B21A45909

D7AA6EF52972E6BAE7F3DFA432FB6EA12889899EECAC223F6E11692310EF59EB

105341CADE92F4D8EF95EF042D33A18FFB22D46DE27F89EB273E098B7E0AC4D2

AC4FCF74225E6E9A6F6B3CB2B9FF1F97F4140B310E02049CAE392373D5B03CCD

C00489C4493D3FB62ADA16A62F7B4519ED2C9FAD29557B6980E5DD0821A81A11

2B60591CC10BF67D29BC7826F3082C3D36939C8DD26B053D9ABBBA351A00D89E

C684133984EAEAA33C6FDD99229ACDC6972CB8F8B29E949732766E0C8B80346A

D7E3B426FF64981FB86C85276671BECD88D08FCE30F3AEF6B0B4A897216E4672

092EF65FF2EE3E14F972503805712540029088A77FDE93BD32887D80C1677BDD

03ED24C7A7DB72A6921BD56FA1232F7DFAE46579DD11F88B7EFD0ACDC1912170

840806652BBE0CF48830971D9CDD5EDA6139482F8F2113E69739FE03E3EB7B40

E49C35CABEE2B4091D2CC00FA2DC221F4D0C58DC87841743E6D4533BFEC8A821

7AEC889671BF0F69E662B05BB7F80CB0

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/ZJMUMW+ArialMT~3d findfont /Encoding get

dup 0 /.notdef put

pop

end

/ZJMUMW+ArialMT~3d findfont /Encoding get

dup 0 /.notdef put

dup 32 /space put

dup 40 /parenleft put

dup 41 /parenright put

dup 45 /hyphen put

dup 47 /slash put

dup 59 /semicolon put

dup 62 /greater put

dup 73 /I put

dup 77 /M put

dup 79 /O put

dup 82 /R put

dup 83 /S put

dup 97 /a put

dup 99 /c put

dup 100 /d put

dup 101 /e put

dup 102 /f put

dup 104 /h put

dup 105 /i put

dup 108 /l put

dup 110 /n put

dup 111 /o put

dup 112 /p put

dup 114 /r put

dup 115 /s put

dup 116 /t put

dup 117 /u put

dup 119 /w put

dup 123 /braceleft put

dup 125 /braceright put

pop

%%EndResource

[/N35/ZJMUMW+ArialMT~3d -1 TZ

%%BeginResource: font HCLPKB+ArialMT~37

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /HCLPKB+ArialMT~37 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A5C48AB7AF79B79D736D42CDE21F0363666AFD1B2E8230C07E3DD1

B4503AAD5E63ED2314400EEB16531F7335B34CD2BD4FD38F90ECA74DA87497C1

756F7178A45C7EC0ED25E0AE233807F0EAF3DDE653C42453A43F319A023AA37C

F4C2DBD26BEF155A2AE1A880A254FA8518170FE7B76A5120CBB49ADCA57CF20A

5502FF35F5488673A03F11BF1E2CDAD7A1AACCCF7C7B8C675A403D9FD5A91866

C8734B5BF8B99A08AABB8F8BE438653FFD4546A739EDE655ADC8879321A48918

747722A92947A50FFE4166290F65482F2E1F537BD1FF45615BC89138EFBB97B5

18206D6A14E8BA71991D8108E7FD66A5AA3187AA0E3ED0D01111C2658D4401E5

7CF7C0CEB595C755F2288DC8B956839AB45B82A9FA6FC65E12F789DC971375C5

59E78953B748AAF161932139ABF91185E985FD840D0E94BB747D02F2D869B2B9

7679D51D6FC355BE7639CF23DA069EB6972666AC0910F99A6213751D65A79D78

53808C86826FBB367C74E196FD5A8F8ACF13FB23F581F788E2961D2795

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/HCLPKB+ArialMT~37 findfont /Encoding get

dup 0 /.notdef put

pop

end

/HCLPKB+ArialMT~37 findfont /Encoding get

dup 0 /.notdef put

dup 108 /l put

dup 112 /p put

pop

%%EndResource

[/N30/HCLPKB+ArialMT~37 -1 TZ

%%BeginResource: font MMCJHH+ArialMT~34

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /MMCJHH+ArialMT~34 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A367D85BFE7DCF51A4B1428D17CCFBB38855B20F264AED104C7F38

0432D121C51BCA5B423A43BE147BE85241E84318442F2F0386B31CBCF75E8A7F

E1CA92CAED009304155349E29FFF3AF4467E81183A43F1761371EFE7737293B8

358D800562B41E3621FDD577A69DECCD8D0530A8DF883DFD5D67645B9BEC58D3

502AF80CD62D1D9FD8CE8A1247ED876FAFD508DE5585EC27F7E12FB08A7E7B54

7927081BEC6D2D40DF6A5C5F4EC8157CA160480C1335517C6D996921616AB728

62B9120577C3B434E4F8D9D12D32C45B3EB2529D380566BF6B104F36CB5C2044

629CCCB40C98D5A293B50825C29AEBD6B3811270B24D5545C4EFF656E0B04F07

7888E86FEC1C5D2C17633DC251D04B1108A681D971B0E499860873AD0824A075

CEEEA405C6AD57F3CD6B70CEE8A2883DEFF36FBDA1C30491A54424A4F4BBE58E

49487DE6042DB85A5A460EEBFDD0CA09A5FAB3EB284F3BDF09B4DD5B6F9A1014

C8CBB593BFFC0EC32FD35E731EA7D45878BC90EC90223B8B26026ABF5C0660C5

65824FC595F60775A5F5283B91C1A53A42624A63CCF36F92112C7394A37D59CA

F70BB7023E0CDE5857C62A104B20E5CD9961DF84AA5470800CD224C2BDE69A48

4D3A51CF1B2C8A47CD84D0DE91BF0B7A2F14D106D15CA95AD2C7B55AF66C1BD2

0A378FAA84A369135296C0AC81CA4FBC98A3179B748D7517418B14A52C138997

D09F7FE4FA0E079836C72BF9E4D5D0A352E7267049FE9956D7EF7B7E8BBF8BD8

E4A3FFE12AEF054D8CEFDC0DB6EB732BF81CD9D7D46C937E5FE28E03526E731A

22C444CDC18BD7E7CE950EF1314846288FF371D289E8DDF3A5C9ED328811516A

21019740849CA9C5404CEE3F03F530FBE0981E2F48E6D7AE998A3467D3E2B630

31818C37C24FF6C70323A35090C6C2940952F35ADCACADFE59CA8E964019E251

03EE3957A63256B87854847C1B7A557EBC6A29F469E75156646647E28E6D439B

092A6B0A084C1AFB4F658713954CC7B063C9C78100C87441EC7B651FE7AF9B4C

309A1D7993BA383BDDF41BEA7D233C6CECE1316FF277B1A1315D9608AD5D5D4E

AE521F6B548DF8073BC2C934E7A77F8A5FBF79AFCE6044CE7E4BA3785AB9E70F

CEB938955F8DBC72F66C92EAAAB284EF3C75CF6B91B9AE809ECF5CBD3F52800D

C9E155E147DE889B57BC2DA0C3FD3E58AAB00A81BE3340B48C9720B527F48774

E5C3520217C9B8C60A46E56AA2CB940A6CC0A108850E5CC61542F5903E4690E4

22642811DB0402900ADAEB14507B6C15979156DA031E7BC192E22AF79086D405

36251C43A35299C9D14D5CF81343F92371D4140B53965767CD8B06C820573CA3

3554234A2D01DCA5948CE41084019EFE6B4CDC1FFD09A527FD345A3E7A3C6A2B

49

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/MMCJHH+ArialMT~34 findfont /Encoding get

dup 0 /.notdef put

pop

end

/MMCJHH+ArialMT~34 findfont /Encoding get

dup 0 /.notdef put

dup 97 /a put

dup 109 /m put

dup 115 /s put

dup 116 /t put

pop

%%EndResource

[/N31/MMCJHH+ArialMT~34 -1 TZ

%%BeginResource: font XSJKPF+ArialMT~31

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /XSJKPF+ArialMT~31 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A18BEBA8D67DD8AD36B7F2459BDD5018192B26B1196D9822275B7E

7116DA2B71C1A0BD3FF9F3FCBFA20466CF1F99EF43F07D8EEBE6D20CD1F74810

527EF849CA7D3A47A075C579CABC23DFA76068EB6C2545458FF8936FE9391A64

D5A8A1448880D50715145534E59E9430613005EEE7550C409CE0503BF1650BE2

AC03F7B38C2F3285304B4579EFA5B3CBAED6250C9F4DAAB3FA6B1299E9AEEA4D

89055CD9A2356AA207C739E3FCE13B5376C7FC9655A96F77B53B5395FB2D1D5C

A6E537CCB83F391C30C5C1E35A28DC8E05B1CAE62C372B995DFDC8D9352128B8

0332D44F401A72524C8529754BC7EB888F7DD93AE1BA8F7CFDBCA8CAC8D46E33

C3E360213B048E8C336A64593C0DB302F64BCD36B9D4202D62559E89CF92116A

9E4AD7B511A3B3A99802350257C4FB11BA65A93DE9F2DBDD14B2EFBC02FFE11C

BE40569379BB56F037476787964F569781CBDE85B006DBDBE83F4C751FE1C84E

C59FB946A9DFF2F34F66E93DC0F2A4B50973BD4E8D4F8EE8C58587576EAE51AA

6E05B48F6193A0C0207A91C0DDC6A66A271A15B0FBFB1C5E2A16C33223C49DF4

DCA79D03F41A25C0008ECA85745010FB9369D716CA1183878B7B056B67A1BFEA

A16CB0E0DD34FF661D09A734DEA1EDA628A258425BDE9EFFFB47A6188FA620D9

90E61FC284890A03B53F3B93B1001E2AD219890A32A288E56A2D1F8630179D1C

BDE8DDA5D1A0A6FEE9B2CA73C1B46049A28CA22B01F593F62F1F37DFDD2E98BC

7F5DEE60B7758E6FBC084657A4F4F9B6FD1D2FC5529454B74E410DD11BA015A5

F46B45AF40754189BCDC6E97F56FD759E085B5051A7252F6188DC15907A180DA

FC336FA0407579581ABDDD82F170F156058D16BE7E00D8C20971C98CBFC4D9DC

1638C7E38683846D351E56D7F5AC39DF7EEA520D08C9636F7279835087EC393F

C8959A3A91DFCB8426BBA2FE13D9DFC5A15C285D52A2B30F55A256522BEB5A5E

B2A17654E0A187C375F3704CF3BF62FBBB6EF10E90752DC77005FE35B9781DC4

419D8D436789EAA572C4C4B6DEEBB2DC731238A56CC448F095B8CB6159B9AD80

EE7A7E28E479715C42C9C98933215B1BB6599DD1C0B8ABC83DEDDA0C4ECABA6C

404BBA756A7EEC6AC8053FD25FFF91671FF50AFD4F92A1C9143A20B54D05621E

392D86DA33F7F91757F5FFFA4CA1357BB5

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/XSJKPF+ArialMT~31 findfont /Encoding get

dup 0 /.notdef put

pop

end

/XSJKPF+ArialMT~31 findfont /Encoding get

dup 0 /.notdef put

dup 101 /e put

dup 105 /i put

dup 106 /j put

dup 110 /n put

dup 111 /o put

dup 114 /r put

pop

%%EndResource

[/N22/XSJKPF+ArialMT~31 -1 TZ

%%BeginResource: font EJJJJY+ArialMT~2b

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /EJJJJY+ArialMT~2b def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A259BC9984DB874CFBF432DC23D7457637070526912FD9815BE031

9519877F20C9609B5B58AAB0EFD1AB99AE9E6EBBFFF6479EB9E420D146762F01

59B41831A5312789C775520554EB9FEF7F7C5A0B69609D06BB445313C1AE65B5

055AA6C2F10ACF37CD93A18D299BC54BAC72233B536005468912FE2EDF704209

3AD85F2CCA921758866AA49E3391AEAB38B488FAB48502A5D59AA8E116A63C5C

E16B261FC70D20F99994A05A9E4F68E13797C960FE85CE505538DC81E566874A

DD22D8AB5A0B41F9133B0C14297F848195D257DAEEF3AAA7C690A83288BD36AB

BA90578795D7A69444A6349248FF73BACC549CBE9624844EF53A411F846B483B

8F9C2F7CEFD97134C14818AD0F56951B266C90AF15360BEB94E9FA1335EDD738

BFFC1FA4EA624DFE346C68137FF7231A277C1F682A1BA7BB409963FD73F7FA59

9E159AD9D118B4A0C2049390DC206A6029129B53C03137C52BEEDE577B724C9B

08BC47F19CA319547465D2C2CCA901B156A8A2D4FCD1061374CC93E9D8149F84

3262CC1BD8296C5F80F3855D36805393862268ED0A0FCDF216A33D4D6F20F41E

7B7769246455A14737859F61DECE8FE760FCF7184E2312FC210532A79DDF0232

7B2A275E043BB90EC83CA9947BE41882A69361905CEF78666AA2A11E487E739C

254598C6CC7416F1010540F1533262B5FFF2F2B7AE592EF6E9A7E369FE560BF4

9EB4664C976372B5A91FE8C0C2D8F3DB27D6707DA400F934A9E5BAB9CD83C1

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/EJJJJY+ArialMT~2b findfont /Encoding get

dup 0 /.notdef put

pop

end

/EJJJJY+ArialMT~2b findfont /Encoding get

dup 0 /.notdef put

dup 106 /j put

dup 110 /n put

dup 111 /o put

pop

%%EndResource

[/N25/EJJJJY+ArialMT~2b -1 TZ

%%BeginResource: font UKEUSF+ArialMT~28

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /UKEUSF+ArialMT~28 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A5C48AB7AF79B79D736D42CDE21F0363666AFD1B2E8230C07E3DD1

B4503AAD5E63ED2314400EEB16531F7335B34CD2BD4FD38F90ECA74DA87497C1

756F7178A45C7EC0ED25E0AE233807F0EAF3DDE653C42442EF75F21F39891C8B

A70C0530EDA7B6EE6158617516D4BD56DA39F92E5D3910BFD5E78B2873E2A362

3C5D0B72D7F91C0BF8ED3A4BEDDEB61B4803889554E9F574B27F18D6F6043CED

187AB1E1FB29E62C0BDBB27C95B28F01513D918C23D0898A86125A8833E01E95

90D7B7A8E66A3DDE45E4BA8946929A0301895EEB31A1451BC8C529D8A7C1F218

41C4EC16177C67F72529C8773B7ABA6A9D252D50BEA83F17BAB783DF30B61E5F

4D95AAE12D93C10172975BABD5DEFC456EABF928E66D8E67989A1214133FADEC

FC8CA966567DB6FABA54C6A15117808BF88D6437944511BA4D1D8A1FF025165D

10C59E3BB0DC4C7445238CFF643D10CD8E0DC2ECE931F902E67289B101B23BE4

3BF42448455214E6548D72735128C4F70843AE421C2F1F7C6E19D132902F94FA

B732D2E97DB8EBD6D50B1B5D6AC6F2B2C471E6A4C609D2605E27F4137163468E

443559DFC474EB21C75B28F2D092E0A4D0DE9D2370FE1845434303BAA9E51F0A

6448239471F42272931D0BE8816DACA5456D0D3D188C498EEA0FA232CE25344E

A7B05B17038A0898CADE06699C5448D8C5EF0F83F78D0244B7D873EF7036DFE8

96F74DF438EC0433FDA9B74F58152C491525CF57F960E366FA9B5E63A6914774

2B4DBB41D65CC5F0A329384537BD9CA65B60D1A5928594A31DD7CB747E831C05

4095F937EBE5DFD79515C455B4298EB94A61F2D6EA299FDC30C175511BBCD7A2

6A44F7450DD1B1F22A2D6060E34D490187

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/UKEUSF+ArialMT~28 findfont /Encoding get

dup 0 /.notdef put

pop

end

/UKEUSF+ArialMT~28 findfont /Encoding get

dup 0 /.notdef put

dup 97 /a put

dup 109 /m put

pop

%%EndResource

[/N15/UKEUSF+ArialMT~28 -1 TZ

%%BeginResource: font ZCXVXN+ArialMT~25

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /ZCXVXN+ArialMT~25 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69AE06434ED40772B6ED119BDFC5AB0F936AB651C8D4814E518C158C

7718948C0ABBBA27C52DC58DC45A8973C9D632CD4EE579DEFF0C423553562E82

3403D332EA07F8778AE77033ABB687FB865B70DEC32AFE39DCC06FABC17D9F43

D753287663EBA22D0DAC42A026E48F70E11DE02158E802FD7C03B8B9C6857C8A

1303E6C9967D0EF4B0314CF24F523A8613CDF2FD64C9B184667B1B3875DFFFEE

EC92480310DC697A16D5213FA2BC675D76882B0E99F3558B48AF0555B5BC5E42

08A62047312393248CE0DDA42A7D909EE72024D667B07BF05228DA08931AA36B

C3F0CA2C04401ED41D4F303251A65F174785D613878BD5B21E78EF3D8251366E

8D6451F4F0642D015A327B08DEB0D437AB9E8D779E1F370DBA5F713090C4DCCF

2AB7BEE450463F5DA2AF0AACAD2043F404EB970E9E664D61A6D488C615EE95F8

8EECF31C773E465FBB0D4664D3A5ED7B301A8F71C04F973AAC25F779B2759A5D

EEF87A7B341F5E839E65A9B9649FE77663BC1C7CF630A27C4FB14D42C15CE1C5

AD1AEA2332136D745768F95BFED8AF6FB40C4CF2208FA3975360510F90A993A3

62696388803B0CD8FC5C05961CA8138C6A833CD3F5052D3B1F8A99CEEA41D869

D7F96C5CCB9E44CDA3634D26E3B344F1A360810FD4DD3E26214E14CAE4AF2CDF

B52D721394BA2F6CBA09B5A83DC682A7582FFE2AFEC0411FB3BEDDE2393F96EA

717D12FCD7B0418DEDDFE8AD772D723986A2D441804FE584BEF0FDBCC6CCC0B7

73C003A248714158C821F3A68D84742546DF0E898FFDF8C2FADEDC10AA3FD3E7

0CA76EB7EB516D0CE4DF7CC748686723BA2A93D24405B4BC46809C722319FDCC

86E267D47526082EE1FA6F2655E1A1D73038518FC88DC26D97496EBF28C7C4A3

9924B65AB7E2597B7D87E02006FB9C16355E672F49AA82003EA63ABF2A4119E1

EF7F2BD6092D85DDEB66DFA985EA5681F41D94451E6BA8DDAF86FB58F6D31936

8CE8A1555345631B843C298CEF712B2CF2C9FECC5CBD3C4DA21A18B64204042A

89025302C560AEB8B86FFB921C48F61AACD908A82053A9393508BFB1D2380282

74CB0CFCB0D05A228B155AA7C5E32F81197D3D9AED2352B76A4C18297D1DFBFF

C8D2CBDABBD14ED268E39499CB546469ADB9FCB86C3B243B96317E42C7D6110A

D960FCC279C401E7C882D15AD9D6DF451FB17061E0A5A715EC682FDE6B655ACB

2A0617DEFCC4A8C666313ADB0D0EFE48807C5316135E0E073392E36E98281F94

7A1B40CD4BAE404E52BBF7C0D29E5DB983B8342EEFCB1713D2F06C50E2042A21

DFEC8FC5D0EF1F2C43A22E80B81B6965A679A050461F0DEFCA41702F42F823F3

FCEEEA125259A4B861723458811FD12703E55174DFB1E00AE6AB9E6962098D47

ADA41ABE730CB5F014522D7AE9CE8483B1134C6C735DAC1528FE1F7FE1A5241B

56489DF0B20F281006429AF012560157B91EA8F657C17D9F0886FAD0225254

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/ZCXVXN+ArialMT~25 findfont /Encoding get

dup 0 /.notdef put

pop

end

/ZCXVXN+ArialMT~25 findfont /Encoding get

dup 0 /.notdef put

dup 101 /e put

dup 105 /i put

dup 108 /l put

dup 112 /p put

dup 114 /r put

dup 115 /s put

dup 116 /t put

pop

%%EndResource

[/N10/ZCXVXN+ArialMT~25 -1 TZ

%%BeginResource: font JZYFAL+ArialMT

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /JZYFAL+ArialMT def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A18BEBA8D67DD8AD36B7F2459BDD5018192B26B1196D9822275B7E

7116DA2B71C1A0BD3FF9F3FCBFA20466CF1F99EF43F07D8EEBE6D20CD1F74810

527EF849CA7D3A47A075C579CABC23DFA76068EB6C25454ED15E53C2441C7231

1EF68C9867B0ACDDBFA3E2DD56A038DD3C8AE91DB0346212B7222BA5DA1FB9C8

FF5798B34471E9A6032BEA5FAED9106462D5864132BEC9E58895050FFF88FA46

C6A0DCE4F54F27C00FADD7FB86F5A0BAB252841FE8860F278CF57A56C83AE01E

682DE23E2530839CBCD0AE1726D33386D1676CB0077AC9A14F7BB546D1415AFF

5A47F9BDB61F4BA3D9E41F64C6FF2F38A048290DDABEA363458B780F0131F662

A4138AED0DAF7350358C98B600EE7209D28A6D9CEB550D01647EF6DEB82F150D

B27D7E9E80721EA69A8DB573A3CFAE4BE135A0D6EFE01D2102525BFE4FFE835E

7C1AAE631CB155E9023050408D7C50FDE32B5BDF51D7B336045F8E98BF5AC5E4

3EEC3903963418DED2780B0B73AB743BB148EBCB1EE6FA5DD63E400E2B6D648F

4BC175BE360B324868807600753727F50A25D6D15738BA7064658973F10DB372

49ABDEE0FC2B3827952F46306843D68D5E5DE8FC4A57242D756D06CFE1DF22A3

B706249CB0BCF18CEF4A17464FCA0AFBFCEB0052E655E42B7FAC1B11838730C3

627D4EA20259513732468D99F027FC9AE569D7AEFE18DD3DD92A7CA229E481CB

E759125FE87D308DDFC34BCB3490819DB2788DDD5BF20672F2EF0AB044D85C0D

E8A2FF135B2854E3635DA5E212DE2EEE9242E9FBFE9604A85C8477C390A2C275

A83CE1A180F6125CCEB7763CBF72603D5CC24D6A31B6FDF9C2B31D3A2CF755F9

A6BF5A5C8FA28FCE19ABD07D27BD7ADB476B90CB79FA00D1F53702D92ED17DD5

69D2D4808DAC05CF1433983058C7152F1441D77F7AFE2D7FFD9B914BDC7690C0

DFBD0D38C052FACD4969E9DB47AA717DD78E1AA110A028240880F601E8CAA9E5

600E1DE6FBBD26752370E97EFB67FFE04BE8B3E4CAC83B78857472F51EA3E7A4

80B7FC4687057F713EAB1B4C536ED0C0918D5ED4F0FCB11F8F505F9799915D7C

81F2EE0130722D8FCB7E0B8A7EF94542471475705635635C75A05C2C73848264

1D72DEBDEA70C283547071074BA3CBDC3056CF0F9916464EA359F51ED8F7B951

F1A661B6EB3D0434E765DA44EEA2ED67DB4287AA4368A96F214ED2CA94AC9815

82E9DB02DBFD3C307269B158521E7F3389C26FE1D70401B6BA3683CCEF780F16

E841456F69B6D777E81BDF100F709489C21B1BCD54CB6E8CB19F5BB0B4832B64

9D993C9331904BB09C2FE1D8CDC0A4D9D2E41140E959CB5B848871A4818AB81C

8FD2A5CF8EA076D9566AB4150E5E2C033238F78F78D22A4133C7093FC96DD57E

C11B959538125BC06023CD18A46DE510E9994BFE48336968C298C2BDA2923913

3BF7E5CA9F5F7E8ACC5324CE8261FCFCCBD5917E6FA417441192A485895C45C5

843A9E984EAE0B2CF70BB797602876B5F8ECBA62344F154A0472D8B5D7F57377

EE95779533CBA56671A81E40E637993B85A22DC9633EBF6AD4480C985675FA95

C95E8C917CB4494E4980E19B7E802F34B355FEBBB2AE46BA2CAE712873D78264

23DC6EDC5AE5760D330A788E094EAB06B957B52A339236BB0230CBCAED587FEA

90D0204AEE120070CA8B8EB56A14DEE9B9B6FF01F6DB6222086C76337883DB76

3A811FE7EAE5EEB76A6ABDBD510E7215B0D18E6D78B21EA59BDA7CB53199B8A4



0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/JZYFAL+ArialMT findfont /Encoding get

dup 0 /.notdef put

pop

end

/JZYFAL+ArialMT findfont /Encoding get

dup 0 /.notdef put

dup 97 /a put

dup 101 /e put

dup 109 /m put

dup 114 /r put

dup 115 /s put

dup 116 /t put

pop

%%EndResource

[/N9/JZYFAL+ArialMT -1 TZ

320.09 648.165 221.46 55.9951 re

W

n

q

0.100006 0 0 0.100006 0 0 cm

n

798 7298.59 m

798 6475.2 l

1129 6475.2 l

1129 7298.59 l

W

n

2.10831 w

4 M

9.9994 0 0 9.9994 0 0 cm

0.100006 0 0 0.100006 0 0 cm

6.3248 w

2.10831 w

9.9994 0 0 9.9994 0 0 cm

0.100006 0 0 0.100006 0 0 cm

9.9994 0 0 9.9994 0 0 cm

0.100006 0 0 0.100006 0 0 cm

6.3248 w

2.10831 w

9.9994 0 0 9.9994 0 0 cm

Q

q

0.100006 0 0 0.100006 0 0 cm

n

1207.2 7325.09 m

1207.2 6450 l

2142.67 6450 l

2142.67 7325.09 l

W

n

9.9994 0 0 9.9994 0 0 cm

0.100006 0 0 0.100006 0 0 cm

2.1273 w

4 M

6.38181 w

9.9994 0 0 9.9994 0 0 cm

0.100006 0 0 0.100006 0 0 cm

2.1273 w

6.38181 w

9.9994 0 0 9.9994 0 0 cm

0.100006 0 0 0.100006 0 0 cm

2.1273 w

6.38181 w

9.9994 0 0 9.9994 0 0 cm

0.100006 0 0 0.100006 0 0 cm

2.1273 w

Q

q

0.100006 0 0 0.100006 0 0 cm

n

2220 7201.65 m

2220 6572.4 l

2952.64 6572.4 l

2952.64 7201.65 l

W

n

2.09711 w

4 M

9.9994 0 0 9.9994 0 0 cm

0.100006 0 0 0.100006 0 0 cm

6.2914 w

2.09711 w

9.9994 0 0 9.9994 0 0 cm

0.100006 0 0 0.100006 0 0 cm

9.9994 0 0 9.9994 0 0 cm

0.100006 0 0 0.100006 0 0 cm

9.9994 0 0 9.9994 0 0 cm

0.100006 0 0 0.100006 0 0 cm

6.2914 w

Q

q

0.100006 0 0 0.100006 0 0 cm

n

3240 7006.14 m

3240 6397.2 l

4908.56 6397.2 l

4908.56 7006.14 l

W

n

9.9994 0 0 9.9994 0 0 cm

0 setgray

324.02 692.271 m

/N35 8.38589 Tf

(float -> float pipeline Main\(\) {) show

324.02 682.313 m

(  add Source\(\);  // code for Source not shown) show

324.02 672.355 m

(  add ) show

345.001 672.355 m

/N52 8.38589 Tf

(FIR\(\);)

[5.12372 2.33128 6.05449 2.79244 2.79244 2.33128 ] pdfxs

324.02 662.397 m

/N35 8.38589 Tf

(  add Output\(\);  // code for Output not shown) show

324.02 652.438 m

(}) show

Q

q

0.100006 0 0 0.100006 0 0 cm

n

5068.8 7018.95 m

5068.8 6516 l

5399.8 6516 l

5399.8 7018.95 l

W

n

2.10831 w

4 M

n

5398.75 6918.8 m

5398.75 6904.83 5392.48 6893.5 5384.75 6893.5 c

5083.85 6893.5 l

5076.12 6893.5 5069.85 6904.83 5069.85 6918.8 c

5069.85 6992.59 l

5069.85 7006.57 5076.12 7017.89 5083.85 7017.89 c

5384.75 7017.89 l

5392.48 7017.89 5398.75 7006.57 5398.75 6992.59 c

5398.75 6918.8 l

h

0 setgray

S

9.9994 0 0 9.9994 0 0 cm

512.504 693.612 m

/N51 6.98335 Tf

(Source) show

0.100006 0 0 0.100006 0 0 cm

n

5234.3 6894.91 m

5234.3 6848.53 l

f

n

5234.3 6842.16 m

5233.19 6845.16 5231.29 6848.87 5229.29 6851.17 c

5234.3 6849.36 l

5239.31 6851.17 l

5237.31 6848.87 5235.41 6845.16 5234.3 6842.16 c

f

6.3248 w

n

5234.3 6894.91 m

5234.3 6848.53 l

S

n

5234.3 6829.44 m

5230.97 6838.42 5225.28 6849.56 5219.26 6856.47 c

5234.3 6851.03 l

5249.34 6856.47 l

5243.32 6849.56 5237.63 6838.42 5234.3 6829.44 c

f

n

5234.3 6703.06 m

5234.3 6656.67 l

f

n

5234.3 6650.31 m

5233.19 6653.3 5231.29 6657.02 5229.29 6659.32 c

5234.3 6657.51 l

5239.31 6659.32 l

5237.31 6657.02 5235.41 6653.3 5234.3 6650.31 c

f

n

5234.3 6703.06 m

5234.3 6656.67 l

S

n

5234.3 6637.59 m

5230.97 6646.57 5225.28 6657.71 5219.26 6664.61 c

5234.3 6659.18 l

5249.34 6664.61 l

5243.32 6657.71 5237.63 6646.57 5234.3 6637.59 c

f

2.10831 w

n

5398.75 6728.25 m

5398.75 6714.28 5392.48 6702.95 5384.75 6702.95 c

5083.85 6702.95 l

5076.12 6702.95 5069.85 6714.28 5069.85 6728.25 c

5069.85 6802.04 l

5069.85 6816.01 5076.12 6827.34 5083.85 6827.34 c

5384.75 6827.34 l

5392.48 6827.34 5398.75 6816.01 5398.75 6802.04 c

5398.75 6728.25 l

h

S

9.9994 0 0 9.9994 0 0 cm

519.106 674.645 m

/N52 6.98335 Tf

(FIR)

[4.26677 1.94137 5.04187 ] pdfxs

0.100006 0 0 0.100006 0 0 cm

n

5398.75 6542.35 m

5398.75 6528.38 5392.48 6517.05 5384.75 6517.05 c

5083.85 6517.05 l

5076.12 6517.05 5069.85 6528.38 5069.85 6542.35 c

5069.85 6616.14 l

5069.85 6630.12 5076.12 6641.44 5083.85 6641.44 c

5384.75 6641.44 l

5392.48 6641.44 5398.75 6630.12 5398.75 6616.14 c

5398.75 6542.35 l

h

S

9.9994 0 0 9.9994 0 0 cm

513.085 655.678 m

/N48 6.98335 Tf

(O) show

518.517 655.678 m

/N51 6.98335 Tf

(u) show

522.401 655.678 m

/N48 6.98335 Tf

(tp) show

528.225 655.678 m

/N51 6.98335 Tf

(u) show

532.109 655.678 m

/N48 6.98335 Tf

(t) show

Q

q

468.149 0 0 -0.479996 71.9924 592.944 cm

Q

PDFVars/TermAll get exec end end

%%PageTrailer

%%EndPage

%%Trailer

%%DocumentNeededResources:

%%+ font Times-Roman

%%+ font Courier

%%+ font Times-Bold

%%+ font Times-Bold

%%+ font Times-Roman

%%+ font ArialMT

%%+ font TimesNewRomanPSMT

%%+ font Times-Italic

%%EOF


%%EndDocument
 @endspecial 3027 468 V 869 471 2162 4 v 984 647 a Fs(Figure)33
b(2-3:)42 b(Example)34 b(pip)s(eline)g(with)f(FIR)f(\014lter.)296
1065 y(The)27 b Fo(splitjoin)f Fs(construct)h(distributes)h(data)e(to)f
(a)h(set)h(of)f(parallel)g(streams,)j(whic)m(h)e(are)f(then)150
1245 y(joined)32 b(together)g(in)f(a)g(roundrobin)h(fashion.)44
b(In)31 b(a)h(splitjoin,)g(the)g Fo(splitter)g Fs(p)s(erforms)f(the)h
(data)150 1426 y(scattering,)27 b(and)e(the)g Fo(joiner)f
Fs(p)s(erforms)i(the)f(gathering.)41 b(A)25 b(splitter)g(is)h(a)e(sp)s
(ecialized)j(\014lter)e(with)150 1606 y(a)e(single)h(input)g(and)f(m)m
(ultiple)i(output)e(c)m(hannels.)42 b(On)23 b(ev)m(ery)i(execution)g
(step,)h(it)d(can)h(distribute)150 1787 y(its)29 b(output)g(to)g(an)m
(y)g(one)g(of)g(its)g(c)m(hildren)h(in)f(either)h(a)e
Fo(duplic)-5 b(ate)29 b Fs(or)f(a)h Fo(r)-5 b(oundr)g(obin)28
b Fs(manner.)43 b(F)-8 b(or)150 1968 y(the)24 b(former,)i(incoming)f
(data)f(are)g(replicated)h(to)f(ev)m(ery)h(sibling)g(connected)h(to)e
(the)g(splitter.)42 b(F)-8 b(or)150 2148 y(the)31 b(latter,)f(data)g
(are)g(scattered)i(in)e(a)g(roundrobin)h(manner,)g(with)g(eac)m(h)g
(item)g(sen)m(t)h(to)e(exactly)150 2329 y(one)39 b(c)m(hild)i(stream,)g
(in)f(order.)63 b(The)40 b(splitter)g(t)m(yp)s(e)g(and)f(the)h(w)m
(eigh)m(ts)h(for)d(distributing)i(data)150 2509 y(to)32
b(c)m(hild)h(streams)h(are)e(declared)h(as)g(part)f(of)g(the)g(syn)m
(tax)i(\(e.g.,)f Fn(split)52 b(duplicate)35 b Fs(or)d
Fn(split)150 2690 y(roundrobin\()p Fm(w)781 2705 y Fl(1)823
2690 y Fm(;)17 b(:)g(:)g(:)f(;)h(w)1112 2705 y Fk(n)1158
2690 y Fn(\))p Fs(\).)55 b(The)37 b(splitter)g(coun)m(terpart)g(is)g
(the)g(joiner.)54 b(It)36 b(is)h(a)f(sp)s(ecialized)150
2870 y(\014lter)g(with)g(m)m(ultiple)h(input)f(c)m(hannels)i(but)d
(only)h(one)g(output)g(c)m(hannel.)53 b(The)37 b(joiner)f(gathers)150
3051 y(data)g(from)h(its)g(predecessors)j(in)d(a)g(roundrobin)g(manner)
g(\(declared)h(as)f(part)g(of)f(the)h(syn)m(tax\))150
3232 y(to)32 b(pro)s(duce)h(a)g(single)g(output)g(stream.)296
3425 y(StreamIt)23 b(also)f(pro)m(vides)i(a)e Fo(fe)-5
b(e)g(db)g(ack)24 b(lo)-5 b(op)22 b Fs(construct)h(for)f(in)m(tro)s
(ducing)h(cycles)h(in)e(the)h(graph.)150 3866 y Fr(2.1.2)136
b(Execution)46 b(Mo)t(del)150 4136 y Fs(As)27 b(noted)g(earlier,)i(an)d
(actor)g(\(i.e.,)j(a)d(\014lter,)j(splitter,)f(or)f(joiner\))f
(executes)j(whenev)m(er)h(there)d(are)150 4317 y(enough)d(data)f(items)
h(on)f(its)h(input)g(tap)s(e.)40 b(In)23 b(StreamIt,)j(actors)e(ha)m(v)
m(e)g(t)m(w)m(o)g(ep)s(o)s(c)m(hs)g(of)f(execution:)150
4497 y(one)28 b(for)g(initialization,)i(and)e(one)g(for)g(the)h
Fo(ste)-5 b(ady)30 b(state)p Fs(.)43 b(The)29 b(initialization)f
(primes)i(the)e(input)150 4678 y(tap)s(es)g(to)f(allo)m(w)h(\014lters)h
(with)f(p)s(eeking)g(\(i.e.)43 b Fm(peek)31 b(r)s(ate)c(>)h(pop)f(r)s
(ate)p Fs(\))h(to)f(execute)i(the)f(v)m(ery)h(\014rst)150
4858 y(instance)i(of)e(their)i(w)m(ork)f(functions.)44
b(A)30 b(steady)h(state)f(is)g(an)g(execution)i(that)d(do)s(es)h(not)g
(c)m(hange)150 5039 y(the)c(bu\013ering)g(in)f(the)h(c)m(hannels:)42
b(the)26 b(n)m(um)m(b)s(er)h(of)d(items)j(on)e(eac)m(h)i(c)m(hannel)f
(after)f(the)h(execution)150 5219 y(is)39 b(the)h(same)f(as)h(it)e(w)m
(as)i(b)s(efore)f(the)h(execution.)64 b(Ev)m(ery)40 b(v)-5
b(alid)40 b(stream)f(graph)g(has)g(a)g(steady)150 5400
y(state)26 b([18)o(],)h(and)f(within)g(a)f(steady)i(state,)g(there)f
(are)f(often)h(man)m(y)g(p)s(ossibilities)h(for)e(in)m(terlea)m(ving)
1901 5649 y(19)p eop
%%Page: 20 20
20 19 bop 930 293 a @beginspecial 80 @llx 711 @lly 268
@urx 738 @ury 2448 @rwi @setspecial
%%BeginDocument: pipe-with-rates.eps
%!PS-Adobe-3.0 EPSF-3.0

%%Title: (pipe-with-rates.pdf)

%%Version: 1 4

%%CreationDate: (D:20050129103609-05'00')

%%DocumentData: Clean7Bit

%%BoundingBox: 80 711 268 738

%%Pages: 0

%%DocumentProcessColors: Black

%%DocumentNeededResources: (atend)

%%DocumentSuppliedResources: (atend)

%%EndComments

80 711 moveto 268 711 lineto 268 738 lineto 80 738 lineto closepath clip newpath

%%BeginProlog

%%EndProlog

%%BeginSetup

%%BeginResource: file Pscript_CFF PSVER

userdict/ct_CffDict 6 dict put ct_CffDict begin/F0Subr{systemdict/internaldict

known{1183615869 systemdict/internaldict get exec/FlxProc known{save true}{

false}ifelse}{userdict/internaldict known not{userdict/internaldict{count 0 eq

{/internaldict errordict/invalidaccess get exec}if dup type/integertype ne{

/internaldict errordict/invalidaccess get exec}if dup 1183615869 eq{pop 0}{

/internaldict errordict/invalidaccess get exec}ifelse}dup 14 get 1 25 dict put

bind executeonly put}if 1183615869 userdict/internaldict get exec/FlxProc

known{save true}{false}ifelse}ifelse[systemdict/internaldict known not{100

dict/begin cvx/mtx matrix/def cvx}if systemdict/currentpacking known{

currentpacking true setpacking}if{systemdict/internaldict known{1183615869

systemdict/internaldict get exec dup/$FlxDict known not{dup dup length exch

maxlength eq{pop userdict dup/$FlxDict known not{100 dict begin/mtx matrix def

dup/$FlxDict currentdict put end}if}{100 dict begin/mtx matrix def dup

/$FlxDict currentdict put end}ifelse}if/$FlxDict get begin}if grestore/exdef{

exch def}def/dmin exch abs 100 div def/epX exdef/epY exdef/c4y2 exdef/c4x2

exdef/c4y1 exdef/c4x1 exdef/c4y0 exdef/c4x0 exdef/c3y2 exdef/c3x2 exdef/c3y1

exdef/c3x1 exdef/c3y0 exdef/c3x0 exdef/c1y2 exdef/c1x2 exdef/c2x2 c4x2 def

/c2y2 c4y2 def/yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def/PickCoords{{

c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2}{c3x0 c3y0 c3x1

c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2}ifelse/y5 exdef/x5 exdef/y4 exdef

/x4 exdef/y3 exdef/x3 exdef/y2 exdef/x2 exdef/y1 exdef/x1 exdef/y0 exdef/x0

exdef}def mtx currentmatrix pop mtx 0 get abs 1e-05 lt mtx 3 get abs 1e-05 lt

or{/flipXY -1 def}{mtx 1 get abs 1e-05 lt mtx 2 get abs 1e-05 lt or{/flipXY 1

def}{/flipXY 0 def}ifelse}ifelse/erosion 1 def systemdict/internaldict known{

1183615869 systemdict/internaldict get exec dup/erosion known{/erosion get

/erosion exch def}{pop}ifelse}if yflag{flipXY 0 eq c3y2 c4y2 eq or{false

PickCoords}{/shrink c3y2 c4y2 eq{0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs}ifelse

def/yshrink{c4y2 sub shrink mul c4y2 add}def/c1y0 c3y0 yshrink def/c1y1 c3y1

yshrink def/c2y0 c4y0 yshrink def/c2y1 c4y1 yshrink def/c1x0 c3x0 def/c1x1

c3x1 def/c2x0 c4x0 def/c2x1 c4x1 def/dY 0 c3y2 c1y2 sub round dtransform

flipXY 1 eq{exch}if pop abs def dY dmin lt PickCoords y2 c1y2 sub abs .001 gt{

c1x2 c1y2 transform flipXY 1 eq{exch}if/cx exch def/cy exch def/dY 0 y2 c1y2

sub round dtransform flipXY 1 eq{exch}if pop def dY round dup 0 ne{/dY exdef}{

pop dY 0 lt{-1}{1}ifelse/dY exdef}ifelse/erode PaintType 2 ne erosion .5 ge

and def erode{/cy cy .5 sub def}if/ey cy dY add def/ey ey ceiling ey sub ey

floor add def erode{/ey ey .5 add def}if ey cx flipXY 1 eq{exch}if itransform

exch pop y2 sub/eShift exch def/y1 y1 eShift add def/y2 y2 eShift add def/y3

y3 eShift add def}if}ifelse}{flipXY 0 eq c3x2 c4x2 eq or{false PickCoords}{

/shrink c3x2 c4x2 eq{0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs}ifelse def/xshrink

{c4x2 sub shrink mul c4x2 add}def/c1x0 c3x0 xshrink def/c1x1 c3x1 xshrink def

/c2x0 c4x0 xshrink def/c2x1 c4x1 xshrink def/c1y0 c3y0 def/c1y1 c3y1 def/c2y0

c4y0 def/c2y1 c4y1 def/dX c3x2 c1x2 sub round 0 dtransform flipXY -1 eq{exch}

if pop abs def dX dmin lt PickCoords x2 c1x2 sub abs .001 gt{c1x2 c1y2

transform flipXY -1 eq{exch}if/cy exch def/cx exch def/dX x2 c1x2 sub round 0

dtransform flipXY -1 eq{exch}if pop def dX round dup 0 ne{/dX exdef}{pop dX 0

lt{-1}{1}ifelse/dX exdef}ifelse/erode PaintType 2 ne erosion .5 ge and def

erode{/cx cx .5 sub def}if/ex cx dX add def/ex ex ceiling ex sub ex floor add

def erode{/ex ex .5 add def}if ex cy flipXY -1 eq{exch}if itransform pop x2

sub/eShift exch def/x1 x1 eShift add def/x2 x2 eShift add def/x3 x3 eShift add

def}if}ifelse}ifelse x2 x5 eq y2 y5 eq or{x5 y5 lineto}{x0 y0 x1 y1 x2 y2

curveto x3 y3 x4 y4 x5 y5 curveto}ifelse epY epX}systemdict/currentpacking

known{exch setpacking}if/exec cvx/end cvx]cvx executeonly exch{pop true exch

restore}{systemdict/internaldict known not{1183615869 userdict/internaldict

get exec exch/FlxProc exch put true}{1183615869 systemdict/internaldict get

exec dup length exch maxlength eq{false}{1183615869 systemdict/internaldict

get exec exch/FlxProc exch put true}ifelse}ifelse}ifelse{systemdict

/internaldict known{1183615869 systemdict/internaldict get exec/FlxProc get

exec}{1183615869 userdict/internaldict get exec/FlxProc get exec}ifelse}if}

executeonly def/F1Subr{gsave currentpoint newpath moveto}bind def/F2Subr{

currentpoint grestore gsave currentpoint newpath moveto}bind def/HSSubr{

systemdict/internaldict known not{pop 3}{1183615869 systemdict/internaldict

get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck

get exec}{pop 3}ifelse}ifelse}ifelse}bind def end

%%EndResource

/currentpacking where{pop currentpacking true setpacking}if

%%BeginResource: procset pdfvars

%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.

%%Version: 5.0 6

%%Title: definition of dictionary of variables used by PDF & PDFText procsets

userdict /PDF 160 dict put

userdict /PDFVars 89 dict dup begin put

/docSetupDone false def

/InitAll 0 def

/TermAll 0 def

/DocInitAll 0 def

/DocTermAll 0 def

/_pdfEncodings 2 array def

/_pdf_str1 1 string def

/_pdf_i 0 def

/_pdf_na 0 def

/_pdf_showproc 0 def

/_italMtx [1 0 .212557 1 0 0] def

/_italMtx_WMode1 [1 -.212557 0 1 0 0] def

/_italMtxType0 [1 0 .1062785 1 0 0] def

/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def

/_basefont 0 def

/_basefonto 0 def

/_pdf_oldCIDInit null def

/_pdf_FontDirectory 30 dict def

/_categories 10 dict def

/_sa? true def

/_ColorSep5044? false def

/nulldict 0 dict def

/_processColors 0 def

/overprintstack null def

/_defaulttransfer currenttransfer def

/_defaultflatness currentflat def

/_defaulthalftone null def

/_defaultcolortransfer null def

/_defaultblackgeneration null def

/_defaultundercolorremoval null def

/_defaultcolortransfer null def

PDF begin

[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W

/applyInterpFunc/applystitchFunc/domainClip/encodeInput

/initgs/int/limit/rangeClip

/defineRes/findRes/setSA/pl

%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver

/? /! /| /: /+ /GetGlyphDirectory

/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage

/pdf_shfill /pdf_sethalftone

] {null def} bind forall

end

end

%%EndResource

PDFVars begin PDF begin

%%BeginResource: procset pdfutil

%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.

%%Version: 4.0 2

%%Title: Basic utilities used by other PDF procsets

/bd {bind def} bind def

/ld {load def} bd

/bld {

dup length dict begin

{ null def } forall

bind

end

def

} bd

/dd { PDFVars 3 1 roll put } bd

/xdd { exch dd } bd

/Level2?

systemdict /languagelevel known

{ systemdict /languagelevel get 2 ge } { false } ifelse

def

/Level1? Level2? not def

/Level3?

systemdict /languagelevel known

{systemdict /languagelevel get 3 eq } { false } ifelse

def

/getifknown {

2 copy known { get true } { pop pop false } ifelse

} bd

/here {

currentdict exch getifknown

} bd

/isdefined? { where { pop true } { false } ifelse } bd

%%EndResource

%%BeginResource: l2compat

%%Version: 5.0 10

%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.

%%LanguageLevel: 1

%%Title: Level 1 emulation of level 2 operators

/setcmykcolor isdefined? not

{

/setcmykcolor {

1 sub 4 1 roll

3 {

3 index add neg dup 0 lt { pop 0 } if

3 1 roll

} repeat

setrgbcolor

pop

} bd

} if

/rectclip isdefined? not

{

/rectclip { newpath re clip newpath } bd

} if

/rectfill isdefined? not

{

/rectfill { gsave newpath re fill grestore } bd

} if

/sethalftone isdefined? not

{

/sethalftone {

begin

HalftoneType 1 eq

{ Frequency Angle /SpotFunction load setscreen }

if

end

} bd

} if

Level1?

{

/pdf_show {show} bd

/xshow

{

PDFVars /_pdf_showproc /pdf_show load put

pdf_xshow

} bd

/yshow

{

PDFVars /_pdf_showproc /pdf_show load put

pdf_yshow

} bd

/xyshow

{

PDFVars /_pdf_showproc /pdf_show load put

pdf_xyshow

} bd

} if

/getrampcolor {

/indx exch def

[

0 1 NumComp 1 sub {

dup

Samples exch get

dup type /stringtype eq { indx get } if

exch

Scaling exch get aload pop

3 1 roll

mul add

} for

]

L1setcolor

} bd

/sssetbackground { L1setcolor } bd

%%EndResource

%%BeginResource: procset pdf

%%Version: 5.0 7

%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.

%%Title: General operators for PDF, common to all Language Levels.

/cm { matrix astore concat } bd

/d /setdash ld

/f /fill ld

/h /closepath ld

/i {dup 0 eq {pop _defaultflatness} if setflat} bd

/j /setlinejoin ld

/J /setlinecap ld

/M /setmiterlimit ld

/n /newpath ld

/S /stroke ld

/w /setlinewidth ld

/W /clip ld

/initgs {

0 setgray

[] 0 d

0 j

0 J

10 M

1 w

false setSA

/_defaulttransfer load settransfer

0 i

/RelativeColorimetric ri

newpath

} bd

/int {

dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul

exch pop add exch pop

} bd

/limit {

dup 2 index le { exch } if pop

dup 2 index ge { exch } if pop

} bd

/domainClip {

Domain aload pop 3 2 roll

limit

} [/Domain] bld

/applyInterpFunc {

0 1 DimOut 1 sub

{

dup C0 exch get exch

dup C1 exch get exch

3 1 roll

1 index sub

3 index

N exp mul add

exch

currentdict /Range_lo known

{

dup Range_lo exch get exch

Range_hi exch get

3 2 roll limit

}

{

pop

}

ifelse

exch

} for

pop

} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld

/encodeInput {

NumParts 1 sub

0 1 2 index

{

dup Bounds exch get

2 index gt

{ exit }

{ dup

3 index eq

{ exit }

{ pop } ifelse

} ifelse

} for

3 2 roll pop

dup Bounds exch get exch

dup 1 add Bounds exch get exch

2 mul

dup Encode exch get exch

1 add Encode exch get

int

} [/NumParts /Bounds /Encode] bld

/rangeClip {

exch dup Range_lo exch get

exch Range_hi exch get

3 2 roll

limit

} [/Range_lo /Range_hi] bld

/applyStitchFunc {

Functions exch get exec

currentdict /Range_lo known {

0 1 DimOut 1 sub {

DimOut 1 add -1 roll

rangeClip

} for

} if

} [/Functions /Range_lo /DimOut] bld

/pdf_flushfilters

{

aload length

{ dup status

1 index currentfile ne and

{ dup flushfile closefile }

{ pop }

ifelse

} repeat

} bd

/pdf_readstring

{

1 index dup length 1 sub get

exch readstring pop

exch pdf_flushfilters

} bind def

/pdf_dictOp

{

3 2 roll

10 dict copy

begin

_Filters dup length 1 sub get def

currentdict exch exec

_Filters pdf_flushfilters

end

} [/_Filters] bld

/pdf_image {{image} /DataSource pdf_dictOp} bd

/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd

/pdf_shfill {{sh} /DataSource pdf_dictOp} bd

/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd

/pdf_maskedImage

{

10 dict copy begin

/miDict currentdict def

/DataDict DataDict 10 dict copy def

DataDict begin

/DataSource

_Filters dup length 1 sub get

def

miDict image

_Filters pdf_flushfilters

end

end

} [/miDict /DataDict /_Filters] bld

/RadialShade {

40 dict begin

/background exch def

/ext1 exch def

/ext0 exch def

/BBox exch def

/r2 exch def

/c2y exch def

/c2x exch def

/r1 exch def

/c1y exch def

/c1x exch def

/rampdict exch def

gsave

BBox length 0 gt {

newpath

BBox 0 get BBox 1 get moveto

BBox 2 get BBox 0 get sub 0 rlineto

0 BBox 3 get BBox 1 get sub rlineto

BBox 2 get BBox 0 get sub neg 0 rlineto

closepath

clip

newpath

} if

c1x c2x eq

{

c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse

}

{

/slope c2y c1y sub c2x c1x sub div def

/theta slope 1 atan def

c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if

c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if

}

ifelse

gsave

clippath

c1x c1y translate

theta rotate

-90 rotate

{ pathbbox } stopped

{ 0 0 0 0 } if

/yMax exch def

/xMax exch def

/yMin exch def

/xMin exch def

grestore

xMax xMin eq yMax yMin eq or

{

grestore

end

}

{

rampdict begin

40 dict begin

background length 0 gt { background sssetbackground gsave clippath fill grestore } if

gsave

c1x c1y translate

theta rotate

-90 rotate

/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def

/c1y 0 def

/c1x 0 def

/c2x 0 def

ext0 {

0 getrampcolor

c2y r2 add r1 lt

{

c1x c1y r1 360 0 arcn

xMin yMin moveto

xMax yMin lineto

xMax yMax lineto

xMin yMax lineto

xMin yMin lineto

eofill

}

{

c2y r1 add r2 le

{

c1x c1y r1 0 360 arc

fill

}

{

c2x c2y r2 0 360 arc fill

r1 r2 eq

{

/p1x r1 neg def

/p1y c1y def

/p2x r1 def

/p2y c1y def

p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto

fill

}

{

/AA r2 r1 sub c2y div def

/theta AA 1 AA dup mul sub sqrt div 1 atan def

/SS1 90 theta add dup sin exch cos div def

/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def

/p1y p1x SS1 div neg def

/SS2 90 theta sub dup sin exch cos div def

/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def

/p2y p2x SS2 div neg def

r1 r2 gt

{

/L1maxX p1x yMin p1y sub SS1 div add def

/L2maxX p2x yMin p2y sub SS2 div add def

}

{

/L1maxX 0 def

/L2maxX 0 def

}ifelse

p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto

L1maxX L1maxX p1x sub SS1 mul p1y add lineto

fill

}

ifelse

}

ifelse

} ifelse

} if

c1x c2x sub dup mul

c1y c2y sub dup mul

add 0.5 exp

0 dtransform

dup mul exch dup mul add 0.5 exp 72 div

0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt

72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt

1 index 1 index lt { exch } if pop

/hires exch def

hires mul

/numpix exch def

/numsteps NumSamples def

/rampIndxInc 1 def

/subsampling false def

numpix 0 ne

{

NumSamples numpix div 0.5 gt

{

/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def

/rampIndxInc NumSamples 1 sub numsteps div def

/subsampling true def

} if

} if

/xInc c2x c1x sub numsteps div def

/yInc c2y c1y sub numsteps div def

/rInc r2 r1 sub numsteps div def

/cx c1x def

/cy c1y def

/radius r1 def

newpath

xInc 0 eq yInc 0 eq rInc 0 eq and and

{

0 getrampcolor

cx cy radius 0 360 arc

stroke

NumSamples 1 sub getrampcolor

cx cy radius 72 hires div add 0 360 arc

0 setlinewidth

stroke

}

{

0

numsteps

{

dup

subsampling { round cvi } if

getrampcolor

cx cy radius 0 360 arc

/cx cx xInc add def

/cy cy yInc add def

/radius radius rInc add def

cx cy radius 360 0 arcn

eofill

rampIndxInc add

}

repeat

pop

} ifelse

ext1 {

c2y r2 add r1 lt

{

c2x c2y r2 0 360 arc

fill

}

{

c2y r1 add r2 le

{

c2x c2y r2 360 0 arcn

xMin yMin moveto

xMax yMin lineto

xMax yMax lineto

xMin yMax lineto

xMin yMin lineto

eofill

}

{

c2x c2y r2 0 360 arc fill

r1 r2 eq

{

/p1x r2 neg def

/p1y c2y def

/p2x r2 def

/p2y c2y def

p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto

fill

}

{

/AA r2 r1 sub c2y div def

/theta AA 1 AA dup mul sub sqrt div 1 atan def

/SS1 90 theta add dup sin exch cos div def

/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def

/p1y c2y p1x SS1 div sub def

/SS2 90 theta sub dup sin exch cos div def

/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def

/p2y c2y p2x SS2 div sub def

r1 r2 lt

{

/L1maxX p1x yMax p1y sub SS1 div add def

/L2maxX p2x yMax p2y sub SS2 div add def

}

{

/L1maxX 0 def

/L2maxX 0 def

}ifelse

p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto

L1maxX L1maxX p1x sub SS1 mul p1y add lineto

fill

}

ifelse

}

ifelse

} ifelse

} if

grestore

grestore

end

end

end

} ifelse

} bd

/GenStrips {

40 dict begin

/background exch def

/ext1 exch def

/ext0 exch def

/BBox exch def

/y2 exch def

/x2 exch def

/y1 exch def

/x1 exch def

/rampdict exch def

gsave

BBox length 0 gt {

newpath

BBox 0 get BBox 1 get moveto

BBox 2 get BBox 0 get sub 0 rlineto

0 BBox 3 get BBox 1 get sub rlineto

BBox 2 get BBox 0 get sub neg 0 rlineto

closepath

clip

newpath

} if

x1 x2 eq

{

y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse

}

{

/slope y2 y1 sub x2 x1 sub div def

/theta slope 1 atan def

x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if

x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if

}

ifelse

gsave

clippath

x1 y1 translate

theta rotate

{ pathbbox } stopped

{ 0 0 0 0 } if

/yMax exch def

/xMax exch def

/yMin exch def

/xMin exch def

grestore

xMax xMin eq yMax yMin eq or

{

grestore

end

}

{

rampdict begin

20 dict begin

background length 0 gt { background sssetbackground gsave clippath fill grestore } if

gsave

x1 y1 translate

theta rotate

/xStart 0 def

/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def

/ySpan yMax yMin sub def

/numsteps NumSamples def

/rampIndxInc 1 def

/subsampling false def

xStart 0 transform

xEnd 0 transform

3 -1 roll

sub dup mul

3 1 roll

sub dup mul

add 0.5 exp 72 div

0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt

72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt

1 index 1 index lt { exch } if pop

mul

/numpix exch def

numpix 0 ne

{

NumSamples numpix div 0.5 gt

{

/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def

/rampIndxInc NumSamples 1 sub numsteps div def

/subsampling true def

} if

} if

ext0 {

0 getrampcolor

xMin xStart lt

{ xMin yMin xMin neg ySpan rectfill } if

} if

/xInc xEnd xStart sub numsteps div def

/x xStart def

0

numsteps

{

dup

subsampling { round cvi } if

getrampcolor

x yMin xInc ySpan rectfill

/x x xInc add def

rampIndxInc add

}

repeat

pop

ext1 {

xMax xEnd gt

{ xEnd yMin xMax xEnd sub ySpan rectfill } if

} if

grestore

grestore

end

end

end

} ifelse

} bd

%%EndResource

%%BeginResource: procset sep_ops

%%Version: 4.0 1

%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.

%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044

userdict /sep_ops 50 dict dup begin put

/bdef {bind def} bind def

/xdef {exch def} bdef

/colorimagebuffer {

0 1 2 index length 1 sub {

dup 2 index exch get 255 exch sub 2 index 3 1 roll put

} for

} bdef

/addprocs {

[ 3 1 roll

/exec load

dup 3 1 roll

] cvx

} bdef

/L1? {

systemdict /languagelevel known {

systemdict /languagelevel get 2 lt

}{

true

} ifelse

} bdef

/colorexists {

statusdict /processcolors known {

statusdict /processcolors get exec

}{

/deviceinfo where {

pop deviceinfo /Colors known {

deviceinfo /Colors get

statusdict /processcolors {

deviceinfo /Colors known {

deviceinfo /Colors get

}{

1

} ifelse

} put

}{

1

} ifelse

}{

1

} ifelse

} ifelse

1 gt

} bdef

/colorplate colorexists { 0 } { 5 } ifelse def

/negativecolorplate false def

/setcmykcolor where {

pop

gsave

1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub

0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub

0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub

0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub

4 {4 copy} repeat

grestore

1 dict begin

/foureq {

4 index eq 8 1 roll

4 index eq 8 1 roll

4 index eq 8 1 roll

4 index eq 8 1 roll

pop pop pop pop and and and

} def

1 0 0 0 foureq {/colorplate 1 store} if

0 1 0 0 foureq {/colorplate 2 store} if

0 0 1 0 foureq {/colorplate 3 store} if

0 0 0 1 foureq {/colorplate 4 store} if

0 0 0 0 foureq {/colorplate 6 store} if

end

} if

0 systemdict /currenttransfer get exec exec

1 systemdict /currenttransfer get exec exec

2 copy

eq

{

/colorplate 6 store

pop

/negativecolorplate exch 0.5 lt store

}

{

gt /negativecolorplate exch store

}

ifelse

/findcmykcustomcolor where { pop }

{

/findcmykcustomcolor {

[ 6 1 roll ] readonly

} bdef

} ifelse

/setoverprint where {

pop

}{

/setoverprint {

pop

} bdef

} ifelse

/currentoverprint where {

pop

}{

/currentoverprint {

false

} bdef

} ifelse

/setcustomcolor where {

pop

}{

L1? {

/setcustomcolor {

exch

aload pop pop

4 { 4 index mul 4 1 roll } repeat

5 -1 roll pop

setcmykcolor

} bdef

}{

/setcustomcolor {

exch

[ exch /Separation exch dup 4 get exch /DeviceCMYK exch

0 4 getinterval

[ exch /dup load exch cvx {mul exch dup}

/forall load /pop load dup] cvx

] setcolorspace setcolor

} bdef

} ifelse

} ifelse

/ik 0 def

/iy 0 def

/im 0 def

/ic 0 def

/imagetint {

ic .3 mul

im .59 mul

iy .11 mul

ik add add add dup

1 gt {pop 1} if

} bdef

/setcmykcolor where {

pop

}{

/setcmykcolor {

/ik xdef /iy xdef /im xdef /ic xdef

imagetint

1 exch sub setgray

} bdef

} ifelse

/customcolorimage where {

pop

}{

L1? {

/customcolorimage{

gsave

colorexists {

aload pop pop

/ik xdef /iy xdef /im xdef /ic xdef

currentcolortransfer

{ik mul ik sub 1 add} addprocs

4 1 roll {iy mul iy sub 1 add} addprocs

4 1 roll {im mul im sub 1 add} addprocs

4 1 roll {ic mul ic sub 1 add} addprocs

4 1 roll setcolortransfer

/magentabuf 0 string def

/yellowbuf 0 string def

/blackbuf 0 string def

{

colorimagebuffer dup length magentabuf length ne

{

dup length dup dup

/magentabuf exch string def

/yellowbuf exch string def

/blackbuf exch string def

} if

dup magentabuf copy yellowbuf copy

blackbuf copy pop

} addprocs

{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage

}{

aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint

imagetint def

currenttransfer

{tint mul 1 tint sub add} addprocs settransfer image

} ifelse

grestore

} bdef

}{

/customcolorimage {

gsave

[ exch /Separation exch dup 4 get exch /DeviceCMYK exch

0 4 getinterval

[ exch /dup load exch cvx {mul exch dup}

/forall load /pop load dup] cvx

] setcolorspace

10 dict begin

/ImageType 1 def

/DataSource exch def

/ImageMatrix exch def

/BitsPerComponent exch def

/Height exch def

/Width exch def

/Decode [1 0] def

currentdict end

image

grestore

} bdef

} ifelse

} ifelse

/setseparationgray where {

pop

}{

L1? {

/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef

}{

/setseparationgray {

[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace

1 exch sub setcolor

} bdef

} ifelse

} ifelse

/separationimage where { pop }

{

/separationimage {

gsave

1 1 1 1 (All)

findcmykcustomcolor customcolorimage

grestore

} bdef

} ifelse

currentdict readonly pop end

%%EndResource

%%BeginResource: procset pdflev15044

%%Version: 5.0 13

%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.

%%LanguageLevel: 1

%%Title: PDF operators, Level 1, with emulated separations (TN 5044)

/_ColorSep5044? true dd

/docinitialize {

PDF begin

/_defaulthalftone

/currenthalftone where

{ pop currenthalftone }

{ 4 dict dup begin

currentscreen

/SpotFunction exch def

/Angle exch def

/Frequency exch def

/HalftoneType 1 def

end }

ifelse

dd

/currentcolortransfer where

{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }

{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }

ifelse

end

} bd

/initialize {

/overprintstack null dd

sep_ops begin

50 dict begin

_defaulthalftone sethalftone

} bd

/terminate {

end end

} bd

/currentcolortransfer where

{ pop }

{

/setcolortransfer

{

settransfer pop pop pop

} bd

} ifelse

/pl {

transform

0.25 sub round 0.25 add exch

0.25 sub round 0.25 add exch

itransform

} bd

/m { _sa? { pl } if moveto } bd

/l { _sa? { pl } if lineto } bd

/c

{

_sa? {3 {pl 6 2 roll} repeat} if

curveto

} bd

/ri/pop ld

/setSA { /_sa? xdd } bd

/re

{

_sa?

{

8 dict begin

/:h exch def

/:w exch def

/:y exch def

/:x exch def

:x :y pl

/:ymin exch def /:xmin exch def

:x :w add :y :h add pl

/:ymax exch def /:xmax exch def

:xmin :ymin moveto

:xmax :ymin lineto

:xmax :ymax lineto

:xmin :ymax lineto

closepath

end

}

{

4 2 roll moveto

1 index 0 rlineto

0 exch rlineto

neg 0 rlineto

closepath

} ifelse

} bd

/q

{

gsave

[currentoverprint overprintstack] /overprintstack xdd

}

[/overprintstack] bld

/Q

{

overprintstack aload pop /overprintstack xdd setoverprint

grestore

}

[/overprintstack] bld

/AlmostFull?

{ dup maxlength exch length sub 2 le

} bd

/Expand

{ 1 index maxlength mul cvi dict

dup begin exch { def } forall end

} bd

/xput

{ 3 2 roll

dup 3 index known not

{ dup AlmostFull? { 1.5 Expand } if

} if

dup 4 2 roll put

} bd

/defineRes

{ _categories 1 index known not

{ /_categories _categories 2 index 10 dict xput store

} if

_categories exch 2 copy get 5 -1 roll 4 index xput put

} bd

/findRes {

_categories exch get exch get

} bd

/L1setcolor {

aload length

dup 0 eq

{ pop .5 setgray }

{ dup 1 eq

{ pop setgray }

{ 3 eq

{ setrgbcolor }

{ setcmykcolor }

ifelse }

ifelse }

ifelse

} bind dd

/concattransferfuncs {

[ 3 1 roll /exec load exch /exec load ] cvx

} bd

/concatandsettransfer {

/_defaulttransfer load concattransferfuncs settransfer

} bd

/concatandsetcolortransfer {

colorplate 0 eq

{

_defaultcolortransfer aload pop

8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll

6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll

4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll

concattransferfuncs

setcolortransfer

} if

colorplate 1 ge colorplate 4 le and

{

4 colorplate sub index 4 { exch pop } repeat

concatandsettransfer

} if

colorplate 5 ge

{

0 index 4 { exch pop } repeat

concatandsettransfer

} if

} bd

/tn5044sethalftone

{

begin

HalftoneType 5 eq

{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]

colorplate get

here not {

/Default here not { currentdict } if

} if

}

{ currentdict }

ifelse

end

begin

/TransferFunction here

{

concatandsettransfer

currentdict dup length dict

begin

{

1 index /TransferFunction ne { def } { pop pop } ifelse

} forall

currentdict

end

}

{

currentdict

} ifelse

end

sethalftone

} bd

/paintimage

{

colorplate 0 eq

{

{ {currentfile cyanstr readstring pop}

{currentfile magentastr readstring pop}

{currentfile yellowstr readstring pop}

{currentfile blackstr readstring pop

currentfile graystr readstring pop pop}

}

{ {currentfile cyanstr readhexstring pop}

{currentfile magentastr readhexstring pop}

{currentfile yellowstr readhexstring pop}

{currentfile blackstr readhexstring pop

currentfile graystr readhexstring pop pop}

} ifelse

true 4 colorimage

}

{

3 dict begin

/binaryOK exch def

[

1 1 5 {

dup

/currentfile cvx

[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]

3 -1 roll 1 sub get cvx

binaryOK { /readstring } { /readhexstring } ifelse cvx

/pop cvx

5 -1 roll

colorplate dup 5 gt { pop 5 } if

eq not { /pop cvx } if

} for

] cvx bind

end

[

colorplate 6 eq {

/pop cvx

negativecolorplate { 0 } { 1 } ifelse

} if

colorplate 4 le

{

1 /exch cvx /sub cvx

} if

colorplate 6 ne

{

systemdict /currenttransfer get exec

aload pop

} if

] cvx

gsave

systemdict /settransfer get exec

systemdict /image get exec

grestore

} ifelse

} bd

%%EndResource

%%BeginResource: procset pdftext

%%Version: 5.0 6

%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.

%%Title: Text operators for PDF

PDF /PDFText 78 dict dup begin put

/docinitialize

{

/resourcestatus where {

pop

/CIDParams /ProcSet resourcestatus {

pop pop

false /CIDParams /ProcSet findresource /SetBuildCompatible get exec

} if

} if

PDF begin

PDFText /_pdfDefineIdentity-H known

{ PDFText /_pdfDefineIdentity-H get exec}

if

end

} bd

/initialize {

PDFText begin

} bd

/terminate { end } bd

Level2?

{

/_safeput

{

3 -1 roll load 3 1 roll put

}

bd

}

{

/_safeput

{

2 index load dup dup length exch maxlength ge

{ dup length 5 add dict copy

3 index xdd

}

{ pop }

ifelse

3 -1 roll load 3 1 roll put

}

bd

}

ifelse

/pdf_has_composefont? systemdict /composefont known def

/CopyFont {

{

1 index /FID ne 2 index /UniqueID ne and

{ def } { pop pop } ifelse

} forall

} bd

/Type0CopyFont

{

exch

dup length dict

begin

CopyFont

[

exch

FDepVector

{

dup /FontType get 0 eq

{

1 index Type0CopyFont

/_pdfType0 exch definefont

}

{

/_pdfBaseFont exch

2 index exec

}

ifelse

exch

}

forall

pop

]

/FDepVector exch def

currentdict

end

} bd

Level2? {currentglobal true setglobal} if

/cHexEncoding

[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12

/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25

/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38

/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B

/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E

/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71

/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84

/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97

/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA

/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD

/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0

/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3

/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6

/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def

Level2? {setglobal} if

/modEnc {

/_enc xdd

/_icode 0 dd

counttomark 1 sub -1 0

{

index

dup type /nametype eq

{

_enc _icode 3 -1 roll put

_icode 1 add

}

if

/_icode xdd

} for

cleartomark

_enc

} bd

/trEnc {

/_enc xdd

255 -1 0 {

exch dup -1 eq

{ pop /.notdef }

{ Encoding exch get }

ifelse

_enc 3 1 roll put

} for

pop

_enc

} bd

/TE {

/_i xdd

StandardEncoding 256 array copy modEnc

_pdfEncodings exch _i exch put

} bd

/TZ

{

/_usePDFEncoding xdd

findfont

dup length 6 add dict

begin

{

1 index /FID ne { def } { pop pop } ifelse

} forall

/pdf_origFontName FontName def

/FontName exch def

currentdict /PaintType known

{ PaintType 2 eq {/PaintType 0 def} if }

if

_usePDFEncoding 0 ge

{

/Encoding _pdfEncodings _usePDFEncoding get def

pop

}

{

_usePDFEncoding -1 eq

{

counttomark 0 eq

{ pop }

{

Encoding 256 array copy

modEnc /Encoding exch def

}

ifelse

}

{

256 array

trEnc /Encoding exch def

}

ifelse

}

ifelse

pdf_EuroProcSet pdf_origFontName known

{

pdf_origFontName pdf_AddEuroGlyphProc

} if

Level2?

{

currentdict /pdf_origFontName undef

} if

FontName currentdict

end

definefont pop

}

bd

Level2?

{

/TZG

{

currentglobal true setglobal

2 index _pdfFontStatus

{

2 index findfont

false setglobal

3 index findfont

true setglobal

ne

{

2 index findfont dup rcheck

{

dup length dict begin

{

1 index /FID ne { def } { pop pop } ifelse

} forall

currentdict end

}

if

3 index exch definefont pop

}

if

} if

setglobal

TZ

} bd

}

{

/TZG {TZ} bd

} ifelse

Level2?

{

currentglobal false setglobal

userdict /pdftext_data 5 dict put

pdftext_data

begin

/saveStacks

{

pdftext_data

begin

/vmmode currentglobal def

false setglobal

count array astore /os exch def

end

countdictstack array dictstack pdftext_data exch /ds exch put

cleardictstack pdftext_data /dscount countdictstack put

pdftext_data /vmmode get setglobal

} bind def

/restoreStacks

{

pdftext_data /vmmode currentglobal put false setglobal

clear cleardictstack

pdftext_data /ds get dup

pdftext_data /dscount get 1 2 index length 1 sub

{ get begin dup } for

pop pop

pdftext_data /os get aload pop

pdftext_data /vmmode get setglobal

} bind def

/testForClonePrinterBug

{

currentglobal true setglobal

/undefinedCategory /Generic /Category findresource

dup length dict copy /Category defineresource pop

setglobal

pdftext_data /saveStacks get exec

pdftext_data /vmmode currentglobal put false setglobal

/undefined /undefinedCategory { resourcestatus } stopped

pdftext_data exch /bugFound exch put

pdftext_data /vmmode get setglobal

pdftext_data /restoreStacks get exec

pdftext_data /bugFound get

} bind def

end

setglobal

/pdf_resourcestatus

pdftext_data /testForClonePrinterBug get exec

{

{

pdftext_data /saveStacks get exec

pdftext_data /os get dup dup length 1 sub

dup 1 sub dup 0 lt { pop 0 } if

exch 1 exch { get exch dup } for

pop pop

{ resourcestatus }

stopped

{

clear cleardictstack pdftext_data /restoreStacks get exec

{ pop pop } stopped pop false

}

{

count array astore pdftext_data exch /results exch put

pdftext_data /restoreStacks get exec pop pop

pdftext_data /results get aload pop

}

ifelse

}

}

{ { resourcestatus } }

ifelse

bd

}

if

Level2?

{

/_pdfUndefineResource

{

currentglobal 3 1 roll

_pdf_FontDirectory 2 index 2 copy known

{undef}

{pop pop}

ifelse

1 index (pdf) exch _pdfConcatNames 1 index

1 index 1 _pdfConcatNames 1 index

5 index 1 _pdfConcatNames 1 index

4

{

2 copy pdf_resourcestatus

{

pop 2 lt

{2 copy findresource gcheck setglobal undefineresource}

{pop pop}

ifelse

}

{ pop pop}

ifelse

} repeat

setglobal

} bd

}

{

/_pdfUndefineResource { pop pop} bd

}

ifelse

Level2?

{

/_pdfFontStatus

{

currentglobal exch

/Font pdf_resourcestatus

{pop pop true}

{false}

ifelse

exch setglobal

} bd

}

{

/_pdfFontStatusString 50 string def

_pdfFontStatusString 0 (fonts/) putinterval

/_pdfFontStatus

{

FontDirectory 1 index known

{ pop true }

{

_pdfFontStatusString 6 42 getinterval

cvs length 6 add

_pdfFontStatusString exch 0 exch getinterval

{ status } stopped

{pop false}

{

{ pop pop pop pop true}

{ false }

ifelse

}

ifelse

}

ifelse

} bd

}

ifelse

Level2?

{

/_pdfCIDFontStatus

{

/CIDFont /Category pdf_resourcestatus

{

pop pop

/CIDFont pdf_resourcestatus

{pop pop true}

{false}

ifelse

}

{ pop false }

ifelse

} bd

}

if

/_pdfString100 100 string def

/_pdfComposeFontName

{

dup length 1 eq

{

0 get

1 index

type /nametype eq

{

_pdfString100 cvs

length dup dup _pdfString100 exch (-) putinterval

_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval

2 index exch cvs length

add 1 add _pdfString100 exch 0 exch getinterval

exch pop

true

}

{

pop pop

false

}

ifelse

}

{

false

}

ifelse

dup {exch cvn exch} if

} bd

/_pdfConcatNames

{

exch

_pdfString100 cvs

length dup dup _pdfString100 exch (-) putinterval

_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval

3 -1 roll exch cvs length

add 1 add _pdfString100 exch 0 exch getinterval

cvn

} bind def

/_pdfTextTempString 50 string def

/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def

/_pdf_CheckCIDSystemInfo

{

1 index _pdfTextTempString cvs

(Identity) anchorsearch

{

pop pop pop pop true

}

{

false

_pdfRegOrderingArray

{

2 index exch

anchorsearch

{ pop pop pop true exit}

{ pop }

ifelse

}

forall

exch pop

exch /CIDFont findresource

/CIDSystemInfo get

3 -1 roll /CMap findresource

/CIDSystemInfo get

exch

3 -1 roll

{

2 copy

/Supplement get

exch

dup type /dicttype eq

{/Supplement get}

{pop 0 }

ifelse

ge

}

{ true }

ifelse

{

dup /Registry get

2 index /Registry get eq

{

/Ordering get

exch /Ordering get

dup type /arraytype eq

{

1 index type /arraytype eq

{

true

1 index length 1 sub -1 0

{

dup 2 index exch get exch 3 index exch get ne

{ pop false exit}

if

} for

exch pop exch pop

}

{ pop pop false }

ifelse

}

{

eq

}

ifelse

}

{ pop pop false }

ifelse

}

{ pop pop false }

ifelse

}

ifelse

} bind def

pdf_has_composefont?

{

/_pdfComposeFont

{

2 copy _pdfComposeFontName not

{

2 index

}

if

(pdf) exch _pdfConcatNames

dup _pdfFontStatus

{ dup findfont 5 2 roll pop pop pop true}

{

4 1 roll

1 index /CMap pdf_resourcestatus

{

pop pop

true

}

{false}

ifelse

1 index true exch

{

_pdfCIDFontStatus not

{pop false exit}

if

}

forall

and

{

1 index 1 index 0 get _pdf_CheckCIDSystemInfo

{

3 -1 roll pop

2 index 3 1 roll

composefont true

}

{

pop pop exch pop false

}

ifelse

}

{

_pdfComposeFontName

{

dup _pdfFontStatus

{

exch pop

1 index exch

findfont definefont true

}

{

pop exch pop

false

}

ifelse

}

{

exch pop

false

}

ifelse

}

ifelse

{ true }

{

dup _pdfFontStatus

{ dup findfont true }

{ pop false }

ifelse

}

ifelse

}

ifelse

} bd

}

{

/_pdfComposeFont

{

_pdfComposeFontName not

{

dup

}

if

dup

_pdfFontStatus

{exch pop dup findfont true}

{

1 index

dup type /nametype eq

{pop}

{cvn}

ifelse

eq

{pop false}

{

dup _pdfFontStatus

{dup findfont true}

{pop false}

ifelse

}

ifelse

}

ifelse

} bd

}

ifelse

/_pdfStyleDicts 4 dict dup begin

/Adobe-Japan1 4 dict dup begin

Level2?

{

/Serif

/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus

{/HeiseiMin-W3}

{

/HeiseiMin-W3 _pdfCIDFontStatus

{/HeiseiMin-W3}

{/Ryumin-Light}

ifelse

}

ifelse

def

/SansSerif

/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus

{/HeiseiKakuGo-W5}

{

/HeiseiKakuGo-W5 _pdfCIDFontStatus

{/HeiseiKakuGo-W5}

{/GothicBBB-Medium}

ifelse

}

ifelse

def

/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus

{/HeiseiMaruGo-W4}

{

/HeiseiMaruGo-W4 _pdfCIDFontStatus

{/HeiseiMaruGo-W4}

{

/Jun101-Light-RKSJ-H _pdfFontStatus

{ /Jun101-Light }

{ SansSerif }

ifelse

}

ifelse

}

ifelse

/RoundSansSerif exch def

/Default Serif def

}

{

/Serif /Ryumin-Light def

/SansSerif /GothicBBB-Medium def

{

(fonts/Jun101-Light-83pv-RKSJ-H) status

}stopped

{pop}{

{ pop pop pop pop /Jun101-Light }

{ SansSerif }

ifelse

/RoundSansSerif exch def

}ifelse

/Default Serif def

}

ifelse

end

def

/Adobe-Korea1 4 dict dup begin

/Serif /HYSMyeongJo-Medium def

/SansSerif /HYGoThic-Medium def

/RoundSansSerif SansSerif def

/Default Serif def

end

def

/Adobe-GB1 4 dict dup begin

/Serif /STSong-Light def

/SansSerif /STHeiti-Regular def

/RoundSansSerif SansSerif def

/Default Serif def

end

def

/Adobe-CNS1 4 dict dup begin

/Serif /MKai-Medium def

/SansSerif /MHei-Medium def

/RoundSansSerif SansSerif def

/Default Serif def

end

def

end

def

/TZzero

{

/_wmode xdd

/_styleArr xdd

/_regOrdering xdd

3 copy

_pdfComposeFont

{

5 2 roll pop pop pop

}

{

[

0 1 _styleArr length 1 sub

{

_styleArr exch get

_pdfStyleDicts _regOrdering 2 copy known

{

get

exch 2 copy known not

{ pop /Default }

if

get

}

{

pop pop pop /Unknown

}

ifelse

}

for

]

exch pop

2 index 3 1 roll

_pdfComposeFont

{3 -1 roll pop}

{

findfont dup /FontName get exch

}

ifelse

}

ifelse

dup /WMode 2 copy known

{ get _wmode ne }

{ pop pop _wmode 1 eq}

ifelse

{

exch _wmode _pdfConcatNames

dup _pdfFontStatus

{ exch pop dup findfont false}

{ exch true }

ifelse

}

{

dup /FontType get 0 ne

}

ifelse

{

dup /FontType get 3 eq _wmode 1 eq and

{

_pdfVerticalRomanT3Font dup length 10 add dict copy

begin

/_basefont exch

dup length 3 add dict

begin

{1 index /FID ne {def}{pop pop} ifelse }

forall

/Encoding Encoding dup length array copy

dup 16#27 /quotesingle put

dup 16#60 /grave put

_regOrdering /Adobe-Japan1 eq

{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}

if

def

FontName

currentdict

end

definefont

def

/Encoding _basefont /Encoding get def

/_fauxfont true def

}

{

dup length 3 add dict

begin

{1 index /FID ne {def}{pop pop} ifelse }

forall

FontType 0 ne

{

/Encoding Encoding dup length array copy

dup 16#27 /quotesingle put

dup 16#60 /grave put

_regOrdering /Adobe-Japan1 eq

{dup 16#5c /yen put}

if

def

/_fauxfont true def

} if

} ifelse

/WMode _wmode def

dup dup /FontName exch def

currentdict

end

definefont pop

}

{

pop

}

ifelse

/_pdf_FontDirectory 3 1 roll _safeput

}

bd

Level2?

{

/Tf {

_pdf_FontDirectory 2 index 2 copy known

{get exch 3 -1 roll pop}

{pop pop}

ifelse

selectfont

} bd

}

{

/Tf {

_pdf_FontDirectory 2 index 2 copy known

{get exch 3 -1 roll pop}

{pop pop}

ifelse

exch findfont exch

dup type /arraytype eq

{makefont}

{scalefont}

ifelse

setfont

} bd

}

ifelse

/cshow where

{

pop /pdf_cshow /cshow load dd

/pdf_remove2 {pop pop} dd

}

{

/pdf_cshow {exch forall} dd

/pdf_remove2 {} dd

} ifelse

/pdf_xshow

{

/_pdf_na xdd

/_pdf_i 0 dd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

{

pdf_remove2

_pdf_str1 exch 0 exch put

_pdf_str1 /_pdf_showproc load exec

{_pdf_na _pdf_i get} stopped

{ pop pop }

{

_pdf_x _pdf_y moveto

0

rmoveto

}

ifelse

_pdf_i 1 add /_pdf_i xdd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

}

exch

pdf_cshow

} bd

/pdf_yshow

{

/_pdf_na xdd

/_pdf_i 0 dd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

{

pdf_remove2

_pdf_str1 exch 0 exch put

_pdf_str1 /_pdf_showproc load exec

{_pdf_na _pdf_i get} stopped

{ pop pop }

{

_pdf_x _pdf_y moveto

0 exch

rmoveto

}

ifelse

_pdf_i 1 add /_pdf_i xdd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

}

exch

pdf_cshow

} bd

/pdf_xyshow

{

/_pdf_na xdd

/_pdf_i 0 dd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

{

pdf_remove2

_pdf_str1 exch 0 exch put

_pdf_str1 /_pdf_showproc load exec

{_pdf_na _pdf_i get} stopped

{ pop pop }

{

{_pdf_na _pdf_i 1 add get} stopped

{ pop pop pop}

{

_pdf_x _pdf_y moveto

rmoveto

}

ifelse

}

ifelse

_pdf_i 2 add /_pdf_i xdd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

}

exch

pdf_cshow

} bd

/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd

/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd

/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd

Level2? _ColorSep5044? not and

{

/pdfxs {{xshow} stopped {pdfl1xs} if} bd

/pdfys {{yshow} stopped {pdfl1ys} if} bd

/pdfxys {{xyshow} stopped {pdfl1xys} if} bd

}

{

/pdfxs /pdfl1xs load dd

/pdfys /pdfl1ys load dd

/pdfxys /pdfl1xys load dd

} ifelse

/pdf_charpath {false charpath} bd

/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd

/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd

/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd

/pdf_strokepath

{

{

pdf_remove2

_pdf_str1 exch 0 exch put

_pdf_str1 false charpath

currentpoint S moveto

} bind

exch pdf_cshow

} bd

/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd

/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd

/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd

Level2? {currentglobal true setglobal} if

/d0/setcharwidth ld

/nND {{/.notdef} repeat} bd

/T3Defs {

/BuildChar

{

1 index /Encoding get exch get

1 index /BuildGlyph get exec

}

def

/BuildGlyph {

exch begin

GlyphProcs exch get exec

end

} def

/_pdfT3Font true def

} bd

/_pdfBoldRomanWidthProc

{

stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth

0 0

} bd

/_pdfType0WidthProc

{

dup stringwidth 0 0 moveto

2 index true charpath pathbbox

0 -1

7 index 2 div .88

setcachedevice2

pop

0 0

} bd

/_pdfType0WMode1WidthProc

{

dup stringwidth

pop 2 div neg -0.88

2 copy

moveto

0 -1

5 -1 roll true charpath pathbbox

setcachedevice

} bd

/_pdfBoldBaseFont

11 dict begin

/FontType 3 def

/FontMatrix[1 0 0 1 0 0]def

/FontBBox[0 0 1 1]def

/Encoding cHexEncoding def

/_setwidthProc /_pdfBoldRomanWidthProc load def

/_bcstr1 1 string def

/BuildChar

{

exch begin

_basefont setfont

_bcstr1 dup 0 4 -1 roll put

dup

_setwidthProc

3 copy

moveto

show

_basefonto setfont

moveto

show

end

}bd

currentdict

end

def

pdf_has_composefont?

{

/_pdfBoldBaseCIDFont

11 dict begin

/CIDFontType 1 def

/CIDFontName /_pdfBoldBaseCIDFont def

/FontMatrix[1 0 0 1 0 0]def

/FontBBox[0 0 1 1]def

/_setwidthProc /_pdfType0WidthProc load def

/_bcstr2 2 string def

/BuildGlyph

{

exch begin

_basefont setfont

_bcstr2 1 2 index 256 mod put

_bcstr2 0 3 -1 roll 256 idiv put

_bcstr2 dup _setwidthProc

3 copy

moveto

show

_basefonto setfont

moveto

show

end

}bd

currentdict

end

def

/_pdfDefineIdentity-H

{

/Identity-H /CMap PDFText /pdf_resourcestatus get exec

{

pop pop

}

{

/CIDInit/ProcSet findresource begin 12 dict begin

begincmap

/CIDSystemInfo

3 dict begin

/Registry (Adobe) def

/Ordering (Identity) def

/Supplement 0 def

currentdict

end

def

/CMapName /Identity-H def

/CMapVersion 1 def

/CMapType 1 def

1 begincodespacerange

<0000> <ffff>

endcodespacerange

1 begincidrange

<0000> <ffff> 0

endcidrange

endcmap

CMapName currentdict/CMap defineresource pop

end

end

} ifelse

} def

} if

/_pdfVerticalRomanT3Font

10 dict begin

/FontType 3 def

/FontMatrix[1 0 0 1 0 0]def

/FontBBox[0 0 1 1]def

/_bcstr1 1 string def

/BuildChar

{

exch begin

_basefont setfont

_bcstr1 dup 0 4 -1 roll put

dup

_pdfType0WidthProc

moveto

show

end

}bd

currentdict

end

def

Level2? {setglobal} if

/MakeBoldFont

{

dup /ct_SyntheticBold known

{

dup length 3 add dict begin

CopyFont

/ct_StrokeWidth .03 0 FontMatrix idtransform pop def

/ct_SyntheticBold true def

currentdict

end

definefont

}

{

dup dup length 3 add dict

begin

CopyFont

/PaintType 2 def

/StrokeWidth .03 0 FontMatrix idtransform pop def

/dummybold currentdict

end

definefont

dup /FontType get dup 9 ge exch 11 le and

{

_pdfBoldBaseCIDFont

dup length 3 add dict copy begin

dup /CIDSystemInfo get /CIDSystemInfo exch def

/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont

/_basefont exch def

/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont

/_basefonto exch def

currentdict

end

/CIDFont defineresource

}

{

_pdfBoldBaseFont

dup length 3 add dict copy begin

/_basefont exch def

/_basefonto exch def

currentdict

end

definefont

}

ifelse

}

ifelse

} bd

/MakeBold {

1 index

_pdf_FontDirectory 2 index 2 copy known

{get}

{exch pop}

ifelse

findfont

dup

/FontType get 0 eq

{

dup /WMode known {dup /WMode get 1 eq }{false} ifelse

version length 4 ge

and

{version 0 4 getinterval cvi 2015 ge }

{true}

ifelse

{/_pdfType0WidthProc}

{/_pdfType0WMode1WidthProc}

ifelse

_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put

{MakeBoldFont} Type0CopyFont definefont

}

{

dup /_fauxfont known not 1 index /SubstMaster known not and

{

_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put

MakeBoldFont

}

{

2 index 2 index eq

{ exch pop }

{

dup length dict begin

CopyFont

currentdict

end

definefont

}

ifelse

}

ifelse

}

ifelse

pop pop

dup /dummybold ne

{/_pdf_FontDirectory exch dup _safeput }

{ pop }

ifelse

}bd

/MakeItalic {

_pdf_FontDirectory exch 2 copy known

{get}

{exch pop}

ifelse

dup findfont

dup /FontInfo 2 copy known

{

get

/ItalicAngle 2 copy known

{get 0 eq }

{ pop pop true}

ifelse

}

{ pop pop true}

ifelse

{

exch pop

dup /FontType get 0 eq Level2? not and

{ dup /FMapType get 6 eq }

{ false }

ifelse

{

dup /WMode 2 copy known

{

get 1 eq

{ _italMtx_WMode1Type0 }

{ _italMtxType0 }

ifelse

}

{ pop pop _italMtxType0 }

ifelse

}

{

dup /WMode 2 copy known

{

get 1 eq

{ _italMtx_WMode1 }

{ _italMtx }

ifelse

}

{ pop pop _italMtx }

ifelse

}

ifelse

makefont

dup /FontType get 42 eq Level2? not or

{

dup length dict begin

CopyFont

currentdict

end

}

if

1 index exch

definefont pop

/_pdf_FontDirectory exch dup _safeput

}

{

pop

2 copy ne

{

/_pdf_FontDirectory 3 1 roll _safeput

}

{ pop pop }

ifelse

}

ifelse

}bd

/MakeBoldItalic {

/dummybold exch

MakeBold

/dummybold

MakeItalic

}bd

Level2?

{

/pdf_CopyDict

{1 index length add dict copy}

def

}

{

/pdf_CopyDict

{

1 index length add dict

1 index wcheck

{ copy }

{ begin

{def} forall

currentdict

end

}

ifelse

}

def

}

ifelse

/pdf_AddEuroGlyphProc

{

currentdict /CharStrings known

{

CharStrings /Euro known not

{

dup

/CharStrings

CharStrings 1 pdf_CopyDict

begin

/Euro pdf_EuroProcSet 4 -1 roll get def

currentdict

end

def

/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def

/pdf_PathOps /pdf_PathOps load def

/Symbol eq

{

/Encoding Encoding dup length array copy

dup 160 /Euro put def

}

if

}

{ pop

}

ifelse

}

{ pop

}

ifelse

}

def

Level2? {currentglobal true setglobal} if

/pdf_PathOps 4 dict dup begin

/m {moveto} def

/l {lineto} def

/c {curveto} def

/cp {closepath} def

end

def

/pdf_PSBuildGlyph

{

gsave

8 -1 roll pop

7 1 roll

currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse

dup 9 1 roll

{

currentdict /StrokeWidth 2 copy known

{

get 2 div

5 1 roll

4 -1 roll 4 index sub

4 1 roll

3 -1 roll 4 index sub

3 1 roll

exch 4 index add exch

4 index add

5 -1 roll pop

}

{

pop pop

}

ifelse

}

if

setcachedevice

pdf_PathOps begin

exec

end

{

currentdict /StrokeWidth 2 copy known

{ get }

{ pop pop 0 }

ifelse

setlinewidth stroke

}

{

fill

}

ifelse

grestore

} def

/pdf_EuroProcSet 13 dict def

pdf_EuroProcSet

begin

/Courier-Bold

{

600 0 6 -12 585 612

{

385 274 m

180 274 l

179 283 179 293 179 303 c

179 310 179 316 180 323 c

398 323 l

423 404 l

197 404 l

219 477 273 520 357 520 c

409 520 466 490 487 454 c

487 389 l

579 389 l

579 612 l

487 612 l

487 560 l

449 595 394 612 349 612 c

222 612 130 529 98 404 c

31 404 l

6 323 l

86 323 l

86 304 l

86 294 86 284 87 274 c

31 274 l

6 193 l

99 193 l

129 77 211 -12 359 -12 c

398 -12 509 8 585 77 c

529 145 l

497 123 436 80 356 80 c

285 80 227 122 198 193 c

360 193 l

cp

600 0 m

}

pdf_PSBuildGlyph

} def

/Courier-BoldOblique /Courier-Bold load def

/Courier

{

600 0 17 -12 578 584

{

17 204 m

97 204 l

126 81 214 -12 361 -12 c

440 -12 517 17 578 62 c

554 109 l

501 70 434 43 366 43 c

266 43 184 101 154 204 c

380 204 l

400 259 l

144 259 l

144 270 143 281 143 292 c

143 299 143 307 144 314 c

418 314 l

438 369 l

153 369 l

177 464 249 529 345 529 c

415 529 484 503 522 463 c

522 391 l

576 391 l

576 584 l

522 584 l

522 531 l

473 566 420 584 348 584 c

216 584 122 490 95 369 c

37 369 l

17 314 l

87 314 l

87 297 l

87 284 88 272 89 259 c

37 259 l

cp

600 0 m

}

pdf_PSBuildGlyph

} def

/Courier-Oblique /Courier load def

/Helvetica

{

556 0 24 -19 541 703

{

541 628 m

510 669 442 703 354 703 c

201 703 117 607 101 444 c

50 444 l

25 372 l

97 372 l

97 301 l

49 301 l

24 229 l

103 229 l

124 67 209 -19 350 -19 c

435 -19 501 25 509 32 c

509 131 l

492 105 417 60 343 60 c

267 60 204 127 197 229 c

406 229 l

430 301 l

191 301 l

191 372 l

455 372 l

479 444 l

194 444 l

201 531 245 624 348 624 c

433 624 484 583 509 534 c

cp

556 0 m

}

pdf_PSBuildGlyph

} def

/Helvetica-Oblique /Helvetica load def

/Helvetica-Bold

{

556 0 12 -19 563 710

{

563 621 m

537 659 463 710 363 710 c

216 710 125 620 101 462 c

51 462 l

12 367 l

92 367 l

92 346 l

92 337 93 328 93 319 c

52 319 l

12 224 l

102 224 l

131 58 228 -19 363 -19 c

417 -19 471 -12 517 18 c

517 146 l

481 115 426 93 363 93 c

283 93 254 166 246 224 c

398 224 l

438 319 l

236 319 l

236 367 l

457 367 l

497 462 l

244 462 l

259 552 298 598 363 598 c

425 598 464 570 486 547 c

507 526 513 517 517 509 c

cp

556 0 m

}

pdf_PSBuildGlyph

} def

/Helvetica-BoldOblique /Helvetica-Bold load def

/Symbol

{

750 0 20 -12 714 685

{

714 581 m

650 645 560 685 465 685 c

304 685 165 580 128 432 c

50 432 l

20 369 l

116 369 l

115 356 115 347 115 337 c

115 328 115 319 116 306 c

50 306 l

20 243 l

128 243 l

165 97 300 -12 465 -12 c

560 -12 635 25 685 65 c

685 155 l

633 91 551 51 465 51 c

340 51 238 131 199 243 c

555 243 l

585 306 l

184 306 l

183 317 182 326 182 336 c

182 346 183 356 184 369 c

614 369 l 644 432 l

199 432 l

233 540 340 622 465 622 c

555 622 636 580 685 520 c

cp

750 0 m

}

pdf_PSBuildGlyph

} def

/Times-Bold

{

500 0 16 -14 478 700

{

367 308 m

224 308 l

224 368 l

375 368 l

380 414 l

225 414 l

230 589 257 653 315 653 c

402 653 431 521 444 457 c

473 457 l

473 698 l

444 697 l

441 679 437 662 418 662 c

393 662 365 700 310 700 c

211 700 97 597 73 414 c

21 414 l

16 368 l

69 368 l

69 359 68 350 68 341 c

68 330 68 319 69 308 c

21 308 l

16 262 l

73 262 l

91 119 161 -14 301 -14 c

380 -14 443 50 478 116 c

448 136 l

415 84 382 40 323 40 c

262 40 231 77 225 262 c

362 262 l

cp

500 0 m

}

pdf_PSBuildGlyph

} def

/Times-BoldItalic

{

500 0 9 -20 542 686

{

542 686 m

518 686 l

513 673 507 660 495 660 c

475 660 457 683 384 683 c

285 683 170 584 122 430 c

58 430 l

34 369 l

105 369 l

101 354 92 328 90 312 c

34 312 l

9 251 l

86 251 l

85 238 84 223 84 207 c

84 112 117 -14 272 -14 c

326 -14 349 9 381 9 c

393 9 393 -10 394 -20 c

420 -20 l

461 148 l

429 148 l

416 109 362 15 292 15 c

227 15 197 55 197 128 c

197 162 204 203 216 251 c

378 251 l

402 312 l

227 312 l

229 325 236 356 241 369 c

425 369 l

450 430 l

255 430 l

257 435 264 458 274 488 c

298 561 337 654 394 654 c

437 654 484 621 484 530 c

484 516 l

516 516 l

cp

500 0 m

}

pdf_PSBuildGlyph

} def

/Times-Italic

{

500 0 23 -10 595 692

{

399 317 m

196 317 l

199 340 203 363 209 386 c

429 386 l

444 424 l

219 424 l

246 514 307 648 418 648 c

448 648 471 638 492 616 c

529 576 524 529 527 479 c

549 475 l

595 687 l

570 687 l

562 674 558 664 542 664 c

518 664 474 692 423 692 c

275 692 162 551 116 424 c

67 424 l

53 386 l

104 386 l

98 363 93 340 90 317 c

37 317 l

23 279 l

86 279 l

85 266 85 253 85 240 c

85 118 137 -10 277 -10 c

370 -10 436 58 488 128 c

466 149 l

424 101 375 48 307 48 c

212 48 190 160 190 234 c

190 249 191 264 192 279 c

384 279 l

cp

500 0 m

}

pdf_PSBuildGlyph

} def

/Times-Roman

{

500 0 10 -12 484 692

{

347 298 m

171 298 l

170 310 170 322 170 335 c

170 362 l

362 362 l

374 403 l

172 403 l

184 580 244 642 308 642 c

380 642 434 574 457 457 c

481 462 l

474 691 l

449 691 l

433 670 429 657 410 657 c

394 657 360 692 299 692 c

204 692 94 604 73 403 c

22 403 l

10 362 l

70 362 l

69 352 69 341 69 330 c

69 319 69 308 70 298 c

22 298 l

10 257 l

73 257 l

97 57 216 -12 295 -12 c

364 -12 427 25 484 123 c

458 142 l

425 101 384 37 316 37 c

256 37 189 84 173 257 c

335 257 l

cp

500 0 m

}

pdf_PSBuildGlyph

} def

end

Level2? {setglobal} if

currentdict readonly pop end

%%EndResource

PDFText begin

[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis

/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute

/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde

/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex

/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls

/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash

/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef

/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash

/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef

/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe

/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide

/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright

/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand

/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex

/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex

/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla

/hungarumlaut/ogonek/caron

0 TE

[1/dotlessi/caron 39/quotesingle 96/grave 

127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis

/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE

/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft

/quotedblright/bullet/endash/emdash/tilde/trademark/scaron

/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling

/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine

/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus

/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla

/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters

/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla

/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis

/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash

/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave

/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute

/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde

/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute

/ucircumflex/udieresis/yacute/thorn/ydieresis

1 TE

end

currentdict readonly pop

end end

/currentpacking where {pop setpacking}if

PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin

PDFVars/DocInitAll get exec PDFVars/InitAll get exec

%%IncludeResource Times-Italic

[/N95/Times-Italic -1 TZ

%%IncludeResource Times-Bold

[/N86/Times-Bold -1 TZ

PDFVars/TermAll get exec end end



%%EndSetup

PDFVars begin PDF begin PDFVars/InitAll get exec

80 711 188 27 rectclip

%%BeginResource: font LBAAAA+ArialMT~49

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /LBAAAA+ArialMT~49 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A436B0C96CD5349EE2E997A2C271A852FB7C63600614C83F78605E

4F6AE30F86BA28257C54120FE5FE2910EEF98796A9BFF5FF33C2D943AC1D8FC7

D2D2F580ED2CA924B9747E4A1D93C62124F1F537CACABE28CAFC5834F2BDD4F5

7890771F2626955E8E31B9B102DFE0DE3D5BC8643999629E92145B0B3C8DD59A

193E13C8D5D508CCCBF4F180AE63C67D875C22A12E8BEC2E5E9C9F4C84B63DB1

D75BEA59FE029A426DA507D81938E1889DA8CDB07AC8F1B3680EB9D882C72869

6AB1EFE6B842A5ECED535D63C02523B3ACC0ADB6F41145BC3336E8EE7EB81177

EF9CE325AFFAC2D425D8C4FF80333E9E4DC5DE29329F0BC2DEBDA9D27BCC9720

3EC628AC5B14594E7512BF6F96A4547DDDEF79FCAA9E631FB2F3F7734DDC0948

2D4BB662A211D4A364A714DA671EDA517FE4A9F782E22346F2DE6A72DDDF8DA8

F350BB16E528EEFF086916A7FF1F10AB39E44BD5A4DD5979A6A0461C9DA74D6A

FEA53B6078C4001133778A3E39CE3A312A9FE81A5780F301D7E58DE90E825FF2

98BA61CD69AB128B3060BFA05B758CF4D641300BF6

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/LBAAAA+ArialMT~49 findfont /Encoding get

dup 0 /.notdef put

pop

end

/LBAAAA+ArialMT~49 findfont /Encoding get

dup 0 /.notdef put

dup 66 /B put

pop

%%EndResource

[/N37/LBAAAA+ArialMT~49 -1 TZ

%%BeginResource: font PBAAAA+ArialMT~46

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /PBAAAA+ArialMT~46 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A436B0C96CD5349EE2E997A2C271A852FB7C63600614C83F78605E

4F6AE30F86BA28257C54120FE5FE2910EEF98796A9BFF5FF33C2D943AC1D8FC7

D2D2F580ED2CA924B9747E4A1D93C62124F1F537CACABE2B76D6E07D762F301E

4419ED13B4046212BF00D22BE740ED10DCEEE60DBA7B0603C0F2EE58890DD193

C668D0808428F6CB6DDB769CC9B96678E1A2D591B6237A100E6EF88E44D71305

17EDE896F3A76874C5B144FAD388FB6BDA65554F2C7771FB67B2B179EADD3029

12AC1E90AF49A9BD7EC813AD7C0D649C7410ACC355438AF16FAFE33245657408

0B623499ABD2648B24AEB18AA8FE5BAA06F58B33C1D01DD5F008ABFD16866654



0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/PBAAAA+ArialMT~46 findfont /Encoding get

dup 0 /.notdef put

pop

end

/PBAAAA+ArialMT~46 findfont /Encoding get

dup 0 /.notdef put

dup 65 /A put

pop

%%EndResource

[/N41/PBAAAA+ArialMT~46 -1 TZ

%%BeginResource: font XDAAAA+ArialMT~90

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /XDAAAA+ArialMT~90 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69AFD5C814A372AF455C4A99B19E1FF14974149A341EA4612524B39A

FB1720582B4081668B4FC51F42F7515D851BE9C2DD7C10755A5E80CCE6E6AAAA

9A8EE3041BB386820E0F33336E657973EB0CF6DAFD87C2B7AB3E245FDFB7ACAB

70C63C787126E613AD5B19F74493D525C332EE0DCD0C537D908ADE8717741338

181D1BA952BBB1055B42D4CC9D78C7B85CDF2361ED2DE8C961A2085E464D94C1

F59FC21DABE670E3CE1C2ED76F345A9E878F7DFA3535A6CC4A9353E15F7DC580

1CE9B3B3E599101B4F29D04236AB7E1FB86D110ADD563E193C4C1616FBC13F31

48BF378BB55902D798AC5CC2153321FE2B0600A7340FF81934DE752647951605

7744EB48B461E787620E29C7D6F40AB6F1F666206933ACDCC4BD19B43AD298B4

1FCE37FE21385F61AB01EC238BE7C5B136D96D61DC3246F65EFBD8E109E83E96

7FB892CFE66D1A1D80F15FC558D512857BCD5C84E7AFDEB6E35E6156CFBA7FBE

84D7F94D9A6D21705BA302BDF470D035A9D7C8A998CA489D1B12C7A001A6DF5A

5172FB611CDEB4BB18FF78219BC0097B344316CD5B72361C3D5C1EB9E6424B4B

A9EEA131BB41BE2EA84EFD0D6B7020C098161A9B7333A25C921950EC23DBABC0

E90C1A49DBEC16ADC6AF804D02D94522D71D28103771EB5D0B1E6EBEC0A566E7

091DFE5173BF32ADD31CB2443CBC189C3418A88F6D53723A381D9ECC5021ACD2

C6D89C6FA73FE32CC5867747F26CF3FCAA95B450FDFBE197C3171CC129C44DD0

A780D378852301C30A628428B1432782BDAE90C5937B7B4174AD5AAA3A0C1996

6B0BBEF50D3DEE3E332FD6F84FB8D677CBBC540A08BFB64E07E9726C1EFBFA3D

CD84D67872126FA22F8BDA972BFF5CA5AF6D033414131A422883A1878F35BA65

B8C3F33BA08329A2078E7B3A07F56C20B65AEE88A6D1F13FF3093047D8F74E08

D8EEAA1E6E33ECFCB0745E2FE5CCD1FB0832F393F4F45EC22D7FD84EC3ED864E

5222FA97AA7D7594AA93C8B2EAC6CE6CFE9E52F58E1D74C009DA042F2E346D77

4D71D4341812C1B8BFF3B06C8152FC83B1A6B82A321A1D72AAC61DE029FB3B60

8525D05CF0007BE224E47829217A3E6FAFFD4BC2BBB6D69FA5339BBFCF32084D

55F106EFF26C1674C93B43C78112CF3C1168AA179BA2A65C69E48995E939086F

0C617454B6F2B5B6EE5534CCD526B7456E30DE19FBF389DDFA0D757C5F73D9B9

F2ACF33CFD71E7C3FAD4710875408B2EEBF4059AE0DB2B7C28D2C9A6F6EEC5A3

E33AB31A435BCEB5D05BC1EE6B6B8FC047BEA701AAAC78A2AECA377A529A50B7

14C1AE717CCA54E95EC77B8FA7C55449EFDB554D01BEA01DEEE5AF590A44489F

E8D7CA0824F3D21CF35F3AAC528CD6E16157058DD484502EAA916994F5BF504B

9A9AE2618C876440D1445DC83A6B26C9E7659A02E6E3C4C97A28D424B0941FB8

F75B91DA2227AE65942AF5A9E387378D3E82AE5A2D1254E31A0ADCEF161839E1

62550990169B6CD6AE2D70DD2ACA0973F10EC18E54955BE58A57D6D40114567D

A54235FECA51B87D820CC89DA38F9EC265A7893B7D91100D03400246EC805D91

A5EDD13CEDD011E926CAEE3455F0DF74F8BF347FBD7FE1869A90191E1471446A

A269541B770AF8797CFE5C03B7B78BCE9492D8107EBE4CE53FB16DCBC1932F4D

F964913698DCCF7F588ECB386BFE30653C33A2B334C08CA6DB7B05F6EF3DFB3F

0A25B8CD4704D5EA6894B1D914E6206804FBCD383F619882E841074199700E8D

F9AFA8E9F54A8FED9668CEB7763FB6E71E74578CCACF5B6E015F33697D539166

2A25E8E91DE38ABA911BA3BBD8EDD5D925B420E2E995C4440D06E4E98289E8CA

5BEEC53826172386D6D78F6E3F1AB7

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/XDAAAA+ArialMT~90 findfont /Encoding get

dup 0 /.notdef put

pop

end

/XDAAAA+ArialMT~90 findfont /Encoding get

dup 0 /.notdef put

dup 65 /A put

dup 97 /a put

dup 99 /c put

dup 103 /g put

dup 108 /l put

dup 110 /n put

dup 112 /p put

dup 114 /r put

pop

%%EndResource

[/N101/XDAAAA+ArialMT~90 -1 TZ

%%BeginResource: font VTTDMA+CMR9

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 13 dict dup begin

/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def

/FullName (CMR9) def

/FamilyName (Computer Modern) def

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /VTTDMA+CMR9 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { -39 -250 1036 750 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3EC8DC423323

00A152553EC9C9C51591C81C6325A8F1E39454C5C5CD7DD32FFDCAA0C98A471D

864F21BA3C1B9AB1A487DF489FCED13A759AC6D527220B09E5C662269D43162B

1C47D4A5CBFB0633655E0B882B6CB0B8386CBC5142ED5E3581051D6952C2D60E

CC016F88AA5C2C88A02AD3E7621E87AFA4B88E9149CBFC744342E35BF29B4E2D

48E22FB32FF8C291AD36157A0297D947D6968BAADE6D12889CFE94CA20EEB67D

929271B1BCD34B14DCBB9EACF17A4E9F396DD185CFCBA17A152CA58F58C95B2F

4FB0CDD5B374314B231A26B704ED77D5395B854D9B97B43B0D727A263EE297F2

AED166F14D1CBB97ED2121684A869046C73340CC7A3772394DB3BE2B7B5183D2

263E473D05DB21D6EB090441E61E7F3B43CF4B4D77E5D081509813D8F4635A8B

F1D13980FA3B1033D66534369AEB655E51DD9889225463CF2588752E30A4583A

EB8E1C94CE4DBD5A717AE12476A2915D4C3F3821D6E7509EFA0AE8CF477B99B0

2E1DF9BCA01158EFC8A000A15829F41C460FA96204A4AAE49C4BAEF9EC2DB864

20127593D5734BC3D8EB48AECB09F8C435B8009447431704B1EC56B1787433D9

5AC7D1CE78C15F290B8464DA36B276BD93AD64CBD0E8D883A45CB4FED7D390FF

2EEB3E297E183D1D1B261DD39C39F8EF6B4837D76877B603AD5CCEAC0ACD6971

76290ED011246C46F83D7387DCFC07DA68F1E24B3714714D805E4666B04EC09E

DB630AC9BC8341E3585F8B5931BB7A296C2BFCBA66CD6D8FBD1893FA5CF8AB81

BFB1C91FB884C4D1C09E8057146FEC94B6C5F9D67C25DD5A91A02730A9777C5B

5FC37F416B559E568AF7A513D2E5CBE66166E21AACDFEA21AEA0C0A8FC4ECDEB

F9EA823693B1EA7A227AD938C588EC266C44F8E39571EC48A1E6439AE189C361

91EAE542781515762095E0384A1E533460C2F35EADC4447C126463BAB799AF47

CCE8B6918A97999B1593C29FA5CB3657B34E1F8F2E9259F1326AFEEA92A94FA4

2ACFEB128512ADFD36A58AB73C0716203E9051B0EC66D977DE79405DA286B31D

6841978EDB690C09AE20057C8641257837026026CAEE208E9DB1B7CFC2C62BC4

A4B44815ACF6BD53C47FE4167F68BA59165B24AFF8B24A7C6A2ABA81CCE12045

A9494AEE81373E63C78CB27CE4C7F3A161C781AEAA9A6704C355EBC7846A3BBA

09A7E163A9C7AAC14D0BEA691B21EB1C51C34540AFE142645169BE5AC55756BE

77666363246DCF80408FABE14467A9CEA376DF14713082C430965555F17DF666

7A69871787CD976801571FAE4FF0609795203559AFCD64A2F09D9E65A1A2E535

83715360B00F9224AA7E50EE43435C0F7ADD01957E4B7A68359259582DFB6FA2

94D297DCD7C7E85593633FEAECDAC9E8B5456424BCB743ACF6DDA8516CBDC03A

E13AD87A3EAD00C700312A43212B235B3C4C35625A097BEC439021F2DFAD26B8

495D8F237AA8EF4C8A94359A231C6C4BA16AA8B3311935650820109755A9707A

B4E327E8DC8D91DB1F9943C1D15833D6859108EC951CD4548CD185B287C23135

593558B55D540FA1A9B16C979CDB6DC2DE681378D0E5945D75D7A25DC3624337

1A80DF908D587AAB21753A0C7AEDADCCCC32CD4A795C333611F682B997893708

98BC9700BBCB98F52C5F5C89BAC07749E3D2072152215E6EFF9289AD7DDAE403

ACF6B13D9C930AEF0EB68ED57D95F452BCC7BBD849D0B76C85AFBCF776B6560F

38101D0A933CECD0D93D47E5E911CA838910FD92F9AFCD3B78D6835B8D431E2C

F8AAA3EA87A9800833B1E72B7350A2D0A4EB155B6FEFF1D400F499D5191F7E34

B9E846B3CC8DF4AE349C75E4319EA302440872A49CB58971EB16837B17E05911

9E8F5EBBA5D1B31438CABE39291154E7CEF6DA8B891AEDFF9951D41650B30DE6

BA23DF89D5019CB1BF0C974DA7CF0CE8CA16A2B8723CCB407480BF6ECE45E806

A05B97F8A3ECD9431A36584E293AE677C2F2A1E631795D7D8BD5BAB2D858DCB9

176AAFDC8D2407915A5C50D8BD67A69EC4932FFE91020E4EE8C2041F19E5E3AB

972F5811B7473C68F1EAFD5085DB19AEBA9260F3F5A034F7C72B42F14BCDEF9F

4E34B4BFE1F4D2E521013D38B29392E4B8A6D9E62B332D5E89EF93FA9D223329

2C15EAE427D9CE1946C2752F5C7C9FFE6590DDF045A5200B8DF73D76BE97A06C

3D44794BF92F15C0AC1608E180F714492B94A302AD876885D03D09F9F84714C9

873A7BD26723F492E7BF9D0F68D6FF122D9C6608A093106400CD501F05F44193

1BDB3A36CC55723F102BC1564B518BDEF6ACB6F145BCD4032387893CC7B59164

12C45BE13410B603BE4EB3FA18D7F7A890CD27E16E153FC7CC6467714561575E

BC1F6ADA39B95546DD644F4A9D51EF749D693D0A9280C8578C8CAB01F2414D76

6FC1BFA8265E397BE99FD652DEC5F0B27EB67D712874132C9CC8AE49A0F6D5BE

79F4497A1783A6CFBDCAAD56562492F2A9A13B38992DB73FCF43294AF0FB6D55

0E860DE4CC29B3B1EB860D12A0752A991D7B430B78EB33B6C289558E6992059D

469C366706E195A520CFB90CA329F60119C0DD29B8687B5B0E8306A13A8E0CC2

E80AB8A2BB310DAEB4D7BF0A91CE8ED72ABA538C619E6B4F9D67CD206755C6CF

F645D5732A54F8E0634FF379D5612A4DAC3ABC81D4FE61942B4B3F8EBF3D7FA9

E8329E84E274E82F712FA6B8C222397F0802A3BF8B588DE3F5FD9EAF491A84B6

111C7D9A1EB3FFB3B59311904A829CFBF91C7C2339170CC07529BD574B7A5B81

936E82346F4713434216E2D8BD53E39156BE48C5A1C40CBB61C054AD60C6B866

7DBF59DD7A796304BB96F62F3A0D8283A1D2B38391BCD7B7D8BBD02D7065B271

441DD74260ECFD558C1EC3460BCE1D4CD5DE512036FFD0F7240613301006D1CB

5747A9875EF11C47879E75E17FA74AE67B2629EB761D0EA626FC2DE49D996605

97B527FB7F224636AE5448315C506C82A26F3405A2D7020A199584E3A2280F9F

AF27F8790998DF9517C54DD4C1C9A53C0CD97097435A93F93DD2C297A538252F

C12F52B9CB80967CE91178D07984EFEC4D17EAB6BE87BA823502978281648F45

3DBFC2FB7D478CFF030302928D33576E6BA80F47FE8651276322E6A733F8B5EE

B71A3C255EE6FE16CBF872545FDB782D816155CF2712DD92D279711DE326BC8B

0707BE99810F756EED925843DDF266C59BB6DC4D5F289B7E5812DB45A08264EA

A891312A0039CF1CD839C1B847BB7BE6D180242A6499F73BEAC30E870960D3A0

1EDDFE8D1C689F2074F12CC6E5283138BA423549E6E4E82D018EEE52199D1858

80F6C385958231F14610FEC9903266E682564BCEFCD55527175DD971CC330B10

1996811F5B47A6F711E89FEA973157F0712641FAF12D5F5CBC4C44B9C172D8E4

A8CE4DF7A4D92926EB0063C306E2EB0738B316273FD78857FF5E408800E1AD27

A15FAF5BCCC4BB7A9A7185E8410136DCC14E57EE1589F1653D104FC67D864C6B

B45E9A658CD6D54DC1A48EDAEE97E724239D0687582C63F638A75B2C3EE8E40B

C9FA18F1A77691253450B3929DD063BE4D7B689BE140C63D934B02C1EF5E569F

56531260F83061A3940F6AD426C8A2EFAF386211C922B22C58F561F291A2DC10

D28D14C3C3C974E18238D26B31B62B27ABE4FB30C2C9CD50F436E663B8083642

63CB02C1AFAAB06E3ECA6BC86B8C800C3AB71870C5AED84C2CD77F83654E0443

37CE8DBD187E69B4E1263EC67936C656C0950CAFBC5628494C493B7B0C19FDD6

79171B96BB5810FD82C037B3C7174241D9CBB8AB08ECB61D33C9DC0776F475F6

D03FFF832F027FD54824FDD06E72C8C5FEE4F104AB9D20318D218C8BD1C28EAB

3029C1CA01843C7CFF4560B0FFCB943B06A4A83C07F0361CECC6B0F5562F02CA

F8559017F0F3640627E51255DCA0D4821E0A90EC1F689527D6268FA4544434FB

78434A0E8B0A8314A0EC44DC1AB918CCE39EEF60D347215998DBF798D8767D93

6571E366AFBFA4069EEA83362BA1113E115873C4D53D22A33D7BBEA91773E76B

E1EA89D50D58E923D69457E9344C50480827DE1FFAFD3AD5FB1BFD65C1B07A12

6BAF6A2720678009355F4AFAE410E2649DAF8DC79BC8EE2B543F79B7681FC7C4

92A8967CAE72D04E18F6ED739023C9ABCC264CD7E4358C7512F0BF78E594C3B7

CD0DED56D33A0D1F4AC6CB79C2E186ACA2602A9D4C24B1F92856FDF971215701

45D6C0129373BB2A937843C936ADB72329F1C160AE63A412280F5A4639036C27

7A922359B99188E5D9BAC5CDBDE4C7EC6744767DA5C24D579E6A06DE2EA7CA46

7682EE71D16D176E5E12E9E1CAAB0E8E4B1CF6065E74DC1A3DD144284207C7D6

C866BC31223B0C78AFA37B149CF30E8CEBD296E156D62F3B62F18C4B203B5677

A8009253F863BE3E1CC7B4D3C73A52B4ADA336BF93B3FAC43F91DFF01A669D35

3386FD7F3EEFA823A6EADF9AC08BA7634AEA1FAF8632F3E538E2A33723B5752D

03E50DEEA19B24AB24ACF7F995C1A1486A8BD1BADF1A3E9EF256EA204CEA099B

1DD459A260889167A43E7F67B7E1E8A6A52AABBCD2BD00DA99DC06AD75D841ED

7E09901B0D5E9011E47C2153F806C435095B938D1A4C0F238294DAA88F970C94

F28856F1564FAB97095F81B9D85BB947F9D300900E0DDC228110FD231A8DBD73

426C7817035DD6EF887F89C50A9A977AFE346FB6C2081BDCD523D316035DFD26

B92BB226E5B653DD58777D3B603FA1D5FB853C364AF070603F9DE1AE09B36F72

23781A107C9EDB86895E695F77F5CE9B0E4C2247A09D3BDC486573C34F5C9339

272873448891B47C3C000702A2B2833220A437A5841C18EE2D0961B68B419CA9

BF198C9FDA37AFB1E8C5848816678B35A7DF84C7D494C61BEEBC0A7E18ECC030

8C5A33B4A9FE905117F3B4500CC0F3B1BEEE55EB8F020AC9FEFF46011D5C4465

36AD08104C029F59A82C773199AD0B63BB8A78DCFA63F33850EC25E79B7E4324

F7E716264939D4B5296327C8BCCAD1E16E72E0BEBCAF34836D5E8BC72C696637

4BF4386550A0B2AF711593D1E4732ED26D7C743E26ADCDB65B55AD1BE9359F3B

477E1D929488B0671A260722098330486A85B4CCC7A60927CCFC28C152538EB9

B4EF4FB6426F276E2FE5D4CD1C5F7B1FA6DC0FA3D380A3963A1942F22BA729B6

F201F7C352B409393A943C392D0ADB0FE7AC3DF328300CEA5BBCDB23334F6579

45A548945791FA39CFCA8A3082A11496DA46AEC7A0401FB1D910E9ED32D0CD37

D7F11111170312287BC8D6497100C90EDD22C3F56E4650E11749EBC3D9A3C7E4

E448552B07F15F351B48E828E1D010CA6760CB08C1D5F6A197C8231E52194615

DE2FB02A20FA97C6A8505E128453C9CF39856F1C7B22E10F0A8829B1F2006BB5

52F456779F1DA9FF55AC34B28727A439E390EBDB0A028A4DBC0EAF85DD924F79

FFEEA17D4670779CA8CD099E4895032E1557BEBA1237662F4A1944BD7660F1E3

153C5B79E68A86FBDFBCD5F285D0BE080027875680B365F58B0D19CE530D2B4A

F34B182F86F9F5179055F6CA931AB292F5A6484D6C36E52C18038FBA4BEB2C86

C4AADACA0475B41EDE0BD5C26D052D4DCA8EF9DB469BD6D4BDF4F0D0B9BA6A74

044963BC792BF2B6F0390518773A000CA6B90A4E32D0158B24E136CADFDDC4A2

8636EFAAEA8FB45693C1084ED43D830BFF4413B7A39431726FDDCBAC7D9B62FC

294346BB0E1D41E297384C7C026E2C8372BEFA9F70FE45EF6063E6C7320655A9

3702992E36B7E7FE1C6C5A421AFDF7D01DA850D57432DD7F180FA08A1AA36F11

F060EC05038004459D5B3DD62837D479703D610A65FB9C621B9F16AE7D9B39C2

B550B2CAD621EFB719F2E65B3AC345BA8007A7D2BFF7638DDE8EF59427264605

6D581034BAB51028575A73B7B34C17114183D08079C41D7338F152710DA1780C

AFF3E5D7A61064D4161AD79607BE7ACD910FC3723C28D51E63A2236079B60730

E7B63688B113CEF79C181E54DA2D9A93A9238A2D2DD6C7B942451FF3E0CD704E

132CEE39A6DA43E02312C2E82534037EBE8C4F401D09060B3DAA300D9E020EBF

CEFDD4C14820BFCBBB5C8940483A0630B4F17047457FD1A3B01EF0B219F4310F

60233CB5EE7FFED48E34B40B96290CFFA8DB1A46FE1F10C9FE0C2902AA2335D6

D2CA41F5E19EEC53A2325A5F8DC4E24E39565FA8B695B1C05D45C0ECCFF1BCF4

AE08485EB123175A7DF42D541F7F9B57B867433181634658FBF3B933F79EBA9E

057CE26C9D2F88B94DD04302843C31D130D5481144ECDCE051C057BC75B9E718

A65A5A1674A7CDBA2D301DE2DADE657C4488DF1DA3FD69BDC67F9E48B1B88868

BFBC5009F4E842261E0475CA834D689095F4C99834D3658A0600778852167191

616E2C3A059845CD219C7FC4C19D72078CF50E913DACC97D66FEF7197076BE89

5E0EA91024BC4EC9D1CFB24FCA1EAA3F7BD1C54518F46FEF833C451009A04427

46F0524AED60974AA60AA75026F1ABDB8C367994EEB5E10AFA91D1D31DC2D8E0

406D703BF52E94E18BEB403705D8066425C9779B86B82361190638EFF3C9F43F

BBA51AC0BF811AE37D1DE0EFC9B85498E1294C01B44D2A981325718B7B302D77

1C643FF1B08DFC5C607ADE16171153495EFB7FE38EA635B84EF5715A210C4A3D

3685CD5DBBF32865CEA0D51B87CA2D9A7B32181F6D2F0540F04CCB7B3B6BB891

A97CB9F4C6746CD502B763E2BDE7B6F352B196465283ECB6EA553A859AB4550B

E16493C2C84C8071EB024A80BA305B01E1C7FD2BE2111FDFE69743EB6A547AD4

A451805F55011C5B0F14C5CE211F4DE6C9B8C3B9AD5C0CD505F1237B2DD78E35

4DA154E04B9DC8835F93AD5FBE578710F72D92A7A282FCD5B516568CA2FAE6CE

1EE2D6F654396AE5051FB0C84144816179DD24A5802A8DDBD008F2BE6AE9ED0C

2D8B2B734EA5F6F70339C1A3169A749583FC3FE28DA42CDDBA67B8A27DA2857D

BA419F3537A4902A64E003F5A61129C1DD78787E6A102DD0228AE45240E7D19F

7D7C16798CD0DFE529D5F4BBED61E0E6C340D5B030842228FE9F57C142A7018C

2F0030EC1E14B8599DB5F42D1407DBB9C1AA3EA06C2666FA6304F2A1A55BEBF2

23AF5DB95536712AEEC657F239DC5A38B7C704F59F65CA1298379B3AB2DE4EE4

26D4A41CAA1C34CA3DFA832216A499E0201C2C13712DD8AC5E2A36F77A127FB9

F538EB6BFCCA11E51F92854A4AAF05B0BF67BDCF5ECB66248196A1844EDD10EE

3DBA055F7C5FE51BB090AE2CCE09C083D81FD407D31FCCE3F3541DB330564B04

C446CF656BC9C14A4826A13A4B636AC9B0DB73D493459ACBFA1218A1CC89AC01

C8EADAF2CA1384EA48B6ED9ECC3E1571EEC005FEC4A275D9C130ECDD21C3AFF7

DD4AFC65C184F0E213DE1D87485D6DBFA39FC0786AE66F5891C128316D7781C0

8633AEF48F31CBAF28B5EEECF6E85727E86610EC0B08939B26088E20B215FA20

22EF39E181BFE1237505FE017F7F634D16F7001386BFE674633BDF9654DB8632

2DC3AB1BECE9F1FB224420EE3429578368BF243EA9146EB919C23F0142C408AD

6DD9C073EF76C233FC6B5BABC3245C9FC33D3DD40483C51901022BE8C869722C

99677EDA47C65CB64DF0C0422C08B00DE3E7030F4145759F8917C821348E77CB

1E79ABA1124B3BADF528F1BD9505BF6019DEF502BB0C36FE533FC484B3526DEA

2BE172A377C0FF81CAF14BCF29E36B4BC47957A53C82651D56DF9F46DDF9F5D5

821B810A301FED6A840BD4560134B36EA750E3D4303C22F6C628C6FCCC7740AA

7F92F27D4F395D9EDDD20DF08829D792E4695A4B21BE5566AF24E5575EF8D078

4287A2FBA82CECE4E1E2FD4718ADDE7A9C80484091DDB1E6331D7F3A6242313F

97C4079C4B024E0218A3159BAE03B3C49B471D96B8C425A60BF25B5B0788A0AB

A6C9543F2067E57ED21B7A41B9F8C572CC808F91935A5BCDAF239E89384A3E88

8AE5E424E389E97155FD22555067912E77F5B4CAE4140F288E5D420C610F9490

9BDFF0FC39C66A58564222A8B471C16D65A2532ED5E3A57E641105FCD14AE227

F20B0FE6210D84542D5A01EEA93EBA25339DE24740F695158C6A4AEF611C261E

16B11BF888ECAEA374ABED90BF366F6F15205DA561261949C3A438632724DE17

55A4EF4B825CC364260EB4B7FB1029D2F993E228E9D79346A612378F36E9E2F9

214E5720604B5F530D28D8BB1587D4854D15286786117541259A5ADED3A615B9

7A0E67D6B2463D6C81121924FEB4DD09F824DA0D7EBDDBAE70BFBD430E8973EA

A505E499EE2232FA69E5AEDA6F2E8969E6E6D0EA8EBF9F2BAE5E93C859E5EB84

C9D147DB409337DBCA8EB16CA684B1BC212C0809F18A4BB6621FD8351CC59722

719330BEFA0696EE5396E44D42E8D174328D91638744C66E051C1B4FDDF01D7F

115E88ADB02E753E781F6D6AC51BA9EFB41D9FE136DA0C7AABF775F18A343092

3946A077F2B9E4AFE739A7899CE272C80DB9FA53FCDFBD610B408313B7B61BF1

5344C7A8E6553B88BC17F90E0AD568D6F049E52429AAF9A71B667990081360F5

3E94E671CC7CBCEDC937E0A76FF7DDEABD108A5355D9E676F38EF713FB09A2EC

D32744399A502AB872A7CADBA1BB06BA6CAAC6B7B92C04276EAA35CF5D36C4F9

E8F405F3359F97F6870ACC74B6BC8BA4FE3770B6F1A27DC59202D11B015D78FD

5B3CE833C3FBC851CFB8CD0AD70F95AACE1691CC0135E0D0C8E01E49D27F4891

F1267391733532ED5ECBAE6085F9FF6154B891AA1F328BB9CBD4BAF568529D0F

981EE7C011E95C69DAD4C69C3AFBE26C49958F389F6B60F52FFCD07DB380A00D

48CC6BD3C903BFDA7610AE86F9ACD98B3186F04598838613B5EFBF9FBF9F6951

CC654822963F44DAFBAA38CA23E1C5F40CA41558F61119C86565ABD50526F321

18A7CCEA536A643F14691418C748E508AD53EB1FADB683735A4835E7FC44335A

EEAB581F3F0299D98061693C32CD6982E2D9E82A04D77EE3EC3434E62DC20DD5

FA7AE5EAF5CA2F7C12D46915381A963017E9DAD71DA5BC4D096A12799F580B9C

118909EDB3869CC2CDABF17D740C61AA8B6715CA89FD42ECFCC37F7AB7F4BDA7

B4F46E14133E58B4FA2B4981C91872C061A78AE36327EC85F2AD7170312C77A4

FCE0DBA0985249D20A7FFD284D3F731EE756B52BA3575DD637C91C968C4C605D

E4948C348D7FB679B16B76ECF6CD5A40B26DA4C341D913A1EF86173A4B970B80

D08F249BC1E47A0C634BA4D0B6FBAC5D282AF9EC9E6444CE1613817DCC5542A8

C474546AD1880055EEC308F5EC0AF5E3AC79BE17D3C8582696583FA0E7255C45

FE4F031A9949254A2E1E7D132C7A38C713D956F8A2CAAB4ABF080C43ADD777FC

8687E8B3F06EC4472C5F0ED63C717C7C67F74CF05EBD17A57A72AD01C99A1786

3F554FAEC262705A9CC443BE8D6A25EB4212857E9B9CB294686D2F181C606D85

507CE26743607B2B8E9F3E185B6A642F76AC01D18DDF871C397C511E712BE246

AD3FF2AB7BC71897E8FD514D95C65C4B12CF665D840B48B9FD71B264BC22C883

F5E684C7F0828DCF950AE059C023D137CE3F847EDC7E19A356BA0A1C6121D0F1

FF31B5B01E910503A1D6FB4FA84998F196434BABFF29CCB88D2BA4222E462540

6DB080C6E7D2E049678A5E6C5EBCC3C0D6620C4FF37E615840324F102F1BC205

1E1A2EA2F4B2B27709B67CE03799E60FE1FBD74C3107B0B9CC3200AD3485BFB4

A4A12B968DEE731356F612254EC3AA0386800044A6D77A6258D138EC1D45235B

B1B92E1A76ACCAABD639EA81271B0DC89DE67ABA60AD9A17E982A104ED2FD27F

24CE30D8E5D41B472275A892437F84801DDD487224BB0AB94F1F9103B03421CE

4B3C496A120F80B2C06062F1B727CF0DB05B38168252862B41A60ACE43D2888E

0604156DCFD61A133B0C61B4B69D28D943F874650AD7A1AA6E235DDFAF5C4EC2

77A20860FE2F84F7D880A8FD8551CE08DBBE47018B5DD45D272D3867B3713E53

4D479AB8D052D599FC1A0E7E554E01050C49EFBB8409F62A9EE13A5AEDCD3647

148514B87CB8E98F3A8557F85E1D4ED8AF90D2F7024805A4EF1301F5A93576F6

FF86364A77C2A1436B303D7F1FDFD33995BBED292EECC3DB2524D05746FAC76F

EAEAACCDAAA090482581F2172F2A19F5634C2D96CB9B4577A732DBCCB3DD29DA

D55FBF584D64488C26DA2595E5E102904779968D2722B0F7AE688C953F77F54F

C2F61DCA294A5CAF12E819AF0749DA0C85FC75D1740018D4263A4C8427A648C1

318242DCA7D1B2CE53D3604124B529CF1C1AFC3FCA09BF4389E2F4B411193789

58D0C4563E8B3F9965F0BC9182FD3BD34E1BCD783F24A1E584C61418EE88EDE2

1B9F4E186B4B783E9333CB398A3454C3509057BEA8C406CF921248107B3075CC

142C434FA999C241210CB3AF8D8A2E5428E83354FBC1D047BD54CA91915E979C

9678A826EFA81D5F1972B5B18910A5B9DC3CE7800845C70A2C0B53FCAE184A74

B615DADCBEE72410F07B037912A1EB3E405122480DBD5B6213DE7E0151C1857F

4D676D27DFF10BDF0F20DE9159AC418571DAAF978CC48872C8706F3F50EE7605

3C09AD87ABB32D22E34E8623B08994F014DD7AD2475130EBDF25B2BD11B9DC3A

A8673CDE930270744D48A037651A8613628CAA814B75F4DAA2F6CCF0B156608B

E22F5E277A648497FAAF9F4F600ED85C8B4B3EAB7D0AE7245C299EFBFF80D59F

B98AC4344003E93E1BE8313DC75CDB72E2B5451FD024D958D25F84811DE6EF1C

F32B6633C9118C99B461CB350D590A07A45D70BF07B873F4F66B7E73C94B6D2B

4044913A2EEBC57A90E718FBD344027BB50C55A0B6C5C35BE12C6F8F2863397F

222F69A03202E2DC565FA47D3D2133C7648FF568AEA872085B76BC686F342537

A556C218DFDFA3DFF5A39B6539D7191859A9ADDAC82A3E7625F206390ECDE9EB

E78488B9DA890290270A745EA6F899589F218DD510BA59BAEFEAC512761AA6A9

E895D8010620257FB2580E1D53D51E102D2781C86D29A25B372CC3955813E2C7

DE1150D7C3CCB91284582DFE0C0B468D32DF60D56AC2F7A5437BD96250F30910

8BC47B1DDD0B53A6950D701068B7B087CABE8B01D3E372BB384B1187F676B5B4

62DC828ECFCE4B676C3B6F62E526FB3B1E9779A074402145691FC95EC4119FD9

1CE47E08909F7BF29062496284169710F05D1264CAB0F9599EDF9D8244471EEA

E3A2CF8453D252047DC902A10828D2368040D9ED0D1BA0B08A0C7CB4BCFF5572

0D1EB90F9D8491DB47D88ABD0FFD345CD667C30EEC385B51438AC4405BFAF733

52FB7C93920CA509A971439A4D2788CDAEFFD8FE8A0DD7233CE501E3B6A0A70D

5A03E4F5BA384A3BD7CBC84D1ABC1653FB01177F486A70E8C9E7D0DF3F18F283

345D7EA5B8C8F1D5A4C17CA15BFE4D5F95159A274CE612123FC552D63611BC66

81FB4A7D78D0129A9243472E2A6658508F6087A934727606896267A62F0FF471

5E0B64DC2342F75ADA12380CEC1EF69AF56A7E67116CFE6E2857283779EF6B7F

3428E9191CD9AADCF27CB18E416AD68DE6FF1AA86A94B237B55E95C13199278F

7A27CD93C5F1DABDEEF74F227AB41113FED946BBB71D398C9B84E0842327EA7F

C6FA07D3C6F6BCF8E33F50F9AA6D9B23F54A9DBAB9A20448937403683D81E497

FC4696351CF13FD07D43687D7D303D4A1D212A88E2E26F124954BFF07DB2210E

408F4CDED9D45853D3D987AE9B0E084ED7F3552D0F93FCD96930F6B34108B2F7

7E73F9205E15519F6B738DBBD5ACEC7CAA6C5D4E5F184C4811E04D6F0E878E14

F7A3D3B1F2E973131A147F7C3D6334D1B69614A2D17F02DCC21C975FD4CB7754

7ACFF78C09F20EB5B78D03AF52ECBD94F1D5AEC078CA4FB998BD7BA620E5C11A

0296A2A41076881640A416872062411C44A7437F8B9FD76222324A8115F7CD8B

6A501DBF11CDCF948DF3CC2A718627ACA5AEAE67D64DE557EDCB6A32504C7399

2550222C8AE4D4569F51C7F55E35D152A1A3A698DE63D70494084D9886AEAD55

A3DCA770B9C13A21B8E49F7EF89C5D17F5C2F2DAF8ED1CBB4091FC477CE734B1

A1FC322FFD07B0831CC146D073A73B92E474C989E1695BD6050B1CD88C5FE76C

2CC5C325311FB9FBA2B9545CE5C6D8D3A349BF6F6F0AE11FE5E0318A51AD0FAC

9B8B7835065ED7F2FF252CF251141379CECD989655E4B36B13F0D96A284448E0

088A9DE8DAFB105D2BE722619560D6D0FE01596D9EBCC61AEB5E0D90EE583185

9A3531082B7167C146E3FA8711149759ED39FC10BC50A0BC2CB4DCA68F2AF98E

11C9B6615A4C5325FE6BBF87DFDAC7E503D751A3BE03E3E1EEA726F2C9B2C4EE

7B5CAB0A53359638F9D25F0445245138FA4EBD03E0B21C5A1D5EC0F66ADF5230

E023703C4FF6025E9086EFDE35F232AEDA9B041F93D5D1652045808AAC6B29B1

9588487385560C9093B9B6035697D78C41EF1A40088F7A545A6C0FD23B7A03B1

D87F76CE088AF1BE5418AA73432682A0C73FF5347BF394C06BD3E92B8812CF78

192B435DEC992D542288A195E067D059725ED86BD2088E63AF04F7FED6EF1463

6AFD405572A64DDADDA8146160DF7D3A4FAF30130648798B4718E91D599F0043

4CB6CC4FE93BB5022AEB74DAC812BD88C3A726C5D20BB854ACACD1B45154C660

F967ACD660EAD6C7E81EF8551759D2098D3B483D885498CEA882A23A3B1B8616

E29CF286DFEFF70D0D7B972CF1FE259FA8599168B8CD5DBA8B615420F4C186D9

411FEC7D960B8E80114C07612575AABCDD62DC3E98053D1B29A81BC9F7742262

D3B121E6C10715DD47D5769D8FB25E9FE9CD6179E7C611AA629F50D542D141BF

D5010749A02CDE9D94433B03DA518BA2CEBCA78D386BB8A5FCF05BEAEA4C5DE5

748F28A039235D42E70E969BCF0C68D13B4B50236E7A743BBAEC0C87B2F8A99A

D95A4DBA6E61E28C768FE6A090E904EC18F4DF848362ADF7D3E897235E22A970

D82E9A238B14A3DABF63E4C85F106ED913109389E15597B75CDAF95DF2AF0927

DC6DA6941C363224B2D0615A3795C5B7FBC2600B433BCF8B3858C6063B8708D9

F629A17FD7DFC1F0A8C7EEF70AAF9A9EAA9445A8F6130F936E5C38CA21DAB282

1747A01194C4AF122347202380718581604C9736BB5BD0ED01A56C86C774527C

404B20F65B7EB3A75324AEBDE60A983E295925F73C3A70525D12FACF690B6AAD

531EE0E1EC6303DDC031492D31E3B6FA639D25AD93430BD4B021FB64BA36BE5B

ABAB0057FAD2741AACE1365C596D69F9AFAA29D666FD2A180F0A5423AB8515D5

3F70B5F36D5EE1F64E3E61E20BEEC73EDD428DF69AEC57B432D0AF21AC7C4B11

BCCD2DDE934581E4BC66724ABA40D1A83DCF4C452F9E5FB7CF886A02DC6130C7

54BC8C0913F12FE69C0AFDBB08C1A3211657705C04C923F48D0BA048F300AB99

EBB6A7FC5C775032462315C0779752C903A053FD14255797B3D8268BE05AF1A3

F362ECFF000E3BDA2D0D860494D894390193AA23072B1B57AF4B2C034E3A17F0

48134D93C6638EBE7EC46357FE0B8E97830C5FBDEB05B808A07742D61AA0C655

3C23DF9829803B7B1C6C047BE7753334297953158389FA739B2A381CFD05C972

24F19E283CDA61A975FC03C191414C106E18312EBA9DD69E67717549A13FCFD4

88E654F93CC9D4CC079356A88A51140124B4212BF6B9F9603E2C48D64F052DE1

7A0C7FB755F72BD8D9CB188CF8FD898EC24C1188FDFC62D373F274FA5F2894D9

40BB26F33057778518DC53FA715AC0511E80AFB4BB3FBB7244A661DD4B57D1EE

BFDF779AABA9C8113F2D27D417A12420BCC5CBB9E5328F26A8439195BB157D7D

00C3A144E9589CB626C5982CCDCBE22FCE5162D1B5B0FA49605DEC14620818E4

525A1DEC33FEFB5919FEB05BC27C218237CAF169948B53CB66924580F454806E

AD5D0ED48B5B5DE1C51872471C3D6D68DABDF4886010E1BBDE7FC69BAEAC29AB

630D3A9293A4BFD50E1DDBCAFAA00123D0B27F895D83C8C7AC7F8FE730C56345

40A89A502669DEBDABC8D496D30E6339980CB7E47CDA9CA9A65B24BF254246B4

09042522DAC7BB3998B6930B01FFEC51070807FAF6FB6758C1AD4B256F7EA1A7

A0D3F00BA08A824D485A03523B3624BEE482506E0A576EF46EDD09F4C8F65D75

3CE097448FB0579D896A3D498D257CDDBF3109359317F5994DEE8CB758150181

0F378D77860F0906C81B9A84E1585C4705BCE844FB7A55FFFF92FBD9CBCB326E

CA101FFA15048717DBEE1D77BD46ED4EAC7DFB7C0B5DE86AAF2968A62C931EA5

B2E6E5F92B4D5E313CBCA23B4EE1DA1DF597AB6B1A11ED3C6A620507F4FC3AF2

C093DC6F03BFD45FF110C21A3030FD4A781360E08667471B59FDFFC63DB69D68

F0DF0425067DD81F6B7A8C8354474A0D6EB511447494EFA021E66F6FFE1311B8

6D9948A0E650F8C9BCA45183FB07F9143889943749CA8B3C2D2C0558A8991A46

E6D86FD28A094A4CBA6D9976BB86FB9F3E848FD91C9339920B730BB6670629CC

8972B0A5947CA6DE1706F7DC8399CBE22A6134241B77B230A20E6C33CF8E593A

3C6013AFE418E74396B6DE68AF2F0489C61F7D910F07FC692E96BF0B0AC2F080

51D3C48E7051091416FF818CA4D5A46A41FD019D5ED77B31193418FD08C160C0

2C05E9E1E380496A42755061D66E621B0418053991A8D6356C3BBE4D22A9F90A

6905591A8BDD58AF0C1E72F6DFDE64769EDB5154BD916F6E9A60064BBB222E0C

C847A0A591119434F7D289464239BAA3E0F93C09F0F2C5D921478AC655A51EFE

0E6E1E2390F94C4F553F01D0900FA4EC03BE30746308067B3247D553C15B3ADA

6A9F2DBBA5316A5BC12ED82852404496334E61B3E04D3F4D5D1C1DEDBAF1DDB1

C39C1681CD178FA8D46A6C067A9102369A73F8358FB1C18B91B6A6442E554129

4AAA8A2C12EBD4760637D41799BC297EE82B2733D3E5D5E63F5B8C96E48FEB04

B95DF6DBE90653B8DD27EE3E396E220B3351CD9619FF0D654D2F6E5410FD41DF

9A57ADE96CCB4913FE6104ACCAF9038E9CA602999CA02AB6D9846D4A4AC4FABF

F57A0E810D009DD3CAB8F2450A314AF51B3E71B881F3FB217C22DCC34C63E696

CFAEAD27013C8BE9FF0DA08D76D546F3448EE45A1F99B8A4375C7618798A5FF8

58BD23183A051C1971C848802D2931C8C1AB49AE2D53D968386BC0A968DA87B9

196466A3A217A973EF54D494734BD59847889E8CC55A8D7F1F4A0764D46D6D4F

C5CDB1B74E265C0F67DC6B232480C70959412F24FA34A6D84D1595F8BCD51817

FEAF9684C8EB8D3FC9191E6E1524AEBB1D53A08E31764D90F7ED789BD1D0A7C3

5D9CFEF0858D0233D9F6243280357BFE484A7D902FDB2FEE2E601CD856FAC562

14BC4CF6AC87DEAD0BE2AA21686C69ABA65C1B107048206E40C9FD0B17931F70

310F47E5B4A4A7DD586C359E8459CDDD8EA0D8BEB0BF49A489A477A3D966C613

F1CAC8FDC61DD21AB0633CF2A689E49879196D0D86D370280F95FAEBE6532FFD

6E1DD53B532F1CD5FCD75490CE993C278DFF79EA9FA9A56277826FFF850A495A

2BC43937A89781A06326929E92D460FCE9D67E0BC7F1E684F15025E5E8A785A3

1BD4820625D06F796D8FE33D640742AFB428F19CA4E8066D22E61AA9D3DB0014

0CD14D6CD7E64EAC714BC11C4D2AAE243F9C3C0B0E2EF922DD1D32CDC4AC413A

D3DB286DF713ED0499763332BFC8D28F4FF38702B1DB1A8670B2841E5809CC75

D3A550660768BE5BB22AC458DE5812FA8FDDEA40E0B7110940C866AD5DBAAE80

7989347D02D09BC40E5AF409639235AB4C36D70FB0B464EB449347DBD7D2532E

87D0215D206C0F6E85F735A8429F449CFAB20320FE52C2F2931F5D2F71FE412E

2B8C684311B06DE98BB1A292AB7C104E27DF53606800A817F0C291157535A3D0

B81139296CB375BC663820D2EB7ECAE5E7DC982254BC080E930F2AC180C9ABD9

A1925F3F8D091344DA76EF0002C41015B2502BA9A3945DBB63DD239F9B5F4B32

EBB0D74A702A6B59C9BC5788D7D5F306DEF21B69A740B2AB5993CEDED97B3D3A

FE0C7AD407BC2404E00132908C435E927DB605CEF01D4C4F02F62C24FA48AC4B

C7DB98FB95218893E15AF32BFACAF14B640DD1A719813396016B3D2D9504E077

7ED88128BA2612E7049AC1CC4796D76AE7B410EA5E383E5CA795F4FA16A25837

CA77D296AAA2F9327A2B196AB7053A692E5639D1064E390E6B5DA303D78F2987

95C56B5F98A27DCB7A322D0FCEE33238F43F374228EF5DE61FBB70E9147B02B5

51CE9072408992191371D34A2949DDC4CFE612C2D780532B8BA7F2B3D6C57894

033E72F28851572717DCC78D74CFA6BAD4AA6A157203517854B16F041D084601

85EF8AE7798D6ABC2E5AC7370AB1F97B48C388F27E12793E0C6149EE9A087680

09D4DED7F2B1D1DB525321D9215672818C1B139B7A3B0DFA62E61BA063FE967D

383134508B52465035D8273AFA12AC5B1A577586CBC8F8D45DFE7D95AC2CB8E1

45CBD2E1FDC15A307EE55166EA19E9F564B7E3044B84F6B0DDFF2ABB18F6887E

127461D195140F066EA43DD14D70AD1703A127CA03200339680D22187E92157E

43E2934662FCBC86A568DDE6D8E91D421FD4A856D1FC6A75325EF215B9B75ABA

4DCDB60DF1579557CAC79344FF64531843BECDC7F92F7E85A4C9F491A7C9E996

AFF0D5A32C4D83CC75DCB746FBF98A63BE1BE3414FE0B529EA7F829782DE0C6F

867E2DD63068FA4D7D7C1AD8664A5FE2B663C8E75D8A28B750D53DB7C3C13342

D19EEE77D94FE0DBD2445C9CF953D94DE4B10FB1F59CDA61AB5BD37581994E6E

A05124F05B92B672C7213FBAAB5DC661D4136EC07529C763BF8A187643445465

16BD1A5F0B1D01BD4867F26D3A2BA621F79E30B9068EA3DD7E526E4C0C6847E3

0847F70DEDE48699CFA6B7363467FE714B88B57082F7EC55242B1FBB6707A2C2

4D88C897F6D383CBFCDE4CA2C833DF5B214BC7917FD3045822E5835D80F7C753

96DAE1F1FD5D982B51DC2E32E2389BCD9515198A064D08AD4BF618850A44BE25

737741A2883EF395F61FA306CD3025671330CF5A5EFB6CD3C78175D4EEB7D601

1A4BE4104F7588694460ED14DA61652F00B12350B3D444812F5E396A5D9F84F0

1BB4FA52F9573161E4EFD3EAC1AAC770ABEFEC06A6D4A237AE497D8AC5602064

235EF826E4424A8537A584B47E1703E736D15A1B8D6141F747D35FDF9015F83A

384DBF5D78B612110395C6357622D9080305BD2A1DEB2645A2435CBFDB3FC773

302EB41266A13675CDF69D88821DF40D0E748996900E2F22ED21C3AB5F7FD0F6

BBBE25B7B457296459B9B99962E95A702F6B3E464AA9F23D64DD217A454B4D80

B695BA3C381A6AA72BBA311492B6B3A3F8358E5B0D6E9BEEAE7B264165ED0AEC

BD5FB5050B8FDEF8408A8C299DE0C8527DD7A072A2C53F6C935CDB652A35A9E3

75385BFD6CB1D59F36CEEA467D21864F1A2819AA541901BA7405F0D26B126032

C4164686B651178278E245C96D4A7B4F7ACF19E02CD292E1D6CBD67EF921EF60

CBE657631FDD9457754899A015C95FF9F648AD91DF1E46A2D890E917B1146784

CA306ECCAEED84A39A0D49013BAE6B1DB07BA6C939846D66AE92E2B8A31F4E28

72E3C66E74CD096FED17BB61EBA6F0E98CD88ADF0F17EFFC326661AB0497F79C

3260C300F91F2630793B6391B65E311AF2544431F5DC2F335851B4BC9527A1CB

F957F11DC6BAC034E46BE4F152401DCC7EE9EBF7B8476D6E5A2F0CFB5A894E05

BBEA5C8A0A0FF07A020D1F20EAF1D24EA4C7746DE43F274E4144047D1330D7B5

EFBE9726DB08C0F9EB64E5B45E0EFCD29C63170154F32460B9C65DD4DDE355F7

0CBE29FB86ECD249EABB3FE4B243F08ED0953D0D96928961DAECDF28BDC7F3AA

15FCD4C73BCF2097C66C7811A77303FC61D9CB83DA65A945FEBCF76C866D733A

75541AA5D784DE2B0BB81A2A56177BBA7E161D42B651C8CDC8EA0605745E9DD3

7964C5D714B49CDFF408C40D302EDA8A22C523FDCA0E0AD0A3FFD95DE26A927D

52D7CB64101037B3B766392D9261742309AA16E5819D0D3D76222E772EB6B7F7

12FC576C9460750E86296B415277B5B8437F025946E73ED459D18151A7395C11

9881AFBB21431256B8E60FF22C208259512851D64A1BAB61E50E80A52876ADD9

02CBD7E5CCC980CF6DBE55F0E41928957C506BBEE4A0B3648FD6BC395B458744

67E5BD661D7DD9C87C204D5218C8A0B43985371A93C83281A7EEEE1848124017

AE014AA7AFEDBFFB676EC7DA0D24A1DFC783CF03DA7DA96E093D10A357BBC2DF

71DDE845062A76BD97B7779E23C660219D32CB732BE64AAAA6D26C9E5980B058

9CF2BA7B6E184EDD26893AD81C11A0BF8DC3E7933106B956A08477C5E9F08BC6

04FBD466E3FAAA8C719EA1BD391AAF3179C26C62B53CC31F3319A250B5FF0F38

5262F4DF259644A5C5F11ECCDAF769369A67F28EDED1B73CCFF127AE42D86BB3

791FB741ECF2F1BA3443EFB5BAB4F2CB3C7FE7A86853553B761C0D7797A657CB

D15ECBE0B3F4061A8F9E3F5F50E93D23564A59CC2ED1974D74F5BC92E7DAA307

858B75EF3F97CAFD65D685CC9EEC52E7E4E309CF9AEED9F1262F025A65C01FB3

A5FD4988D37F80D6AE73891DC237A41EFBE963E8C2CABE36D74B0036D61BBB2F

10C49998F66F01EE8B92A7A14037B31D0E28ABE15F33ACFEE68DFDC66573C386

B9B65AD5FC7AF9E10E09DA3B1257EB59100AF82638400A59D7975ED2442B375C

9D48DB287220D4DEF0E2FB9101A2668294CDADB8F0163E64B0226D276B519C58

1C697FD590D6695A1C55A0A8225FC8AE2A1E1E43077E96545789FFE01A3B8A23

B71309FC77C877B3D1CA6FFD4ACF0F6E82C07C7CE0555F7A2F1C8B4F8FF80DA9

D584BC6292312ADDAB73D1029639B8B2F153D9921967FC99498C152E282550CF

85A35637C02FD67BC01C73F8C307509E1F1DCFEF69B3C2E3CC3C8B861B0207C5

8D6969F50CA9C412CF9153E055D55F3A58962D6BC9C50907008AC1E70232C2A2

8437C693A56B008E4EF1F16BD3E28BCA59CC4F4EA4E6541D142CDBE8C1D18813

337F0F0BCBC0492D12140CA9686C73D25E50F03353C79410BA389FE18E87EEA8

D17335FB2244474A2BA06FAF1FB42D61126979B1658172037337FC2A11284EA8

F5F7B058CBFD27270509BF90DBF528F6A3AEDD461D8C7600D895C0743266A58A

A6675CEC62F0BEC5BE5D8B7A10BE473B655C17744A2B4F56095EF57E92F1D52B

62E89FF658B372E13AA5F446AEF192EE3FFED2990934F5DF4725171212086F87

93FD40F55011557730BBAD6870B57CC448276F5D6C6151C7FA513FBFEED1F5D8

02508E7E72FD15BBD77D48F4A8FD5F93DF1607B7050D41C57DD3A7B73754053A

36A60CCF4CD26899D47DC9DFE3E980D6CAB48032A7C4879E258D45D60F658ABF

C798173AEC415AD8B849D84484DDC6FAB846FDC32CF5E554E1C2F7347FC71927

C2B840191FB5C8F6352DE448E7F8ABC35759D81A1CA910E515CFFCCE1B6EB587

B1751772070755A779B1BD248DEBAE654BAD8A7D72943170423390F578B5352D

C07E147648675DD6E730B839E3797B53BE372A951EDC47CF0B510C0C406F63E6

59BE1A3F90A6A793882EAD64248CB53D33EFD7B646DAB80FEC89D0797E7647AB

F991920545990FB82AA0FD19582D6B879873A3D23A41737F3946D56438F14653

D198235C7A3B00165177CB2AB21A2539A8EDC1DE6582B78B0E44A9C187FD4F6E

4222D6C36D11C1C8BBC610F5F6957E5FAC1E09526CC3761239C5E94FE3CB3796

C9C8455A220E01ECB4FF48137F34C9CE85E4FF3F9E7DD832BF9568BF1A1C58FD

ABF9C951969DE8395299201C1878345D6815558B8EAB897FF3A4E32F4762682D

44ED3FDA9EF055610FF92DE12E59F86729F5F939C1F09901B59C3CFBBD167F09

8B752E7EF74CE004E926BEEAC72C1CB9007E2AD0D2326F2EC6211673BC0DF74C

5582D7037E42B69AC95497B88BF0D51C6DBE36FBB023DC98074EC60989D767C3

D0EC73CD22BF53929F89F8B286F99E5A890D136E4A338CC7A5A23438448D11CC

6A074D31212D181420292C42559632849FD3EDDC25F2E3468A652FD2C6B380BF

9EEFF8822714D6BB476EC85A2002A67EA7042F62F764D2E9676EB622C133FC34

B5A5439941A9C7D3DA4A24EC3E85A72C181A8A7546

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/VTTDMA+CMR9 findfont /Encoding get

dup 0 /.notdef put

pop

end

/VTTDMA+CMR9 findfont /Encoding get

dup 0 /.notdef put

dup 11 /ff put

dup 12 /fi put

dup 13 /fl put

dup 14 /ffi put

dup 15 /ffl put

dup 34 /quotedblright put

dup 36 /dollar put

dup 37 /percent put

dup 39 /quoteright put

dup 40 /parenleft put

dup 41 /parenright put

dup 44 /comma put

dup 45 /hyphen put

dup 46 /period put

dup 47 /slash put

dup 48 /zero put

dup 49 /one put

dup 50 /two put

dup 51 /three put

dup 52 /four put

dup 53 /five put

dup 54 /six put

dup 55 /seven put

dup 56 /eight put

dup 57 /nine put

dup 58 /colon put

dup 59 /semicolon put

dup 61 /equal put

dup 65 /A put

dup 66 /B put

dup 67 /C put

dup 68 /D put

dup 69 /E put

dup 70 /F put

dup 71 /G put

dup 72 /H put

dup 73 /I put

dup 74 /J put

dup 76 /L put

dup 77 /M put

dup 78 /N put

dup 79 /O put

dup 80 /P put

dup 81 /Q put

dup 82 /R put

dup 83 /S put

dup 84 /T put

dup 85 /U put

dup 86 /V put

dup 87 /W put

dup 89 /Y put

dup 91 /bracketleft put

dup 92 /quotedblleft put

dup 93 /bracketright put

dup 97 /a put

dup 98 /b put

dup 99 /c put

dup 100 /d put

dup 101 /e put

dup 102 /f put

dup 103 /g put

dup 104 /h put

dup 105 /i put

dup 106 /j put

dup 107 /k put

dup 108 /l put

dup 109 /m put

dup 110 /n put

dup 111 /o put

dup 112 /p put

dup 113 /q put

dup 114 /r put

dup 115 /s put

dup 116 /t put

dup 117 /u put

dup 118 /v put

dup 119 /w put

dup 120 /x put

dup 121 /y put

dup 122 /z put

dup 123 /endash put

dup 124 /emdash put

pop

%%EndResource

[/N82/VTTDMA+CMR9 -1 TZ

%%BeginResource: font UDAAAA+ArialMT~8d

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /UDAAAA+ArialMT~8d def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69AFD5C814A372AF455C4A99B19E1FF14974149A341EA4612524B39A

FB1720582B4081668B4FC51F42F7515D851BE9C2DD7C10755A5E80CCE6E6AAAA

9A8EE3041BB386820E0F33336E657973EB0CF6DAFD87C28CFFE01C7608C1AC0E

0DECCA7DF9EF34C753462D61920949E250ED5A4B1D1E50206A8838FFB984B097

F5360F5F5F026B1DB66728605D362A3C043F5AAAD1FB12DEF1439EF72F585242

9DB05F7F0FD43722137DD680A7AD2A3DEAC8E30029A757CA04FD13662A3BB631

FF03F4C0BC4BEAD7DE0CAF81EDEA10C7DAD5DD27A134E89CD86DA8764052FD72

68910D348D13DECBFC295ED27A04EA471CC789D2D9D2C55FF0F55F0BAAE1D8EE

B664075C18E64AF45E3ECD43146B2034FC0FD30C97BD303B3ED8EF563BEBD476

E9951CF7F95FE5C4E26D8C2E6FA772D0ED5018CAF9E1C497A1473AC37CA1AE21

E5123CB685BFC817C23F8F2C2077C89750D43E9C10DA3891E8C5F76B699DCF8A

E2F7A1C44748F7497FD201BBF3BA5B2023C823677F70902D7D443A09AFC521EB

AB769D63BB6B2BFB6B1444436C43803A8ABAC3335404FCD53890EEFE0D1CF18A

DBBEBD64C9C8BA7F1FD85A8D641DF4DDB8CEC444698E755DA3893A1D1B85B567

8B0E44B74006F13E25FC23E74A8C8A317F250059926512E76D6D931BC22174B1

1417F48A44EC4393D46D85EA7A6F67F04FE93A4867DE4C5BCE414EB1C30FC543

C3D2683DF530C487215D2CD86D757F88856C7826B35FA421533659230CFF76AC

CF49530952F17088AB645FD193769CF8F0A5A6EEBD43C16CB0069FDD125A3151

E47E517947A6D25EBC89F86E8487151BF68E2F063FAF8DAF60DFE4363A4760E2

5D6805009F8E57E81036B7D0E4E135B8EFE840C604A0DC1A5AA21AFD0CC23C9F

B8A29E8928F5C1C8882CCE48D84E3FE94989B933A66B08222DE9BF1B3163AD61

1339111061DD19A23E6A53F0451A638D678DAC44D4FC504EB4AA569DE81DA206

8D05BEE087644DF93A1475A8A29B84D9D925C99AB6ED26D5B64F4341E5F00C8D

3F4BB729C4F753098D1B802BB6B579E729D070C0A03817C7A9BFE328D479517B

D99695C34EB14EC3C6C5E59F5E95CBC39C6BF032020BB4E69661CD76D9B59175

373F990D459774C225C7A3FB4E3708BC09E1A7865FBE4B36E110C745E97142F7

B143A6E580E230FFF4EE5E83B348ECED3FA4E0E5AF2AE41968BA320879C3D7E6

157D367F966352575D89D223846163E0646EAB77E352502B8DE3B25F909F6AC7

29820242008C1A3FECC1C30573C93C56BE987CA5B68CDF73E4B165592D76551C

8C7763CED26D52FEAB3A6AE50A96B07F0B0EBBEBFCC73C3138AA077BA6F77078

73AB4D05F8EFC9098229B0DBB0CF3B43151702BB42592EFB6D80B577781E6FDF

A9608E581CE53DB02D1D50E7E9E8F926A5596839D22DA361CA21DB6847269600

1D038B9A9FFC6C5326A7780D01ACC6EAEC990B8487C1839546CC64184FD729D5

F35441930ACFE6C7D5317AE1B5164CC2B1EAEAAC63777B2CBC7C46351D01BCAA

31C7666CCAB69DFF8EF25A663C839B3357627C15786745C7D96EB0E41E632E71

EF21371D46C2AA32DA0CA8AEB63D13248D55795F6C19648FCDAE28478A7753D1

D042A2A536EB2C04667CF5879F48A43AAA47160E9397F129F5E93DC7AD5BB56D

90A21186494A24E7B3DF08C29EB180716E4AB479645FAC1C6F5144916E900B44

3BC1D7329E8F8831035F9E54D226C55A7FCD27C4A2029999A0B7763C36

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/UDAAAA+ArialMT~8d findfont /Encoding get

dup 0 /.notdef put

pop

end

/UDAAAA+ArialMT~8d findfont /Encoding get

dup 0 /.notdef put

dup 32 /space put

dup 67 /C put

dup 83 /S put

dup 100 /d put

dup 101 /e put

dup 105 /i put

dup 111 /o put

dup 122 /z put

pop

%%EndResource

[/N98/UDAAAA+ArialMT~8d -1 TZ

%%BeginResource: font UBVZVP+CMBX9

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 13 dict dup begin

/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def

/FullName (CMBX9) def

/FamilyName (Computer Modern) def

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /UBVZVP+CMBX9 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { -58 -250 1195 750 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3EC9EBBC6A5E

2825687306A156DACC32FBF07CD53FCFA5F8BEB4C85C022641C2817904D210EE

C1B9CB391931A7DA79E981F6D449067CB22BBBC1C7E17F31494A030C64C3D168

01AD7EA9844289C5FBF13E87EB38D47EFECDFD90987CE63AEE2F73A41DE9D88E

47972B7D71DFE3C0971C15A0A2EA71DB75E8BDC8C575FCE75767F0757BD4C3C5

8EF2FE5165B8546C92942535A1EDA618A56D879C164EC4F0F96C67E96588F918

16F50B3873DA54718335E5332999DA5564B78C9F5FAF96DCF3DC75E7271FF8EA

D6C359C5A3C8AE5EC9D39ED3FF31964A8359373324AF62817E412610D5DB18A2

3A5754794235BB25D3DDD26A8A1F71C1EC1F62C191EE0A5B5B0875851A957AB9

BD03120DD0D9705888E9CF10F8FCB5581D6179B1D31E44182CA35A1D8CB6260E

CBE86555CFCBD182CBC246B7D452702B4A6E952F09D5935FD82011E71B31C885

1CAF835A753CD158B0A5888C211C87D508586BCC4524F4A7CF1D0C008BE732E0

73CFFD7D44544F60D67B70C142F2D5D81671D0BDE43ECA08AEA748CCF1B6B09E

33E213818A814579645E94904CA7E1102600A372764A124F46ED4820F4D79783

9DA6863AF0ADB1D2F6AAEB6E0404E4F8138BE049052C8E0F0A7FA925C62F8781

422A2A4FD4C5BC3B52C66F3016A4464848CF3423E9BA758D53E68B4209848178

BAFEBCDBC462399C19FDD222DF4F95047982D0337CE9E418DC6AB1BFDD84BA54

7BA7FF1713E6B4F6BBC29BCC1C1D0246802E9F035E7DA3C1B18D4A4490852BFF

BA0D2252FCECDD1199F60B61880B7A42B565AA5F45BC0E2890F25C4818CA754F

B17FAF1A59590DDB0F43D066746299C4063401479375F5A189E1AA75D7BEF5AB

FD7F9725E09DD099C3DBC5160B64F67D7AD15EC424152963006D1366C7E4E6B0

E864FD88E2ED764892B5DB7C7BF61B11BC064687E0CDE4A3E87EA0ED471FA087

E56CE6F8D71A1B19961ADB3EE7B4A4FB7374A7C833695E74EFE5C7F9E25D50AE

A4E32BE349DB9A157BA4BAF018725B628B9E4A7708DB549A970810816F06A1C4

370F3483CFEB73D10CB27F7E6DB5891C62E2DA8C1E63B6205BC6C1694D1CBA7D

7A1F894C979CF813914BA29009F6BFCBCB401FA1ACFE38CA73027CF6BA0C7432

AF31A66B810FF3E509EC5A5E654917572F36EAB8575B978CB36914381DBC5A89

725386AB910F8D81887A3C975792D753DB52D6A9ADFF85B335931023871F688D

6B8B8F83C59C614EC19180E69E15EE526112B53F63D8F0A84D080798968CDDC9

9C2AEA08CA3FF896483930B88F2085DC6D333D90A0BA54E1CDA14AD2AF916C9B

8BC0353695AD5017575701C4D62A8EE4663BDF468C4578108C1D3CDB8FE28FB6

8E97F5C15C2443A565428D10FDF65322E3077937B8DC12E75826706C99F96494

F2B2D379074FF81045C7DC42332300A152553EC9C9C51591C81C6325AB97BA31

D338051996F3266E2189F14991CADD2DF109A6E80D4FA3B570ECB30FAB18532C

0EAA528BE133B2B2032DA7A1D3D2DD9B596E71A086CB9936445E679A87D5AA7A

1CA9393CB0AA405BF58AB5A552D2B07DFD7F761A33F31C999014B1EBB1F6ECAE

0CB4E14E2A61182A949FBF38464A233AD83A4C8A2C72AE44BE300C5BF5731459

FB3FD44B70B46503F69FAF43DA2537BDBFFFB650F34C768DFA9A0822C0CE3223

F9A3F27D713E0FA7477F39FBA49E65DD05EBBB25166D96B067AEF135AD9EBA23

59D8C23BBAF66E94788AB2BF757CCA7E381FB9B85DAAA711305B653FE3D9746C

C5E004FBFF343EFD40A8CE1FF6CE433363DF17CA5B720627BF93B50C6C8D148B

1F4D177B67113E0A4278B84B79AB19D25A7B72BAA75D0BE65926AC34B2B76A33

535042932DD80CF47258DCAD899FB26E0CD61D9C8F6CC99BE46E238CC49A9A7B

852B24A34F1F5D85784058DF9B9CA3E1659AB4E097F6F9A51B039F5C387F7B73

419D7F5EE46C3E452A1D2B42401C8ECF02F9FFF3D579641C2E6D3E0844E9A386

91D68C1BBE85340F9F2612D1057D8517C734C5788BDD29C5E046670753A1EF8F

096A579CFA7827E9DCB093799E18A1A7620ED1DA3A628853E7E2496D7E20A8BF

81A7D9DDEE7CADF60CB4C4A0A427E75E58E030707392EB95E7C422E8CBA79A61

BF44EC8B4B8DC8348EF7C82669AD8C9401A9F081D57253E410119FE5615DC7B9

6F773313B66B683F692392F456CCA08AAA6CBA6E305A8100684BF410113B17EB

7BB94D3914CB8A5DB8335E2CEFADBC72267DB83AC0972902295D20281CE95FC1

9A6A2CAEA1E4174D9599C6DF01E8A1BC6954EE7E49A0779EDAD190D7D60FDF79

8BD827D7B9F270FFC8E54CEB54D35DE1D789B063887C132B9FCE9A6D80C59377

65D81D92F661ADEAA20316E0DD03CFE24EF6D77A51B6BDA686846F673E15A4EC

A25CFA301F7EE1648315084430B68033EE23C9F647F43277A656A3B6F8FC1060

5C765587D50BEE4A768C8FB1B3F6AD74EDA47FE320858FACA40B81319D46977C

A0E969077F8A22625689B6478C83ABB64EB88C909CE9AF6F25A97C8310F0FB92

75F8D2ECD765154735C276DE7195D2FC4BC485CD5214FFFE63ED6B9AE32E7D9D

6DE3FF8E60BB5FA8442617464AF000C2878045C2C9AA0F5F33188F139D45F49E

32AC5A24A55870263532069B99B876F29658611D5ABBA3952A15F7A140DF45F1

CBBD94FDF9C4B71135BDF38D38CED302A70F8EA977E191A3CF085D7C8BAECF66

A026C5DFD8F8DDC1988C0051744C9A669E048CAFAE679F6D2970CCA9A83193B1

B623FCA0D7C967DBFE12C9BC2D042B870D5A5E7EF6C67171C773209D59DF763B

3F0D0649FC39B999EB28F9A373E6218E21D6C25DD070033DF260FAF6735FEB13

60D9FBF21FB20F8094EDFB8DEA9BC2E2BC25D6ED7763AD4B489DF3DF452EC520

C95AC54730188D047FCF3849307760B4EDDE1FFBFD5163240E2ABC9FC2E42BA7

9D2CE29114BCEA865A0146322C7702AB8C0A76D9FD28F169BA5FEBC6CE44BE51

956DB6FF477BC7DB01BD7D16CEC16237E8BB1304A5BC82550B84CB9F36EBE7A9

8D665DD94503D6F33C6592B53BE5B7B8D97A4DAECF2C98C3B69EC45F9451145F

913E2CC699B9257A2294003A82A4E6263FF250499BFC83403B6A387D77A5645B

6CAFA5573C95F019576A29C34CA4841F34D84E3763BA5868081A3380839D6469

C0269C9146A7FBC94775D28A82564FE053FB9D918A3F1C7F99BF119ECC9F092A

4B89BD697EF45FF17FAB785BB730D141909183972E56FF9BB768FBDE760E00B6

A7B9F41BBC6CD41CE697A12EE5DC412AABB30FAD9D6547C5AB43DC0472521725

E59713228481D89FCFE598A5F860303669D23B72A45AD9E7EA016A8C96DB8D13

797B9C8BB2AB585AB047617C0545AE2F96551751E66F9E3075526B35638CAAB0

A1D172027B7CDEE82CACF1006D7A49991F13F0872877D667604246106566F113

CCA633EDF4BC9F45285FA6F32A23CB80BBBAD38BFE141AC1C892C72853B5A547

B16E2DF5BC3B1E776A6694304131298E54FF3DC1EF432506DEA8DBF7C0F56F49

7DB15C6E46935197E7A8A16185E295142A006B482B7660669E9EEA77363D633A

09CD0D854EE5C15BD84B8CA86868F23C25D63D142AE67749429B9CC38A5D2952

2276D205EBB0FCA7CB92924B3707448FF0DC4DDE87E5D93983D8819A4CFAD258

C5E6A3E6AF7A2705BB416D5F65646FF2B7C6C03E89F30169D76A400F358F09A5

2E92D1038803D856BEA015A5DB002BB584AF1FB1202BC191524C558084BC95EB

66796AD00D189D2150333D962C6240611E1F73B757B658692CE060F1E5C4F31E

EEBF340507BB7E4A62980F8AF62C438C8A46ED60FBD8C97DA6BC832391955B23

4E8EEAE587F8A5E5ED03951D2C2BED6BFAF9B416A70489DC62AE3F89DBE161CA

49902B2CAFC96BE0D1CFA5CA0500D585E548878DEE5214537DCE0DA4C8130F50

D35E057BDA16E4D108B625EC1999A3EB7730028A7A11BCC04C0E6BC9B452B1CA

D3C796B157C91AC22677DB97FA0C88E82258E23E0F19DDE4C22A0BFD430D32A6

CDE2E26C576DAB7CF32537DDA33E72D9341208B5149E196EA17F3B5DFACC378F

BC0B4E7DDF1AC0B4084C0D380185DED64168E9092699D5AED9880B8CDF4B8723

3F243707F8FFC8FAA15B8408C6E93C0A95315C1A1DBB6F263FDF82A8D69A3768

0B23B5A4F2609557BBE37CBBE2FCDF62772D8690F5D6FEB6BC2F100E1D87F154

41D98EB99D26DD20A679814BD4B7A11FA2882C5287DF7B2E7992025AED175D55

86DF6C5E3BBAB31CF585CB9A8DB3AA017CBB619F83747AE5E4F236317458D44D

8732C40CDA072235A859D18A97F8D4D8F7172BCBD494521688EB26827A399D61

26B7DEC91991DC9BFB87A4BD39D9FBE8D5ECC07DE982BA6565C3E8BE24F361F4

FC3B1CA26D090662C562FD9FE11FC2F4B510DF13D54FEC359F0B34306A8CAB97

8F63E9E4C8FF767BD23892ECF3A20318195BC0A1E88A8CC97747CDCEA33446DF

05485D560AA19EB314C8D01D43EDDC857EA8AC7B1C0577E9C2954CC0A64E6FBD

A17A6E50807749D09C9893D30A6E969226032718D703D1F6AEB8B7F2A5F832C7

AFCF4B8951D4581B8885871420EE51C779688082C6FB053FC5794209F629BC91

018E39E514AE01F29E6288E8115D2586EA53D7D460927FB2968CE34681269E0D

0809B6433D147C2D337C6CA20581BA6FA433054A3965712C64902463DA294662

7AB26F1469D00EC655649500086ECF63A936729BA19F0EE46D31B8F4CA8F409C

4D4CF1F1E9D2F98918272D2BD066672A8CCAFD1216E08F9C18020BDFBCF7AAB2

3DA36ACE0908C8CBBA8A8D685389EF61D12B56FCBCC665586619F379DF649D09

4406DA031975E968D623BA4B5471AAFB88CFAE874413387DEA2DED330EAFFFC9

1EFB3541FCC3D767B54508AE075ED24CB755D5E92636B03011A267FF33BC9439

1D229EF6BB33017064F3453CE9C0AA657F9D85A9439FC2CEDD76B116FCEE572F

3AFD4EFD14A1590097082B98B0FDFE05AAAE9169F2DE5EF6C8E27F969F83D61E

A5DA30E37C272B08D43FA03753DBBA7CB6CF15E432E904EF349A6E279E4DC681

BBE817DBE395B61FE717DC14BE7BAA50F227D4CF261CE0C18D49B1AE76F3837D

AF48A688DEEE0930CC72DC8E1E98734FCFBDBD9FFBB09B61FED76717E68C56F1

3418F87FFBF34E3DF07558C3198F450ACC180CA973602AF79817A251431C6D8A

BB9EC0F5D55EA3F012B2B4510EFB91B2D60865F1A9D01998507E0943A5CD8CF3

31FDF10F8499FBF09FD0D19618DBC5DAF1471B9E87FED69D996773474D305493

79B3B26FA33CBC82FF74ECA43796DB8366D09A89715DC28CB424CDD7EDB8C0F7

F5E7CAD7982CC919C16759CD34756AE050D6B081849BD7802B78F1C453C2D8DD

86155E9862F97FAD4C465DF51F730D94F536F9055CE7810212F901A58EE4AFE6

17E0C3E23A768EA33C04BC2DF0C0202D6064A2792060DDADD0F8755749AC0AB8

58FAE8649155D154A714720F8D60D549FCE691E5269858C717E8AEFB49D24C78

46B9F3EDF3374DA0CB4E9951F5C24A36622E3AADBE0DFC6535F98746857E77CE

5D2BFA0EE8E03FDE99A440074B153B1217592FE1A27532DAF96EEC291A9599F3

C9697B7FF53B1898220FE5362E75B3BD7891CE871BECA39EEB0669772421301C

F1D1F7E31F9E2ABA1C22E774846EF9832AA561064ECE1536329FB57241FD7FEA

272D67676F563E240DB90AC8C0505452EFD3DC2AD6F908379F4E5297640B4DE3

5F98F86A3B3847483DB9E64CBEBCA05E5F352D53C0C99285AD39DB60873D3E4D

521FBA708B69B7A4C4408EAD260451C9F5C25D228D24FD0F21F6F3BB06EC69F2

341DDA2CAF50016C9C47A20784F65A565E5F1513E745AD7907B54F29ECF9C9ED

635A74E1E8587983067EF273F95A4C18DEC0D43127441B62E092AAC588E0F349

6D1B40BA66C48F75715748D0ECE4E36AC176369BDA9C2F7B05A4A7BECCA65583

CAE330819E9243959385F1F3F3D2773AD4FD78169552E0907B9415BE6A2BEF3C

724C4ECA02BE7F79DFF9C709914F7D5923BEFF43D6AF4501F67D2B7A5111723C

F7278B4E5B70B6D8C3B46E57A2151105E493006AF492827287D2367E2A3A3C09

6AB7A11EB88B7F26BD6DB508AA677C155ED94C43401F27343AECBBEAA1275E16

C01FEFFEA591BEE9A53E80BF8B136B648C07DB40854930E49FD8DF6077F41170

EDA63FEC9E80620E1858602E30A0741AD1AF14CCA9061C02BB71B68E14C6A4EC

2C1587F8B15D65A110BCC562E181CDFECFA33AAE19C872E8A0F1EDBF373D2DAE

431E66CAC25A189E93FC2FA826F73BE016599CE42610A13C16A3324A3DF20A69

3364D10C34E28D63832745F0518F55FDD9357C49263D30B584DD3611E0D3E831

84F6DD8130ADB2B0DE4E78F207B4B40869A014A1A586441E919E771A6C0EAAD0

18FAA7FD1F9E83CD086271AF3C5D6FF13D556868135D005C9BB1AEE883A66E6C

CDB5BDE696BFCFE248A563457A0E42E15EA3612930102E80277EF9BF82905AA7

B28CF8A939B5E6BEB1C0A40F45AE34A65320DEEF645E3C03566ECC2C8ED9FB28

4ACA64F03E997156D07670CC7305CD16AE2F184D278D12DAD8F73AA540DEC0C1

8F81A2A075123B27B4E724A1C087AD2A675ABCFA95966FEADE9F13F3E6F0B377

ACF0C08C4F60915F61B0754BC00E0CCF7D984BEDFFDC33C8B5ED1F051608FA4E

96430C0852FE55F0FC50F82FD3C0878452E957BF154F01830D856AE4372CAD88

4FCDC0C10670EA0F2B78E6D6425C6334F552D8118B2CA35C4D5810547640CAE7

D65023733AB412C09F3F8AD99D87466BDB0BA2F769FA7ACAE5BD428750BAB43D

3E1294F4B7CA127930834E15C0EB787ABD2C141ABE92E3C18A5AA58D5952C38D

73C2ABA78C76225817878DF1FB457856A16AC64BC489D498FB77A777EC87898F

431C7D9429CB23E8CC6C1082F1EE0102707FA57C27C7FD32D27EBAD52F617831

2EB25DAAC7613A3DFB3A97DDA4D68C87C24450530C4B8245688408D96F217AE4

77E17174418AAEBEC368A7CBA45064C17556D80220DDA7E71EA7F798D306E16D

628D81A2E6603A69725AF14A00545704A3E4CFA2787CC834C690303DD349994C

AAD6118DBC0F78CADE72AB3889246B014709D5D3F107B4417A7CE5A1BEBA961C

BEBDA9B154A13DADC5E5B1EDF5849093B93281B01D9A5A692FFDE32B5EE79055

D0F420806276E108665C7CCB1B8333AD6E142B6D10BF37E594F69DDB27820E77

37F8D4D155752E887C31C8D0CE64F5543F34908FEEA1405938F1199C7C3229DA

D4AEDD1FB3B28A229F1F4BBBA1674B9A370FE9F0A555F4FFD29888B18526D4B7

30FDD7337B4404ADE10ED236F2FA3EDCCA4D3458FB20AA7BE8EAF2A0AED79A03

8ACD94438411A66AE6DF46895021933C38950474CFE95664F02DAEA5B4

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/UBVZVP+CMBX9 findfont /Encoding get

dup 0 /.notdef put

pop

end

/UBVZVP+CMBX9 findfont /Encoding get

dup 0 /.notdef put

dup 45 /hyphen put

dup 48 /zero put

dup 49 /one put

dup 50 /two put

dup 51 /three put

dup 52 /four put

dup 53 /five put

dup 54 /six put

dup 55 /seven put

dup 56 /eight put

dup 57 /nine put

dup 58 /colon put

dup 70 /F put

dup 76 /L put

dup 80 /P put

dup 84 /T put

dup 97 /a put

dup 98 /b put

dup 101 /e put

dup 103 /g put

dup 105 /i put

dup 108 /l put

dup 109 /m put

dup 110 /n put

dup 111 /o put

dup 114 /r put

dup 115 /s put

dup 117 /u put

pop

%%EndResource

[/N87/UBVZVP+CMBX9 -1 TZ

%%BeginResource: font SBAAAA+ArialMT~43

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /SBAAAA+ArialMT~43 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A259BC9984DB874CFBF432DC23D7457637070526912FD9815BE031

9519877F20C9609B5B58AAB0EFD1AB99AE9E6EBBFFF6479EB9E420D146762F01

59B41831A5312789C775520554EB9FEF7F7C5A0B69609D1BAA593F238F5F7C4D

A902C921AF1E663785239DC5F977BF27B99101158EE091ADD8F2146377731ED9

E1A8D9C74A6B10A5568975CC1B892338644DEDD4AA569F74A49C616EBA62F176

D2E024DAC244D31618FECE087B712815C518E7AC3E95A9C1722E2E5CF57DA7DE

62198CD1859A9CB41F056A56D9255A4B0AAF7BDBB2C6078BE2DF1C3865FAEAFD

F002B33ED7D96B42CED06B7C78F83E66DA5C62D3009A15E0FC0B1CFBFCC9EC36

C327504E82971FD5101957D6F0E850A803C0DF4CC0A4D91CF610B362E60AEBFF

5B2F8899ACEC9A617FCAD9D2348CC07E10D1BDA6CD0CFB4FAFB144D2E3F8E03B

BEAE6B4E758C024BC020DFB6AE00B67447295F9F2FA573DF16A969733447D961

0188CACE355600A4AA63FD4F77928272403294F667411050193888A14D57384B

71DC566AB619960FB2656B78944F84A4E5FF109C7888816E247412832329FE34

C8CD2260EF9EF23F8A72617D9AA3B8B3F1FA85EAA915726CB0A44843261E9407

B4656DEB6DB72788F99EAB00810EB61E168264D481DF8E8468027084BBD33473

7AA6EB23DE636E5427BD80ECC160790CCE1FD19DF3EEE559BE2AB44CB6429049

6CB6CBE6EDF13D4507C92AE595B91C60515D4482F36A8E89F29A57AFE26DDFEC

8236725341F1E31DF4A51FE4BD674CF57D570FE066DA9B11A7554A5D9487EB87

C777FC219B6609499EFB6F2D56A85287CDCE2CA7D2B8D62951719F91C9D9D835

6BE6D21E68B33659C857D3566545B3D714AFE521C404B91944562FC3DCF5CE92

E5E5279DEAEE90DDF73D115CACE4275E5913

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/SBAAAA+ArialMT~43 findfont /Encoding get

dup 0 /.notdef put

pop

end

/SBAAAA+ArialMT~43 findfont /Encoding get

dup 0 /.notdef put

dup 104 /h put

dup 115 /s put

dup 117 /u put

pop

%%EndResource

[/N44/SBAAAA+ArialMT~43 -1 TZ

%%BeginResource: font JEAAAA+ArialMT~8a

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /JEAAAA+ArialMT~8a def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A436B0C96CD5349EE2E997A2C271A852FB7C63600614C83F78605E

4F6AE30F86BA28257C54120FE5FE2910EEF98796A9BFF5FF33C2D943AC1D8FC7

D2D2F580ED2CA924B9747E4A1D93C62124F1F537CACABE1EAD0C2613D954761C

1857F9289EABBFA2D2B32FEAF156618E9E844BE46A3E449050314AEB8D1D7D72

078F4EC983205B45CDF2C1E2EA14A6D61180E245DF3DCF7808B806F97648F76B

4D242E29332703E53ECD06106B072B983863D53ED567795A2E41D901F8D0A342

47C30DF92BBFC6090B5B1016374D5B9D7CA52708D32D7DF4CA80FC4D8EE8F7A7

4EB51F9B2506C6E8CF9CE4C4C68C3D9E785390BFBF1D9D4A601CBA3633584653

40E48BF8C77FE88022D97860493B27C9011E85C49E1049B27AEEFA39A3CE250A

78B8652525E1AD8749CF35A11B5A35FD38E0A4C9F4EA80F529207D16A41A20FD

CCFE5D2B7678B7B27E3929115BB92D6088BAB38F

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/JEAAAA+ArialMT~8a findfont /Encoding get

dup 0 /.notdef put

pop

end

/JEAAAA+ArialMT~8a findfont /Encoding get

dup 0 /.notdef put

dup 50 /two put

pop

%%EndResource

[/N113/JEAAAA+ArialMT~8a -1 TZ

%%BeginResource: font CCAAAA+ArialMT~40

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /CCAAAA+ArialMT~40 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A259BC9984DB874CFBF432DC23D7457637070526912FD9815BE031

9519877F20C9609B5B58AAB0EFD1AB99AE9E6EBBFFF6479EB9E420D146762F01

59B41831A5312789C775520554EB9FEF7F7C5A0B69609D074AC3D39C7D84ED67

D7557D2B6E4B32AA87CEE8ECB77AC0AD6FF0020B4583FD366432531E0A697B31

D4E2F4BF2D1F1B99C8133250CFB3EB64EFCA14DEF92B4AC0877A50707C200037

6C1BA3677A7E877427CA7C51C22CC68A91DAD24615CBDD65E868BA39EC83C9C2

86BF519E742B4E6156C60A6C0D4D8EAD3061060D52FD8859D1EBA3462F127578

51CF63A25DFBEE73F9684B271F48E56F0A58B4E4409303DFF7F7B96A03C1963E

5B76619E62453696016130A7CC53C1298F105AC48BC4979E30F9A120DBB87FC3

F2FBB1B83F3CBCA0C4C77D65D8726A4F82E9D3A057C24FB2288E2622F8F72B4A

294F9C7E714ABBE4B8436DADA0A05CAC3338EAC2781757339082B53644D9E51D

D3CD4F20A9F6709610312C1C04999E1F33AEC938643EBB0A8A4441470DD4FF7C

6BFA3AFF5D4FC60E7FB6C2DBC26C723CF29A77E864CA58A16A4F77EA702C5D4A

93B19A64A1014DA403C91C0AA3931AD5CA3E154FE66B54D9410E76193737F653

AB41C68BD2058F333E56951F5FE8AAA8BA2155B1A82096D05DAA0B10162A99E2

4BDB9D32973271953AE7D541E6CF4AB55AC2615A4AE88FD46581AC352FFB8533

32700C42A1330787399626C525CFE65F3ED20434AE545B7E5CFB1BC409B0239C

03DF700773C1600871

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/CCAAAA+ArialMT~40 findfont /Encoding get

dup 0 /.notdef put

pop

end

/CCAAAA+ArialMT~40 findfont /Encoding get

dup 0 /.notdef put

dup 61 /equal put

dup 111 /o put

dup 112 /p put

pop

%%EndResource

[/N54/CCAAAA+ArialMT~40 -1 TZ

%%BeginResource: font KEAAAA+ArialMT~87

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /KEAAAA+ArialMT~87 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A436B0C96CD5349EE2E997A2C271A852FB7C63600614C83F78605E

4F6AE30F86BA28257C54120FE5FE2910EEF98796A9BFF5FF33C2D943AC1D8FC7

D2D2F580ED2CA924B9747E4A1D93C62124F1F537CACABE05DC5067784DE4D984

2114F41526B9E556799FA437219B291EF62340113D2F021A9EFE034B66C8D5E2

9E783FAAE7CF92172FCAEA926F8BBF05236F988542A1251147FF12D955D7A01F

B7B42707883C682F3149D422B0C8B02F1F1B68A3AA5B69AE1E7740C710F1228B

A42C86A88B83952B7056064338B87553F3910373C9DD4B11580E4B87C5AA443A

35C8A05C11654AEAAD6C960DE57BBEA1068C

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/KEAAAA+ArialMT~87 findfont /Encoding get

dup 0 /.notdef put

pop

end

/KEAAAA+ArialMT~87 findfont /Encoding get

dup 0 /.notdef put

dup 49 /one put

pop

%%EndResource

[/N114/KEAAAA+ArialMT~87 -1 TZ

%%BeginResource: font JAAAAA+ArialMT~3d

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /JAAAAA+ArialMT~3d def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A436B0C96CD5349EE2E997A2C271A852FB7C63600614C83F78605E

4F6AE30F86BA28257C54120FE5FE2910EEF98796A9BFF5FF33C2D943AC1D8FC7

D2D2F580ED2CA924B9747E4A1D93C62124F1F537CACABE19A2E0458FA3DEE10D

B82465F9B999F5A60CF6F1112713FF27FA6956A04FE1C887723E16B546A68B48

DFAD8F1406751D22B95FC94DFC93281E38354A90C2E4C3D7B3BFC944067F9FA0

838BAFA5342A38A5C5967DC7EBDBFE32CD0C377D891D53F057650258CE71BB96

337A398878

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/JAAAAA+ArialMT~3d findfont /Encoding get

dup 0 /.notdef put

pop

end

/JAAAAA+ArialMT~3d findfont /Encoding get

dup 0 /.notdef put

dup 32 /space put

pop

%%EndResource

[/N9/JAAAAA+ArialMT~3d -1 TZ

%%BeginResource: font SEAAAA+ArialMT~84

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /SEAAAA+ArialMT~84 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A436B0C96CD5349EE2E997A2C271A852FB7C63600614C83F78605E

4F6AE30F86BA28257C54120FE5FE2910EEF98796A9BFF5FF33C2D943AC1D8FC7

D2D2F580ED2CA924B9747E4A1D93C62124F1F537CACABE0C3E715A9ADDB5FEA3

00D214F2BF13A085B167F51127DD3229D768E4E26AEE9865147E65F616C7A0FB

375CA79DD823C3DC1BC02C3C1FEB6CB239BD3393BFA10CE6C460968E071A643C

9BB33DC03D69D2CBD587BE9F881042B04F646D079CCB6A30C5037AFCFBABE577

7E1F51DD37147DC632BDD0167988C868A80C66C055F509CA968832324D073218

8AE4F5AC0B32D60C9F30DB43A45F6BAE9518B67D37D28EF34A060ED6A3211093

DDA9C198CE572D133AEC89CE8BCF0C9CCB69CDF8C3C78D1D9AD8A43306209954

3A06B82A7160BEC9BC67BCC9BBA32677915EC61AB80800D01F65BC0E7001E4AE

82B83D4B610A77B3942D

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/SEAAAA+ArialMT~84 findfont /Encoding get

dup 0 /.notdef put

pop

end

/SEAAAA+ArialMT~84 findfont /Encoding get

dup 0 /.notdef put

dup 53 /five put

pop

%%EndResource

[/N122/SEAAAA+ArialMT~84 -1 TZ

%%BeginResource: font WCAAAA+ArialMT~67

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /WCAAAA+ArialMT~67 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A436B0C96CD5349EE2E997A2C271A852FB7C63600614C83F78605E

4F6AE30F86BA28257C54120FE5FE2910EEF98796A9BFF5FF33C2D943AC1D8FC7

D2D2F580ED2CA924B9747E4A1D93C62124F1F537CACABE0FABDDA230D03C5DDE

281DB363D757F0C95BCB2A43FB2A0FEEE74474FB0E4DACC1DB908174036A4B49

F9A63C7D73FD591ED0050EAD769ABAC5A1127C07DB8633ACDAAB77EA14F33BC2

A694D22AF34FD938424FF939C787D37E120580069304F35A58EF28888F07BBB2

F7EA035E168D72C3E84394CBA7E5B532A9258895DB08A704B39AB39EA196BF89

7097FA78750B0C40D84AB425C905CDCE0E9ABC89E996B40B39771EA03E80FA9A

AC7E40C5C65228D8F04717935D2D86A48D6A9398ADD691E81C043E59F0435506

0CBB7003FCAC306C1C312F9D6712EFD2ACC73F2AE6639267A9FE312378B3CD5A

87B91F11EEEA3F45CFD0A5232528E8A6776B7CE0D9CC83A363873B1780BF963E

B3ACF57E37FE237F34F2840BC1192FCB929110DEFDF8ACEA1FFBEAF8D59C7196

119C234E74CED4202A0A1CA7AFE2BBDCF3BB89A20D2A95C1DEEA09D7473847D1

6AAA3A63260CA39CCA016DB8440B4EC9809DAD688B081936FEAE3B519393

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/WCAAAA+ArialMT~67 findfont /Encoding get

dup 0 /.notdef put

pop

end

/WCAAAA+ArialMT~67 findfont /Encoding get

dup 0 /.notdef put

dup 56 /eight put

pop

%%EndResource

[/N74/WCAAAA+ArialMT~67 -1 TZ

%%BeginResource: font TAAAAA+ArialMT~3a

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /TAAAAA+ArialMT~3a def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A436B0C96CD5349EE2E997A2C271A852FB7C63600614C83F78605E

4F6AE30F86BA28257C54120FE5FE2910EEF98796A9BFF5FF33C2D943AC1D8FC7

D2D2F580ED2CA924B9747E4A1D93C62124F1F537CACABE0C384554CEE7C32100

ABF656EEFA4EAC13217DC505C78BFFE8F3739CF372274171243D2C9D4E794F19

8DF28F80DDBA52C5DB78E12A76BE2543882A3E50308E562954483FF3C9735F61

E1E55F849919A23E2DDC3796FD3A097D8C164C0C0F2AF7CC179E7EFB9508C1B3

F6BD52539DE3498DCFD307018F0B18B32BB8A5952E5BAC931DA6E7BA3BD7D16B

E8E7D401563E034847277CA72CE565E47F025D7D6A84E0

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/TAAAAA+ArialMT~3a findfont /Encoding get

dup 0 /.notdef put

pop

end

/TAAAAA+ArialMT~3a findfont /Encoding get

dup 0 /.notdef put

dup 52 /four put

pop

%%EndResource

[/N19/TAAAAA+ArialMT~3a -1 TZ

%%BeginResource: font OEAAAA+ArialMT~81

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /OEAAAA+ArialMT~81 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A436B0C96CD5349EE2E997A2C271A852FB7C63600614C83F78605E

4F6AE30F86BA28257C54120FE5FE2910EEF98796A9BFF5FF33C2D943AC1D8FC7

D2D2F580ED2CA924B9747E4A1D93C62124F1F537CACABE10F5720E4ECEB90DAC

BE3FDB4E9AC75AC8AB296338C4CD0504F9EB1FFD8ABF991752BDFE7210644F10

5BC22C81A8A8D3D722C162E90284B193F0BA05B5B64046209ED1E2A88B37996E

31AADAAE25830EC759036F7BF642874ADDA6B57FC3259E611CDFFC02F9073655

364B65719A43E2FBEB5E873F3C2D4F0E32AFF675A8DA4272CA3A11EF255B362E

1239314C99DA230BE5107898010450C13AE2F959E9496FC44E3CAD35C33D3E3D

BA6277A3B74AE6512899538A656AF2EEF9847A7F939C58461329708DD5069BE7

A497C54C0899949E52E8019C303F89F9CAF713F62CA9E08A9023D0349564624F

D5D19BEC671D47B8397D4E2BB4A3F681CF44E63E85BB2B5FE1F90791488433B9

2E46924322

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/OEAAAA+ArialMT~81 findfont /Encoding get

dup 0 /.notdef put

pop

end

/OEAAAA+ArialMT~81 findfont /Encoding get

dup 0 /.notdef put

dup 48 /zero put

pop

%%EndResource

[/N118/OEAAAA+ArialMT~81 -1 TZ

%%BeginResource: font RCAAAA+ArialMT~64

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /RCAAAA+ArialMT~64 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A436B0C96CD5349EE2E997A2C271A852FB7C63600614C83F78605E

4F6AE30F86BA28257C54120FE5FE2910EEF98796A9BFF5FF33C2D943AC1D8FC7

D2D2F580ED2CA924B9747E4A1D93C62124F1F537CACABE19B7193F688DE983BF

D371139840AA7D95A4668B9F297CD479CE06BE335CFDFF3BAF8D3CE8E5952285

514BC5C0ED51DA133539D7977FCD6E2BDB33875313541A9A611F11C11DE185D8

DF453332D0EE5E337BAC7891973BAD3E79BBAC7EAB3389B21F3858784F05B706

124BC8E5B2047453459A88ECA536D47A8E65E0731B0EB20117DAA3F21616E76F

812491DE6CEEAB13593C22CD3432AD01B6F4C87B41E787E5A8FB4B7815B6C7C9

B9220B5DD5

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/RCAAAA+ArialMT~64 findfont /Encoding get

dup 0 /.notdef put

pop

end

/RCAAAA+ArialMT~64 findfont /Encoding get

dup 0 /.notdef put

dup 55 /seven put

pop

%%EndResource

[/N69/RCAAAA+ArialMT~64 -1 TZ

%%BeginResource: font SAAAAA+ArialMT~37

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /SAAAAA+ArialMT~37 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A436B0C96CD5349EE2E997A2C271A852FB7C63600614C83F78605E

4F6AE30F86BA28257C54120FE5FE2910EEF98796A9BFF5FF33C2D943AC1D8FC7

D2D2F580ED2CA924B9747E4A1D93C62124F1F537CACABE1EAD0C2613D954761C

1857F9289EABBFA2D2B32FEAF156618E9E844BE46A3E449050314AEB8D1D7D72

078F4EC983205B45CDF2C1E2EA14A6D61180E245DF3DCF7808B806F97648F76B

4D242E29332703E53ECD06106B072B983863D53ED567795A2E41D901F8D0A342

47C30DF92BBFC6090B5B1016374D5B9D7CA52708D32D7DF4CA80FC4D8EE8F7A7

4EB51F9B2506C6E8CF9CE4C4C68C3D9E785390BFBF1D9D4A601CBA3633584653

40E48BF8C77FE88022D97860493B27C9011E85C49E1049B27AEEFA39A3CE250A

78B8652525E1AD8749CF35A11B5A35FD38E0A4C9F4EA80F529207D16A41A20FD

CCFE5D2B7678B7B27E3929115BB92D6088BAB38F

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/SAAAAA+ArialMT~37 findfont /Encoding get

dup 0 /.notdef put

pop

end

/SAAAAA+ArialMT~37 findfont /Encoding get

dup 0 /.notdef put

dup 50 /two put

pop

%%EndResource

[/N18/SAAAAA+ArialMT~37 -1 TZ

%%BeginResource: font UIYUQW+CMSY9

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 13 dict dup begin

/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def

/FullName (CMSY9) def

/FamilyName (Computer Modern) def

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /UIYUQW+CMSY9 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { -30 -958 1146 777 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECB48FA43E4

4BE895991CB9C373C80EADFE8BB0FE77BBE5D8323BD9F747D696811F9ACF96FC

D5E030F7E76EC0067CA05F844ABAB91222E3F6A227ECE22D2EA7C02B71DA2171

CAAA5270E53357FA407C66B2E4A26D78F0CE4D48C44684DD2DFEFD5FCE7BEE40

4D9A1364243D9B109B0CB67A65F0EA2D9DE80178F28197E87C556B40FF5269DF

7BF01C2BC217638423153490020E4905F2BAB6BA385426BD622471305AFF9351

07F89CB8B737314CA73C576C9543469723020BA048964B4AFADF68108E60986E

72A1C612B45724FB920F1D3D49C91CC09BB153F37C58B5508294A071A17F1029

B27B8EA58498994FE47966E50F9865AC4716576FE37F6AF013E6306708EC104D

66749601968B97B409B6E981AA4A71D289AE6AF0534B8427B6B6C676AFE6D340

1AAA05A9491F1B1CFE0B74BCBF69B49FC836919BCFEAD960CF9308D08B8CEA10

65311988343213BCA6570B37850E294A0DDB22765474624A8F384D24CC84403B

8DDA8265D7CFC3C766938225E5AAF51D1469B73D857CEC2633B35452DBF2A1FC

7FC6D8346E6829D1482B85B3D5D8C25FB7CE55242812B3330E88CE9B182BB072

EC9045BAF36DAABAB83CF7FF6BF266827189B55EA8927E704A4035AA331F8392

837EEBB04E19D3A25A98B6D4BF9C9CACEEAFCAC041049DEB8597E4DE72B10300

762A07106B8C104082948F77A70C27C4E95A3D4F3199558A7AA00A62E9A186A1

3BCDBD4980C9C2A38C82CEFFA480A1C9EE1470D40789F876DB5ACDC7EF32A19A

6FA0E604929DF1D89F2BC6D0464EEE4F261F9CC7C8502DA50F8AD9B59DCB59AE

0EDE30F00F3AB6560BCF551AC17922A1CE720C7B6E13EB3999591D16E66C5248

FEE4783EB4624166A8FD69227F18527F079F8421F96E92D0D06F90B04D20B6CF

A3B1631FA2D08FE75D2B8B235D7E4A5A62E00F5C2950E3F5E6AB56ED63EADD49

C2C833C1B27056ECC108D0609E17FD8F430CE0FF38AF9DA81FA172958C75F616

D9065C11F9A3C931CA780F2A48F8B9BE8301AF214898173056EE88C411935D33

05B634810C1CD8E60949EED97527479F73E07FB72A36613D3C1C92AE9A796C4A

E0FE9C87E4BCDC41DF4373D1924CA502396227EEFC996C34C24FD223E79E9098

F973E44EE9C276508E6EF277706256258E6C64AE5843A3AFB7AC68B84D6C95B2

F088840CAA741A57ED1F3A99488B876F69A8F4D5F19B135F98BD0202C8FB9F45

B1D5B29044BE568E60FE45D6A6A77156ECFCF5B59B1AA8540F2A52E426AFDE06

93B36C94CFBB02CA6E33AC9A2B0FA889845A7DDACD3BEC71BD597FE73D7F10DF

ACF8E85E68D4B562B1013C3ACF2F2723995A1D5C5C5130F0BD614C0C9F4D77B7

7B46D402ADBD6C6F3D6694C0EB1AF12F173FE33FECE09700D691B0C077164F92

1E271D0086297D2F260377FD3A95B8A229589C4FFFECABE56D66827B54CAB57A

A168BAC95CF70B65F81717650CD8FB5E879B1EE9060E26764579907F23E7AE1D

0BE9EBDAB69EEB9F0087CCC13DE9374B5A6AF6229179AB25A4DCEFC8001477CA

00345856EF236C243268E87F3F5410511E41000BD687CF6DA704E96F4DFC91FE

75E87169A849001C298C3A6030A9B4C39777E38029EC349F7F506DA5DBF8F323

352D9F3300529077237DDA4DAFF8AE3950500414BA0E3A253B6392A1C8AE87EC

590106B82872ABC6FA00609696041FDE95226C2ED88BC063BDB70983E5CC4214

A20C5E921A416D78429ABEC4DB62D5266A921C5395741007DE6C2D584BD00FFB

BE21BEB9D77AF0A675E289822D2FCB0F5CFA4099D32DE119809789106747B211

81418247E71AC68D03A6578D9F055796FD0A1B6F55332817512D2BDBB6CF5CE2

41707534A7F7DB1D5DEA9735A58BE4D8033D9FB0D70CEC2E74CB45D6273EFCE2

C856B511141D32403245A75B989C8A2733ECCE454DD09F0451259D73A0507868

DDEBB7EB5B9E6CB275F25F22EF8523259320A77859B56B3198176A803C9831CD

BC89F92690D37307FEA4F6637A31C73871BC461750DCE680EC9E96FB1FD3C1DC

5FA849534932B435B85EF807DEEB267D039EC7B0B4D72A8CDB89554172E59E73

485D30892DE270BBDC9E0C67C31F54CC69A0D27090B40A384D0FAFD2EDBDC8C7

0B6A8C217326663D34739EF3BF144E2110AA037165A8E43BBA1F915E3F8A68AC

926C596B6A7DBE3F25F8E43ABDE342C274EF99D1C7FCA1DA12C7276F934DE558

06FF3033A08EFF783A44F4BC7B86197D2E477125ECC9613DCA3A183E5B6F5E6E

8C75B94067A1D61A61C970DCCAEAC3ADB63B711F781BDC2F6D2CB52FEDB28AE5

CEED75A3643FE565B9009174803701383DDFC13AF2A814E48D1BEAB585813734

BD2035AF2379194E0C94BC68E8F91F6F364AFB22A2FA90FF562D3D269AFE1204

18EAB92B158B0DE0F5AE8C2BEDDECDA0A827438C14C4DA9625DC3149794907A4

B2D28632424C0A4441304649F227684EBD4399AF76

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/UIYUQW+CMSY9 findfont /Encoding get

dup 0 /.notdef put

pop

end

/UIYUQW+CMSY9 findfont /Encoding get

dup 0 /minus put

dup 1 /.notdef put

dup 15 /bullet put

dup 33 /arrowright put

dup 102 /braceleft put

dup 103 /braceright put

pop

%%EndResource

[/N90/UIYUQW+CMSY9 -1 TZ

%%BeginResource: font NCAAAA+ArialMT~61

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /NCAAAA+ArialMT~61 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A436B0C96CD5349EE2E997A2C271A852FB7C63600614C83F78605E

4F6AE30F86BA28257C54120FE5FE2910EEF98796A9BFF5FF33C2D943AC1D8FC7

D2D2F580ED2CA924B9747E4A1D93C62124F1F537CACABE0C3E715A9ADDB5FEA3

00D214F2BF13A085B167F51127DD3229D768E4E26AEE9865147E65F616C7A0FB

375CA79DD823C3DC1BC02C3C1FEB6CB239BD3393BFA10CE6C460968E071A643C

9BB33DC03D69D2CBD587BE9F881042B04F646D079CCB6A30C5037AFCFBABE577

7E1F51DD37147DC632BDD0167988C868A80C66C055F509CA968832324D073218

8AE4F5AC0B32D60C9F30DB43A45F6BAE9518B67D37D28EF34A060ED6A3211093

DDA9C198CE572D133AEC89CE8BCF0C9CCB69CDF8C3C78D1D9AD8A43306209954

3A06B82A7160BEC9BC67BCC9BBA32677915EC61AB80800D01F65BC0E7001E4AE

82B83D4B610A77B3942D

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/NCAAAA+ArialMT~61 findfont /Encoding get

dup 0 /.notdef put

pop

end

/NCAAAA+ArialMT~61 findfont /Encoding get

dup 0 /.notdef put

dup 53 /five put

pop

%%EndResource

[/N65/NCAAAA+ArialMT~61 -1 TZ

%%BeginResource: font XAAAAA+ArialMT~34

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /XAAAAA+ArialMT~34 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A436B0C96CD5349EE2E997A2C271A852FB7C63600614C83F78605E

4F6AE30F86BA28257C54120FE5FE2910EEF98796A9BFF5FF33C2D943AC1D8FC7

D2D2F580ED2CA924B9747E4A1D93C62124F1F537CACABE05DC5067784DE4D984

2114F41526B9E556799FA437219B291EF62340113D2F021A9EFE034B66C8D5E2

9E783FAAE7CF92172FCAEA926F8BBF05236F988542A1251147FF12D955D7A01F

B7B42707883C682F3149D422B0C8B02F1F1B68A3AA5B69AE1E7740C710F1228B

A42C86A88B83952B7056064338B87553F3910373C9DD4B11580E4B87C5AA443A

35C8A05C11654AEAAD6C960DE57BBEA1068C

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/XAAAAA+ArialMT~34 findfont /Encoding get

dup 0 /.notdef put

pop

end

/XAAAAA+ArialMT~34 findfont /Encoding get

dup 0 /.notdef put

dup 49 /one put

pop

%%EndResource

[/N23/XAAAAA+ArialMT~34 -1 TZ

%%BeginResource: font BCYNDJ+CMBX8

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 13 dict dup begin

/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def

/FullName (CMBX8) def

/FamilyName (Computer Modern) def

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /BCYNDJ+CMBX8 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { -59 -250 1235 750 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3EC9EBBC6A5E

2825687306A156DACC32FBF07CD53FCFA5F8BEB4C85C022641C2817904D210EE

C1B9CB391931A7DA79E981F6D449067CB22BBBC1C7E17F31494A030C64C3D168

01AD7EA9844289C5FBF13E87EB38D47EFECDFD90987CE63AEE2F73A41DE9D88E

47972B7D71DFE3C0971C15A0A2EA71DB75E8BDC8C575FCE75767F0757BD4C3C5

8EF2FE5165B8546C92942358A58A42B033964534D0C76E2CDB1E37C5F1BC8186

B645497D6E729179C71B60AC52AEE43C00CDBFC37940E4BC6B6D05B631BB7C49

E2D65CF9FBEBB9630526D1A82715F412115479EB78B4B343B6DE35BC405BF4F2

4C3E0C02E88B6477D997D4ECB63CEF210C4DA7BB89CA6710185B343DC7B6EE6F

A9B69CB9D103C3947848F9E1BFF0027781DB415A4C919C3F2E5DEF1B5711D073

BB39468F447727EC3CFC136166A897C1491F4FF2A617FCD2A0B1C9F46BF1B372

DD1577E2CD89468CC85121DA52E91723FFA3110CDD954A127CA1417A31FD2336

96BD105A36AB813850EA85F7AAE495F4332FDA7D212B85E3B0F33F5FE81FA7DC

DB8B0496F54FA21B3F6987C6A6FC98DFD511D5DA9A43F112171C23DD5562E273

058A04082EEEE3C0E671B3988AF2B4857068C78624023236C41672EAA89B3C1F

168801AB64E5D76E4B93BD0647A3FDF3BE49F7AEFFB82EFFC701A7A7D20E9374

18CEE26BBEDA484B689C86A94B11171F8285EBE1EA1AB01A60EB4AD7FFF37CB5

8EA3F7033D76F5BD5CEE6A45B16161933269CBCF264CF146DB6D434045BBD7CB

D347ED680D3D419D5DD690FB7D66A75658E3D3BCBBEA84F8DBFC478D0ECCCBBE

05F4ECFCD5E0F48C239F7A254C4451F58E565CC0595645DBDF62F4F31394CC82

E270E76BD2E4B2C7D1B181E483401A787A9FBD6C23683D589368ABAC8308485A

41B084E7607BD9F56E75EAA9FF1B71CEF781F659EF489C542EF9F4160ACD8BE7

69809BB1533C11BA183762E9CCA9A187427B92A896609AA38925229E4901F9C9

34865216F652FD8350E0563C2DA2C51D90A1A3BBEE0D84C9B59CFDD9D822EF19

B7A1B2848FAD13256F7B1AAED1CC6C4CD3FBB209BA0E74879B5B64E7422835C8

839EC80DD0D3A716ADFFB3D6714D6BDF3DFC2B9919BEB088877DFA262497D374

92808EC56E1A6D295E613CE61050DD61DE3E89278B43C6D09AC9F2E3AF13708D

345EBEAA08F8C2B416C6D1AD6F9B698729A6369EADDAB48CBCB5C2252AE8F1C7

9AC4A1F1501A0094F45FBD450A0FAE0EB699D173E4CF84883674A1DC47C5A785

3A9052237A36B5AA4F741998673720FD199F0E9B69D9686E50EF24C4351299E0

C9FA6C603FD617724D7CAC03AB4E7EF8B97FF0861844547FF849DA47AB4E46E4

B607827EBFF1241059ABC79BD6E2C1FDB24380BDACA2B343BBF17472D12FC0BB

93154E1FF7387C28B669FE426BD54690DF1FA07F3B5C22464803352A351AB8E4

01674FC9FAE44785B86167E8DD078D61E09AF80C635258B6489CE153C4912D22

50388761BE755242099D05EFD874A92F1858001B676400530419549AEBC3FE8D

AD981C6296DE370E5DE2253B67D170636B9AB1E19E21C59EAB867C474F5F916E

1C5049F1A213EC22848B82C5D0EB19DEA770839EBEDAF22945F7A7A0CA1823AF

CFC00D18102B9208D790D5246F10FD2035367FDEF2CD146D73609D363A366BBA

71D104750D5A6905ACE6783937FF88D5B18F766BF42DCA078BAD3ABDAB275317

599E0661A0C1DED7C86F375C184CDFD8CDA214676FF90A4DF0A3327C61EB5A08

80A37342B3599AFAAC938CE5FCA1B6C13B39BE2B2789A3AECB3D93F205476620

DE2C6DEEBD2435F18C037EEDA3A9A00A30E878D91FC6654313E0001C9F752883

6F628798FE5E9190F177D9EF62791BCDAB4AFEA99AB1477BB823CBC632301F5D

DF21C6B500B4FD1F6A96DD53144A60739F8421E4A4FB97CC6C84744D7939CAFA

FD50886AD22D195EC47E01F9394B33B01716D0FF16E96F8DF0B79372A4A5BBCE

519CFF01E25D4F6051A21D91F791F877A8F6A8FECAB9D5432FB75B5C6F7E8F35

2FB5587863A6FC3E4D8419D06E4C7CF003F6E12848C0DF419960427290FC744A

A844D097754C19341C9C9586730C7F459517AFB3933DF9C60DD6D00E6FF8BF66

8000144CD1B95EB2B7220A4C67D430F4CE9236534ADA782C9D77B1A4428DA15E

6766CD0D191CFC1894179C7923805FB925FD14EB1ABE73A5351AE78D056F6F96

6D3C90C6290DE58AB542A52EF94185E9F4850A21C060FA7E29AD7ED675633DFE

DEA0A3D612379FE3ABBECD35A08DA1CDE790327A0EF747F01C7822E28440FB4B

00593B9DD528D90496CD65A98D05397FE38EA7C50AF7A1A31A2B6A34E5E4B9A8

C23A7B9992D18504A8CF373CEA7312D1C76DBFA9C562C8FACBC62AA5A6F97B27

5F64E46EF6B385F09312EAE4510D9395BB414755C5A988F3A8B2EB896614731B

BDD194A829CC75F838F64E7E7566072B50CCEB5DB1972FDB2BCFA1A554856D86

31A5049CC5C9BA75A7A12B5EEB44B15F2BB38130BD76871957944C29F01BB602

D2E4EBD907011B510FC91A0F447D4684536394550F652C00DDBDC122AF765755

AC3ACCD8C11E11C949B256D82B818910BE1570EA482B6781CDD7023CE0246357

270DB29FE965CD2B09C19482CE32ECC51962949C71F23F7F1E4BA202C19C8AF9

3784267C893FA6E556C91F781C05B1814CFD52842FCF74829966A0B63EB8A829

29E0751140388DF222C02449363E15345D464BFBD3C22E6C3AB0AD4BD31FBE7A

31B65D4875E672A6A8343510B4A58C102FD1079C71C233D454518E7EE489A714

9624C7504A1700BB11247FCE1829B497ED9610E156AA212304AF1476C08AF317

8C0A7B0ED11EE7B9C2F9F388A3CC031DE193468BAD6D3DFE95FD77ACA3B40465

176B5A22F2C7BAA1E284CEAA255A90BF5EF7E61526163F1C74D5AC801E8FAE0A

4D1803230D1AEDDB864D0882962C573FFBC36CA55A0A7662134B01E28298C433

3B80FB5E6080EFA30740CAF954706DC73B367921BBF46177DBB9C1EDFD98E675

845B5A0F299551F2E89D36F83FFCB07C3A328C726A2BF72A9AC2723886A4D6C7

D55FDC689AD546D3AFFE25F0335CC5E3739922CD0E07438C80F74F1367F020CF

35553CA7287F8CB96526556BFC5FDD863FC5D94D933E34C2B3B0E21E0F094624

F71A48E3AAD564400CC68C74FFBB0E1FE86316A74EC6EAF866E00E9553B541CA

F92D8099A69B03D55A1A2E50392CC5A9CC6BA8BC64B336305B8D934079D0F797

D4794EC8283C42FB6D586B5F380DED1F3873A8BDCD8E3164AC5C6155C9BAC429

B764F4AFC3F039284A787BC7F07F5F7ABAC73DDA7D97D351CF68E7C2C08335C4

50BE3CFA548CDE5522B35066D9D9F24FBE9C61503F4D285A7D765ADB7C0CF4BB

FAB58F420C375EA58279B5A6FB8C29C5CF3C5CBF44B0E57915F42D40EB330C8C

EC555BADB35076F24975B91FB99325AB08E53A4161974154B785EC2A6F896198

312FD240960CD8C5CDDB529BAF021066CBF197BA6DD30C9C3D9580505432DC7B

2D07E88D5225F0193A21FE6E1266FAB6C7AF43D00DFA45FF0464B7687780FB5C

548F48E625F7BAF75B1438FEF53DD206ABBE6D67E56F61ECDD072BB2103DC432

A184085CBB368A3F3D43B3D5B00D6637F30E89954BAA43C66DDF71B48BD4DFE5

B26518DA4E94F76F4E41CB8533D7760F53F47B59F7CB691142ADA41E2468F554

8C4D3B6975F7F2EE6AA30A72C23BBF7A68BA65818AEE72769AC9269C4C3D066B

B251B4D44223FE791AED0C6044B1953AB1D98BEFAAEF3672518DD8F86F605165

06E9AE75116ECDEA514971F792D1AA3FB1B98372A1FE3084DA0FA59A56AD1AA0

E32841728600041E6387D2182A7B11C4396C7674C6CCCF32C0BB07EA75B65F62

0EE90C34599E9524A5BCF2747077301B613DD07AB764479E8B6056E8DB684DAC

DC7F1B25DFDF738DD7D1C8CE7CA4A446DC9AA759DB7063EA54671241CE8D0FCE

236AF8D8782A09437E800A8B7C68294B918AF0535A7AAB2E33222115582C6DED

3B74B43FF0AEABB436BE835936C980D435ED9482E4A23C3535032C9C3E25B896

EC93825A4AFE43FC3C328DAE139180F12E8C5E356EF589946A6B8D8ACEE86856

DBBE2417E4609A053FB403ADF70931111130F8892A611F7BF0785362387B9EC0

06E642A448D0941ECE90CCD3949862F92541B8015B8567C035E544A911242D62

405FAB81A94DD369DB6873FD6CDE357A486C2B12A91C3C5FF7B6383E652EBB2F

F7FFC5D807A4A39CC67A5FD7E4A170A2C9E6CD72C92D4F87973F8297F5CD0075

E404E6E14FC3545C37014CB2F14F30DD9F661B0A375A3B499DDE574CB1C31007

E9BBCBA5031E32047F5E8D9BC40F2F6010B8D25EB220821A36C4A34B7C338591

C7B145D5CF55D78381B24878DB8CE0D4CF635DEE69991DA268889980726D4F67

467CC97254F3D41CAD6DCBDE6CAE7194F9AC04CC5C2E8AE94B08B5265E34FD49

1F6D6B92238903B0D271C26177C763A20746902E051F710CEB6FAD19C1C6070C

5DA2D5E13AB1B3215FC2B6C9AA25874237E4F626B234B993BDBF08DDB5476B04

7AA8A135B71F1966ADD2D5599B4634FD5EE4CF6842A462534B93F76BA4986F6A

DC2CF9E4219FD41EFD0D78043B5536F6A4629B9713A36B0158B09C76C63A7A80

D117244649797EF2BB53B2FA7EA6743F1116A0126551E508B01944E4D1742E7E

195E479608E42570A620722B65672111313EE174DE0061560844B5A96558892D

FB6A0C0CFB4BF763732856CE581E076AAABFF6C6C227A814B4FEECEB50503E34

BBDD26A51DBF1017E09ADDBF544F84CEE65C61B089DE8D2A02AE26EFCE49CA52

955270693D731AC48C03BF025D88B3EB467E2F44375F24B643E2DB30434798A7

34560F695AB4EF2AB27195538C3DB2625846BFDBDDD0F96A512B39FA50879626

257A0503F29CFBA1F2BB218A9557D6997AF4484310DE4376FE60AA2E7368273F

38256796F1BD1235AD650FFB5A6F7D5B3216C560A5C6E6F0E7520DF41C3419C2

59B4CC2A7A414ECE37C441712AC543AEFD86F37538E1B27A3385A92C77B245D4

07E0FE906990486E6DD2519EC26E8E8CE343F3520A430224E067A485FD448E70

4DCB1CDF15B4D9CF8852E6FD6FCC682D596B902509A6B7E0FE9F8E17E260106C

7D50E7381C59516C149DFFC64BDB7C814FC27CD9ED76AA9C0E819798D3620EC5

A87D9193A357E0B3AC681A889D5694D4A5FAB23A58DB4B4C476855756D7EC2A7

B09522ACF37034A275B8334D3B050F29B2FA7E258776CE97590C292FBCA5CAA5

3391FF503425354A2BCCE7802F7698D67D66A8BE32CC51DAC86EDFF8E57E4300

2CA6163604157AB7F393B75D199844C76C90AE83B5C8B8D6D8F77532C33F8C5C

C2B234E2E8E00577AF1C4642377ABBE99BA43BABD1918D72DEB05ECC177AA181

F9232F24CEDE0FF5A18E3E2D3E40F9179898CE499B64439AF50215EA8052D4A2

DED05CEE991B3FCB5FEA7CBD9D314C24B8174FAAE5063E3629F4EA9DD24289E1

457942FAC0573C048C379549DE3147682E0A5974CDFA27E339738D0E72140343

2A358740CA7FD29B6205A7A6267FDA9473DE757DB6CEF00FB5B3A7C28722A6E1

C1A588801E2A519201777F4CC2CF0448938D571780934BB14371AD9E85C44F8F

AD179958121ECEC8E84C307E6A5CB3DCFCA55D39A45C98F4B3E1FC2E336E07AA

E8A1FC42527FC37C35CA44D49244C498E74FD64C2CA85CA94DDAAC4E28DF98FA

E84F8DF33111F2451FB3F217DF915025C95BF3849C30859938BB0CCC85FB5102

00417549BC20DFDE201FD0C605F362B6DBBA82B32C02315C5ABDF74B153266D9

004E860AD226DC08EA8A3D6D26217390DEB151C76CA8FAC76A4A002E69F75F58

9B1256020ADDC89AFEFEF2A8A107CC78443742AE4C539CA18848935014DCE756

96EE2DF18F4C8C73C04BD95C16D3D5E6CDB34B4919AE32426DE3185777B04411

4C29A49EB2D980D73A81B7283B769AE667FB6EC62721D1BEE1F81C81E2A27E25

753C9AFBD463B76787E96E244AD0F7669B21C4BB6D231A5078FA495910457AED

218A8D5F8BA47F2AEF73E1787741BCDDA4A2DFAA5870B565D76432D2C795FC07

41A12E56ED74C867D4B8AD45A9452D2BAFA113FD6DDCF3967D259507BD3653E0

451F3270C5174F3EEF4EE134D3958AECBB5FEAD3E9BD0411E345726ADCBEF60D

6CA80E9FE339FB12E7E9B420388B149AFE027BB6B4EAFE52DD2EB57FF064E142

B6E451124E365C017738062288BE52926CBDD89A8E5B0310F13049901A8FB665

A743FB2F7DC7E21B3903A593E9D49ECF0D5FF1F1586063992C4256251073F617

2FC533DE237F25A25ACED1E969126754672AFB831323D8896D4FD42EEF33B727

C9AFE1918579D2A4A268432F5D39BEE292DDF1E397BB1BA6C48DE16D853C6452

C52D9ED3A56906768F6E18CB84A85E0C3F8F59202B3E95ACE22D36269C0502DB

2AD97D8C736876438ADED9D5DA4359CAA6D1AB91A7571DD8C351DC90916B5A0D

AD336822A48E7336BF1E3E88F9801A2A908A6BC4F8CBE69102085B10DD85A531

D9CB5C3370BAC9110DADE461017C6232611011896228DA98D8D5ECCE0F24490E

63A7409F956FECC5168013B91FA633082F9F97902AFD563E49E5DF2C25519AA8

AB9A9F8791574696C85E1DAD7CE23B3886CFB238896EFDFD278D512F5D7C73B1

8A176E48D29A6A2EC8153C30B95B921DD386CB1944FF4A8F75F400CDC0F4209F

9D53DEA618FBBB71081447117CCE3BB2F00265990A95791E40078299277AB9C5

5A41EF66FA17976F3E1268CBE8A2894289148948A6D7954CAE48705C15E50266

FB12D605E79F8AB69827CD8B5A25F871DA951F44BE1B12D3469F58A66DCC9092

B3CB19A53EFFC6CE18987B5A540D19580ABB467692DF7D8A5E8EEAA077647535

70F9C62D1DE26BFF330D8F289AE486DD5307F0DF0F2FA20C5BD39C538FF9A044

417ACCA077A3A53F467BD99B0DEC2D5108E77C5D5FBFB28D723BDA41F3F3D229

84B06B37A1E0AE1E849F6A51A127862CFAA79536F27EC1762DD8AF598E179D7A

27756C49CE6E3CF32FA0AD9B1779E62A34901DD54CE9F3345A3F1314517CAEF0

1CBF9194A15ECA3D51D756005B19F487D75C6EC2E334BA3EE129D07FFD77DF4B

E8CD777CD7635902EE3F999434C0F13C4EB2A2366AE563FF67CD33E8AB59357C

42F67371EE02E218D9DA448430D558AB3E166FE977DEB000CA9DEDDB70BCAEB0

55D8EBA93E8F047A5AB20530ED6D217843714E9D979DD0CDB721E70B38F872B9

6B0B4D32E782A5F41A503C3345FFCFB193BCD0C080B37B29296A6239E4CCAF74

544F6B925FF229B4B67E3B5340A4F54F4C46F583A5524E266C0F5CF2D7187F5A

D84924EE3FDF4A615FE5D8B5B42A5199AB2675E9869E61035E2C0BE12E1B6DAE

B11D1C36050ECD492DC020A2B4FCF044E7636A3E74537D08A9E37E6CA762DA62

322DC70D223F5D543804C8C7B9CFF7D88580EB68DCA9C8642658275C7F75F482

126CAB7324B86C36BD3BB6F3C1B54C6FECA434768284B39FB456BDFB5F1EEE27

0120021BE9E0947E81F710A9D9D207D12334A1B4CA25EA0465B120CB8129CB23

0B3350A76AC05CE9FC695F321689B41393208EED4B3756CAFF428D77DE2986D7

BB6983F5A586190A160FC90C3457093A977802010094A88CAD42230C23E2FC43

A40E10B65E9A9799D4104CE201630A130DE5186E1B3D2623779F29BEB9C4A1FC

90ADB1FC35377B69CFA0893DB8513A8B98960C31FA15CDBC782075D39E185C6D

C002DD3F6A0405357CE9352A83CD7FAE1797D323BBDF58F2F225A2FA3D5DF188

ED934F2D39FB7886F7D1C5595F7C409C91F626CD0D1D145327A93871EC14BAA1

E125CEA839CE44EC826DE9BA86FD1A4C0FE168ABF1AD23317627FFEBFC7BF552

FFFDBCE275A570EF2B4C9B32523622050E5C35CA9F7F2E7342064E7B55464F46

FD66D48EFA01BF7B9904559D3F2094ADF90E7020F4035186FE37019B8E597CCF

71B2496F33EDB0E427244303C2ADB9E5A9782C314546345AF05E92C75DCA7F15

5B6CA403685967144A060EA0E3E90B65182AB8018F3590F41F8594890D8C945B

4FC31D7286F32BD349D36F13B4E049A7840C4E04DC3CEF0AE67B0E35A7DDE1BC

159D6A1343D090E095CB962CB2D9069BF2BB13BC9F612DE0C14AAA22A0B3F32D

B57DC478DDBD719254A298224A24EF4871A9F0D0B648EE8E80727D471E0101A7

8B08E0ACB05D3104D1B5301AC3060EC9F96A5D9641188EB27D5BC8200D2FF0D6

051224C06E52C8118C0F5F5B6BC4CB2C2DCD125825D29270CA8D38815B474D77

530FF23E90D1D5F9211E80A934B510FF2D9442BBDC4C13B7AEB5949C9D0B5E13

BC80691F51BC0888E4DC34B794BBD554BE2D3B9B8F9C17A88955190C73053395

0EBCE777960B69D57A8AFA5AFF9AF36F8BE03EE8C2F23A7BD361BFD0EFA5F002

1D3407DF7BF26E1D94D1C5DD9E9DD9FB1576AAA843704EE6E346C408B96439E1

6B83A2EA05AFE968602ECD4E6F7814FD2C18952953BD7134E9C2CAB55E1F8968

2F0B915ED8F5F1DF5152258B59E5E48208DFC4A7429AB1D75BE50D1952ACC252

B16E08BDC3304C367CFB611610CCF1DE7C16FCB192A36B2B667C5FAB42494A8B

0DDFBC19B78753731F209402C50762A10F95BA7ED268C8C1BE041E93F4B253F2

C8E7531F92B1C72550B2ABAEEA1E4A2CE826D39ED70EE0DE4E5942694BC2D7D7

6AD3AC5B26A3A5E0998B248A2907C14C0D1EB0973FC617B69DBEB3B8AD50F411

885D9AA9A5F9EF2683C00DCA8BA0DB10F378CAF42AF4F349600789F359023CBE

8377210EE8752F3A52C5EE9101655E8595415E45C04C9D1C2A2A0CFAF592A29D

28F28ECBC31B1D8632800AB90E6F27D63857B7A555F448602387260EC9700ED8

332E225086C1CC30667E57F7E0390B5C975CA63ECF7A4CE6754FAC798CF2282C

5AA1A4427D284E53BB8B1BA740C4AE63F4BA7725188F5225B0946DECB0DBB21F

CA350105A1D243ADE4615E7C195FD2D763C5ADD47CEE075FC35EF11E8859C66E

22D41FCF7AD25E401AA454F247CB19FAD874BE9A0C84A8657AFBE013B5AA5347

44D49E2CAF2B85727DD48586145DD4C8347AEABAE5B3075EC8E329FF7BFAB9ED

3C368DB24E5862ECDD33E33A1A988A9AE33274B2AF1836F8560C3A0964F35F97

1525FEF69B68AAA9B41D08A7F675E1893CEF94A5220459621589EE663CF25B7E

8BB4DF971822F2758F67E7BA90CBF52D173591C29489AFBCB2ADE8E494EA1CB6

B7E5D00E4D2D2A3CDCD8D081A3F6A08C60EE43726BD1EFB0CB2CAF1E12033F35

A437C667CAD0067135448D9306426CF39E87FBBF9C8FCBCDAE0B5C92542A26FD

E40B2CAC7741949A77D37A75239A20D21693CFBB11AA3D563D16DCB8D4CC7298

0C8D7C690BDF8E74AA8ED63C3E46E1722C7C7759ACB2605B8D1037195FF7B655

FDB1CA62AC3BF1E96A30C71C2DD0CD121231758B060E7EBAB75139DAACB5CB73

0F4D6D86F1207934291089F33D586D81BC5C102BBF9AE609154AD2050AE70D3A

132F2A0027BC519EC4AC9C1D05E0CF9913B73FDA9B2B4F984853D34620E86B66

092B2A8F56D0DE16A334BC8627B83910C793E9DC2CFB610791DE8576CF3AA148

1E9393201E1FD4D33D6EFDB785FB75808B52F0890C5E33D976FB13BD612EDC34

7DE0AE2DF6866F8DC927162AA7477149494294C7D1A57DAC2F8974BFB0EFBB54

C8DF6664D0CBB960C04707EBE100F8D54C0BEB2C7295FB617ABC09823FF01F3C

2DA74AB9C0A69179B33E543828AF9469F43A147A6B8869F018C551CB06E8B9CE

0285393330B4631E35FAB9D76581521158D66E200E39ECE847FFB8B3064BDED0

C284E54475BABAC6E8F9FA3FC01B1B77CC7B915393FDBE3668F1FD3C4BA8BD0A

1B9E7E59CCF064971A5CFFCEAA8D4F065944EEF3856763704A061514EFB3569E

FB9711F98208561A1624119622CA57DB93A81FE272DC3E65D4371EDF38B13958

CB48ED8B5C361B4A90E9773D310662402D663089412FCE6FF35FE822EF7CE8C2

F378335FA9CAF1146538A3A52B5046DE843EFD5F2658E770DF6156657DD46C61

22E775969D37BAC859CFD2F4639F5B9DDB9BB9B5CCA594DE576E5CC6D40125F6

2E7750BD8C6F6B0D9427FEC510687FE8E5025BA3552B82E918D0D672270EEBD9

B60C142636332670EC8FAA0A8DB701E16B01DE88AD61D7342A59DAF104933793

C236A387B036E09161BC11B45FD75B846B362AAA57A4946DC4CD1ECCBE4CB529

1FCA14A47815513D4A2D285C723F08B028E2D535901297D53A28FDAA6BB5B0FF

42B12A673F3CCEBB0B9E612F31239655248594F6798DCA824231EF86DCC9902B

AE9C4AC8150F87BC3E9FC0FFC522F895989228D480594C0AE90BC8BD707CCD93

3F57848578BE4C4DF3D3E08072B9A02F00A2AFA21E902AC48E6833E6F2B76FD1

D1FA1D19568FB7EB25168B86BE3D4D71432D9C709D1A13E713D7329564F9525C

900430E20C74345C34414F7611D7B33FE5632ED23A105C57F51654D9A70631FA

E0F6FFDCF49F2D6E9E9AC79F8797EA9E84CAC2669DE22A8A22E7321FED3C3A36

DF05E3D8F7B1433F2B46EF2CFA15771C18B5FA5686710C504B1A2D09EC612113

B7B7257B8CDA8A0756937508EF27709CF803F26F3C5BBC69A6EAA14D9696B2B6

39935B23A5B25F4C782A3571870012752FFF1E690EE00F01C5858721386CC1CF

151C41EC5D24C9565A2715FBFDE78DFF626CDBF1D3A503371F7A8207FBD7929E

8826CC0A01009B6559F922BF951A44DB79357239A9D86F88A6ABF2D479AA06F3

1E6EBFD24BAF22426092FCDCDED638D513851EE11F82CF3D787E0A987C5688FF

8D0DE5F364A7D54CD2C2F11CACB7CB60C5884631ABF85723EE451E31D4204CB2

A312EA1FA9081E5FE581E8267DEDDA3238C9C300F7D1FEF253B0D59EA9F954B2

2595C79830F232F3C170E7EE59EF9FF9E8285CE11A190D6CD0F36FA7A0D58141

16CA2B9B25B1CF21D459A48374AFEDF8678514D515D6835DB41B64844E028459

48F0A87936164F98D801B67AD6D5C0C2F78682D301D215DE5FB250BE8FF9AC62

2F0322E084DD9F798333CC7CED8418A08E5888BE4DB757D34A72E5054D8D09CA

D844BB890F85F543C33792D13F6B004EACA7935B89BF97371AE8CBED0BE0FFE1

005D90E6644C3D290AB332BD87ABFB297FBA8ACC48FF61FAE40B4B5653404651

D55134F9536C254A890D9788019700C8AE3D0469F0EEA589C16B7E5D51869ADA

65AD69EF853945BAB41D1DDFE2C38524A9BDBACAEDB53EB4AD5EEF0057A8468E

DD3DBC5F5BED8F16FD0134DD14770D3C09D344205F0C74A4767B17ABE32C405A

E93B069D43D129D41B5CAB9813F64187D4F3BC4072918A26A0C22B09734AB1A6

8E6276EB343C736DB17C02A46B8C996927956CD8A300BBE965415402753FA081

E271370036270DCEAC3066F67E93EFE211DE67E6CF5956B3DC3B73037E0D23A1

AC11AEDA7BF9686D6955980F9A935EFDAC28194EB596E62074BE71468CA0ED7A

5DA66F24E931CC8D44FDFEF2FFCAE6F989666335B1F68C2938BD2A05C60D1E0C

626C3317E2B47B270D11C5DFB1E2F7E6992B3B2B1CF49BD871BC38E190EA7B34

00B5E9155A632F7319BA1C37D9F82B6518ACF33381E22D142257FBBC158D8852

A628E48BCA2B4430180A10BD6315EBECC99D0C8F689FDE740416A74E3B553F96

386034B6CD8A2C45A32BEFF5F7AA637CEF4D723722CC39697867F8064A5C9F7D

2475CB77529E7992CAFAF6AD933AFF54AF56302CAC4D70D13FFB8E08040EB4D2

78F2F4669D7AE1598305A991227DB67F8B8C9899F223C5BDDD0A1361BE1EA002

7E754BC82F2614EF3E87B6DAA980E30C54AC519612242E79300C25B5B5EE2B19

49DC80E61426EB7E107B8B123FF45ED5BDD4751571B0FEEF745D301883AF5B27

AB5B59A8F33378901F3F728AD640100A58569E142B8356AE3F1ACF8C71D8C9FF

FC2BE02F3CA1AA857D9F3C06DE2452679004A724D665B9CB5A81FA0532D4911D

8B08190B6DB9CFA9226FDAF70310BA8A8A0D5A612AF49618B0366D5A52D365FE

0EC6C0ACF620CD50632ED6885E6F3449BEA295AEC70A67E5D79FB9543173C355

729F4F12564A1177AA63F599CC5C7F2E42FB84B80D7C394A99520EC075DD8588

7C99F6FEC8D9D86768AB2DB5AFC8503645759B44E8B5514073151B855E5B5468

6836D6975DAA807336655601045907552D5476D3B58796DB5E4BBD523C3BB7EB

2A5FAEB34A0D5A6AAFB3F2A92440A7D56DE2BB421CBBC48B6E93F619E9D3E664

8029E1AD2D79FFC48791910E13630D914E67A3394E1192D3DE291929360FEC46

E428B92E8C0C1D6E5D4F07783F9AF0FF594A23074C9412D8DC0079E6B4722F7F

98097CED87B27D056BFCA55F3BBDF58446D415D38C543276D8AF8E244BBC45B9

C34699BA747219EEE082262944ABDBE4145AF9A24B8200C9F8F49951F9172D6B

5A3F8F173715EEDAE19A8D914EE345AD53CFC215DE68002D5EDD130EDDF25A11

77A5504F19E170CB9A05B7C7AA3E7FF59979E54B2866450A52F6D689449F7148

B4CE81B06AC1052A17305829449D486DC6B08F2F990014FCA2C2C612377654B9

F7A87E614FED7B4C6E12716C1DACAFAE36642378E762B99F4E0F11E4C60B7B00

CA45BA3EC6A97DF1F104546590B84678523933069549706F119711916D5452B2

B3A7C0955CE0B50DC8D9275EB32F40613EF7F8C22188B91E615BAAC700FD173E

6F4B145A75E934DC576F382A5A250E8B18EB059BEEC4302178132AF2B0C45D7D

3663A68FDB717BCBE223EA0F87868AAE68FDA83DE40779182C38D600357917AD

D82FC1C2858A72229E16369B4603E6AEC86ABD2F87A9C15ACC06F07DCC2FB165

1DBF7F3F5E5C04874C3D8B225F76513ABAB0975A7BBC1CFE2D68A131AE82593B

16152F86F854B73F8A88C4E75CEEAEE9CF0872873852FFB02465487965495E23

419D5EB77696CF6D29657B6662744A849E00A84B21C48DD02865C16AB0F841DD

FDF9DF8119E4F26CC80F844CEAEB3DA912683610D901AF4EAB3423E7B7DF6CE0

5F8E20275FF9101C2D7CC17E5D8322CD7D5D6A72C4410EDFBB6CF71242868693

029CED524A95CF556B78AC7B39E72502CF641A8119650A99959A0BB10C9E17CC

2ADEF0FAF1E64AD1F9ECB78875E5FFC9ACAF068F9AAE713300EABFC81EEEB85E

4E33A416

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/BCYNDJ+CMBX8 findfont /Encoding get

dup 0 /.notdef put

pop

end

/BCYNDJ+CMBX8 findfont /Encoding get

dup 0 /.notdef put

dup 11 /ff put

dup 12 /fi put

dup 13 /fl put

dup 40 /parenleft put

dup 41 /parenright put

dup 44 /comma put

dup 45 /hyphen put

dup 46 /period put

dup 49 /one put

dup 55 /seven put

dup 57 /nine put

dup 59 /semicolon put

dup 65 /A put

dup 66 /B put

dup 67 /C put

dup 68 /D put

dup 69 /E put

dup 70 /F put

dup 71 /G put

dup 73 /I put

dup 76 /L put

dup 77 /M put

dup 78 /N put

dup 80 /P put

dup 82 /R put

dup 83 /S put

dup 84 /T put

dup 87 /W put

dup 97 /a put

dup 98 /b put

dup 99 /c put

dup 100 /d put

dup 101 /e put

dup 102 /f put

dup 103 /g put

dup 104 /h put

dup 105 /i put

dup 106 /j put

dup 107 /k put

dup 108 /l put

dup 109 /m put

dup 110 /n put

dup 111 /o put

dup 112 /p put

dup 113 /q put

dup 114 /r put

dup 115 /s put

dup 116 /t put

dup 117 /u put

dup 118 /v put

dup 119 /w put

dup 120 /x put

dup 121 /y put

dup 122 /z put

pop

%%EndResource

[/N84/BCYNDJ+CMBX8 -1 TZ

%%BeginResource: font JCAAAA+ArialMT~5e

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /JCAAAA+ArialMT~5e def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A436B0C96CD5349EE2E997A2C271A852FB7C63600614C83F78605E

4F6AE30F86BA28257C54120FE5FE2910EEF98796A9BFF5FF33C2D943AC1D8FC7

D2D2F580ED2CA924B9747E4A1D93C62124F1F537CACABE19BBD102F7E1EC94F4

13C4E277A1DE905E983FA6CC94CACA24BDCD3E4E00410078FB7F6BFD7E9CCAE0

1E22ABB69564A760675E59671787B653806CACFB65597B5F18F637C45B2F93F9

63FA4AC15420B5FBB0F09E9CB1E107C76E309C38E178E4252D762EF01881C7F4

1059A1683E8BB0FA14B49B6C6281092CC3FF076A889E0D2CC5C1221E522B4336

40D5CE03FFD21AD83B1AAA31221600817C48CA1D68BF80D966A32E82ECB6A8EF

73F541674E46DD63DB85F62555B021AAB479F5139C0E9D951A54D020406BAE97

3DCEE2D00D0FF47145872ECCA37FE5D50FCDD832C86DDDAAAD7B00A1C2C4EDC6

B9BF96DD13F91446B70A2517E720363B3EB17E62CF3C636F4658AABA3B7DAF4A

DDC552E73B050E7D5B282E9314C7803087BA5FA70DFAFC35E01A8AC58A1F26A3

8A419B1F70ED2D51DE7D85176A97F87A4DA4A4

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/JCAAAA+ArialMT~5e findfont /Encoding get

dup 0 /.notdef put

pop

end

/JCAAAA+ArialMT~5e findfont /Encoding get

dup 0 /.notdef put

dup 54 /six put

pop

%%EndResource

[/N61/JCAAAA+ArialMT~5e -1 TZ

%%BeginResource: font MAAAAA+ArialMT~31

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /MAAAAA+ArialMT~31 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A436B0C96CD5349EE2E997A2C271A852FB7C63600614C83F78605E

4F6AE30F86BA28257C54120FE5FE2910EEF98796A9BFF5FF33C2D943AC1D8FC7

D2D2F580ED2CA924B9747E4A1D93C62124F1F537CACABE10F5720E4ECEB90DAC

BE3FDB4E9AC75AC8AB296338C4CD0504F9EB1FFD8ABF991752BDFE7210644F10

5BC22C81A8A8D3D722C162E90284B193F0BA05B5B64046209ED1E2A88B37996E

31AADAAE25830EC759036F7BF642874ADDA6B57FC3259E611CDFFC02F9073655

364B65719A43E2FBEB5E873F3C2D4F0E32AFF675A8DA4272CA3A11EF255B362E

1239314C99DA230BE5107898010450C13AE2F959E9496FC44E3CAD35C33D3E3D

BA6277A3B74AE6512899538A656AF2EEF9847A7F939C58461329708DD5069BE7

A497C54C0899949E52E8019C303F89F9CAF713F62CA9E08A9023D0349564624F

D5D19BEC671D47B8397D4E2BB4A3F681CF44E63E85BB2B5FE1F90791488433B9

2E46924322

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/MAAAAA+ArialMT~31 findfont /Encoding get

dup 0 /.notdef put

pop

end

/MAAAAA+ArialMT~31 findfont /Encoding get

dup 0 /.notdef put

dup 48 /zero put

pop

%%EndResource

[/N12/MAAAAA+ArialMT~31 -1 TZ

%%BeginResource: font VEAAAA+ArialMT~9c

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /VEAAAA+ArialMT~9c def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A5C48AB7AF79B79D736D42CDE21F0363666AFD1B2E8230C07E3DD1

B4503AAD5E63ED2314400EEB16531F7335B34CD2BD4FD38F90ECA74DA87497C1

756F7178A45C7EC0ED25E0AE233807F0EAF3DDE653C42461EE1E6CF406CA5376

190770B7B2F25951557F14C69C806EE4DAA36BCC86C4AD8CFC2E4E0CCCCD3939

545571D391821AA1B51C7C927D1BF86CB5D14A5246D5AADA9553A94527B6D948

47AD0D312C61578310D59A332309CBA05E59342D517E715973D178ADD8B28CB4

BA5787275277EEA2C8DB8F5CA7BC7E3A80A8C68B015469E179CC26C4179AFA96

BC8FDAA176B7DC0A59EEC2265B956484FAF33196598C9A5231EB7ED87D7B08F7

B26B11D32CE4CC0CBCA0D409B7BAF4CE976E3C90CC14FD60668B22C11E06B054

8575CD3339DECC04641C4C5D9F2F66DB764D4036456020E89715BD346483251D

562368FB1B87881D331B5466B2E3FA4C9DD352AFA0CC02E10FF88116523DF132

75CDE135E2A095CE9674F431C8C66EFFEED46FF42D6D24A26729217EC40E2CDD

08548877CB996005DFCD60F4E4800BC532ECCEA0795ACD05A8CF3BF98C76BFAF

1F5259BE45CE85EF1DCA249F6FFF5EA769D529D76EF526E5B5EF1F76617F0D30

77016893EAECDCD507B5F89BB406142C1E1E78DBE1CF0D83D0BC9A4C8EC7A947

4BCA031ACC440F3C3ADBC891B863BCE0386E6F7DD095634CF0B1F3F6

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/VEAAAA+ArialMT~9c findfont /Encoding get

dup 0 /.notdef put

pop

end

/VEAAAA+ArialMT~9c findfont /Encoding get

dup 0 /.notdef put

dup 66 /B put

dup 102 /f put

pop

%%EndResource

[/N125/VEAAAA+ArialMT~9c -1 TZ

%%BeginResource: font BCAAAA+ArialMT~5b

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /BCAAAA+ArialMT~5b def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A259BC9984DB874CFBF432DC23D7457637070526912FD9815BE031

9519877F20C9609B5B58AAB0EFD1AB99AE9E6EBBFFF6479EB9E420D146762F01

59B41831A5312789C775520554EB9FEF7F7C5A0B69609D2D2E7DBB708F2729A0

1AC4B89E20E429B23A2BBADE7D79EC75DA438BFAF81EDF6DF91679CBB448EB14

80D961EBEFA87CC11FD53CCA5637AE4AD480257C747FD0226F9EBE9B36BC1B2E

FF8E355E4FE1E6420FAE7AC6209BC54F8B3D1F1FA29810E61386B2C8EFC0E4F9

91BD31E54EE3A4D65537BAD5A5776DE3546CAF14F453482267615D92D10B11CA

D7F0F6BD9F04A45C75DCF820D72ECEA9A9C4008178CFCE5F1AB7E96C83B69BC0

6FDF271D8AF9ACBF1CD74B6FFD52F2CA953529620A73836FDB75F3F8DC3B450E

D4EE8E3C0083428651B55565805D47273D0461727392F6E43DF6CFA2594E84F2

FA3887CA1E84A51A5D79D14929699FC3979C23518BA5CAFC928B5FEA5A158349

B6E945

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/BCAAAA+ArialMT~5b findfont /Encoding get

dup 0 /.notdef put

pop

end

/BCAAAA+ArialMT~5b findfont /Encoding get

dup 0 /.notdef put

dup 44 /comma put

dup 69 /E put

dup 70 /F put

pop

%%EndResource

[/N53/BCAAAA+ArialMT~5b -1 TZ

%%BeginResource: font ABAAAA+ArialMT

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /ABAAAA+ArialMT def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A436B0C96CD5349EE2E997A2C271A852FB7C63600614C83F78605E

4F6AE30F86BA28257C54120FE5FE2910EEF98796A9BFF5FF33C2D943AC1D8FC7

D2D2F580ED2CA924B9747E4A1D93C62124F1F537CACABE1EB219E3F599783FC8

59D554366FFAD4EAA4AAF6ABA12F8BE697A254531B030FB063DF68EEB87D9D18

85C66A17936CD96031BFC434AB83F105023EF2FCC7A04B262559D53F632B6068

111A29C4267891B9B4A89AD4606494F154ADB1FE12635D569A2EA9386D8BBEDB

05AF534E75E84D444D66E46666F4F95FC8EF3B523F4AE4028BDD498A88B1DEDC

BE4BCC9E75F15CC3E4AEC5B9DF03099B81B683AF9AAB78E28EEB1FEF4ADC5FDD

8D10A773AF75CF577C3209A884EDB643E6EE9F3E770DC23C498EE4768BA39987

61BA886B05AB38328B36DCF0FB2D74BB16EFDAB8E46FDC84D09D9683F90EC1E3

4ABBF208F20C144CE749E29C5E546BB9C1858E9DC25FE15F5D2A2C5B366FAEB0

579052B4BB8FA50AF449B9091478C5B4008FE53DBAC3B7D5DEC9937C34EF1DFA

D19B98FDED7B0FB8E460D8D545555D22042D

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/ABAAAA+ArialMT findfont /Encoding get

dup 0 /.notdef put

pop

end

/ABAAAA+ArialMT findfont /Encoding get

dup 0 /.notdef put

dup 51 /three put

pop

%%EndResource

[/N26/ABAAAA+ArialMT -1 TZ

%%BeginResource: font XBAAAA+ArialMT~58

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /XBAAAA+ArialMT~58 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A18BEBA8D67DD8AD36B7F2459BDD5018192B26B1196D9822275B7E

7116DA2B71C1A0BD3FF9F3FCBFA20466CF1F99EF43F07D8EEBE6D20CD1F74810

527EF849CA7D3A47A075C579CABC23DFA76068EB6C2545673AF2A19E31E574D4

9A16FB9D1507131CFCD8CDE99EA9BDE4201B2A538AA74A9A1A5B863BF0281EE7

29DFC7817502F7E7704F393B9E2E5D8B13A5F25C68E703F4FBA1CC6B811090BA

5CAA6D05B8A3C47A45ED9417CF1887EE89685A8A227F6D5E0F2FE4FD3041CAD5

F253AA7C6339A7ACA3EADADC44C0315FFFE2B2B64DBC849330108AA09E40F20C

029BE131262C7419A717E11E432DDBF20A2CE1FDAEFBADE93319D0C9D057231D

59E6A2166251BE12667B4DF0987BED0AC759E2219CF39BB1221FAA37866EC121

A0F6E561F865D9D887E9ABD3A80F1ECBA6A06BE31A9634179F25AFE64BE8F08E

0E2CDD929F5683613FE956CB1B9FF09CA62224CB8FEB957C51D74EF395C3F1AA

8867B48512EE33C5870CCB0932F9ECBFBC2885E224993E67CD8D1381F3FFC8A8

ACF53F8A5D8C03599E6BB4E5E504E6A3C1C1BAAE1CCC45DF20263D27A6651264

DEAC37A3BD2C967A4F980E66D899B6249BE0088E2DDBB5D55F426CB3A9EFBCDF

C2E30852FF885C15305A5D777D5A7DE4898ADDC72A728FAD90626FE71D492690

AC3F3309BBDA03EFC39AE566FF2F90EBDBBE0A7D5E476BB1FDE20FA3F0FDEA09

4EE73DA5386F6171953E147EBA2DD4D49802FB485C18DF406F9D6288D68FFAE2

B0DE7FC1D02FFE12368137C9B61BE467CC00B6E9C60C1A5BB798A86901E22595

903327934CEC173A1B57105B09DC3F99EA3CCEAE9FEAC6AE6C85BD3C2CE577B4

2BD839F505A9378F9E469EC4B54C2F7E76DA4CF5E21A9EA9A36368857C80C598

2A826F262DE4AEEFB799124B024E6DB89BA1D62F957658C06BC39EA339A8B5CA

C05BBE0EAB119AC6EB4174153743249E7E893C05AD6131AFD9F61414B32B5169

D91B59FBB6DA1884A78D0B8A2B8AFF477BA0D75A220BFCDE942F7498F4F27038

4E73FD89F4D90D99609287A7CC6A3092D4062327EC5AC055E2255A78DBBD8C5D

7B9918C05835780281D94DF82E0710B002C9C151906AEDA638A867E810104EB0

7CB0DF05CB9A787AFDF44A54B6C8B4D7B24FB33AE37886D7ED30BA1E31FE34C5

89DDB7E6E82CF1E8581E245D1FC01048B48B6649938E797337AD339D0D54C83C

5E2150B305F344D3FC96165913614EED77EAD3E4428588

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/XBAAAA+ArialMT~58 findfont /Encoding get

dup 0 /.notdef put

pop

end

/XBAAAA+ArialMT~58 findfont /Encoding get

dup 0 /.notdef put

dup 76 /L put

dup 77 /M put

dup 98 /b put

dup 109 /m put

dup 116 /t put

dup 121 /y put

pop

%%EndResource

[/N49/XBAAAA+ArialMT~58 -1 TZ

%%BeginResource: font VBAAAA+ArialMT~55

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /VBAAAA+ArialMT~55 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A436B0C96CD5349EE2E997A2C271A852FB7C63600614C83F78605E

4F6AE30F86BA28257C54120FE5FE2910EEF98796A9BFF5FF33C2D943AC1D8FC7

D2D2F580ED2CA924B9747E4A1D93C62124F1F537CACABE3A4E9D7821EEAF3D3C

387C93D4651A08B19735A97B02CA65B265A8975134A161291DA717897E20808F

3810C3BA34F00C1DD3E0ACBE86FF788F962B1EE87BA4482A1CB0C24C8B92D7A1

A5B1764AF3C7BB89CEA1A495FF91AF37D527DEB2DEB52DAF49170D9BFC7397BC

B229D12527A9E405D9A5DD454D5530E3D97A00D6CF7D68E1618FE3F9CD2617D8

737B9040AF6CD93E2681EA10DD772C1BA77ADC04B35569AF62C1FB345B27C4E1

FB6909E563A4C1905C42D0F013E19B0E8FD7B697A3BD765E775F205B5FB02D97

237E047B48C25B0A0430ABF2CD40F7

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/VBAAAA+ArialMT~55 findfont /Encoding get

dup 0 /.notdef put

pop

end

/VBAAAA+ArialMT~55 findfont /Encoding get

dup 0 /.notdef put

dup 80 /P put

pop

%%EndResource

[/N47/VBAAAA+ArialMT~55 -1 TZ

%%BeginResource: font ECAAAA+ArialMT~52

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /ECAAAA+ArialMT~52 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A7B28008087AA44EAF37894E83891F552626F1F40A8D11DBB30B43

8761529A8C0E724815A65778B6E81032E2FB2FDC71F71554A6B9276E731970D4

E3FF70C22D1874DC68CC10AFE8028598F2A8FF154C313D4D26B1F2C9D5B0A422

C01C3D88107D5A3246543F0666103437EAF694286C898B013EADA4507889E4BE

E0EA9E8B4414F52C0B2655D710FC4504AC1942ACAAAE0A14D4589B68CBE19F38

62F747365B86C04A15EAFF79E90B693EB0386DEC31676EEA63279F25FDEE4E11

F517A6FF1D211A4910359C7E941A0E95107704F21C35574DBE8B892814A93F06

4210519187B0C789BB7ACEB77E80BB6F3D50A1A9D2AE237BA12F3044FFC45A3D

F11DB7F1F8B746A00FFD4F6D75B10181A5386ED8079DA3FE2C0D9010C17C4092

00A0512B0A7B1C0C04CC575C5F134EC3B162FE53AED1EF56EF536074F6E83FAF

036119D07296E12A4BEC64BF1E5EAE8D5BCAE257AEC0C17B84DFB06F4F3E84F5

5229764214FD4556E7BF85340832C8556B06684F8C211FD2DFE9B1C03A7BD0A8

BD7D8F13D498B929AB912EFE96A501E60C2D8BA5C01E690C8222788A06EB93DB

23BA391B06E266BD521E50F72032F3F80AE900C85D22F91FC8A306D5D65B537D

D5978467D21162C09BD3F31D275585CE437B1875D9DB18A9DE7BCFD72BC5BE3D

1899C5BAE76C503F3CFA9ADBCA850949AF43DED11ED188738D219C933EE02D29

31C08BB51774C5617C3D9B3A2B92CCE2FF454A839C772BED2F6D6091FAF71F60

4EB7AE32ECFD267AFF8CBF6B79C7E3467235DB18E436F24030F7B65DD909677B

E84574D61F325EE17731A66BEA68254704ADC0EB3472B1AEA1C04DFCB1A77B95

ECB3E21D4D1A26180099AB27D4BF54415CEB0E7CE0295C6225D89A157625D6D6

01DCAE0CA86736E476572C6D02BBF6C5A4F7876B00D52B25AD6CB3B7581557E0

40DD26E3C94E1E1A992B2336C5B6EA7D24DF8D2B5036EC6DE072D6880A2CA89D

65C9238FD5AED6F8FEE5E494B868C2BC4AC5FA67B4409E3F47064809C91C94BB

864A62AACF70DE83C942F752DFA194AD020F05A26774AB3B67AC9D78043199FD

6FD74657685A7331952F6788D4893A3714628502E7C5D29E0C1F3E8D90BEA4C5

C802D66173B9B5F61E41377CC54DE5A95B470A127A8CC1663EE242C738321C5F

B27E2C7CD7D489B307087D2A83B03B68A10125EE4DED7DE4D32DA979B69A5462

7F99ABABF6D2B79F65F0CF7986B1F2A60B54DEE27C6F02EADE4FA0039463FB2E

721F277CEC9537853AB83F1F1E231E1BEF4173A00984115160EE66BFB58BD64C

7B177429D3D4B21880746AAC6E66D1D5C69EEC867CCB07A84A4842095D7F81DF

50EFCBB02139AEFB5CC349927D99FFD5E8B130F14BA9EEA1D8BDC8655552DF11

7E0FF3269CFCFB6E02ECF17AACB6A8228C5996209A11114D3658F7726E6980DE

F16DA43D7DC0F0E60F1CCF4851F51835E6CFFA179BADEDA350AD29F9E07A8B85

280D51FE12334822F6F037C4B4BBD8DA65C1D6EDAAA9B81F2543436B0E0BACC6

5C11BCF8BFCC95E21EF1AD1955A62DB43A992B86493B7CE8846C94209E369C0C

22A2CEEA6353B625E234E1895EF6DB8241820FD5620446D73CAB2B9DC696C1BD

426DACE11F82EED296776E1BF649F80968E04DD00D0F778DD19CED8DAD9A5CD8

55530D7F66CB114E0A48036BD3586A80897B5EA1F2AE268359066B9979E8CF5B

FB9F6D80B131111B61681207D58878F41A71773FABD7EA7606A64BEE9D83385A

C576503B1E82805989126C595E325929444BDCB214BB9BC55E2F0940DECC9515

B5EAC893B75D3F5B34C19D54CA623157012D0E57DD92B1E9617D96273ADF8DB3

462E1522853E23B4A3EBA3B509548E91BDA439B2D34EC8B38360E410699D3866

10C12168DC0729A1FF63BE9BBF19CC6714E75271ACA60D781AD0898937B5CE2A

770E130DF58D61C54A796801694BD8527012AA2DAA577CB9E06B5EC52A65A00B

5DCE5939BE8FE7E0E4E1A935A8432EFCC5ADCBC23959987F5DA1444D9CB7FA35

061B26B9CE729CEF80B130711272F8D6FCD3F9791BBA003B42BA04C9B33A90A8

3F74FB4AE8184F1639D80B2197201B87583567BF90B389CB641D5A82AEB1EE81

8AA177D5E29A3CD13229F206A1005C5DFA201C8FA28908D9D76077EA42F70791

4D97C098439C34B8FBB8A1D579F943E193894C2B15CD3448C4584012BA820718

C94945F21CAF9635528F7032D463DEA1A75C0C811356A179018989E490E09D88

2656DFD4BDB14CF967A71E49DA49F595BEA82E837F13BFA3A4BA716578228B85

86A768125793D4D1AB5AC3E9B70C411F7929130183381F0B2868E16E1D049EB7

355FF98DF55E61FC8EDE86BC0925AE18D252DCA7A6D78BC23FEA70572EA5BB5E

830B1BC7D32DA4A55B1F71599011B87B116C3FB7BABEDCF54E4D26C382BEE66C

21D4083B5EAFE476483A74098D3CFF4FC1AA6E5FEB12C93984EC1F2A69480E64

61071085C50EC4D92E4B1290DA7F4DC873AF736C2963727EE7BC1C8DED0EC333

0EC790FAEDF2349860693757E1D195B20606BE659D4C37091427D242B75958E7

246F4F73D6009CD9DBB42213B6F7E5E6AF60399AE2D8A9763771D04D1A07A754

2E0D8DEB4C529B8F1AB70CC068862923069B409C64E11E8BE7E81A0FCF203218

1A825DEBF47EDAA4682EFD3C3C1856E824147041A2EEA0254BB2

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/ECAAAA+ArialMT~52 findfont /Encoding get

dup 0 /.notdef put

pop

end

/ECAAAA+ArialMT~52 findfont /Encoding get

dup 0 /.notdef put

dup 40 /parenleft put

dup 41 /parenright put

dup 83 /S put

dup 97 /a put

dup 99 /c put

dup 100 /d put

dup 101 /e put

dup 103 /g put

dup 105 /i put

dup 108 /l put

dup 110 /n put

dup 114 /r put

pop

%%EndResource

[/N56/ECAAAA+ArialMT~52 -1 TZ

%%BeginResource: font IEAAAA+ArialMT~99

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /IEAAAA+ArialMT~99 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A259BC9984DB874CFBF432DC23D7457637070526912FD9815BE031

9519877F20C9609B5B58AAB0EFD1AB99AE9E6EBBFFF6479EB9E420D146762F01

59B41831A5312789C775520554EB9FEF7F7C5A0B69609D24EC234B6E498349D1

C2D1C6D3C26F5C6B75308FBB50D3895BD1473FDB2E62883240DB08723F67D48E

59B0B88988D8D14042DCAF69A2F2153A79C28D8B91DAAFBC72D840949A724984

2BC4FEB46E914D68EBF45801E233AABC95D35C9191CBD37A3B8C24AE5045B6FB

1FC65E8026A8A3E914E1434BE464FE533BE80A7C0557A2FDC0767183372402FE

91B3879011BBA4C48FC7E7965F642000D209F68A607CABBBD37FBD2FD54CA261

C329D609B7C8220C9D8B50B5FA11CAA760F68D0004C584FB43E6F0EA8C046627

FB1BB1DDAE90B9FFDC496D7E5ECCCBA29D563A37A067871AD2286A0DBDB314B4

FC246CCE72E820E392F9684BE669DB58BC43D661382DDD427DE7DC5C396AB9E4

AFB91D22E2AA30EEF6187B1E588D532744CBAFC433939A88AE3C65E9D4A51750

4F53353F9B1C73EDAD069D9A3AC39C41E360E0FE5C11B0C1D1E72C7E48FCADA9

3DD1568591D4D09B57D4D32B2CF182D82CB6157FB76875FC6C96E7625BBAEBAE

A8B26FDF0047E8278A9852214CEE4C0612671B

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/IEAAAA+ArialMT~99 findfont /Encoding get

dup 0 /.notdef put

pop

end

/IEAAAA+ArialMT~99 findfont /Encoding get

dup 0 /.notdef put

dup 76 /L put

dup 116 /t put

dup 121 /y put

pop

%%EndResource

[/N112/IEAAAA+ArialMT~99 -1 TZ

%%BeginResource: font QBAAAA+ArialMT~4f

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /QBAAAA+ArialMT~4f def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A436B0C96CD5349EE2E997A2C271A852FB7C63600614C83F78605E

4F6AE30F86BA28257C54120FE5FE2910EEF98796A9BFF5FF33C2D943AC1D8FC7

D2D2F580ED2CA924B9747E4A1D93C62124F1F537CACABE2EE1C9A0F93D6D1F58

C4A4BF86636855DC4FEC898F29C5BE52D5B664E97B56751DF94AC6271163F2E6

135ED3F22D5AB0757730CA3227E0960F032BED269629539CA11D79DD3CA4242C

4CA99DA3CDE73EFC573D91C6AD3F2272EF46AB45B8DA4E19E7BD1A67C96D2029

7F422640EAF438C6047E2D2F58F77EF86BDB8EFC2F1597B5885467A1686DFAFE

168B5CEF3503889CD2627C553ADB40552D87091342F5A7C96C25258159E3516F

BE5B1B865EC1CF8909FA6BCFAAF81BA54A7D53A9F7DC845CAE8258AE96004D84

2DD03288442755F71F7C2E53E474F80614AFADA2FB502EE9EFDFB7E7362F81F2

BCFE909EC621000D45AAC7C4F822248F8F

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/QBAAAA+ArialMT~4f findfont /Encoding get

dup 0 /.notdef put

pop

end

/QBAAAA+ArialMT~4f findfont /Encoding get

dup 0 /.notdef put

dup 68 /D put

pop

%%EndResource

[/N42/QBAAAA+ArialMT~4f -1 TZ

%%BeginResource: font VDAAAA+ArialMT~96

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /VDAAAA+ArialMT~96 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A367D85BFE7DCF51A4B1428D17CCFBB38855B20F264AED104C7F38

0432D121C51BCA5B423A43BE147BE85241E84318442F2F0386B31CBCF75E8A7F

E1CA92CAED009304155349E29FFF3AF4467E81183A43F1483CA4FF7FB909F569

1A3109EAC7A7E192BC77BC149DA2CC6E56CFFD522B4C42132E6148AB75949C07

F1803A72895B24C7C417A5D06626DF77D81F30B88697040FB6B8FB2855D851BE

A469754DA82439F0822FB751C8E61ED5B14A84403CC86459C8F8031FF483E0BB

7C43823887FAF5767896EDE02778AF811361CDED2AA3DD4A79915EE9794811DC

9C580BBC74B9FFDE72BF1B7C89BAB9223A9DBE691080FC8D0B2EE4CD3CD21CC0

F99525BA094602BC13EE34CF646DF16B6F0CA9E0AB6CAFF43B8134BE36259240

39AEF45A9CDB933E2076972A9D7857D8329854A628AE23AC16BC9C81384AAA8F

5AC0F5B26180613370B7D15C44264D7124B44D3EB104362CE3A37AC48DC791C0

0FA078FC5170779C54DAFD6B30C5D70E4C68BB524C3729182C2628D5BB6F23B3

C378F1FB3DC6D7A34BD3FCF724CEBE53E9E5B7F65EAAECE91368AE1517FE2BE0

B54C0DC8813CCD7AD3C85D14CA52E8A853A93FCCEBCF5217F5C9565DF70043CE

9C50490CD1CA598FB3E82E34AEF071AA8EC9EE7D9A045CC233102D852BD54BA3

2727A6D78F819AC3EABC0B8672AAE309E3254E1AE4DA7E5DE3FE486FFF577E87

2C3E3E3B2A62A9901E41E7C1D63F81DFA1D6A3890478F8D3CECAE3F402C484F8

1518A22287D1A07BBE4FAFBE4B1848164BDD47FCF74BE27B3E62DB9CA8411833

6EEEFBF2FA3CB19A81D33D57FCD991F659648E581AEF062DEEB4756C297B5EA7

FE050EFA3D708112B864BD46AC03CE90D4B65B44BD808BAE63AA25ACA574DB63

D8530F80476ACABD00C91497F28F13BD6BE65F87BB10CD55C277E7C33AB8D2F6

45F0D9354B5FC21DE997BADB7123B7F7D447EBA63A4D5FF9F202AD5D84F57946

83080ABF6E388471C759947ED60AC9706EB58A3976C7E7BAEB47ED7EA8DF6990

1BC883C5FCB94A6C8E52B9144C23170AB42F9A9505732E736EBD8EAB390E45EC

61E68ACF871F6D601D4BACB01F40FFA4AED4FE2C45E3EF870DE31C505D501A97

52F7E9C34BF77E691C79883C1CDB84DE

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/VDAAAA+ArialMT~96 findfont /Encoding get

dup 0 /.notdef put

pop

end

/VDAAAA+ArialMT~96 findfont /Encoding get

dup 0 /.notdef put

dup 77 /M put

dup 80 /P put

dup 109 /m put

dup 115 /s put

pop

%%EndResource

[/N99/VDAAAA+ArialMT~96 -1 TZ

%%BeginResource: font EBAAAA+ArialMT~4c

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /EBAAAA+ArialMT~4c def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A436B0C96CD5349EE2E997A2C271A852FB7C63600614C83F78605E

4F6AE30F86BA28257C54120FE5FE2910EEF98796A9BFF5FF33C2D943AC1D8FC7

D2D2F580ED2CA924B9747E4A1D93C62124F1F537CACABE2999D4E1775414D07B

4C39DCD6F087F4E714D55CA386D5BD41DA75B1A95D25656AE6E2382BDBE76E74

5A582DDAB417302DA706C540A5E71AA11020897980F8B6DA0560D60EE1E1E069

8D830087043C24C4E77FB57AB18330AF08C9E3BBB103D1FECABE2E3D37104404

E8B477660435620248F114877B46D2C4D708D560C55B84533890A94F9FE6B580

F7B46A16221D9D0DFAA7AB8207ABF3FDFF765226833D831C827883AC32B5066B

8524B187186B1281790BFE5FF7B9041DB2ECF192AA3FAB363AAC5C0B20EAF222

82D511AFA388BDE45C1091DAABB7B13FB508D816F15AFA430100C00E296B958F

859D704668D913AE6EE5263C215DCBE36C5B57B1CC8FD76FA43BC9

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/EBAAAA+ArialMT~4c findfont /Encoding get

dup 0 /.notdef put

pop

end

/EBAAAA+ArialMT~4c findfont /Encoding get

dup 0 /.notdef put

dup 67 /C put

pop

%%EndResource

[/N30/EBAAAA+ArialMT~4c -1 TZ

%%BeginResource: font WDAAAA+ArialMT~93

ct_CffDict begin

%!FontType1

14 dict begin

/FontInfo 10 dict dup begin

/ItalicAngle 0 def

/isFixedPitch false  def

/UnderlinePosition -100 def

/UnderlineThickness 50 def

end def

/FontName /WDAAAA+ArialMT~93 def

/Encoding 256 array

0 1 255 {1 index exch /.notdef put} for

dup 0 /.notdef put

 def

/PaintType 0 def

/FontType 1 def

/FontMatrix [0.001 0 0 0.001 0 0 ] def

/FontBBox { 0 0 0 0 } def

/StrokeWidth 0 def

currentdict end

currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECF819A7C75

B3A4FF765ECEAE82CC64CA61DE54080C8964DF03EF823879B60EC03BF1FDC918

86BF63F0CE2AB32DEEE658D8FB7FCB5C8E14F11E3058A819B4C319B4581DFB97

FE149270A36B8C514400F45D18806F3C06738530371A7500372324935225D1BC

99DB107DBC1E1F80BCC26D5F2CCF70399303742E794CA0C3A148D7FA3E38EC54

7CA7CF480FB1899C7B81D4886411B1FE036E9CE9298849B874D1AFCEBBEF4D34

68448D9D5CAE773C0D3A8121F6AAB4FC9F1F60FCB177C85740CE2A9352698289

78C2D33E0581BCABFD1F53245882884528C67B4E79E8CD54E13E1CD38A3AAC65

FE8054C4829E321AD93BB2EE9D00C376D70BD9979DAAC7A4EA05D7CE1710A130

53BBEC8188FE602C94C2A216A007CC9AC869DF66CDCE79F2996E8708757A957E

F5600C5A2E370EA8C2528D3641BFD63ED62BE4B0583B4BE7108562874EA939C5

79EF9C082593BF0D86A586BBB56BD099E36DAD16CB1B0EAB2BF2A76A792A0A96

BFA560F6A077B3BA21815D96B203897604ACA9E9254B6CC2ED140E8FF941608C

326856FDB8387C4D0A1F4D7FB03911B17771715EC68DE99464ADC92D31E41F6C

9A01B0317E6B344D35C1C675040A063A575985DDCCEB9DD1B94F8D28A5B9A4A2

9FC40DFD5E7E50091DD1510B9F0F113B428988C622D4D803588CC266F32811D3

B8F41CDD7B17014A2A75D2AAD831F41AA22ADB59FF3EB29A83152254B8D13EE1

186FE73DBFAD76FFDDDAFDC253D156265737ECAA4FFB0A7C1780E42470968436

A128BF0290A5BDA98DB38A11486C27E7A52AB7D8189A3ADE159C341C6C95C01D

E9CC615BDCBF3B58059296D31847CA3400BE29553046F4CCF16444BD83E2EC40

73DB8EDC59CD6CB3EA3A0E9D581D182F35ECB41CED8EA2F7136790E15DCA6A82

9FC0EC75DFCBB2B04C498BD029D675347408FE2E6A223C3342AC75AD59A2FC07

B3F636FA69A5C48AB7AF79B79D736D42CDE21F0363666AFD1B2E8230C07E3DD1

B4503AAD5E63ED2314400EEB16531F7335B34CD2BD4FD38F90ECA74DA87497C1

756F7178A45C7EC0ED25E0AE233807F0EAF3DDE653C4244B31B9154636ED3124

630EE58EEFBEE7C2CE46449AF38F41DD0DC13E8FE687BB01BD7F372C709C6A34

0A5473808CE42554CBB3DB2AD07304F7746C3A2283E1E4CD887F3B65FA1E185A

B6D0F6EC2DB4F9819B813A4D8452C503C5A2565DBF7C0DD40FC1D3F525EB5BAC

71D2C5F7F04E78DACCBE0FE7FB4414065CE80626871E23B0F7A099191EE80528

FE39FB234642A54E2418C62236EF8D8E7ACF244C936F8474614A331731A0455E

99EE1D84959709A71678F7E3A533AE05DE477E5578D698D4D74037755FF3EDCF

4EF6F57F58FD8700C39FA35F7F95278EB9D2F298089F82D05555DA7CA3653513

953024B7A794843C6AD52E3063B7850429D8373189F48B74CC466956A6C9C35E

A40FA1ED49995772B4B7111749114C0F018065FD53C644678E77E5800B39E959

6A8CEE6F4299415FFABD9CC733BCEB763411826B70B52B

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

0000000000000000000000000000000000000000000000000000000000000000

cleartomark

/WDAAAA+ArialMT~93 findfont /Encoding get

dup 0 /.notdef put

pop

end

/WDAAAA+ArialMT~93 findfont /Encoding get

dup 0 /.notdef put

dup 104 /h put

dup 117 /u put

pop

%%EndResource

[/N100/WDAAAA+ArialMT~93 -1 TZ

%%BeginResource: font A

10 dict begin

T3Defs

/FontType 3 def

/FontName /N104 def

/FontMatrix [1 

0 

0 

1 

0 

0 ]def

/FontBBox [0 

-1 

27 

36 ]def

/Encoding [/a0 /a1 /a2 /a3 /a4 /a5 /a6 /a7 /a8 /a9 /a10 /a11 /a12 /a13 /a14 /a15 /a16 /a17 

/a18 /a19 /a20 /a21 /a22 /a23 /a24 /a25 /a26 /a27 /a28 /a29 /a30 /a31 /a32 /a33 

/a34 /a35 /a36 /a37 /a38 /a39 /a40 /a41 /a42 /a43 /a44 /a45 /a46 /a47 /a48 /a49 

/a50 /a51 /a52 /a53 /a54 /a55 /a56 /a57 /a58 /a59 /a60 /a61 /a62 /a63 /a64 /a65 

/a66 /a67 /a68 /a69 /a70 /a71 /a72 /a73 /a74 /a75 /a76 /a77 /a78 /a79 /a80 /a81 

/a82 /a83 /a84 /a85 /a86 /a87 /a88 /a89 /a90 /a91 /a92 /a93 /a94 /a95 /a96 /a97 

/a98 /a99 /a100 /a101 /a102 /a103 /a104 /a105 /a106 /a107 /a108 /a109 /a110 

/a111 /a112 /a113 /a114 /a115 /a116 /a117 /a118 /a119 /a120 /a121 /a122 /a123 

/a124 /a125 /a126 /a127 /a128 /a129 /a130 /a131 /a132 /a133 /a134 /a135 /a136 

/a137 /a138 /a139 /a140 /a141 /a142 /a143 /a144 /a145 /a146 /a147 /a148 /a149 

/a150 /a151 /a152 /a153 /a154 /a155 /a156 /a157 /a158 /a159 /a160 /a161 /a162 

/a163 /a164 /a165 /a166 /a167 /a168 /a169 /a170 /a171 /a172 /a173 /a174 /a175 

/a176 /a177 /a178 /a179 /a180 /a181 /a182 /a183 /a184 /a185 /a186 /a187 /a188 

/a189 /a190 /a191 /a192 /a193 /a194 /a195 /a196 /a197 /a198 /a199 /a200 /a201 

/a202 /a203 /a204 /a205 /a206 /a207 /a208 /a209 /a210 /a211 /a212 /a213 /a214 

/a215 /a216 /a217 /a218 /a219 /a220 /a221 /a222 /a223 /a224 /a225 /a226 /a227 

/a228 /a229 /a230 /a231 /a232 /a233 /a234 /a235 /a236 /a237 /a238 /a239 /a240 

/a241 /a242 /a243 /a244 /a245 /a246 /a247 /a248 /a249 /a250 /a251 /a252 /a253 

/a254 /a255 ] def

/GlyphProcs 4 dict begin

/.notdef {250 0 d0} bind def

/a0 {{

0 0 0 0 27 36 setcachedevice

27 0 0 36 0 0 cm

q

n

0 0 1 1 re

10 dict dup begin

/ImageType 1 def

/Width 27 def

/Height 36 def

/ImageMatrix [27 0 0 -36 0 36]  def

/BitsPerComponent 1 def

/Decode [0 1 ]  def

/DataSource

1 dict begin /_i 0 def currentdict end mark exch { begin {

<FFF8FFE0FF0007E0FC0001E0F00000E0E0070060C07FF020C1FFF82083FFFC00
83FFFE0007FFFE0007FFFE0007FFFE00FFFFFC00FFFFFC00FFFFF020FFFF8020
FFFC0060FFC000E0FE0003E0F8000FE0F000FFE0E00FFFE0C07FFFE0C1FFFFE0
C3FFFFE083FFFC2083FFFC20C3FFF820C3FFF820C1FFF060E0FFE060E00E00E0
F00001E0F80003E0FE000FE0FFF1FFE0>

} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse

end } bind aload pop ] cvx

 def end

27 36 false 4 -1 roll dup /ImageMatrix get exch /DataSource get

imagemask

Q

} exec } bind def

/a1 {{

0 0 0 1 4 35 setcachedevice

4 0 0 34 0 1 cm

q

n

0 0 1 1 re

10 dict dup begin

/ImageType 1 def

/Width 4 def

/Height 34 def

/ImageMatrix [4 0 0 -34 0 34]  def

/BitsPerComponent 1 def

/Decode [0 1 ]  def

/DataSource

1 dict begin /_i 0 def currentdict end mark exch { begin {

<00000000000000000000000000000000000000000000000000F0F0F0F0000000
0000>

} _i 1 eq{ /_i 0 def pop ()}{_i get /_i _i 1 add def} ifelse

end } bind aload pop ] cvx

 def end

4 34 false 4 -1 roll dup /ImageMatrix get exch /DataSource get

imagemask

Q

} exec } bind def

/a2 {{

33 0 0 0 0 0 setcachedevice

} exec } bind def

currentdict end def

FontName currentdict end

definefont pop

%%EndResource

[/A/N104 -1 TZ

79.5915 710.99 188.228 27.01 re

W

n

0.100006 0 0 0.100006 0 0 cm

q

Q

q

n

537.6 7375.78 m

537.6 4742.4 l

2942.58 4742.4 l

2942.58 7375.78 l

W

n

true setSA

6 w

4 M

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

q

10 0 0 10 0 0 cm

Q

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

q

10 0 0 10 0 0 cm

Q

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

q

10 0 0 10 0 0 cm

Q

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

q

10 0 0 10 0 0 cm

Q

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

q

10 0 0 10 0 0 cm

Q

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

q

10 0 0 10 0 0 cm

Q

18 w

n

1238.27 7246.81 m

1340.63 7246.81 l

0 setgray

S

n

1333.99 7228.8 m

1373.27 7246.75 l

1333.99 7264.71 l

1333.99 7228.8 l

f

q

10 0 0 10 0 0 cm

96.827 729.471 m

/N54 6 Tf

(pop=) show

110.342 729.471 m

/N23 6 Tf

(1) show

Q

n

1670.27 7246.81 m

1772.64 7246.81 l

S

n

1765.99 7228.8 m

1805.28 7246.75 l

1765.99 7264.71 l

1765.99 7228.8 l

f

q

10 0 0 10 0 0 cm

102.36 715.671 m

/N54 6 Tf

(p) show

105.697 715.671 m

/N44 6 Tf

(ush) show

115.371 715.671 m

/N54 6 Tf

(=) show

118.875 715.671 m

/N26 6 Tf

(3) show

140.028 729.471 m

/N54 6 Tf

(pop=) show

153.542 729.471 m

/N18 6 Tf

(2) show

Q

n

2103.6 7246.81 m

2205.96 7246.81 l

S

n

2199.32 7228.8 m

2238.6 7246.75 l

2199.32 7264.71 l

2199.32 7228.8 l

f

q

10 0 0 10 0 0 cm

145.56 715.671 m

/N54 6 Tf

(p) show

148.897 715.671 m

/N44 6 Tf

(ush) show

158.571 715.671 m

/N54 6 Tf

(=) show

162.075 715.671 m

/N26 6 Tf

(3) show

183.36 729.471 m

/N54 6 Tf

(pop=) show

196.874 729.471 m

/N18 6 Tf

(2) show

Q

n

2535.6 7246.81 m

2637.96 7246.81 l

S

n

2631.32 7228.8 m

2670.6 7246.75 l

2631.32 7264.71 l

2631.32 7228.8 l

f

q

10 0 0 10 0 0 cm

188.892 715.671 m

/N54 6 Tf

(p) show

192.229 715.671 m

/N44 6 Tf

(ush) show

201.904 715.671 m

/N54 6 Tf

(=) show

205.408 715.671 m

/N23 6 Tf

(1) show

226.56 729.471 m

/N54 6 Tf

(pop=) show

240.074 729.471 m

/N26 6 Tf

(3) show

Q

n

807.6 7246.81 m

909.957 7246.81 l

S

n

903.319 7228.8 m

942.6 7246.75 l

903.319 7264.71 l

903.319 7228.8 l

f

q

10 0 0 10 0 0 cm

232.092 715.671 m

/N54 6 Tf

(p) show

235.429 715.671 m

/N44 6 Tf

(ush) show

245.104 715.671 m

/N54 6 Tf

(=) show

248.608 715.671 m

/N23 6 Tf

(1) show

105.06 721.071 m

/N41 10.8 Tf

(A) show

148.26 721.071 m

/N37 10.8 Tf

(B) show

191.46 721.071 m

/N30 10.8 Tf

(C) show

234.66 721.071 m

/N42 10.8 Tf

(D) show

Q

12 w

n

1178.24 7360.63 m

1212.12 7360.62 1239.58 7356.03 1239.59 7350.39 c

1239.49 7130.82 l

1239.5 7125.18 1212.02 7120.62 1178.15 7120.63 c

999.207 7120.7 l

965.334 7120.72 937.866 7125.29 937.86 7130.94 c

937.947 7350.52 l

937.953 7356.15 965.427 7360.72 999.307 7360.7 c

1178.24 7360.63 l

h

S

n

1610.25 7369.71 m

1644.13 7369.7 1671.6 7365.11 1671.6 7359.47 c

1671.51 7139.9 l

1671.51 7134.26 1644.04 7129.69 1610.16 7129.7 c

1431.23 7129.78 l

1397.35 7129.79 1369.88 7134.37 1369.87 7140.02 c

1369.96 7359.59 l

1369.96 7365.23 1397.44 7369.8 1431.32 7369.78 c

1610.25 7369.71 l

h

S

n

2042.26 7369.71 m

2076.13 7369.7 2103.6 7365.11 2103.6 7359.47 c

2103.5 7139.9 l

2103.5 7134.26 2076.04 7129.69 2042.16 7129.7 c

1863.23 7129.78 l

1829.35 7129.79 1801.87 7134.37 1801.86 7140.02 c

1801.96 7359.59 l

1801.96 7365.23 1829.44 7369.8 1863.32 7369.78 c

2042.26 7369.71 l

h

S

n

2474.26 7369.71 m

2508.13 7369.7 2535.6 7365.11 2535.6 7359.47 c

2535.5 7139.9 l

2535.5 7134.26 2508.04 7129.69 2474.16 7129.7 c

2295.23 7129.78 l

2261.35 7129.79 2233.87 7134.37 2233.86 7140.02 c

2233.96 7359.59 l

2233.96 7365.23 2261.44 7369.8 2295.32 7369.78 c

2474.26 7369.71 l

h

S

q

10 0 0 10 0 0 cm

Q

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

q

10 0 0 10 0 0 cm

Q

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

q

10 0 0 10 0 0 cm

Q

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

q

10 0 0 10 0 0 cm

Q

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

q

10 0 0 10 0 0 cm

Q

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

q

10 0 0 10 0 0 cm

Q

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

q

10 0 0 10 0 0 cm

Q

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

q

10 0 0 10 0 0 cm

Q

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

q

10 0 0 10 0 0 cm

Q

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

q

10 0 0 10 0 0 cm

Q

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

q

10 0 0 10 0 0 cm

Q

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

q

10 0 0 10 0 0 cm

Q

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

6 w

9 w

q

10 0 0 10 0 0 cm

Q

Q

q

q

10 0 0 10 0 0 cm

Q

Q

q

n

3168 7379.83 m

3168 5880 l

5577.67 5880 l

5577.67 7379.83 l

W

n

Q

q

n

3296.23 6254.47 m

4942.14 6254.47 l

4942.14 6255.25 l

3296.23 6255.25 l

3296.23 6254.47 l

W

n

0.392731 w

1 J

1 j

Q

q

n

3296.23 6513.67 m

4942.14 6513.67 l

4942.14 6514.45 l

3296.23 6514.45 l

3296.23 6513.67 l

W

n

0.392731 w

1 J

1 j

Q

q

n

3296.23 6772.47 m

4942.14 6772.47 l

4942.14 6773.26 l

3296.23 6773.26 l

3296.23 6772.47 l

W

n

0.392731 w

1 J

1 j

Q

q

n

3296.23 7031.67 m

4942.14 7031.67 l

4942.14 7032.46 l

3296.23 7032.46 l

3296.23 7031.67 l

W

n

0.392731 w

1 J

1 j

Q

q

n

3296.23 7290.48 m

4942.14 7290.48 l

4942.14 7291.26 l

3296.23 7291.26 l

3296.23 7290.48 l

W

n

0.392731 w

1 J

1 j

Q

q

n

4221.58 5998.61 m

4443.86 5998.61 l

4443.86 6225.61 l

4221.58 6225.61 l

4221.58 5998.61 l

W

n

3.14182 w

1 j

Q

q

n

4404.58 5998.61 m

4626.87 5998.61 l

4626.87 6536.26 l

4404.58 6536.26 l

4404.58 5998.61 l

W

n

3.14182 w

1 j

Q

q

n

4587.59 5998.61 m

4809.88 5998.61 l

4809.88 6691.39 l

4587.59 6691.39 l

4587.59 5998.61 l

W

n

2.45454 w

2 J

Q

q

n

3168 7379.83 m

3168 5880 l

5577.67 5880 l

5577.67 7379.83 l

W

n

0.392731 w

1 J

1 j

q

10 0 0 10 0 0 cm

Q

3.14182 w

0 J

q

10 0 0 10 0 0 cm

Q

q

10 0 0 10 0 0 cm

Q

2.45454 w

2 J

0 j

0.392731 w

1 J

1 j

q

10 0 0 10 0 0 cm

Q

Q

q

n

3422.97 5996.05 m

3645.25 5996.05 l

3645.25 7103.15 l

3422.97 7103.15 l

3422.97 5996.05 l

W

n

3.14182 w

1 j

Q

q

n

3605.98 5996.05 m

3827.87 5996.05 l

3827.87 6792.5 l

3605.98 6792.5 l

3605.98 5996.05 l

W

n

3.14182 w

1 j

Q

q

n

3788.6 5996.05 m

4010.88 5996.05 l

4010.88 6585.53 l

3788.6 6585.53 l

3788.6 5996.05 l

W

n

2.45454 w

2 J

Q

q

n

3168 7379.83 m

3168 5880 l

5577.67 5880 l

5577.67 7379.83 l

W

n

q

10 0 0 10 0 0 cm

Q

Q

q

q

10 0 0 10 0 0 cm

Q

Q

PDFVars/TermAll get exec end end

%%PageTrailer

%%EndPage

%%Trailer

%%DocumentNeededResources:

%%+ font Times-Bold

%%+ font Times-Italic

%%DocumentSuppliedResources:

%%+ font A

%%+ procset (Adobe Acrobat - PDF operators) 1.2 0

%%+ procset (Adobe Acrobat - type operators) 1.2 0

%%EOF


%%EndDocument
 @endspecial 1313 496 a Fs(Figure)33 b(2-4:)42 b(Example)34
b(pip)s(eline.)p 406 807 3089 4 v 406 1532 4 725 v 434
1507 a @beginspecial 90 @llx 648 @lly 450 @urx 729 @ury
3600 @rwi @setspecial
%%BeginDocument: code2.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Microsoft Word - Document1)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050610154922-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 90 648 450 729
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
90 648 moveto 450 648 lineto 450 729 lineto 90 729 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: file Pscript_CFF PSVER
userdict/ct_CffDict 6 dict put ct_CffDict begin/F0Subr{systemdict/internaldict
known{1183615869 systemdict/internaldict get exec/FlxProc known{save true}{
false}ifelse}{userdict/internaldict known not{userdict/internaldict{count 0 eq
{/internaldict errordict/invalidaccess get exec}if dup type/integertype ne{
/internaldict errordict/invalidaccess get exec}if dup 1183615869 eq{pop 0}{
/internaldict errordict/invalidaccess get exec}ifelse}dup 14 get 1 25 dict put
bind executeonly put}if 1183615869 userdict/internaldict get exec/FlxProc
known{save true}{false}ifelse}ifelse[systemdict/internaldict known not{100
dict/begin cvx/mtx matrix/def cvx}if systemdict/currentpacking known{
currentpacking true setpacking}if{systemdict/internaldict known{1183615869
systemdict/internaldict get exec dup/$FlxDict known not{dup dup length exch
maxlength eq{pop userdict dup/$FlxDict known not{100 dict begin/mtx matrix def
dup/$FlxDict currentdict put end}if}{100 dict begin/mtx matrix def dup
/$FlxDict currentdict put end}ifelse}if/$FlxDict get begin}if grestore/exdef{
exch def}def/dmin exch abs 100 div def/epX exdef/epY exdef/c4y2 exdef/c4x2
exdef/c4y1 exdef/c4x1 exdef/c4y0 exdef/c4x0 exdef/c3y2 exdef/c3x2 exdef/c3y1
exdef/c3x1 exdef/c3y0 exdef/c3x0 exdef/c1y2 exdef/c1x2 exdef/c2x2 c4x2 def
/c2y2 c4y2 def/yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def/PickCoords{{
c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2}{c3x0 c3y0 c3x1
c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2}ifelse/y5 exdef/x5 exdef/y4 exdef
/x4 exdef/y3 exdef/x3 exdef/y2 exdef/x2 exdef/y1 exdef/x1 exdef/y0 exdef/x0
exdef}def mtx currentmatrix pop mtx 0 get abs 1e-05 lt mtx 3 get abs 1e-05 lt
or{/flipXY -1 def}{mtx 1 get abs 1e-05 lt mtx 2 get abs 1e-05 lt or{/flipXY 1
def}{/flipXY 0 def}ifelse}ifelse/erosion 1 def systemdict/internaldict known{
1183615869 systemdict/internaldict get exec dup/erosion known{/erosion get
/erosion exch def}{pop}ifelse}if yflag{flipXY 0 eq c3y2 c4y2 eq or{false
PickCoords}{/shrink c3y2 c4y2 eq{0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs}ifelse
def/yshrink{c4y2 sub shrink mul c4y2 add}def/c1y0 c3y0 yshrink def/c1y1 c3y1
yshrink def/c2y0 c4y0 yshrink def/c2y1 c4y1 yshrink def/c1x0 c3x0 def/c1x1
c3x1 def/c2x0 c4x0 def/c2x1 c4x1 def/dY 0 c3y2 c1y2 sub round dtransform
flipXY 1 eq{exch}if pop abs def dY dmin lt PickCoords y2 c1y2 sub abs .001 gt{
c1x2 c1y2 transform flipXY 1 eq{exch}if/cx exch def/cy exch def/dY 0 y2 c1y2
sub round dtransform flipXY 1 eq{exch}if pop def dY round dup 0 ne{/dY exdef}{
pop dY 0 lt{-1}{1}ifelse/dY exdef}ifelse/erode PaintType 2 ne erosion .5 ge
and def erode{/cy cy .5 sub def}if/ey cy dY add def/ey ey ceiling ey sub ey
floor add def erode{/ey ey .5 add def}if ey cx flipXY 1 eq{exch}if itransform
exch pop y2 sub/eShift exch def/y1 y1 eShift add def/y2 y2 eShift add def/y3
y3 eShift add def}if}ifelse}{flipXY 0 eq c3x2 c4x2 eq or{false PickCoords}{
/shrink c3x2 c4x2 eq{0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs}ifelse def/xshrink
{c4x2 sub shrink mul c4x2 add}def/c1x0 c3x0 xshrink def/c1x1 c3x1 xshrink def
/c2x0 c4x0 xshrink def/c2x1 c4x1 xshrink def/c1y0 c3y0 def/c1y1 c3y1 def/c2y0
c4y0 def/c2y1 c4y1 def/dX c3x2 c1x2 sub round 0 dtransform flipXY -1 eq{exch}
if pop abs def dX dmin lt PickCoords x2 c1x2 sub abs .001 gt{c1x2 c1y2
transform flipXY -1 eq{exch}if/cy exch def/cx exch def/dX x2 c1x2 sub round 0
dtransform flipXY -1 eq{exch}if pop def dX round dup 0 ne{/dX exdef}{pop dX 0
lt{-1}{1}ifelse/dX exdef}ifelse/erode PaintType 2 ne erosion .5 ge and def
erode{/cx cx .5 sub def}if/ex cx dX add def/ex ex ceiling ex sub ex floor add
def erode{/ex ex .5 add def}if ex cy flipXY -1 eq{exch}if itransform pop x2
sub/eShift exch def/x1 x1 eShift add def/x2 x2 eShift add def/x3 x3 eShift add
def}if}ifelse}ifelse x2 x5 eq y2 y5 eq or{x5 y5 lineto}{x0 y0 x1 y1 x2 y2
curveto x3 y3 x4 y4 x5 y5 curveto}ifelse epY epX}systemdict/currentpacking
known{exch setpacking}if/exec cvx/end cvx]cvx executeonly exch{pop true exch
restore}{systemdict/internaldict known not{1183615869 userdict/internaldict
get exec exch/FlxProc exch put true}{1183615869 systemdict/internaldict get
exec dup length exch maxlength eq{false}{1183615869 systemdict/internaldict
get exec exch/FlxProc exch put true}ifelse}ifelse}ifelse{systemdict
/internaldict known{1183615869 systemdict/internaldict get exec/FlxProc get
exec}{1183615869 userdict/internaldict get exec/FlxProc get exec}ifelse}if}
executeonly def/F1Subr{gsave currentpoint newpath moveto}bind def/F2Subr{
currentpoint grestore gsave currentpoint newpath moveto}bind def/HSSubr{
systemdict/internaldict known not{pop 3}{1183615869 systemdict/internaldict
get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck
get exec}{pop 3}ifelse}ifelse}ifelse}bind def end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Courier
[/N13/Courier 1 TZ
%%IncludeResource Courier-Bold
[/N10/Courier-Bold 1 TZ
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
90 648 360 81 rectclip
/N11 [/DeviceRGB] /ColorSpace defineRes pop

false setSA
0 0 0 setrgbcolor
90 711.72 m
/N10 10.02 Tf
(  run_steady_state)
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
198 711.72 m
/N13 10.02 Tf
(\(\) { )
[5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
114 700.38 m
/N10 10.02 Tf
(A_work)
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
150 700.38 m
/N13 10.02 Tf
(\(4\); // execute Filter A 4 times )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
] pdfxs
114 689.041 m
/N10 10.02 Tf
(B_work)
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
150 689.041 m
/N13 10.02 Tf
(\(6\); // execute Filter B 6 times )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
] pdfxs
114 677.761 m
/N10 10.02 Tf
(C_work)
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
150 677.761 m
/N13 10.02 Tf
(\(9\); // execute Filter C 9 times )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
] pdfxs
114 666.422 m
/N10 10.02 Tf
(D_work)
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
150 666.422 m
/N13 10.02 Tf
(\(3\); // execute Filter D 3 times )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
] pdfxs
90 654.841 m
(  } )
[5.99983 5.99983 5.99983 5.99983 ] pdfxs
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%DocumentNeededResources:
%%+ font Courier-Bold
%%+ font Courier
%%EOF

%%EndDocument
 @endspecial 3491 1532 V 406 1535 3089 4 v 935 1669 a(Figure)f(2-5:)42
b(C)33 b(co)s(de)g(for)f(running)h(the)g(steady)h(state)150
2034 y(actor)29 b(executions.)45 b(An)29 b(example)i(of)e(a)g(steady)i
(state)f(for)e(the)i(pip)s(eline)h(in)e(Figure)h(2-4)e(requires)150
2215 y(\014lter)33 b Fn(A)g Fs(to)f(\014re)h(4)f(times,)i
Fn(B)f Fs(6)f(times,)i Fn(C)f Fs(9)f(times,)i(and)e Fn(D)h
Fs(3)g(times.)150 2826 y Fr(2.1.3)136 b(Compilation)47
b(Pro)t(cess)150 3153 y Fs(The)36 b(StreamIt)g(compiler)g(deriv)m(es)h
(the)f(initialization)g(and)f(steady)h(state)g(sc)m(hedules)i([15])d
(and)150 3333 y(outputs)j(a)f(C)h(program)f(that)g(includes)i(the)f
(initialization)g(and)g(w)m(ork)g(functions,)i(as)d(w)m(ell)i(as)150
3514 y(a)i(driv)m(er)h(to)e(execute)j(eac)m(h)f(of)e(the)h(t)m(w)m(o)h
(sc)m(hedules.)71 b(The)41 b(compilation)h(pro)s(cess)g(allo)m(ws)g
(the)150 3694 y(StreamIt)30 b(compiler)h(to)f(fo)s(cus)g(on)f(high)h
(lev)m(el)i(optimizations,)f(and)f(relies)h(on)f(existing)h(compil-)150
3875 y(ers)j(to)f(p)s(erform)h(mac)m(hine-sp)s(eci\014c)i
(optimizations)e(suc)m(h)h(as)f(register)g(allo)s(cation,)g
(instruction)150 4056 y(sc)m(heduling,)44 b(and)c(co)s(de)g
(generation|this)h(t)m(w)m(o-step)g(approac)m(h)f(a\013ords)g(us)h(a)e
(great)h(deal)g(of)150 4236 y(p)s(ortabilit)m(y)34 b(\(e.g.,)h(co)s(de)
f(generated)h(from)f(the)g(StreamIt)h(compiler)g(is)f(compiled)i(and)e
(run)g(on)150 4417 y(three)f(di\013eren)m(t)h(mac)m(hines)h(as)d(rep)s
(orted)h(in)g(Chapter)g(5\).)296 4638 y(F)-8 b(or)37
b(example,)j(referring)e(to)f(Figure)g(2-4,)h(the)g(compiler)g
(generates)h(C)f(co)s(de)g(for)e(running)150 4818 y(the)d(steady)h
(state)f(that)f(is)h(sho)m(wn)h(in)f(Figure)f(2-5.)296
5039 y(T)-8 b(o)49 b(execute)h(the)f(program,)i(the)e(steady)h(state)e
(is)h(wrapp)s(ed)g(with)g(another)f(lo)s(op)g(that)150
5219 y(in)m(v)m(ok)m(es)33 b(the)f(steady)f(state)h(a)e(designated)i(n)
m(um)m(b)s(er)g(of)e(times.)44 b(Preceding)33 b(the)e(steady)h(state,)f
(a)150 5400 y(similar)i(initialization)g(sc)m(hedule)i(is)e(run)g(to)g
(prime)g(the)g(data)f(bu\013ers.)1901 5649 y(20)p eop
%%Page: 21 21
21 20 bop 150 100 a Fr(2.1.4)136 b(Implemen)l(tation)47
b(of)e(Cac)l(he)h(Optimizations)150 345 y Fs(The)25 b(cac)m(he)g
(optimization)f(algorithm)f(presen)m(ted)j(in)e(this)g(thesis)h(and)f
(describ)s(ed)i(in)e(more)g(detail)150 525 y(in)32 b(the)h(Chapter)f(4)
g(has)g(b)s(een)h(implemen)m(ted)h(in)f(the)f(StreamIt)g(optimizing)h
(stream)g(compiler.)150 706 y(The)j(cac)m(he)h(optimization)f
(algorithm)f(\014rst)h(uses)h(cac)m(he)g(a)m(w)m(are)f(fusion)g(to)f
(com)m(bine)i(adjacen)m(t)150 886 y(actors)43 b(suc)m(h)h(that)f(eac)m
(h)h(fused)g(actor)e(can)i(\014t)f(its)g(instruction)h(and)f(data)g(fo)
s(otprin)m(t)f(within)150 1067 y(the)h(instruction)i(and)e(data)f(cac)m
(he.)76 b(The)44 b(cac)m(he)h(optimization)e(algorithm)g(then)g
(optimizes)150 1247 y(fused)i(actors)f(b)m(y)g(p)s(erforming)g
(aggressiv)m(e)i(lo)s(op)d(unrolling,)k(scalar)d(replacemen)m(t,)49
b(constan)m(t)150 1428 y(propagation)33 b(and)g(other)h(optimizations)g
(supp)s(orted)h(b)m(y)f(the)g(StreamIt)g(compiler.)47
b(A)34 b(sp)s(ecial)150 1609 y(compiler)29 b(pass)g(has)g(b)s(een)g
(implemen)m(ted)h(b)m(y)f(the)g(author)f(that)g(creates)h(the)g(top)f
(lev)m(el)h(function)150 1789 y(that)j(in)m(v)m(ok)m(es)i(the)f(w)m
(ork)f(functions)h(of)f(gran)m(ularit)m(y)g(adjusted)h(actors,)f
(scales)i(their)e(execution)150 1970 y(and)h(implemen)m(ts)i(optimized)
f(bu\013er)f(managemen)m(t)g(strategy)-8 b(.)1901 5649
y(21)p eop
%%Page: 22 22
22 21 bop 1901 5649 a Fs(22)p eop
%%Page: 23 23
23 22 bop 150 898 a Fq(Chapter)78 b(3)150 1447 y(Cac)-6
b(he)77 b(Mo)6 b(del)150 1770 y Fs(F)-8 b(rom)36 b(a)g(cac)m(hing)i(p)s
(oin)m(t)e(of)g(view,)j(it)d(is)h(in)m(tuitiv)m(ely)i(clear)e(that)g
(once)g(an)f(actor's)h(instruction)150 1950 y(w)m(orking)28
b(set)f(is)h(fetc)m(hed)g(in)m(to)f(the)g(cac)m(he,)j(w)m(e)e(can)f
(maximize)h(instruction)g(lo)s(calit)m(y)g(b)m(y)f(running)150
2131 y(the)34 b(actor)f(as)h(man)m(y)g(times)h(as)e(p)s(ossible.)48
b(This)34 b(of)f(course)i(assumes)g(that)e(the)h(total)f(co)s(de)h
(size)150 2311 y(for)j(all)h(actors)g(in)f(the)i(steady)f(state)g
(exceeds)j(the)d(capacit)m(y)h(of)e(the)h(instruction)h(cac)m(he.)60
b(F)-8 b(or)150 2492 y(the)31 b(b)s(enc)m(hmarks)j(used)e(in)f(this)h
(thesis,)h(the)e(total)g(co)s(de)g(size)i(for)d(a)h(steady)h(state)g
(ranges)f(from)150 2673 y(2)j(Kb)h(to)f(o)m(v)m(er)h(135)f(Kb)g(\(and)h
(commonly)g(exceeds)i(16)d(Kb\).)49 b(Th)m(us,)36 b(while)g(individual)
g(actors)150 2853 y(ma)m(y)h(ha)m(v)m(e)g(a)f(small)h(instruction)g(fo)
s(otprin)m(t,)g(the)g(total)e(fo)s(otprin)m(t)h(of)g(the)g(actors)h(in)
f(a)g(steady)150 3034 y(state)g(exceeds)h(a)e(t)m(ypical)h(instruction)
h(cac)m(he)f(size.)52 b(F)-8 b(rom)35 b(these)h(observ)-5
b(ations,)37 b(it)e(is)h(eviden)m(t)150 3214 y(that)k(w)m(e)h(m)m(ust)h
Fo(sc)-5 b(ale)39 b Fs(the)i(execution)g(of)f(actors)h(in)f(the)h
(steady)g(state)g(in)f(order)g(to)g(impro)m(v)m(e)150
3395 y(temp)s(oral)g(lo)s(calit)m(y)-8 b(.)67 b(In)41
b(other)f(w)m(ords,)k(rather)c(than)h(running)f(a)g(actor)g
Fm(n)h Fs(times)g(p)s(er)g(steady)150 3575 y(state,)33
b(w)m(e)h(scale)f(it)g(to)f(run)h Fm(m)22 b Fj(\002)h
Fm(n)33 b Fs(times.)44 b(W)-8 b(e)33 b(term)g Fm(m)g
Fs(the)g Fo(sc)-5 b(aling)34 b(factor)p Fs(.)296 3765
y(The)39 b(ob)m(vious)g(question)g(is:)54 b(to)37 b(what)h(exten)m(t)h
(can)f(w)m(e)g(scale)h(the)f(execution)h(of)e(actors)h(in)150
3946 y(the)h(steady)g(state?)61 b(The)39 b(answ)m(er)g(is)g
(non-trivial)f(b)s(ecause)i(scaling,)g(while)f(b)s(ene\014cial)h(to)e
(the)150 4127 y(instruction)k(cac)m(he)h(b)s(eha)m(vior,)h(ma)m(y)e(o)m
(v)m(erburden)i(the)d(data)g(cac)m(he)i(as)e(the)h(bu\013ers)g(b)s(et)m
(w)m(een)150 4307 y(actors)e(ma)m(y)h(gro)m(w)g(to)f(prohibitiv)m(ely)i
(large)e(sizes)i(that)e(degrade)h(the)g(data)f(cac)m(he)h(b)s(eha)m
(vior.)150 4488 y(Sp)s(eci\014cally)-8 b(,)34 b(if)f(a)f(bu\013er)h(o)m
(v)m(er\015o)m(ws)i(the)e(cac)m(he,)h(then)f(pro)s(ducer-consumer)h(lo)
s(calit)m(y)g(is)f(lost.)296 4678 y(This)g(c)m(hapter)f(presen)m(ts)i
(a)d(simple)h(and)g(in)m(tuitiv)m(e)h(cac)m(he)f(mo)s(del)g(to)f
(estimate)i(the)e(instruc-)150 4858 y(tion)d(and)h(data)e(cac)m(he)j
(miss)g(rates)e(for)g(a)g(steady)h(state)g(sequence)i(of)d(actor)g
(\014rings.)42 b(The)30 b(mo)s(del)150 5039 y(serv)m(es)k(as)e(a)g
(foundation)g(for)f(reasoning)i(ab)s(out)e(the)i(cac)m(he)g(a)m(w)m
(are)g(optimizations)g(in)m(tro)s(duced)150 5219 y(in)23
b(this)h(thesis.)42 b(W)-8 b(e)24 b(dev)m(elop)h(the)e(mo)s(del)h
(\014rst)g(for)e(the)i(instruction)g(cac)m(he,)j(and)c(then)h
(generalize)150 5400 y(it)33 b(to)f(accoun)m(t)h(for)f(the)h(data)f
(cac)m(he.)1901 5649 y(23)p eop
%%Page: 24 24
24 23 bop 150 100 a Fw(3.1)161 b(Instruction)51 b(Cac)l(he)150
539 y Fs(A)27 b(steady)g(state)g(execution)i(is)e(a)f(sequence)j(of)d
(actor)h(\014rings)g Fm(S)33 b Fs(=)28 b(\()p Fm(a)2701
554 y Fl(1)2740 539 y Fm(;)17 b(:)g(:)g(:)f(;)h(a)3010
554 y Fk(n)3057 539 y Fs(\),)28 b(and)e(a)h Fo(pr)-5
b(o)g(gr)g(am)150 720 y(exe)g(cution)43 b Fs(corresp)s(onds)h(to)f(one)
g(or)g(more)g(rep)s(etitions)h(of)f(the)g(steady)i(state.)75
b(W)-8 b(e)43 b(use)i(the)150 901 y(notation)35 b Fm(S)6
b Fs([)p Fm(i)p Fs(])35 b(to)g(refer)g(to)g(the)g(actor)g
Fm(a)g Fs(that)g(is)h(\014red)g(at)e(logical)h(time)h
Fm(i)p Fs(,)g(and)f Fj(j)p Fm(S)6 b Fj(j)34 b Fs(to)h(denote)150
1081 y(the)e(length)g(of)f(the)h(sequence.)296 1275 y(Our)47
b(cac)m(he)g(mo)s(del)g(is)g(simple)h(in)e(that)h(it)f(considers)i(eac)
m(h)f(actor)g(in)f(the)h(steady)h(state)150 1456 y(sequence,)35
b(and)e(determines)i(whether)f(one)f(or)f(more)h(misses)i(are)d(b)s
(ound)h(to)f(o)s(ccur.)44 b(The)34 b(miss)150 1637 y(determination)41
b(is)f(based)h(on)f(the)g(the)g Fo(instruction)h(r)-5
b(euse)42 b(distanc)-5 b(e)39 b Fs(\()p Fo(IRD)o Fs(\),)j(whic)m(h)f
(is)f(equal)150 1817 y(to)c(the)h(n)m(um)m(b)s(er)h(of)e(unique)h
(instructions)h(that)f(are)f(referenced)i(b)s(et)m(w)m(een)h(t)m(w)m(o)
e(executions)h(of)150 1998 y(the)31 b(actor)f(under)h(consideration)h
(\(as)e(they)i(app)s(ear)e(in)h(the)f(sc)m(hedule\).)46
b(The)31 b(steady)g(state)g(is)g(a)150 2178 y(compact)d(represen)m
(tation)i(of)d(the)h(whole)h(program)e(execution,)j(and)e(th)m(us,)i(w)
m(e)f(simply)g(accoun)m(t)150 2359 y(for)j(the)h(misses)h(within)g(a)e
(steady)h(state,)g(and)g(generalize)h(the)f(result)g(to)f(the)h(whole)g
(program.)150 2539 y(Within)j(a)f(steady)i(state,)g(an)e(actor)g(is)h
(c)m(harged)h(a)e(miss)i(p)s(enalt)m(y)f(if)g(and)f(only)h(if)g(the)g
(n)m(um)m(b)s(er)150 2720 y(of)c(referenced)h(instructions)h(since)f
(the)g(last)f(execution)i(\(of)d(the)i(same)g(actor\))e(is)i(greater)f
(than)150 2901 y(the)h(instruction)h(cac)m(he)g(capacit)m(y)-8
b(.)296 3095 y(F)g(ormally)g(,)35 b(let)f Fo(phase)o
Fs(\()p Fm(S;)17 b(i)p Fs(\))34 b(for)f(1)d Fj(\024)h
Fm(i)f Fj(\024)h(j)p Fm(S)6 b Fj(j)33 b Fs(represen)m(t)j(a)d
(subsequence)38 b(of)33 b Fm(k)k Fs(elemen)m(ts)f(of)150
3275 y Fm(S)6 b Fs(:)1005 3489 y Fo(phase)o Fs(\()p Fm(S;)17
b(i)p Fs(\))28 b(=)f(\()p Fm(S)6 b Fs([)p Fm(i)p Fs(])p
Fm(;)17 b(S)6 b Fs([)p Fm(i)23 b Fs(+)f(1])p Fm(;)17
b(:)g(:)g(:)e(;)i(S)6 b Fs([)p Fm(i)22 b Fs(+)g Fm(k)k
Fj(\000)c Fs(1]\))296 3978 y(where)27 b Fm(k)j Fj(2)e
Fs([1)p Fm(;)17 b Fj(j)p Fm(S)6 b Fj(j)p Fs(])24 b(is)i(the)f(smallest)
i(in)m(teger)f(suc)m(h)h(that)d Fm(S)6 b Fs([)p Fm(i)h
Fs(+)g Fm(k)s Fs(])28 b(=)g Fm(S)6 b Fs([)p Fm(i)p Fs(].)41
b(In)25 b(other)g(w)m(ords,)j(a)150 4159 y(phase)h(is)g(a)f
(subsequence)33 b(of)27 b Fm(S)35 b Fs(that)28 b(starts)h(with)g(the)g
(sp)s(eci\014ed)h(actor)e(\()p Fm(S)6 b Fs([)p Fm(i)p
Fs(]\))29 b(and)f(ends)i(b)s(efore)150 4339 y(the)48
b(next)h(o)s(ccurrence)g(of)f(the)g(same)h(actor)e(\(i.e.,)53
b(there)48 b(are)g(no)g(in)m(terv)m(ening)i(o)s(ccurrences)150
4520 y(of)44 b Fm(S)6 b Fs([)p Fm(i)p Fs(])44 b(in)g(the)h(phase\).)79
b(Note)44 b(that)g(b)s(ecause)h(the)g(steady)g(state)f(execution)i(is)f
(cyclic,)k(the)150 4700 y(construction)44 b(of)e(the)h(subsequence)j
(is)d(allo)m(w)m(ed)h(to)e(wrap)g(around)h(the)g(steady)h(state)3468
4664 y Fl(1)3508 4700 y Fs(.)73 b(F)-8 b(or)150 4881
y(example,)38 b(the)d(steady)i(state)f Fm(S)1345 4896
y Fl(1)1417 4881 y Fs(=)c(\()p Fn(AABB)q Fs(\))j(has)h
Fo(phase)o Fs(\()p Fm(S)2350 4896 y Fl(1)2389 4881 y
Fm(;)17 b Fs(1\))32 b(=)g(\()p Fn(A)q Fs(\),)k Fo(phase)o
Fs(\()p Fm(S)3183 4896 y Fl(1)3222 4881 y Fm(;)17 b Fs(2\))32
b(=)g(\()p Fn(ABB)q Fs(\),)150 5061 y Fo(phase)o Fs(\()p
Fm(S)482 5076 y Fl(1)521 5061 y Fm(;)17 b Fs(3\))28 b(=)f(\()p
Fn(B)p Fs(\),)33 b(and)g Fo(phase)o Fs(\()p Fm(S)1492
5076 y Fl(1)1531 5061 y Fm(;)17 b Fs(4\))27 b(=)h(\()p
Fn(BAA)p Fs(\),)p 150 5209 1440 4 v 262 5270 a Fi(1)299
5300 y Fh(In)34 b(other)f(w)n(ords,)h(the)g(subsequence)g(is)f(formed)h
(from)f(a)g(new)h(sequence)f Fg(S)2761 5270 y Ff(0)2817
5300 y Fh(=)g Fg(S)5 b Fe(j)p Fg(S)39 b Fh(where)33 b
Fe(j)h Fh(represen)n(ts)150 5400 y(concatenation.)1901
5649 y Fs(24)p eop
%%Page: 25 25
25 24 bop 296 100 a Fs(Let)24 b Fm(I)8 b Fs(\()p Fm(a)p
Fs(\))24 b(denote)g(the)g(co)s(de)g(size)h(of)f(the)g(w)m(ork)g
(function)h(for)e(actor)g Fm(a)p Fs(.)41 b(Then)25 b(the)f(instruction)
150 280 y(reuse)34 b(distance)g(is)1517 494 y Fo(IRD)p
Fs(\()p Fm(S;)17 b(i)p Fs(\))28 b(=)2044 399 y Fd(X)2097
609 y Fk(a)2205 494 y Fm(I)8 b Fs(\()p Fm(a)p Fs(\))191
782 y(where)42 b(the)g(sum)g(is)g(o)m(v)m(er)g(all)f(distinct)h(actors)
g Fm(a)f Fs(o)s(ccurring)g(in)h Fo(phase)o Fs(\()p Fm(S;)17
b(i)p Fs(\).)69 b(W)-8 b(e)42 b(can)f(then)150 996 y(determine)49
b(if)f(a)f(sp)s(eci\014c)i(actor)e(will)i(result)f(in)g(an)f
(instruction)i(cac)m(he)g(miss)g(\(on)e(its)h(next)150
1177 y(\014ring\))33 b(b)m(y)g(ev)-5 b(aluating)33 b(the)g(follo)m
(wing)g(step)g(function:)723 1634 y Fo(IMISS)o Fs(\()p
Fm(S;)17 b(i)p Fs(\))28 b(=)1340 1400 y Fd(8)1340 1490
y(>)1340 1520 y(<)1340 1699 y(>)1340 1729 y(:)1428 1544
y Fs(0)98 b(if)32 b Fo(IRD)o Fs(\()p Fm(S;)17 b(i)p Fs(\))28
b Fj(\024)g Fm(C)2262 1559 y Fk(I)2302 1544 y Fs(;)33
b(hit:)43 b(no)33 b(cac)m(he)h(re\014ll,)1428 1761 y(1)98
b(otherwise;)34 b(miss:)45 b(\(some\))33 b(cac)m(he)h(re\014ll.)3549
1634 y(\(3.1\))183 2053 y(In)e(the)h(equation,)h Fm(C)968
2068 y Fk(I)1040 2053 y Fs(represen)m(ts)h(the)e(instruction)h(cac)m
(he)g(size.)296 2292 y(Using)g(Equation)g(3.1,)f(w)m(e)i(can)e
(estimate)i(the)f(instruction)g(miss)h(rate)e(\()p Fo(IMR)p
Fs(\))g(of)g(a)g(steady)150 2473 y(state)g(as:)1300 2707
y Fo(IMR)p Fs(\()p Fm(S)6 b Fs(\))28 b(=)1815 2639 y(1)p
1779 2684 122 4 v 1779 2775 a Fj(j)p Fm(S)6 b Fj(j)1956
2574 y Fc(j)p Fk(S)t Fc(j)1927 2612 y Fd(X)1942 2822
y Fk(i)p Fl(=1)2087 2707 y Fo(IMISS)o Fs(\()p Fm(S;)17
b(i)p Fs(\))p Fm(:)950 b Fs(\(3.2\))296 3207 y(Our)28
b(cac)m(he)i(mo)s(del)e(allo)m(ws)i(us)e(to)g(rank)h(the)f(qualit)m(y)i
(of)e(an)g(execution)h(ordering:)42 b(sc)m(hedules)150
3388 y(that)30 b(b)s(o)s(ost)g(temp)s(oral)g(lo)s(calit)m(y)h(result)g
(in)f(miss)i(rates)e(closer)i(to)d(zero,)j(and)e(sc)m(hedules)j(that)d
(do)150 3569 y(not)i(exploit)i(temp)s(oral)e(lo)s(calit)m(y)i(result)f
(in)g(miss)h(rates)f(closer)g(to)g(one.)296 3775 y(F)-8
b(or)31 b(example,)j(in)e(the)g(steady)h(state)g Fm(S)1764
3790 y Fl(1)1831 3775 y Fs(=)27 b(\()p Fn(AABB)q Fs(\),)32
b(assume)i(that)d(the)i(com)m(bined)g(instruc-)150 3955
y(tion)26 b(w)m(orking)g(sets)h(exceed)g(the)f(instruction)h(cac)m(he,)
h(i.e.,)g Fm(I)8 b Fs(\()p Fn(A)p Fs(\))g(+)g Fm(I)g
Fs(\()p Fn(B)p Fs(\))27 b Fm(>)h(C)2953 3970 y Fk(I)2993
3955 y Fs(.)41 b(Then,)28 b(w)m(e)f(exp)s(ect)150 4136
y(to)40 b(su\013er)h(a)f(miss)h(at)f(the)g(start)g(of)g(ev)m(ery)i
(steady)f(state)g(b)s(ecause)g(the)g(phase)g(that)f(precedes)150
4317 y(the)29 b(execution)i(of)k Fn(A)29 b Fs(\(at)g
Fm(S)1155 4332 y Fl(1)1194 4317 y Fs([1]\))g(is)g Fo(phase)p
Fs(\()p Fm(S)1791 4332 y Fl(1)1830 4317 y Fm(;)17 b Fs(2\))28
b(with)i(an)f(instruction)h(reuse)g(distance)g(greater)150
4497 y(than)40 b(the)g(cac)m(he)h(size)g(\()p Fo(IRD)o
Fs(\()p Fm(S)1340 4512 y Fl(1)1379 4497 y Fm(;)17 b Fs(2\))40
b Fm(>)g(C)1736 4512 y Fk(I)1775 4497 y Fs(\).)65 b(Similarly)-8
b(,)43 b(there)d(is)g(a)g(miss)h(predicted)g(for)f(the)150
4678 y(\014rst)h(o)s(ccurrence)h(of)e(actor)h Fn(B)f
Fs(since)i Fo(phase)o Fs(\()p Fm(S)1899 4693 y Fl(1)1939
4678 y Fm(;)17 b Fs(4\))41 b(=)g(\()p Fn(BAA)p Fs(\))g(and)g
Fo(IRD)o Fs(\()p Fm(S)2976 4693 y Fl(1)3015 4678 y Fm(;)17
b Fs(4\))41 b Fm(>)g(C)3374 4693 y Fk(I)3414 4678 y Fs(.)67
b(Th)m(us,)150 4858 y Fo(IMR)p Fs(\()p Fm(S)444 4873
y Fl(1)483 4858 y Fs(\))31 b(=)g(2)p Fm(=)p Fs(4)j(whereas)h(for)f(the)
h(follo)m(wing)g(v)-5 b(arian)m(t)34 b Fm(S)2337 4873
y Fl(2)2408 4858 y Fs(=)c(\()p Fn(ABAB)q Fs(\),)35 b
Fo(IMR)p Fs(\()p Fm(S)3151 4873 y Fl(2)3191 4858 y Fs(\))30
b(=)h(1.)49 b(In)35 b(the)150 5039 y(case)k(of)f Fm(S)539
5054 y Fl(2)579 5039 y Fs(,)i(w)m(e)f(kno)m(w)h(that)e(since)i(the)e
(com)m(bined)i(instruction)g(w)m(orking)f(sets)h(of)e(the)h(actors)150
5219 y(exceed)44 b(the)e(cac)m(he)i(size,)h(when)f(actor)d
Fn(B)h Fs(is)h(\014red)g(follo)m(wing)g Fn(A)p Fs(,)g(it)f(evicts)h
(part)f(of)f(actor)h Fn(A)p Fs('s)150 5400 y(instruction)d(w)m(orking)g
(set.)60 b(Hence)39 b(when)g(w)m(e)g(transition)f(bac)m(k)h(to)e
(\014re)i(actor)e Fn(A)p Fs(,)h(w)m(e)h(ha)m(v)m(e)g(to)1901
5649 y(25)p eop
%%Page: 26 26
26 25 bop 150 100 a Fs(refetc)m(h)34 b(certain)f(instructions,)h(but)f
(in)f(the)h(pro)s(cess,)h(w)m(e)f(replace)h(parts)f(of)f(actor)g
Fn(B)p Fs('s)h(w)m(orking)150 280 y(set.)62 b(In)39 b(terms)h(of)e(the)
h(cac)m(he)h(mo)s(del,)h Fo(IRD)o Fs(\()p Fm(S)1929 295
y Fl(2)1968 280 y Fm(;)17 b(i)p Fs(\))38 b Fm(>)g(C)2305
295 y Fk(I)2383 280 y Fs(for)g(ev)m(ery)j(actor)d(in)h(the)g(sequence,)
150 461 y(i.e.,)33 b(1)28 b Fj(\024)g Fm(i)g Fj(\024)g(j)p
Fm(S)770 476 y Fl(2)809 461 y Fj(j)p Fs(.)296 651 y(Note)38
b(that)g(the)g(amoun)m(t)g(of)g(re\014ll)g(is)h(prop)s(ortional)e(to)g
(the)h(n)m(um)m(b)s(er)i(of)d(cac)m(he)i(lines)g(that)150
831 y(are)h(replaced)h(when)h(sw)m(apping)f(actors,)i(and)d(as)g(suc)m
(h,)k(w)m(e)d(ma)m(y)g(wish)g(to)f(adjust)g(the)h(cac)m(he)150
1012 y(miss)k(step)f(function)g(\()p Fo(IMISS)o Fs(\).)77
b(One)44 b(simple)h(v)-5 b(ariation)43 b(is)h(to)f(allo)m(w)h(for)f
(some)i(partial)e(re-)150 1193 y(placemen)m(t)31 b(without)f(unduly)h
(p)s(enalizing)f(the)f(o)m(v)m(erall)i(v)-5 b(alue)29
b(of)g(the)h(metric.)43 b(Namely)-8 b(,)31 b(w)m(e)g(can)150
1373 y(allo)m(w)d(the)f(constan)m(t)h Fm(C)1017 1388
y Fk(I)1084 1373 y Fs(to)f(b)s(e)g(some)h(fraction)f(greater)h(than)f
(the)g(actual)h(cac)m(he)g(size.)43 b(Alterna-)150 1554
y(tiv)m(ely)-8 b(,)33 b(w)m(e)e(can)g(use)h(a)e(more)h(complicated)h
(miss)g(function)f(with)h(a)e(more)h(uniform)g(probabilit)m(y)150
1734 y(distribution.)150 2113 y Fp(T)-9 b(emp)s(oral)45
b(Lo)s(calit)m(y)98 b Fs(According)39 b(to)f(our)g(mo)s(del,)j(the)d
(concept)i(of)e(impro)m(ving)h(temp)s(oral)150 2294 y(instruction)29
b(lo)s(calit)m(y)f(translates)g(to)f(deriving)i(a)e(steady)h(state)g
(where,)i(in)e(the)g(b)s(est)g(case,)h(ev)m(ery)150 2474
y(actor)f(has)h(only)g(one)g(phase)g(that)f(is)h(longer)g(than)f
(unit-length.)43 b(F)-8 b(or)27 b(example,)k(a)d(p)s(erm)m(utation)150
2655 y(of)c(the)h(actors)g(in)g Fm(S)859 2670 y Fl(2)923
2655 y Fs(\(where)h(all)e(phases)i(are)f(of)f(length)h(t)m(w)m(o\))h
(that)e(impro)m(v)m(es)j(temp)s(oral)d(lo)s(calit)m(y)150
2835 y(will)33 b(result)h(in)f Fm(S)780 2850 y Fl(1)819
2835 y Fs(,)g(whic)m(h)h(w)m(e)f(ha)m(v)m(e)h(sho)m(wn)g(has)f(a)f
(relativ)m(ely)j(lo)m(w)m(er)f(miss)f(rate.)150 3214
y Fp(Execution)46 b(Scaling)99 b Fs(Another)40 b(approac)m(h)h(to)f
(impro)m(ving)h(temp)s(oral)g(lo)s(calit)m(y)f(is)h(to)f(scale)150
3395 y(the)48 b(execution)g(of)f(the)h(actors)f(in)g(the)h(steady)g
(state.)88 b(Scaling)47 b(increases)i(the)f(n)m(um)m(b)s(er)g(of)150
3575 y(consecutiv)m(e)c(\014rings)e(of)f(the)h(same)h(actor.)69
b(A)42 b(scaled)h(steady)f(state)g(has)g(a)f(greater)h(n)m(um)m(b)s(er)
150 3756 y(of)47 b(unit-length)h(phases)h(\(i.e.,)k(a)47
b(phase)i(of)e(length)h(one)g(and)g(the)g(shortest)h(p)s(ossible)g
(reuse)150 3936 y(distance\).)296 4126 y(W)-8 b(e)41
b(represen)m(t)h(a)e(scaled)h(execution)h(of)d(the)i(steady)g(state)g
(as)f Fm(S)2776 4090 y Fk(m)2883 4126 y Fs(=)g(\()p Fm(a)3088
4090 y Fk(m)3088 4151 y Fl(1)3155 4126 y Fm(;)17 b(:)g(:)g(:)f(;)h(a)
3425 4090 y Fk(m)3425 4151 y(n)3491 4126 y Fs(\):)59
b(the)150 4307 y(steady)38 b(state)f Fm(S)43 b Fs(is)37
b(scaled)i(b)m(y)e Fm(m)p Fs(,)i(whic)m(h)f(translates)g(to)f
Fm(m)25 b Fj(\000)h Fs(1)36 b(additional)h(\014rings)h(of)e(ev)m(ery)
150 4488 y(actor.)41 b(F)-8 b(or)25 b(example,)k(scaling)e
Fm(S)1381 4503 y Fl(1)1448 4488 y Fs(=)h(\()p Fn(AABB)q
Fs(\))d(b)m(y)i(a)f(factor)g(of)f(t)m(w)m(o)i(results)g(in)g
Fm(S)3094 4451 y Fl(2)3088 4512 y(1)3160 4488 y Fs(=)h(\()p
Fn(AAAABBBB)r Fs(\))150 4668 y(and)33 b(scaling)g Fm(S)720
4683 y Fl(2)787 4668 y Fs(=)28 b(\()p Fn(ABAB)q Fs(\))k(b)m(y)i(the)f
(same)g(amoun)m(t)g(results)h(in)f Fm(S)2597 4632 y Fl(2)2591
4693 y(2)2664 4668 y Fs(=)27 b(\()p Fn(AABBAABB)r Fs(\);)296
4858 y(F)-8 b(rom)42 b(Equation)h(3.1,)h(w)m(e)f(observ)m(e)h(that)d
(unit-length)i(phases)g(do)f(not)g(increase)i(the)e(in-)150
5039 y(struction)30 b(miss)h(rate)f(as)g(long)f(as)h(the)g(size)g(of)g
(the)g(actor's)f(instruction)i(w)m(orking)g(set)f(is)g(smaller)150
5219 y(than)41 b(the)g(cac)m(he)h(size;)k(w)m(e)c(assume)g(this)g(is)f
(alw)m(a)m(ys)i(the)e(case.)69 b(Therefore,)44 b(scaling)d(has)h(the)
150 5400 y(e\013ect)31 b(of)g(preserving)h(the)f(pattern)g(of)f(miss)i
(o)s(ccurrences)h(while)e(also)g(lengthening)h(the)f(steady)1901
5649 y(26)p eop
%%Page: 27 27
27 26 bop 750 1606 a @beginspecial 0 @llx 0 @lly 656
@urx 439 @ury 2880 @rwi @setspecial
%%BeginDocument: fftc-mult2.eps
%!PS-Adobe-3.1 EPSF-3.0
%%Title: fftc-mult2.eps
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 9.0
%AI9_PrintingDataBegin
%%For: Bill Thies
%%CreationDate: 4/19/2005
%%CropBox: 0.000000 0.000000 655.055664 438.105469
%%BoundingBox: 0 0 656 439 
%%HiResBoundingBox: 0.000000 0.000000 655.055664 438.105469
%%LanguageLevel: 2 
%%DocumentData: Clean7Bit
%%Pages: 1 
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_CoolType_Core 1.1 0
%%+ procset Adobe_AGM_Core 2.0 0
%%DocumentFonts: 
%%DocumentSuppliedFonts: 
%%PageOrder: Ascend
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 

%%EndComments
%%BeginDefaults
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 233 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_dst64 64 string def
/AGMCORE_srcLen nd
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_imagestring0 nd
/AGMCORE_imagestring1 nd
/AGMCORE_imagestring2 nd
/AGMCORE_imagestring3 nd
/AGMCORE_imagestring4 nd
/AGMCORE_imagestring5 nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_mbuf () def
/AGMCORE_ybuf () def
/AGMCORE_kbuf () def
/AGMCORE_gbuf () def
/AGMCORE_bbuf () def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_arg1 nd
/AGMCORE_arg2 nd
/AGMCORE_&setgray nd
/AGMCORE_&image nd
/AGMCORE_&colorimage nd
/AGMCORE_&imagemask nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&&setcolorspace nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_in_rip_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ccimage_exists nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_ndx nd
/AGMCORE_err_strings nd
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/bdf
{
	bind def
} bind def
/xdf
{
	exch def
} def
/ldf 
{
	load def
} def
/ddf
{
	put
} def	
/xddf
{
	3 -1 roll put
} def	
/xpt
{
	exch put
} def
	/bdict
	{
		mark
	} def
	
	/edict
	{
		counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
	}def
	
/ps_level
	/languagelevel where{
		pop languagelevel
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/ndf
{
	1 index where{
		pop pop pop
	}{
		dup xcheck
		{bind}if
		def
	}ifelse
} def
/skip_image
{
	has_color ne{
		dup 256 idiv
		{currentfile AGMCORE_str256 readstring pop pop}repeat
		currentfile AGMCORE_str256 0 4 -1 roll 256 mod getinterval
		readstring pop pop
	}{
		pop
	}ifelse
} def
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
} def
/colorbuf
{
	0 1 2 index length 1 sub
		{
		dup 2 index exch get 
		255 exch sub 
		2 index 
		3 1 roll 
		put
		} for
} def
/makereadonlyarray
{
	/packedarray where
		{pop packedarray}
		{array astore readonly}
	ifelse
} def
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq 
	{
		dup /HalftoneType get 1 eq
			{
			/SpotFunction get
			}
			{
			dup /HalftoneType get 2 eq
				{
				/GraySpotFunction get
				}
				{
				pop
				{abs exch abs 2 copy add 1 gt {1 sub dup mul exch 1 sub dup mul add 1 sub}
				{dup mul exch dup mul add 1 exch sub}ifelse}bind
				}
			ifelse
			}
		ifelse
	}
	if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	userdict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	/AGMCORE_arg2 xdf
	/AGMCORE_arg1 xdf
	
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			dup (.) ne AGMCORE_arg1 0 lt and
				{
				pop
				}
				{
				stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
					{
					currentpoint AGMCORE_deltaY sub exch pop
					clippath pathbbox pop pop pop 44 add exch moveto
					} if
				AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
				} ifelse
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
			dup 94 eq 
				{
				pop
				AGMCORE_arg1 0 ge
					{
					AGMCORE_arg1 AGMCORE_str256 cvs
					dup /AGMCORE_tmp exch length def
					AGMCORE_str256 exch 0 exch putinterval
					AGMCORE_str256 0 AGMCORE_tmp getinterval
					stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
						{
						currentpoint AGMCORE_deltaY sub exch pop
						clippath pathbbox pop pop pop 44 add exch moveto
						} if
					AGMCORE_str256 0 AGMCORE_tmp getinterval show
					}
					{
					/AGMCORE_arg1 0 def
					} ifelse
				0 1 AGMCORE_str256 length 1 sub
					{
					AGMCORE_str256 exch 0 put
					}for
				/AGMCORE_tmp 0 def
				AGMCORE_arg1 0 ne
					{
					/AGMCORE_arg1 AGMCORE_arg2 def
					} if
				}
				{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
				}ifelse
			} ifelse
		} forall
} bdf
level2{
	/AGMCORE_map_reserved_ink_name
	{
		dup type /stringtype eq{
			dup /Red eq{
				pop (_Red_)
			}{
				dup /Green eq{
					pop (_Green_)
				}{
					dup /Blue eq{
						pop (_Blue_)
					}{
						dup /Cyan eq{
							pop (_Cyan_)
						}{
							dup /Magenta eq{
								pop (_Magenta_)
							}{
								dup /Yellow eq{
									pop (_Yellow_)
								}{
									dup /Black eq{
										pop (_Black_)
									}{
										dup / eq{
											pop (Process)
										}if
									}ifelse
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}if
	}def
}if
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not
		{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror
			{
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and {
				$error /newerror false put
				AGMCORE_cur_err /AGMCORE_bad_environ eq
					{
					/AGMCORE_bad_environ AGMCORE_ps_level AGMCORE_ps_version
					}
					{
					AGMCORE_cur_err 0 0
					} ifelse
				compose_error_msg
				} if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
		/AGMCORE_&&setcolorspace /setcolorspace ldf
	}if
	/AGMCORE_&image systemdict/image get def
	/AGMCORE_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMCORE_&colorimage /colorimage ldf
	}if
	/AGMCORE_in_rip_sep
		level2{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_gstate_known{
		where{
			/Adobe_AGM_Core_Id known
		}{
			false
		}ifelse
	}ndf
	/AGMCORE_GSTATE AGMCORE_gstate_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 7 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	end
}def
/page_setup
{
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/AGMCORE_ccimage_exists /customcolorimage where {pop true}{false} ifelse def
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and AGMCORE_producing_seps or
		}ifelse
	def
	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots
	}ifelse
	{
		/setcmykcolor[
			{4 copy add add add 0 eq currentoverprint and{pop 0.0005}if}/exec cvx
			/setcmykcolor load dup type/operatortype ne{/exec cvx}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/ln /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		/invert_image_samples
		{
			Adobe_AGM_Core/AGMCORE_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
		/get_gstate
		{
			AGMCORE_GSTATE begin
			/AGMCORE_GSTATE_ctm AGMCORE_tmpmatrix currentmatrix def
			/AGMCORE_GSTATE_clr_spc currentcolorspace def
			/AGMCORE_GSTATE_clr_indx 0 def
			/AGMCORE_GSTATE_clr_comps 12 array def
			mark currentcolor counttomark
				{AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 3 -1 roll put
				/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 add def} repeat pop
			/AGMCORE_GSTATE_fnt rootfont def
			/AGMCORE_GSTATE_lw currentlinewidth def
			/AGMCORE_GSTATE_lc currentlinecap def
			/AGMCORE_GSTATE_lj currentlinejoin def
			/AGMCORE_GSTATE_ml currentmiterlimit def
			currentdash /AGMCORE_GSTATE_do xdf /AGMCORE_GSTATE_da xdf
			/AGMCORE_GSTATE_sa currentstrokeadjust def
			
			/AGMCORE_GSTATE_clr_rnd currentcolorrendering def
			/AGMCORE_GSTATE_op currentoverprint def
			/AGMCORE_GSTATE_bg currentblackgeneration cvlit def
			/AGMCORE_GSTATE_ucr currentundercolorremoval cvlit def
			currentcolortransfer 
				cvlit /AGMCORE_GSTATE_gy_xfer xdf 
				cvlit /AGMCORE_GSTATE_b_xfer xdf
				cvlit /AGMCORE_GSTATE_g_xfer xdf 
				cvlit /AGMCORE_GSTATE_r_xfer xdf
			/AGMCORE_GSTATE_ht currenthalftone def
			/AGMCORE_GSTATE_flt currentflat def
			end
		}ndf
		
		/set_gstate
		{
			AGMCORE_GSTATE begin
			AGMCORE_GSTATE_ctm setmatrix
			AGMCORE_GSTATE_clr_spc setcolorspace
			AGMCORE_GSTATE_clr_indx {AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 1 sub get
			/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 sub def} repeat setcolor
			AGMCORE_GSTATE_fnt setfont
			AGMCORE_GSTATE_lw setlinewidth
			AGMCORE_GSTATE_lc setlinecap
			AGMCORE_GSTATE_lj setlinejoin
			AGMCORE_GSTATE_ml setmiterlimit
			AGMCORE_GSTATE_da AGMCORE_GSTATE_do setdash
			AGMCORE_GSTATE_sa setstrokeadjust
			
			AGMCORE_GSTATE_clr_rnd setcolorrendering
			AGMCORE_GSTATE_op setoverprint
			AGMCORE_GSTATE_bg cvx setblackgeneration
			AGMCORE_GSTATE_ucr cvx setundercolorremoval
			AGMCORE_GSTATE_r_xfer cvx AGMCORE_GSTATE_g_xfer cvx AGMCORE_GSTATE_b_xfer cvx
				AGMCORE_GSTATE_gy_xfer cvx setcolortransfer
			AGMCORE_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
				{
				currenthalftone /HalftoneType get AGMCORE_GSTATE_ht /HalftoneType get ne
					{
					  mark AGMCORE_GSTATE_ht {sethalftone} stopped cleartomark
					} if
				}{
				AGMCORE_GSTATE_ht sethalftone
				} ifelse
			AGMCORE_GSTATE_flt setflat
			end
		}ndf
		AGMCORE_producing_seps not{
	
			/setcolorspace where{
				/Adobe_AGM_Core_Id known not
			}{
				true
			}ifelse
			{
				/setcolorspace
				{
					dup type dup /arraytype eq exch /packedarraytype eq or{
						dup 0 get dup /Separation eq{
							pop
							[ exch {} forall ]
							dup dup 1 get AGMCORE_map_reserved_ink_name 1 exch put
						}{
							/DeviceN eq {
								[ exch {} forall ]
								dup dup 1 get [ exch {AGMCORE_map_reserved_ink_name} forall ] 1 exch put
							}if
						}ifelse
					}if
					AGMCORE_&&setcolorspace 
				}def
			}if
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/ln{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/op /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/Adobe_AGM_Core 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	Adobe_AGM_Core/AGMCORE_name xddf
	false
	currentpagedevice/SeparationColorNames get{
		AGMCORE_name eq or
	}forall
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	1 setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMCORE_&imagemask
			}{
				AGMCORE_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMCORE_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMCORE_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/rdline {
	currentfile AGMCORE_str256 readline pop
} def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMCORE_src256 readstring pop
		dup length /AGMCORE_srcLen exch def
		/AGMCORE_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMCORE_srcLen 1 sub{
			1 index exch get
			AGMCORE_dst64 AGMCORE_ndx 3 -1 roll put
			/AGMCORE_ndx AGMCORE_ndx 1 add def
		}for
		pop
		AGMCORE_dst64 0 AGMCORE_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
	 						currentoverprint not{
			 					1 AGMCORE_&setgray
	 							knockout_image_samples
			 					currentdict imageormask_sys
			 				}{
			 					nulldevice currentdict imageormask_sys
			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										nulldevice
									}{
										invert_image_samples
									}ifelse
								}{
		 							currentoverprint not{
		 								knockout_image_samples
				 					}{
				 						nulldevice
				 					}ifelse
					 			}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
									
								currentcolortransfer
								{pop 1} exch addprocs 4 1 roll				
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								setcolortransfer
									
								MultipleDataSources NComponents AGMCORE_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
		 								currentoverprint not{
		 									knockout_image_samples
				 						}{
				 							nulldevice
				 						}ifelse
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/tint_image_to_color
{
	begin
		Width Height BitsPerComponent ImageMatrix 
		/DataSource load
	end
	Adobe_AGM_Core begin
		/AGMCORE_mbuf 0 string def
		/AGMCORE_ybuf 0 string def
		/AGMCORE_kbuf 0 string def
		{
			colorbuf dup length AGMCORE_mbuf length ne
				{
				dup length dup dup
				/AGMCORE_mbuf exch string def
				/AGMCORE_ybuf exch string def
				/AGMCORE_kbuf exch string def
				} if
			dup AGMCORE_mbuf copy AGMCORE_ybuf copy AGMCORE_kbuf copy pop
		}
		addprocs
		{AGMCORE_mbuf}{AGMCORE_ybuf}{AGMCORE_kbuf} true 4 colorimage	
	end
} def			
/sep_imageormask_lev1
{
	begin
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{
				255 mul round cvi GrayLookup exch get
			} currenttransfer addprocs settransfer
			currentdict imageormask
		}{
			/sep_colorspace_dict AGMCORE_gget/Components known{
				MappedCSA 0 get /DeviceCMYK eq{
					Components aload pop
				}{
					0 0 0 Components aload pop 1 exch sub
				}ifelse
				
				Adobe_AGM_Core/AGMCORE_k xddf 
				Adobe_AGM_Core/AGMCORE_y xddf 
				Adobe_AGM_Core/AGMCORE_m xddf 
				Adobe_AGM_Core/AGMCORE_c xddf 
					
				AGMCORE_y 0.0 eq AGMCORE_m 0.0 eq and AGMCORE_c 0.0 eq and{
					{AGMCORE_k mul 1 exch sub} currenttransfer addprocs settransfer
					currentdict imageormask
				}{ 
					
					currentcolortransfer
					{AGMCORE_k mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_y mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_m mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_c mul 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer
					currentdict tint_image_to_color
				}ifelse
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
					currentdict imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	end
}def
/sep_image_lev1_sep
{
	begin
		/sep_colorspace_dict AGMCORE_gget/Components known{
			Components aload pop
			
			Adobe_AGM_Core/AGMCORE_k xddf 
			Adobe_AGM_Core/AGMCORE_y xddf 
			Adobe_AGM_Core/AGMCORE_m xddf 
			Adobe_AGM_Core/AGMCORE_c xddf 
				
			{AGMCORE_c mul 1 exch sub}
			{AGMCORE_m mul 1 exch sub}
			{AGMCORE_y mul 1 exch sub}
			{AGMCORE_k mul 1 exch sub}
		}{ 
			{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
		}ifelse
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMCORE_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or{
 								knockout_image_samples
		 					}{
		 						nulldevice 
		 					}ifelse
							currentdict imageormask_sys
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/read_image_file
{
	AGMCORE_imagefile 0 setfileposition
	dup /DataSource {AGMCORE_imagefile AGMCORE_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	{ (AGMCORE_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Core/AGMCORE_imagefile xddf 
		Adobe_AGM_Core/AGMCORE_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMCORE_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMCORE_imagefile exch writestring
		}for
		true
	}ifelse
}def
/imageormask_l2_overprint
{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
		AGMCORE_imagefile closefile (AGMCORE_imagefile) deletefile
	}{
		currentdict imageormask
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				nulldevice currentdict imageormask_sys
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_imageormask_lev1
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		currentdict
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
			imageormask
		}{
			
			MappedCSA 0 get /DeviceGray eq {
				{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceCMYK eq {
					currentcolortransfer
					{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}{ 
					currentcolortransfer
					{pop 1} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}ifelse
			}ifelse
		}ifelse
	end end
}def
/indexed_image_lev1_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMCORE_&imagemask
		}{
			AGMCORE_&image
		}ifelse
			
	end end
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false op [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/MultipleDataSources false def
			/NComponents 1 def
			/ImageType 1 def
			/Decode [0 1 def]
			/SkipImageProc {false} def
			currentdict
		end
	}if
	dup begin
		/HostSepColorImage false def
		currentdict/Decode known not{
			/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
			] 
			def
		}if
		currentdict/Operator known not{
			/Operator /image def
		}if
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/cpaint_gcomp
{
	AGM_preserve_spots{
		gsave
		nulldevice
	}if
}def
/cpaint_gsep
{
	AGM_preserve_spots{
		grestore
		currentoverprint Adobe_AGM_Core/AGMCORE_ovp xddf 
	}{	
		gsave
		nulldevice
	}ifelse
}def
/cpaint_gend
{
	AGM_preserve_spots{
		Adobe_AGM_Core/AGMCORE_ovp get setoverprint
	}{
		grestore
	}ifelse
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 1.1 0
%%Copyright: Copyright 1997-1999 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 1.1 0
userdict/Adobe_CoolType_Core 40 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def}if currentpacking true
setpacking/bdf{bind def}bind def/ldf{load def}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto ldf/nfnt/newencodedfont ldf/mfnt/makefont
ldf/sfnt/setfont ldf/ufnt/undefinefont ldf/chp/charpath ldf/awsh/awidthshow
ldf/wsh/widthshow ldf/ash/ashow ldf/sh/show ldf end userdict
/Adobe_CoolType_Data 2 dict dup begin/WidthShowArray 256 array def
/GenFauxMMInst{}bind def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if Adobe_CoolType_Core/unload get exec systemdict
/undef known{userdict/Adobe_CoolType_Data undef}if}bind def/page_setup{
Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict
/languagelevel known{systemdict/languagelevel get 2 ge{userdict
/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1
index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup
systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup
where pop exch get/globaldict where{pop end}if end end def/systemfindfont
/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1
index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1
add dict begin exch{1 index/FID eq{pop pop}{def}ifelse}forall dup null eq{pop}
{{def}forall}ifelse currentdict end exch setglobal}bdf/newencodedfont{findfont
dup length dict begin{1 index/FID ne{def}{pop pop}ifelse}forall/Encoding exch
def currentdict end definefont pop}bdf/scff{$SubstituteFont begin dup type
/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def
/$fontname 1 index dup type/stringtype eq{cvn}if def/$used false def end
findfont $SubstituteFont begin $used{currentglobal exch dup gcheck setglobal
null copyfont begin/FontName $fontname def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}if/$sname null def
/$slen 0 def end}bdf/ConcatStrings{dup 0 exch{length add}forall string exch 0
exch{3 copy putinterval length add}forall pop}bind def/BeginFauxMMFont{1 index
findfont pop 2 array astore ConcatStrings 3 1 roll($)exch 3 array astore
ConcatStrings exch findfont currentglobal exch dup gcheck setglobal null
copyfont/tempfontname exch definefont pop exch 12 dict begin/FontName exch def
/FontType 0 def/FMapType 6 def/FontMatrix matrix def/PaintType 0 def}bind def
/EndFauxMMFont{currentdict end dup/FontName get exch definefont exch setglobal
exch mfnt sfnt}bind def/GenFauxMMInst{Adobe_CoolType_Data/GenFauxMMInst get
exec}bind def/DefFauxMMInst{Adobe_CoolType_Data exch/GenFauxMMInst exch bind
put}bind def/WSALoop{4 copy 1 index add 1 sub 1 exch{3 copy put pop 1 add}for
pop pop 3 2 roll add exch 256 add}bind def/BuildWidthShowArray{currentfont
begin FontType 0 eq dup{pop FMapType 6 eq}if{SubsVector dup length 1 sub 1
exch getinterval}{()}ifelse end Adobe_CoolType_Data/WidthShowArray get 0 0 4 3
roll{WSALoop}forall 256 2 index sub WSALoop pop pop pop}bind def/wsa{
Adobe_CoolType_Data/WidthShowArray get}bind def/?set{$SubstituteFont begin
/$used false def/$fontname 4 index def end 3 index findfont $SubstituteFont
begin $used{false}{dup/FontName known{dup/FontName get $fontname eq 1 index
/DistillerFauxFont known not and}{false}ifelse}ifelse exch pop end{exch pop
exch pop exch 2 dict dup/Found 3 index put exch findfont exch}{exch exec exch
findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put
copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def
/?add{1 index type/integertype eq{exch true 4 2}{false 3 1}ifelse roll 1 index
findfont/Downloaded known{exec exch{exch ?str2 cvs exch findfont/Downloaded
get 1 dict begin/Downloaded 1 index def ?str1 cvs length ?str1 1 index 1 add 3
index putinterval exch length 1 add 1 index add ?str1 2 index(*)putinterval
?str1 0 2 index getinterval cvn findfont ?str1 3 index(+)putinterval 2 dict
dup/FontName ?str1 0 6 index getinterval cvn put dup/Downloaded Downloaded put
end copyfont dup/FontName get exch definefont pop pop pop}{pop}ifelse}{pop
exch{findfont dup/Found get dup length exch ?str1 cvs pop ?str1 1 index(+)
putinterval ?str1 1 index 1 add 4 index ?str2 cvs putinterval ?str1 exch 0
exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn 1 dict exch 1 index
exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}
ifelse}ifelse}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def
/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{
currentfont/Downloaded known{moveto pop pop}{pop pop moveto}ifelse}bind def
setpacking end userdict/$SubstituteFont 20 dict put 1 dict begin
/SubstituteFont dup $error exch 2 copy known{get}{pop pop{pop/Courier}bind}
ifelse def/currentdistillerparams where dup{pop pop currentdistillerparams
/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{
countdictstack array dictstack 0 get begin userdict begin $SubstituteFont
begin/$str 128 string def/$fontpat 128 string def/$slen 0 def/$sname null def
/$match false def/$fontname null def/$used false def/$fontname null def
/$italicangle 26.5 def/$findfontByEnum{dup/$fontname exch def $sname null eq{
$str cvs dup length $slen sub $slen getinterval}{pop $sname}ifelse $fontpat
dup 0(fonts/*)putinterval exch 7 exch putinterval/$match false def mark{
$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}
stopped cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$buildfontname{length $str 1 index(-)
putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$used true def dup length $slen gt $sname null ne or $slen 0 gt and{$sname
null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse
dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap findresource
/CIDSystemInfo get{def}forall $findfontByROS}{pop $findfontByEnum}ifelse}{
//SubstituteFont exec}ifelse/$slen 0 def end}}{{$SubstituteFont begin/$used
true def dup length $slen gt $sname null ne or $slen 0 gt and{$findfontByEnum}
{//SubstituteFont exec}ifelse end}}ifelse bind readonly def}{/findfont{
$SubstituteFont begin dup systemfindfont dup/FontName known{dup/FontName get 2
index ne}{true}ifelse dup{/$used true def}if{$slen 0 gt $sname null ne 3 index
length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add
dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end
definefont}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end}if
end
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_AGM_Core/AGMCORE_err_strings 3 dict dup begin
/AGMCORE_bad_environ (Environment not satisfactory for this job, which requests at least
PostScript Level ^	and at least PostScript version ^. Ensure that the PPD is correct or that
the PostScript  level requested is supported by this printer. ) def
/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate
with on-host methods. ) def
/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end put
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
%%EndSetup
%%Page: name:1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
1 -1 scale 0 -438.105 translate
gsave
[1 0 0 1 0 0 ] concat
gsave
0 0 mo
0 438.105 ln
655.056 438.105 ln
655.056 0 ln
clp
gsave
64.2603 340.684 mo
64.2603 340.743 ln
647.34 340.743 ln
647.34 340.684 ln
64.2603 340.684 ln
clp
0.0599976 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
64.2603 340.684 mo
647.34 340.684 ln
false op
0 0 0 1 cmyk
s
grestore
gsave
64.2603 299.283 mo
64.2603 299.343 ln
647.34 299.343 ln
647.34 299.283 ln
64.2603 299.283 ln
clp
0.0599976 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
64.2603 299.283 mo
647.34 299.283 ln
false op
0 0 0 1 cmyk
s
grestore
gsave
64.2603 257.823 mo
64.2603 257.883 ln
647.34 257.883 ln
647.34 257.823 ln
64.2603 257.823 ln
clp
0.0599976 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
64.2603 257.823 mo
647.34 257.823 ln
false op
0 0 0 1 cmyk
s
grestore
gsave
64.2603 216.423 mo
64.2603 216.483 ln
647.34 216.483 ln
647.34 216.423 ln
64.2603 216.423 ln
clp
0.0599976 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
64.2603 216.423 mo
647.34 216.423 ln
false op
0 0 0 1 cmyk
s
grestore
gsave
64.2603 174.963 mo
64.2603 175.023 ln
647.34 175.023 ln
647.34 174.963 ln
64.2603 174.963 ln
clp
0.0599976 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
64.2603 174.963 mo
647.34 174.963 ln
false op
0 0 0 1 cmyk
s
grestore
gsave
64.2603 133.563 mo
64.2603 133.623 ln
647.34 133.623 ln
647.34 133.563 ln
64.2603 133.563 ln
clp
0.0599976 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
64.2603 133.563 mo
647.34 133.563 ln
false op
0 0 0 1 cmyk
s
grestore
gsave
64.2603 92.103 mo
64.2603 92.1631 ln
647.34 92.1631 ln
647.34 92.103 ln
64.2603 92.103 ln
clp
0.0599976 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
64.2603 92.103 mo
647.34 92.103 ln
false op
0 0 0 1 cmyk
s
grestore
gsave
64.2603 50.7031 mo
64.2603 50.7632 ln
647.34 50.7632 ln
647.34 50.7031 ln
64.2603 50.7031 ln
clp
0.0599976 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
64.2603 50.7031 mo
647.34 50.7031 ln
false op
0 0 0 1 cmyk
s
grestore
gsave
64.2603 9.24316 mo
64.2603 9.30322 ln
647.34 9.30322 ln
647.34 9.24316 ln
64.2603 9.24316 ln
clp
0.0599976 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
64.2603 9.24316 mo
647.34 9.24316 ln
false op
0 0 0 1 cmyk
s
grestore
0.0599976 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
64.2603 9.24316 mo
64.2603 382.144 ln
59.8203 382.144 mo
64.2603 382.144 ln
59.8203 340.684 mo
64.2603 340.684 ln
59.8203 299.283 mo
64.2603 299.283 ln
59.8203 257.823 mo
64.2603 257.823 ln
59.8203 216.423 mo
64.2603 216.423 ln
59.8203 174.963 mo
64.2603 174.963 ln
59.8203 133.563 mo
64.2603 133.563 ln
59.8203 92.103 mo
64.2603 92.103 ln
59.8203 50.7031 mo
64.2603 50.7031 ln
59.8203 9.24316 mo
64.2603 9.24316 ln
64.2603 382.144 mo
647.34 382.144 ln
64.2603 386.583 mo
64.2603 382.144 ln
137.16 386.583 mo
137.16 382.144 ln
210.06 386.583 mo
210.06 382.144 ln
282.9 386.583 mo
282.9 382.144 ln
355.801 386.583 mo
355.801 382.144 ln
428.699 386.583 mo
428.699 382.144 ln
501.6 386.583 mo
501.6 382.144 ln
574.439 386.583 mo
574.439 382.144 ln
647.34 386.583 mo
647.34 382.144 ln
false op
0 0 0 1 cmyk
s
2.88 lw
78.8403 34.083 mo
93.4204 228.003 ln
108 269.463 ln
122.58 303.423 ln
137.16 317.523 ln
151.74 329.104 ln
166.32 343.203 ln
180.9 348.184 ln
195.48 344.043 ln
210.06 334.083 ln
355.801 171.663 ln
501.6 41.583 ln
647.34 33.3032 ln
0.984314 0.980392 0.0196078 0.00392157 cmyk
s
78.8403 29.583 mo
83.3403 34.083 ln
78.8403 38.583 ln
74.3403 34.083 ln
78.8403 29.583 ln
ef
0.960007 lw
78.8403 29.583 mo
83.3403 34.083 ln
78.8403 38.583 ln
74.3403 34.083 ln
78.8403 29.583 ln
cp
s
93.4204 223.503 mo
97.9204 228.003 ln
93.4204 232.503 ln
88.9204 228.003 ln
93.4204 223.503 ln
ef
93.4204 223.503 mo
97.9204 228.003 ln
93.4204 232.503 ln
88.9204 228.003 ln
93.4204 223.503 ln
cp
s
108 264.963 mo
112.5 269.463 ln
108 273.963 ln
103.5 269.463 ln
108 264.963 ln
ef
108 264.963 mo
112.5 269.463 ln
108 273.963 ln
103.5 269.463 ln
108 264.963 ln
cp
s
122.58 298.923 mo
127.08 303.423 ln
122.58 307.923 ln
118.08 303.423 ln
122.58 298.923 ln
ef
122.58 298.923 mo
127.08 303.423 ln
122.58 307.923 ln
118.08 303.423 ln
122.58 298.923 ln
cp
s
137.16 313.023 mo
141.66 317.523 ln
137.16 322.023 ln
132.66 317.523 ln
137.16 313.023 ln
ef
137.16 313.023 mo
141.66 317.523 ln
137.16 322.023 ln
132.66 317.523 ln
137.16 313.023 ln
cp
s
151.74 324.604 mo
156.24 329.104 ln
151.74 333.604 ln
147.24 329.104 ln
151.74 324.604 ln
ef
151.74 324.604 mo
156.24 329.104 ln
151.74 333.604 ln
147.24 329.104 ln
151.74 324.604 ln
cp
s
166.32 338.703 mo
170.82 343.203 ln
166.32 347.703 ln
161.82 343.203 ln
166.32 338.703 ln
ef
166.32 338.703 mo
170.82 343.203 ln
166.32 347.703 ln
161.82 343.203 ln
166.32 338.703 ln
cp
s
180.9 343.684 mo
185.4 348.184 ln
180.9 352.684 ln
176.4 348.184 ln
180.9 343.684 ln
ef
180.9 343.684 mo
185.4 348.184 ln
180.9 352.684 ln
176.4 348.184 ln
180.9 343.684 ln
cp
s
195.48 339.543 mo
199.98 344.043 ln
195.48 348.543 ln
190.98 344.043 ln
195.48 339.543 ln
ef
195.48 339.543 mo
199.98 344.043 ln
195.48 348.543 ln
190.98 344.043 ln
195.48 339.543 ln
cp
s
210.06 329.583 mo
214.56 334.083 ln
210.06 338.583 ln
205.56 334.083 ln
210.06 329.583 ln
ef
210.06 329.583 mo
214.56 334.083 ln
210.06 338.583 ln
205.56 334.083 ln
210.06 329.583 ln
cp
s
355.801 167.163 mo
360.301 171.663 ln
355.801 176.163 ln
351.301 171.663 ln
355.801 167.163 ln
ef
355.801 167.163 mo
360.301 171.663 ln
355.801 176.163 ln
351.301 171.663 ln
355.801 167.163 ln
cp
s
501.6 37.083 mo
506.1 41.583 ln
501.6 46.083 ln
497.1 41.583 ln
501.6 37.083 ln
ef
501.6 37.083 mo
506.1 41.583 ln
501.6 46.083 ln
497.1 41.583 ln
501.6 37.083 ln
cp
s
647.34 28.8032 mo
651.84 33.3032 ln
647.34 37.8032 ln
642.84 33.3032 ln
647.34 28.8032 ln
ef
647.34 28.8032 mo
651.84 33.3032 ln
647.34 37.8032 ln
642.84 33.3032 ln
647.34 28.8032 ln
cp
s
save_ctm
restore_ctm
save_ctm
0 0 0 1 cmyk
%ADOBeginSubsetFont: ArialMT Initial
11 dict begin
/FontName /ArialMT def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1320 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a1b815a9489d0b76c2a7
a1a44437723fc43a852d949290ad7a94a1b5ad5d7322465603110eea2d34
77620e1e4669220215496cab2a0eab44d5f5a2aab469817248ea06bfb997
f90d6b2f8be1b84eb637a6b37416b9391721d5ec95d3f2f0eeec0c5e7a85
f8647832e3b8bcd2e059dfd8583597637d69623cfac7cc5daff6f821c790
30573bd941aa88a58c5fdad07dc0f98e8a> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa65d2deb616de
81764a74cb84561e60b2b8778364d43e0dccd64e05939ef2243c> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/ArialMT findfont /Encoding get
dup 48 /zero put
dup 49 /one put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
48{/.notdef}repeat /zero /one 206{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
37.8003 386.883 mov
(10) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
26.1006 345.423 mov
(10) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
end end
end
/ArialMT findfont /Encoding get
dup 46 /period put
pop
%ADOEndSubsetFont
/ArialMT*2 
[
46{/.notdef}repeat /period 209{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*2 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
41.6506 345.423 mov
(.) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f72e955f0050b5472
6b68794743aa9e2640fbbbe965e5c7462a0da2fe3396d6994552b6fd7b9f
c3a7f776be319813ddb449d1a761c2a25379bcdbddb59583b40898699b48
1611e523f8146fbaea058eb8237d1f8ef6c080ecb39f96cb6c0db3e3c586
248bc7c61f659dbd2f8aadac81a2448e7137d524> ND 
end end
end
/ArialMT findfont /Encoding get
dup 53 /five put
pop
%ADOEndSubsetFont
/ArialMT*3 
[
53{/.notdef}repeat /five 202{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*3 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
45.5303 345.423 mov
(5) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
37.8003 304.022 mov
(11) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
26.1006 262.563 mov
(11) sh
/ArialMT*2 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
41.6506 262.563 mov
(.) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
45.5303 262.563 mov
(5) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
37.8003 221.162 mov
(1) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/two 
<10bf31705ac903dc9a7655fb1cbe190d27478cd71b680cdd27c584201637
c4fe4b4b405b52ad89527914216baf3bd85ff2c208cb4a52be16604c8a50
dcecbfd5642891867b96216314c81c0e3dfc8fa082d8d8198205214fcd51
241f5962d19caf30548d3aa5d6ec1b5522e103ca20bbd3a0a24f1b42f046
b615f5396ae95aa136f86bb447b4a68e017a7700f7b41cde733dee861b37
3d8f> ND 
end end
end
/ArialMT findfont /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/ArialMT*4 
[
50{/.notdef}repeat /two 205{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*4 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
45.5753 221.162 mov
(2) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
26.1006 179.701 mov
(1) sh
/ArialMT*4 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
33.8756 179.701 mov
(2) sh
/ArialMT*2 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
41.6506 179.701 mov
(.) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
45.5303 179.701 mov
(5) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
37.8003 138.301 mov
(1) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d89951110b
adeffb560aa54e338c9127425b06cefdd1d949874d4622c9b30b369b86fa
41b317af240e3deeaa1e9f5a90a07b28e40380e054c3662afb1cf6f51c11
b6836151d28c225e6c4d1016d9fa730c1bf86c199f942682434f25971f32
ae953f8b74fbb716bed8520757e61bce7cf6be4a92865d3717d39c92f18c
1b406caa6c3ed07ea5ff15dde83aea7d31b62642cc5c322a42f14367085d
78b35ebe75a37abae90e77a72aa751401d5e1988c4445fb51991681b7fd3
6a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/ArialMT*5 
[
51{/.notdef}repeat /three 204{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*5 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
45.5753 138.301 mov
(3) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
26.1006 96.8403 mov
(1) sh
/ArialMT*5 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
33.8756 96.8403 mov
(3) sh
/ArialMT*2 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
41.6506 96.8403 mov
(.) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
45.5303 96.8403 mov
(5) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
37.8003 55.4404 mov
(1) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
end end
end
/ArialMT findfont /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/ArialMT*6 
[
52{/.notdef}repeat /four 203{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*6 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
45.5753 55.4404 mov
(4) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
26.1006 13.98 mov
(1) sh
/ArialMT*6 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
33.8756 13.98 mov
(4) sh
/ArialMT*2 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
41.6506 13.98 mov
(.) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
45.5303 13.98 mov
(5) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
60.3604 407.459 mov
(0) sh
/ArialMT*3 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
133.254 407.459 mov
(5) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
202.256 407.459 mov
(10) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
275.091 407.459 mov
(1) sh
/ArialMT*3 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
282.866 407.459 mov
(5) sh
restore_ctm
save_ctm
/ArialMT*4 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
347.986 407.459 mov
(2) sh
/ArialMT*1 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
355.761 407.459 mov
(0) sh
restore_ctm
save_ctm
/ArialMT*4 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
420.881 407.459 mov
(2) sh
/ArialMT*3 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
428.656 407.459 mov
(5) sh
restore_ctm
save_ctm
/ArialMT*5 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
493.775 407.459 mov
(3) sh
/ArialMT*1 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
501.55 407.459 mov
(0) sh
restore_ctm
save_ctm
/ArialMT*5 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
566.609 407.459 mov
(3) sh
/ArialMT*3 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
574.384 407.459 mov
(5) sh
restore_ctm
save_ctm
/ArialMT*6 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
639.506 407.459 mov
(4) sh
/ArialMT*1 findfont [13.98 0 0 -13.98 0 0 ]mfnt sfnt
BuildWidthShowArray
647.281 407.459 mov
(0) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/space 
<10bf317079c7734bf7> ND 
/a 
<10bf31705d64e193f9f1f8a567d03549fa73483ae9b672d7b7797200c526
6d55e0abf05d082c89da2ef3d2f91996afd8e100af13d8e4b339158b9d4e
0256bc0329e2558ef3a479ac944060941a5a0ef5dc04c7a41bce2731b9f6
bac3899bfe4b490bb12e4abb60728f8dd08e79a22a9692e2e377b4d6d5c9
90d58983bd1034efca9e5a712e5fac945f9b4432273fa80564af2b96e4b5
70911aa8878cafbb79a548cdf67b5fd07c85ed1a9f7575ac0b1cdc57118f
0bc5ec90d16e3c70642d41ebc8d851a2770f7e9e3366dcaea1eeafe88adc
1075a75e7e694b5e09e5b68c30faa47727bbcc80df324abdee2341fefa79
33b84bfd3fdf5d94b0c28761234c47086bfdc62b798b> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a974ca8bfdce94e11266bf025cb7
0165d6854d700d70cc5444b9f61253adefae30a0411da65b303e54163273
771b8917fdcb996d46a918dadbf0ac7f3fc07110b5e4794547b6eff7de49
7e69fc6e8381938653cd90c476c4aee37f40cb1165ebe6f2b5655eacf33b
1b7c58ec799cd6ac7895a51a3f59a1ac6ba84d> ND 
/f 
<10bf31706629561882b73d5b02cebd16b0942e445fbe6e31445dccaac51f
be5d2720e030d916d3be5da2de6f181ec6d47f432789c3f20d0f29179709
0d6dda936003a76baaf59048c547fb41b8377c0142c5f3b363c49f8779> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d72467d80a581885
24220eb6bee82e9b32f5b916df53626433a323d6d12473722cbcba013869
499dd3fb1dec583e9e14facd47321621de2b3f9ddf3cc6eb86fdec76a812
783b728a956498dd1c5c8de5262c828735f36e5b194a005655660bc84af2
55d132859316efaca31d3a694047b6098384c4c30c50971601792b4c1f0a
5b9c2fe963d7a927c7893353b47bcd78644a7e1009b67e7a9660e48eb4d1
99a373566b806d69acdcdb838640454b794e47e8e0135bdf> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc333efe38edc6b37b1ff48956
90e91a6df105656658715dd87021b65972ac13dc8aee35ad2f1e0b304a70
d3e1196ff9e3f237aaac2ee9c5140172156ad6cf230f4b01e597d6a59503
d7dcf365e09d2dea787d9e411b> ND 
/o 
<10bf31705e921373942a1df751ebc6dc1f8ba1849e5d0b813201a0c14072
56efd5ac73b2cc94d73ea025d660f576b0dc46e6510eb657538743c037a9
ef3f1df5fa8600ba31cfa9fb018633830dedfb133aaa4477d4caef3c149d
68283dde65fde31ff05fe29c87c2dcf980686664a1ba1e9317bc4e3671a3
dde8af03d654a3b9278e18f5d604ca7d7f> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3490b93b478f689beebddc801
f9ab05d95370b6f2d5e4eaf0e05d2c29f4d91b00084ec9f87aa58fda4ad7
8d5d66fcc7e8afb13d634e9fe58c768d42> ND 
/s 
<10bf3170586c182310772ef569c52e8bfad70b259ad08351d1ee7f8301db
56e87b60c2698b50b73e6d27e51b4b4c4de13e01b73b0e93916fb4e9bc20
eb2383ce966a3f407cc2dd34fe3886d20337fe9b35727881532b2484bb21
37910e0951e4ed8d0834c0f1ea6967e8f5ec97508509903e613c902ab20a
2584a430e00608bec28b5ad77a90ca85cabc0e7931cda83a171815946dc1
e37a6e5968afc67def1b22528a96d5ff182bfd780f19cd36c8689597438e
a97ac397a0bce69309b562a1ba4d9173f5cede5262ffcd19389598a980ab
b12fde1b7188b7ce2e37fd5029f6095ff151c09be98b02a5038a> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9d32cbb67063a44c2c579f
7dba63b8a612937552c38cfc68b9f17d05d08d58687391f101de93fd2f30
d5e833c8aacf98899b18432278e92a0d2275e63883c0cd03457cf82bca12
c1f9c768ea5fd825ff7fce65> ND 
end end
end
/ArialMT findfont /Encoding get
dup 32 /space put
dup 97 /a put
dup 99 /c put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
pop
%ADOEndSubsetFont
/ArialMT*7 
[
32{/.notdef}repeat /space 64{/.notdef}repeat /a /.notdef /c 2{/.notdef}repeat /f 
/g /.notdef /i 2{/.notdef}repeat /l /.notdef /n /o 
2{/.notdef}repeat /r /s /t 139{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*7 findfont [16.02 0 0 -16.02 0 0 ]mfnt sfnt
BuildWidthShowArray
303.84 432.903 mov
(scaling factor) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/F 
<10bf31702f7c4b31b7f92f61f70a9032d1addef58c81f5b8fed9651d8c00
81acb06eda84b504e7> ND 
/P 
<10bf31702a85d5ccd794b0f82fad1df586d5fbd89610cfff7245123ea6b2
d3214893f78b8e97a902c5375a62b28f195ef7bcf7433d165aabe00f6ab5
df5c1416686a683684fa8149e3bf05c7b6218afab10e5daaa2762eacaf31
125a4410c16cee824d27ee8e4170fe84de9bb1d3f9bb831995b6> ND 
/T 
<10bf317050d9560b3cb54d581860f439ad72a17a69c33f00af1e6fc67c4b
afccfda0> ND 
/e 
<10bf3170422fdb64737aa996af2c16ab61f139259ccfce996f56e5f89332
9f7b50633061a72210c8a6b5d13fe3bb9b88ba842302ec1ae1e32bf6cd49
8b054e2c54c7892b319ccb1b99d65997437b14ddcef375af397068617b4b
a8b59dc2e0e5b584c508b01db96b294c218d115c2d03379ed774785408d4
3e0cb3b8511668ef559f40e3101d956d8627deece251b2315f5de4af> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b1b2055ad20453a840
b3065aec0c8f0074b9f24b641ee16baa708b1406e6d86ab1aaf424b4283d
6f09747a700244de117dc5840f36eb1772072b40636599bce9d665b54bb3
43a89d88f9e201e5cc1b9fa51aab18b6ab707595fea1b90bfcbdaa8111e5
52483796392ca7d4a49e4e50222fb459739277857fc5f301e9aa1a7b4f6e
fc6a1a78fecb35743baedf> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa6856179aa35682765
116a1fce2021f370819ea26a9108d7928db21a13158b5ced94492fe7e095
3993158ecb758a77b01eed67c0a218243c618920ead85b637cd5a89e8294
2747d1c7afc089a86d68b6aaa0f7ce5339d56f1a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 70 /F put
dup 80 /P put
dup 84 /T put
dup 101 /e put
dup 109 /m put
dup 117 /u put
pop
%ADOEndSubsetFont
/ArialMT*8 
[
70{/.notdef}repeat /F 9{/.notdef}repeat /P 3{/.notdef}repeat /T 16{/.notdef}repeat /e 
7{/.notdef}repeat /m 7{/.notdef}repeat /u 138{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*8 findfont [16.02 0 0 -16.02 0 0 ]mfnt sfnt
BuildWidthShowArray
489.84 325.903 mov
(FFT) sh
/ArialMT*7 findfont [16.02 0 0 -16.02 0 0 ]mfnt sfnt
BuildWidthShowArray
519.197 325.903 mov
( on a ) sh
/ArialMT*8 findfont [16.02 0 0 -16.02 0 0 ]mfnt sfnt
BuildWidthShowArray
559.278 325.903 mov
(Pe) sh
/ArialMT*7 findfont [16.02 0 0 -16.02 0 0 ]mfnt sfnt
BuildWidthShowArray
578.873 325.903 mov
(nti) sh
/ArialMT*8 findfont [16.02 0 0 -16.02 0 0 ]mfnt sfnt
BuildWidthShowArray
595.792 325.903 mov
(um) sh
/ArialMT*7 findfont [16.02 0 0 -16.02 0 0 ]mfnt sfnt
BuildWidthShowArray
618.047 325.903 mov
( ) sh
/ArialMT*5 findfont [16.02 0 0 -16.02 0 0 ]mfnt sfnt
BuildWidthShowArray
622.498 325.903 mov
(3) sh
restore_ctm
/ArialMT*8 findfont [0 -16.02 -16.02 0 0 0 ]mfnt sfnt
BuildWidthShowArray
16.02 291.663 mov
(e) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/parenleft 
<10bf31703a9458c05db7ba7a58bcd7a2c9e91ffe666c97ce46717156d1cb
9be91454dd31d143e460cb34ec06d1f2228e435638d9aa27a9bed7243c7e
cc188b1c2069f6d3ef0b0a370df45685e4ba> ND 
/parenright 
<10bf31703a9458c05d79d3ca9c0e25cc2a0a66a567f83e7a9d7321273dd6
91f0a03409afbde1e095be0f2f1ac4ecb4a098aeb71eedbaac852ce8b071
c8aa4ee4536be21e2fdb4e1b96f0c52789> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f6786808342502285
ef1934ea8d92d83b04254379f7e54d6e29c5190a7a8ca45269bc25bf3fdc
c0176673c46f00ae3f8e682761317abadcd2563a67b0b9fa9aab272a6147
645b098862d36c4de3043b72728816e055e72b9d05f1053d17b6056c610c
a2f84c956990b8194da3eb3fb55dcc79196e6f19c531a623b8ce24d6522a
> ND 
/x 
<10bf317060ff640a97f40d52fc73b98a64469b3f084ceb61cbde39a670a8
6bdd66d38d792d8bbe1de58b050ec17368e1d77feeb4b1225ccfc3ea776d
c0dedd710bc8a7bca013c00e431d5cd9> ND 
end end
end
/ArialMT findfont /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 100 /d put
dup 120 /x put
pop
%ADOEndSubsetFont
/ArialMT*9 
[
40{/.notdef}repeat /parenleft /parenright 58{/.notdef}repeat /d 19{/.notdef}repeat /x 135{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*9 findfont [0 -16.02 -16.02 0 0 0 ]mfnt sfnt
BuildWidthShowArray
16.02 282.738 mov
(x) sh
/ArialMT*8 findfont [0 -16.02 -16.02 0 0 0 ]mfnt sfnt
BuildWidthShowArray
16.02 274.711 mov
(e) sh
/ArialMT*7 findfont [0 -16.02 -16.02 0 0 0 ]mfnt sfnt
BuildWidthShowArray
16.02 265.786 mov
(c) sh
/ArialMT*8 findfont [0 -16.02 -16.02 0 0 0 ]mfnt sfnt
BuildWidthShowArray
16.02 257.76 mov
(u) sh
/ArialMT*7 findfont [0 -16.02 -16.02 0 0 0 ]mfnt sfnt
BuildWidthShowArray
16.02 248.834 mov
0 -0.0160217 (tion ti) ash
/ArialMT*8 findfont [0 -16.02 -16.02 0 0 0 ]mfnt sfnt
BuildWidthShowArray
16.02 210.432 mov
0 -0.0160217 (me) ash
/ArialMT*7 findfont [0 -16.02 -16.02 0 0 0 ]mfnt sfnt
BuildWidthShowArray
16.02 188.146 mov
( ) sh
/ArialMT*9 findfont [0 -16.02 -16.02 0 0 0 ]mfnt sfnt
BuildWidthShowArray
16.02 183.679 mov
(\() sh
/ArialMT*7 findfont [0 -16.02 -16.02 0 0 0 ]mfnt sfnt
BuildWidthShowArray
16.02 178.328 mov
(s) sh
/ArialMT*8 findfont [0 -16.02 -16.02 0 0 0 ]mfnt sfnt
BuildWidthShowArray
16.02 170.302 mov
(e) sh
/ArialMT*7 findfont [0 -16.02 -16.02 0 0 0 ]mfnt sfnt
BuildWidthShowArray
16.02 161.376 mov
0 -0.0160217 (con) ash
/ArialMT*9 findfont [0 -16.02 -16.02 0 0 0 ]mfnt sfnt
BuildWidthShowArray
16.02 135.499 mov
(d) sh
/ArialMT*7 findfont [0 -16.02 -16.02 0 0 0 ]mfnt sfnt
BuildWidthShowArray
16.02 126.574 mov
(s) sh
/ArialMT*9 findfont [0 -16.02 -16.02 0 0 0 ]mfnt sfnt
BuildWidthShowArray
16.02 118.548 mov
(\)) sh
grestore
grestore
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
%%Trailer
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
gsave userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse grestore showpage
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 9.0
%%For: (Bill Thies) (MIT)
%%Title: (fftc-mult2.eps)
%%CreationDate: 4/19/2005 10:56 PM
%AI9_DataStream
%Gb"-6HZ(0"Osg&!$)m<Ss"r)N2oQ,R8+[6+a@qc/]i4l[>(&2JNIa@".#C#rZ'N@,O*357rTn/-GE7P*M_%kHCCXmRP`_:"*r[k&
%[p/di(V?.IDr4g6rGHiNDnk/AoO6cPg#N]&g#X#Wr8JOmmIJGYpPVB;W468&aeS29Q1d]k7]PV!;$fTV^#PUR&(_V9n,@9QF+3ZY
%rVksEk4\bW2u=]ChJRdhp)X*P[e]*EX/h`)Cj&lmkPs8f3PB]b7qK0=QY0C7rMonZO!!5l]=PY"oC3ICl^JEoo]TY#hGG*G?efM,
%Df3;"q"j:8LPm\_p%C=Yj,X%L5ir#];<I;eG;nF8T"Y%#7kHZ9gnNSRrU&5:p%Ias,s@E@5M-I,qD["_>\YWb\T#(6Dm$6,]YD'A
%]=YW(#MrDKh:^W?`U2F6X+Q,Ohg\G.lKRL%d*M0q5JpZ&)e3`;gACa=o'56,k4\Z<DNg(`(h<c!H;>cY[DT\pJ+NC3lGK*L5L@ha
%]\sI:k?lB`r8itUGB`ZfRXC^9rGV`3+*p?Mok*.*D1;<D0/(&OjKW(K]`"1(TeoK/4SOmQn'9u!C6+fMH-G==`OBJ%Y3r)QRoYDa
%ms_[,1&q4n+RcjAk"!NXHSAf:"k`LriP/E0I><0a$(E?hq84;7nI.&So!!t-IeHs]XWE#YQeY/+j&[&Kn#jt(/pLl[+WmOTQkKDU
%m]@lh%i=9h356o+f:Uc']D1@Ui\/('r*_5lpsj:X:N^fh[s*>7r*QggIF[u_QQN@_DZBA&'"^_CP>qMJc'sVA=[&s:H?I48g's#@
%Y9gnD]D_0W%bpF:"/c(LRrP[iIeVgtp">BB\*pH8l0I6A]6O5'c2Y];I2PZ0Ua]_D65_]qk"li<\P4^4P$*^ANloph_.rn!0^nbF
%Qeu)_rO$MPbg%<UhHeocH#\:'5T2UX5lL5^e8$L>LJheq?bU4k>l82us7(&h`pV_ps)_3s8$kS>.b^N-IC$]!`l_\1r*i0`rg("/
%e]i=7C\tu`d5+#"dkt^PQ^;VCBZHZn\@n_.h@Z0O/oC#o5?r#<5O8%[?bB8t\G?-jLPp)-1iD1,ghm&([L6j'&^+8KcDAdTbO`?j
%Rh+sGhk27nLr-ng]=uqI<o7/0X73<AI!7lThZ1DS]=YcS\':OZ$AMuVMCd<EbJ//<\*qY2?4K/Bd,PK7^C6fSqiBpLQga@@Ka-8Y
%#/J,70,#o]2oG[%B:QUt^B&3+plm^M\$p!7o$DX)VR60nc)W(X)(N7DpH_:I+.I2*KY4pBV_).j?<pjN]st]->htp`;;h-0eb./t
%$fLjC's5Xl])-Glok+7&fe'*$s#<R*^]*3YpAO.5hp0!o]__JobIagEDgo@2&--k=Z.4)i+'4<BIt,S$)5K5lkakK_12a$/VXF?e
%We%.[\p4,.h=mCGrkkqNY>c$>,,cb1n($Rebo<_ZW,DY$`K,GNq:=Ke2t)4V[?q[;oiY8Unh'CH+3q$rs#^Uk0]0XYTMD#lh[g63
%mJZO?^SAhn5i#M#'=c#Vs!Ju.)6Y'P8K6smm/6a=2ag$Z0/ihr-2sHI$Xd`K0:-Tj0)f@%q<c/Oqhs"Rs2[!8purUpG&dN@MuVFW
%F88kA,e3NUqhHaWVD%W-+-+qq59,35JC/jb0E+9>!j*'V?mMVsWa<I8_W.5rK;/n6L<,uNVp.615Hu'*m4pE'ag(%G;rF:fEKc-]
%nPg_Zg--eFV5`B#+3%%KKcA-5!tQn:o1sAa>?W'`,H4s=K2"b_h;C22MC;KQ-5+)36]'1=LX03EV<PHED<Ts(`=8/WESS2HBa[_p
%cI=p<KEl_X%@!H/IWb8]6H9$I3pGO.?<s[FCKf#L:S&V]W>Z-c*AC,4nY^O>\*0ok=[M"#FrcPQ8Hq.L119*H3ZZo(fbfP6'NtWc
%HDU`rHC@S]KZR#H``FkST%f+O,;bCXd]blS6*(_`Fm3kgX%CXQlJb1o"<F^,_(]EJSBR^dp&+?dFg@Mh2h<blbDd_\TfQ-9mKS+o
%Q[8S0KOONn)F4l2+CK-GdD$s4mmk]r=I,'E2IL'b8F2;>NSlOJ-q62[#5X!d+a=I1iJ5';=MuDU+`h/'NIfFse<&aE7(AK`cSh(-
%CE2SG#%Ao_`lR`g#odq/&@tMe%O3R?p5\uTB\<GE>c=Ra3'OTpKEo#0A#(<Uk`HdRAEQheR21(d/u)bYHErb6;:h`W,^MrZd!jH7
%Vh-0@3SL8iD<H$CkA0"S&".Mu-4GS5Jc1f>J,JO*'0R^+&@Wf[-_fWej[#J-h+RCu8-=dFHj6R(>>M(m"F,c,cKeGg)_0)!apLbu
%;*<$ZN1RM/o1hj*^hl'T>Ehp3$uYTG7q=&[HB\p(]T)=cGir,7;ci3%dh)?K$3Yli5gTTqJV6<b':4Oenh.oB7&H[bHe`$sHW^E=
%+BhESL^8C(oqBNjW!I!"3Lp;Q&?&=)2>/M]Y6]-A>M_j5<P?dD4a)X1[C$8pM:>sLA_FsVo,t?$Vj`B0)Ldj3\e2WMeb)&a5\Pk.
%Lf>W2cG`%R+>IrQBYt,*+>C$bGX`B^R&G*XfO'J<$\&B:Q/F7sPLLR!AjX%eJo<JPL\A&lU0KX>P?UO]]f<5)g-d/].@:W/2*n@;
%rBaHMQ'ou5'7/qq,c^*,A5_cML1Kc=MT2pU)6rRfeEmY_5(8['0cM"[`aei:1WWA%`D;.UO\chc.XL&)an(0oH9ohAW4d"l7p?mb
%_@a+sP@mdJZ!r*fA@*+/53b0%:_7XQZ9U;2E<3@(:TY7=gsDd&e`D8^#),F_3G'G[Zn\N26Ba]5NAf7ej#.B40j`:m":p731sq0`
%R<pUBM()\;rg(@gBLbMVAWX<[)>&r.a\P$)TIjSM$mC:DTSeTjG6E&OBo40/`%c=#=EaZXCuegubTu"aN?"cq`#bg/'AA!c#K$K"
%"rS-&D-DrbcXUcBTj_G/C]jj%<QcWe"B#_gVZ3%V=<CWP#f86o@I/80fTD"I39jiDP;GrrK*W5\_!iZ@-]98P$4t=B@g\WVoQ8%#
%BVN;RLpHVbPjOB5l:BjldjNd>&o=?e8)@g.&_(;cI5Y!J+HTt0":g>X8<a49>bMk>`tE"C4bBeg:Ye(A%=)>a.U[DTBM:i_.mg(3
%jAVilgbR-M).t9M6K]l)F_Jdo4`(#2W$g>M[k3[K_C3Z>g5+\0queM`JU*>+!g@'OTl+=#:$^^=aSlAS&i>*N\3r1j4!h1DkZVk/
%@D\R#C"oacbct9QCpt]En&@96>O4$=*QkS8&&IqJK@O;N?4akKq-(plfP2.:Ei?I.*G\hW"i?QR<2%O7_GmL$*eZ".Fb`4N""cj;
%#*rU/#TdCr5(/rS/53^tM:O-jX9ao/W-]U;#P'kD$!P=s84blQ[ijgq&.%V_7ORia1\8<naf`6-??cS2[bfGs?jV(9&h4,pk"-C&
%CC.e]Bju2H]`=3cMi(4t*VRjZ'ORh.g]gfg4H&o!:_r's9YQ5Zo;?[G\"Er`VVD@'&"F;F7%M4"n17=CQ?*ch!!)?'2!9;i!;Br3
%dd(T)IMh>S#^$5/h>fBHZD*E;!45sr829B6^eGA6:*9`-(5mGa"hNG>WY:21GH6&kEc\pp<M#q)Up\3>9XCE3n71gH*:5Y9*D^(S
%OEq,n*kH_:W!o@CN1q9<B+dLrD\HA*fQ@[A'j;RPM3&HO)rs!m-?6:^F:fEq)((Z5$9\dC/jb>E_hB"eK1l;E5nTmGo['.&8m/3'
%J7W0Gke>>Z*(4=h/-i:"&q1Z^`!QK)$-P&$Ok)pt$^_1?E<HIR_l#82bQVca5U!+D]=%_8Ms(YGls>(29BU8@eb])p-!aAT$uf=-
%1m;7th<Kspf\Pf<;#\(2+dk>Q$-i$5_2,p#T9?CP))9?dko1n"!?Ejc$.92)SV'nc'"H9r8;gI@8oGl3@mZa-d*[d*$:-d?mf9*f
%(1j8$YV6'f,1$s-%Ka1[o:YCeGYLJb!e2t6.0>+l&qi!/A0"(1!GOk:=R9WVLN:Va5o-DT.RWW3l,U&"a7L)@S60r$O$L!MCLH]B
%)4]EAH"8C[:SXh0$SiQ_c9b>>#KR[6geL;[XruUEapNV2b492lOaGYl^ha)'"N&BE9aD,CSH1l%gf(B`Hh=D)J?hKI@88:o@0FW*
%I=SoTiidR/;Hmm4g;/R21qK/UCOu7(`XL4%c[nCQ;HJ.C:JhQF,\^nWV6UE,%atFnS@.l<CC]=Kn[sBh1)c`'50bmO3EKVS$Z;XR
%7Z8D"$T&IS$!9a]A7haV'R`rk2"RAk8JA.%8OV6_!RN`5Y+TN>S\f)MJW'ahHj[m`D$'\E[P@)G;?78^Xb!;c@"<kK:6:TMd6jEJ
%cKJE.Ug=1B8-@-EQP58_e5\Bsfq=tA\Q=Yc+FGG#&el^F[a;$b0mP`gc60>FH$Jgr8.`qg@H_7L1di*KnYn[h/JK?BJbB2oW3d6s
%_PgM_Qt_pa]^mDc]\E_jBjg<.]$7cf&Kl[6Da9<!jth&k1`hc-,AR;nZSZK1?qqV>]uVb!"enX`&Op,a"EcOUL.=.;5h&Oi6t"ro
%p>*g6Nj4cs*Bb&=JrO=R)b:ZUa"rq^bP_,_L]i=GQFppC&r_I3"GqG]PtJ9N('^!/fZW!YB/,UBd=d!3"FWQb#E'8!k2XFQ]U&Ss
%^<$=QjY_%Fh1@JiAS5Jq:rqSl=>j$:GpU:11[@RogM*[o%;(RPAub6dOsIGiTl$/i7Q)Z)p#QFe*CB4)R_`['AF>gM_;LM[>ubAS
%oO$s,TFj<e\f\E-&f6cs?@s6_)UPSW)Sl=Ze#9;]aA`kFQ%`HEp"iDP>)qBLfUJ8lkHPZu60Nf+)$Toi1LK,>40YjtS-mV<TiJ*q
%$78=mQnY4%cb&)&9!;Eo=<^Bq9a8%+6F=ekBoSXA%X\YJ+D.%YTB8t$Bn0.c/-9$?F\#:nTTrE/]h#Y\/Z,7o*>5o\;l(m>-joV&
%OmQ7gBY/r/_A$QT/D#57)t81/?Kj$\@PA:qT>aD+quf^a@TH@/%V'heT1g^IN4GXXciTTi+Uhi7.S7c,iBt1Ir8H2--Bo)<#q.f<
%<+Q3(pULsm_O(eQP#q6Q5VNC=>';\1["5]:@q/.gRi)SL7:[`3(oF9rPgVQU?^St<duS;7[R@@gR$>\C&V].saC]GH0K"!<hhESZ
%M;0o-%It0:17ZEL6.?0"itsrPYtr0'[Ecb^s0^WIH@c8-P2C.UE$AggZeKK(>8Y>01m%XO:NI5j'D-sBRB<bP.TL6uba&Zh]aOam
%MlQ(.b\HMmQt8CT>(K>+pgK;nZ(#]jD,YrtfU>EJ]I61`V*)!`0aj!cU4WRiGi,IDLbUT2X97d+F99J]Y)`9K@XVD(q#I-j`+&u*
%-TF6L'DBE@c9W8&)"B`lf9[%f_Z[<F(^km@03Jk+Y:TFS;0@]7SR9600OQ7fr[ad!d[cC3VLn4O@R'W\JV6cHl"-cE@+QEg4!rsO
%M2[FNYZH"a7(b49+Q>01dga.K1dR5n:]j\Nk7[.;*-giU_[E^J@DftY"F&J.R*r8$##&Oc4oS@/!UQ_N7;S;D-Qt]-S^)#$4H'aZ
%QpR)_SD9Wm@>=5Z9'9Y9:UMfgeP#UhcnrBT""RV0`@+>XoOS_H&6Ks38#Q\][5D;f%^7JDA6Cl0p^sP[6fhir:em=0Ej-?Wjq^>o
%3fk$2"J<DQ,:Y89%:VMV[cUO]+KU4n!8DU)-UNqI$Yrf&<Ip@+*JGtd%h]WXF7,]n76+L_fhOLEAG,JlS8@;"LE$ij[!<*K!m:II
%<blr[\,E\2EDpX'Icp^5epYtAhB-d!%H_oD^@c]&Gu:1*SE'9`MERlAk%L&L0?uu,lX3h0=_.+@1i2B^E#2u!.oD%S%r46XUEi2$
%;9YcI_o)]r@,!u[#Bm=r[FpiQTD9>B%"h>i&@Wj^Q0ouTCR&i.,cDXJa;^(J_-bKZ*mcRYLB(8L,D[%G&8XXO[\T#h3;g]A!b*3\
%jG#qXUTf#eWIt(UYCjUJ;nA#omTLL?Riq-"gqjCrMTFD*_ghmtp'=Jb4Jdkp!r&86_3BT_1+e3!_3P7I$;Fu"J\bk.[oSY$!H0"`
%%MoCcA"&@\(88"[3)KhTWR_-]LBRlC2&%Y3N%!Ho[t`H3h-_)j,eR>OE:j%K:Nb:)3Q&!8ppo(?.8%4=W#uW0&'-VNa;#E"@]*X0
%AfH7T#-&C07^gAH@[7)9K*2?(#E?#.3>g^V"eiO7^=:mg5%QY;5YD[e&P?VnC?]4-+"U\9$_k("=C@e]YZ.!lO,8;:K.NN3S#&c>
%K&`Ms4CIuKHL7TU8:=7bEWdA+,"51H-+>=*6'^4,<lTL*lX1lDo?`DgYpq?ICVU&Ya,i.75`d$r.AZ`)D.]/"'CrI:q'n.YS]Dpp
%`DI/M.)C^!7MG>IX2LN905<dPOUW,+W%oGoaIh._*BQ;A4N0%'5e%\Q:<:Cdp_+3cI?O@`:$.1-"(VO4Fc]BP[;bHa/f8l?6'Q=`
%3+lh(#OQ,kB[Ztc!$M_2TX,!P+Wo27K;b4-+mP.1cT01"J;kGE(b;M'=ZAi*:*I<g/jMf3kU<NqOQ".U"fk`ncqb4qk0muXc6F_\
%M4##GfXr-Pd?H1u!mhXM<OeA>UZd-1;.EfbSr"as[ZQANYY)N0M*GlB)mLpZ8;.'W&^MK/Ug\r98[[A2LfOh7pWLKk`i0d^>G7M$
%fSHZaK$YEN*_0XLq%VPu\#^Q]G/&mt-_r>MR`tmR'ZLHH-;lOEQ5gQ(6o:WV5snMbT36T7f\d;-??n@HA$PNb*FVs%:Hbb_9q)6n
%J=um.m"@["VaS[\S-q?m23JETCh.W07EYkZP6U!cB.]Gp-(L?(@^S)r9nKALilpp^HEfCp];)l_0FOPKCeZ>.m)gT%N/T".lkOB1
%*\\q#;;#VbftCM6U[_k<C?K'!5m(rd_[[PRNcu&2&/l8D%1*hIRZ==;`&/6@-qkW1;oLR%E]1u6Z*&_&#5/*l'/(O,ek0Hmn#=ML
%ZWAa1lX1:;M=CTT!C)F3QPkoq]cWC?jE(<Z`InU(U':]6i^)f0+qJ,lTK#[4p;KL%U?1#I"PoX)h>pNh8c.jccXKZ4J-;Qq?k+*#
%+G:W,gICq_'.DJTr/&M5;Tskn8u8?t#?[oE1lCrI_.OZ9bigG^QK)hJjATb^$.Y=BnYt>F>=RgpMjR[5f-MV]Cd7+NcAVgu]>MqF
%4!KUhbK8tHDAgZ[k?qlp>EH^;=R]4_R9p`d:G4RbJF>U9Pi=6'0Qhc-+V6B()=W2i9dfDB:?)uniQ@/t/T*LBFiZ*A[9G;8%XcGD
%Y%W_5)D8W34sbGeYfV1W[+,j0*V;<$?3'?p!p.Qko1!3^Qrf05"$B0Wg'A@#,_WHJc3a4=nA!3.)P:=uFR2Xs(=D$5]5kpm<$R/*
%!W.T@daV./&B$VLka=IV5k;nI1pW6?3[W]?FI;kl*%RXXf,LdG,=hZ8N++\Rok?Hq=[hbr6c,l,Bc@JFc#nlb)n<(7!#A`-)JIV@
%5J<NY6:5_<^:Rp!5E7U3fkFpq<tI+hH'cE06-0`+aZeZmQ5aV?4oc6+;ZTiLA_$2tXSRNdAg\u$W5h9',Q:qM`^\UU7-`/a4nhm9
%r=F*=;*J08itIKR'/h8=F\#^41Zl:jelrof/^C2or4)PY2?@8W@FUK>"!sgU]niggBra0U[[u5mBrcGerSpFqM8Aqe8pS<C[1Y3O
%59h@p5^4\2(f=oljAiU-_hG4]ZYGO!2M&8nFffAqAZ_9-=ro.uP-E#=V1e*+U/i_EH5I,m_e`.XWtoI]@8N1sKiKEM)&9POC%X$I
%mu+5]5R]-DeS%_XS2k&2,E=SrBj%EC>Z=ZQd4kTjfp9MKA]-JKW&15HWq/u+JNh1G5#W@1<f.hKWg.U1XAHhj/8!aM2'Th@fW&B>
%H1I[IPf(=P=QE^751bX(S#b;BGB:G@0so_^=m$j3pAMZ-DrK,F03>MN?**XDX+3EU;6*[]_h.50[d+oZ)O?hL>=I89?>'P,%l%+f
%CS_K,[9EH2MpJP`nShbARuGKn/YZ-Q$MLPVNe_u&o3]U=5-^f$/_DuleREil.il^/McBj65?NtZs4$<G,;ip6)UI-qTj#7Q;YP:4
%W5Teea*Q1MHC2`NEJoK@?#-ZPM'=)DDI!]>Y#Nn#'t&'_P[k)/>n9#i<7E*5XPLgp1&;ujj=uiea`h<&G3H.b0DaqP(Nals<Y"-'
%]6U;eI;s]N4ReM+onRbeZnMB\B79dg-NE@\I^lr#GYc(]?#6D9lFYfW+"i@J%G_QPS@u[^p$L9=Ytoqbq*na.='(aWhI"!p_7_l+
%m^nB]rLi%TSR:6FJ%5LOlJg]-]t:efqu5`qqm3bM?N'Elm.TT/X7&5W??+_$(Z4)_qY^_"8nf4EC6.h%0>ID`Y!/#,g)'SLRh#Y8
%HUUkQpAXqj(YAS)GBrlDimllPfpdocZeKu+`ni?i.[=p)?G3n[]=N7erXq96X+,S>H#ZJ%I_U1$T&pGo<T>Si&:OO&@Xh^4F*mM^
%(N7&K]4K%+.kCW,Vb+;@gGe"r>[P4A7=glfe^_ogQfi!_Df>&MIK/?>mk<P3]&b1?<:S56la(YSlW-b]^Us@3Sn`_!s6B#*2t&uX
%Ug;j4^:O4@p>Vfq4$3I]GOatp"&ud3%"!WubhUqJ`>atgcD[S/\#fjWkkaZEq1gKgd5^.+s7tX?QKmE%qm3>AjV\DQ&#[sY/Y`?l
%Dp&g'h.gh=I^aIl>7BH?p>jb1]C>*=X1p^SauCs.<BmJUINt\<,EMUo=6;HLbfS]8YC=M&Uh5'/'n.eNIc"0#^%CR`[GLS3X1QQ!
%=$OFqrVJ,'`1Lj2J!.s(l72h5f(s%TnZ2+sD@'N"DQa@V^U\[jl:`7HB&bo;C7iVCcY=\;4<8&NYKguG/u8>t[!pCP;c=L?hPHIJ
%PZ!k(,;*c"$_!*bo"Z1nIUdf;kpkJ%O]q4ujU[[XaCK[[WZU:n+(kKI;!\$-5Mu!Ar+P")?[Qu?M%S0cs8&ej+0I8G^%iZl;P-Ut
%B\BRJ?e`ErRKqcsY7+GBrJUIJec5N`kYn=3?ep1@pkk,/F!_*/r+gW4+)$Q#Gh;l]*IR7d[s\QUQLa@d00.q5heiA_qocU0c'JPs
%]DC'90+NRof>d4fPJtB;qg82>e,J.9Q^<V6oWp&i=.EQq]<Ya3YE?!p(UZ43>J53-mHH[ol\)E>>hfY]o5k/IU*Geg[,LA-l+,29
%FD^9r&UE-A]fW+W`1:p-SbG=p'g9Z9^<ea#!l"=h^\>eJ`1Ks%*>Ji'L.(<4+k:H;gTV(_E#]-p_C5qNeF"/_N%*mkiY\T'NVdr?
%:Z<f4P*Em!;beWuBhH"E:WM^a#46KQ.H`hU.IZgkT?m^#S4kH4j>*$<fpC`>3YG:0doaV(gl9A7.1IXuBe%STg.s(Q3FSDcA\6dd
%\#2<sMn?9aG5L+[hXAq-m'eX^TF&f^4.<I"17miHdemfAc)9ZF3o->J,JhKO@@T;?4[#M-H\-/"[uj;DdmRaLeSqG(am$phammLP
%A9Y=BRAd6.P"u^u)G^3e3uO&SO&(dsO8$],j6cAY4OTE$4ZOP'j)F@!g5#Xkra^MkhsYddm=*cMeA"\jN;GlRFo,Tk\i\Rc;t"qB
%/WF58Z/f2b0nl0rYn?8=:U__+@iFZn7QbNX)L84M8"'TWM`a\2e&c]*1UEkPRAQ,/.FW*%RPR_q2iOZp$-hJ$k&O*N8q!M'br!1t
%B%bX<&*:0gd(JhjN`KP^FXXU8WK?I8ki'[G:\..AVY/[)/Zmfq$a!j[O]KpEdSV+8Bf_qFhU>YHBuNSGq4&)V5Tj<NBo&[?)97CR
%42R2<n>-]Q,f60=Gi[iq:;[BHf:K3_9@u/>]LfW"#R:Ij,"XNgP]65]E-+U[3YBXQ_VR[_*!i0.e8hI?iQ$W;42UlOp->>-OD&80
%g*7lmdb^_[UjYX0::lF]L%\iMrC@HsD;gS#jr#P<ET.i`SoNa%3"\*apj+<ff/u87_Sk[HrVB"sA\LA'j6jV2Z<Uc7!t6:CHE3Z8
%F*F]@&d_Ye+l+A#rU/g'1PeX#8Z`/[M]`Lh.Y*=7P&uLQ+m+m-Ep1Zq@V\J;RL;W*e_^6VnupiC[C<g:';t889j::5\agtkf<s:k
%qCu(NGl-"MU=\3.fl^stm[KnL8%ia/P:msLiTmai1$^F!pm<cV^;?S%>$O@HR+Jl&nU"/b>D2AW's^QHN\"@l=Ns/i$e-@qZS9X$
%%&jo9=cApYdW893gVi?10F`#jKP@/6>9\VJ:pW^[Ld4ERQ'j9;XLBZ_*tqM*GjSVK%Rb7ZA/?#f-R-OA9I,6]o-koM,@V[LBI=S,
%$^#Gg"@UU\/:8,o+p!'6E_jRr_B4U8:d`/.7Uc_C<JWg)M+pg)`%FeVCOrqQM2;eW-?bR"(bqA6R*:juc(8%_0eo7uenQ20+rVB)
%V+g6T:ie%n-'gu)O'($hZ*4lSlCn)7@Vdkq`8YHt`9aFT`:g-$@Y"7.'0@HWT,?T;/K?>L0hRm6@[T&%`'!X_fE8D,M41<Y`*A@[
%`=`\oIEE/Vou);(9crmV@`O0,L!ERDd-rdh:5En^6LuBJmYI-ldRPiO&7`aLdnX^CA'0VhO2UgkPHA.Q^?C+n(<D3E;nGd0]1BGN
%p%%b_X"-Bn9":h=1qsn!LSMtF_V26kksEVqZ%dq#nUOa5OC3.%BVWER0fp+g=L_Lk2[]Y!+l^_"*#3O$I%c-e0C"Y'US:L2lu_5^
%'6ote@mU^U<tfsToJ,=F`#fYC8-EB&a@%-aJj^#&5q)4'GGjG^#t,sMM,5I,OU+E#)R47WifOL;+sK<D1,2?'V8Ujh_@jd5&XX[r
%M9lC18H^Ds:*Z55Z3jEjbm'cY.*(1L&Z/=U]Wc%2C<%$/@_lei@g!=3bnH4nXM@e8rZFq+ZFE=>+m(M;?$d@#G%q4i_h]4&QL[XO
%E<)1\fLA1ZMSZ1haZaCdgYXfN&8!@"5qFb-%)hF?p6K<)ad!l?aps(J0MC>\l"qubPss>X=B^"t+`'Ir/moC1.RmaW/M/$r`Jtc-
%Ql#O^f`i:Kj2DPQ5)b'.+sZfK'4r5g`/#GrKUG4nd"C%[NgV&@*InkuSH["hkm,o!1;O3ppIsR4hM&<E=nc-8ObpX\F:`L;jHYB+
%nJ8FT"M8DK6CoBbSA8[U.j5V>0QLlWa5+.1?UUFO^6.37Nnatu2.DGUB=8/pJE\9C6%mT;5_rT!;9[`ilXSPi<?LD;>kM+o\6E4m
%K@dKA`mmM+A-QQ\_cBjIbN?OIfJBV[c^d6?28SR6gk-=SYm5'7Ls1KoHJ5Q1X#jq$@(DD5#RL8]XYj4'+nco_$O1QM_MjUKG+a6m
%6G4U;!dP9__a0B.KP_8Y,"OC"el0FSE.a9D/h#@;"!D-K,)JnV5_PAj,Ou^<120UH<I:7':hJPrPsiK4=UF/L$090\d>4N,)?Or8
%*SLd-,D&VgGk")jBQ"Le!20LG")/F3B%l:d'VuK1s3'11IBRM`,8TBp9#9N^b*r6i(&=L3\YF"hEhnQ(qg7_N\Ve()rdR.6_Cc%a
%/L'YK8^*Si;W_AG_-"RZ14jA`!6/@DR]0W1"Ie&TRb;=HcJQp1ZblU#A,[,<%s_/CC&F?]I9=l<=',"/Ztk$Hg9%OVl8igLMD_^2
%k1Akg3oFgXs*5S#=Bo9W7D$.AQW\4s:/Q:Lq[n+oeDF-b*EI]i(FN2h(7GdN1r6gsqh7B'4%[KRS1VoEU(j)#Cl5LnREX,:WH'QT
%nVO9d:;'Ds,X]0aObo"l_d#nO7G4`9Co[')W\XKMa36#/=Z-n8=VPJB3@g@tPigG[dS+EIb#3I@i#FCuE2m-na4*!Q)daGCBJt9W
%4a_&L[O>$&`sLmj_lkRq/Vk\nH!9^Oq+'"tp.;>RWPP?"#dH\Dp&LI]?pU=;;*s:7[7Ts'lT`eZq;m+^D8&-EI/D15?XW`s^N-t^
%Z[f($][jGW-g:6_?56/7f[gLY]kD&qRgET816FR9;'o0YLp7J!*Y>?)GqeP\`Z].cQptK2$LC*HKs1n<$<KZtD&'?iQAH?H12?l"
%&>m5o5oG9Z"(MPT$A8us)c.ls%"QD`D6baWIj+e6rBg:QX,?_ENV@2!(W3rMU27,:K=qOpCoh8r>,]I;V7GFkp1CW!7>BhtGF[0-
%^U?k?ogN6,ijJ:TPHIE`q!d2*r1Xs>p7kBj3FkYN+1EB_:.PVm4M+40NI";(0>^pjT2^*Y[Dhs%>OJY&Z+E')MFRR/Iu>2GG.6SW
%/S<8/"[cdm_ELmU'c>snW>=Nj]m+*?[_N7\Xa`[q`P#[reP==#rl,/kb"CIDLjKO"[^*QpR<=l6*R7(!Cr=9RbV!^4@Bg-.4]nf%
%@LErEYh4M&-L.@0JO?gHO4=;ZXL;Ij)alP'N+tE+Mt)=7]jC*=Gu&i6&R0(aHa3(?FZ679=7!N&l0cNbbLTqE<ntXEgQC%E*LdL5
%Yeq;.4R\ZUQp7lj?jG^H&EnX0qcWn^TuHoHPiam.cZ]7<>?n*:X3dr?I!rXr`X+T1/OJNg+eUk1oFgG=bhD-L2+kEfooecj79h$g
%1ZZg2j^8/1>hhkd\P[p17?2\n91.JPM7:9\*cT88+&sD+6nFD0mA9'^?*];`?X4`&@W0RRA@^tW<G$fncO)!NlGfXVKl07e45u]r
%bs^+>:K2g^2E%lH<`U=oFQSDD/VEXB*6XYOIptJnl[^fO+rP/S[pZLk'9]WW,'-KTJ/c0_TUW*#N:)@$>Ti`@LpcW+Xdp(t$gRRf
%a6*IM#0dW/$k1?9o;_LuRVYL\.THlL?J1Ps.Bk3S.'P'Q-a/Ya?qeG')H1B%Bk!"n$+$@&mF>T0C98i6,E,.F%Po-R0g)c^YuHA/
%S2-jr*)egHK)p<2k$gEaB.U4?'3X_.9,qk.f&MI7nae!+Iu>*B])1GN8W1pGb3-:@K5kOF!TT7TCuni(ZIK1^16X81'r?5q`>)F?
%^[Im4n,85;j[7E0bq5d9H`"9S[9hSt[NTH[2#BqP^iUb4D$grpQD.Knp*teg<6-gI,ZJW4ongu-[W^U%ef`iVB>$!4@NYp%&<dth
%[R.-%YLG17-:0RRle_drRM]UfV+>,YQ&rFd&Eo&R/0D.=+Xe']5AIrT1/[dC1,56B-lHLnl-VuBKT:V@\a#/*lA:2!Cs/Ek8/)DC
%ZFq0u,"uO#HYaa53X#$k.*r8t+4-UrSk.2!8C3ht9k)?i#5SDddMp(h<J[Mk()YC4:_Y^?NTu!M;]$ngk_JsQ5s'a?(u:QXN<a/e
%$[MMmBWF@Q(B6/r6%APCNL;mJ[[mq49>adP*H`bmp2E])mibZSpt=WG_jKsJDB-NP8)OQTJoKbLGbJ4o_hlh2JT0W\7eAZK=E2cj
%4]P<5;5Fr7<+MDPYKeuU=nqVVU$021^,M/lnbHB#rT=sr.P7ftal_1UCYf])('2iuUP"8<-K<?W=^A7QF]7,ZRaQFEU4'Z,[9m1Z
%#HhX+fgRJVq"mRbeao_.2:!>V5-O&HM16UcENY*[RkLAX(Gk[%.fB-NB\,D`NZUF)o\dier#j`TC_6&f/+5Jup?4;>b7e2XC$FYj
%`o_+X*nc1JoI\Sa=?R%!T*bGjRCaB-\N#YXDIo>lKf@W*4>bif!tO"0o%`><0fDEWjp$I0EZ!X->ZBaIBZ<Rnpdm=&*f9uE5u_>c
%0na-YVAT'V$`4c6(WbiF:QI?$d4!"EksZ'QXlbOiNS1QZhhm2E:+d"%.dOF`g8h<m1<sng*71'4T-/nG$HsNJ970EIM1D*ojq(!-
%aD=AY\^9!<pi&6-CCH`MNA$-@X@L3Mhq#^,ZsSWV[)bsSd@5.,V>H-`m-$ffVFXP]kbqH0r4%R4i<ccf:Q>SVj5%\neRj#K]D9]i
%&.1JqNYHQ\=b<6O"?gB(H<+OI1Vu97`%t.Nj2>:V92I9LS0EW*f**`9KFf@O_*H28WPpG@C8.;jdP?^/g<lY2AR4TK=ZEJjTBU<@
%U1;7,3S7W^a(F;5Q?+$dMSn6",>Y`fSitUq[OILKL+Ic,S`0A-oR;1.nPZF@Thngs#9<%dpR)-[US7GC%+#/;;6e/^#4/?tA4QDq
%a$s-RQ=U8hqqN!'8&kE%7.^5\55VG-*]RBnN"aMsnVe.-3:ZN8NLGUk;\BEYaAEe0UR3)p@OMEJ8S%VS;kIsIq=++Oo)/_rE:e<n
%OLH7H?!MHsZCU]VqicA6Z?hZol\f#ISguhO-QEUH4VSUb/eTdOn8*F/MQ:]#$a4]20[W&J#4ks<U>_cl'`oaAZcdLCd/DiBf;of`
%Hs=N37a6-tb]u8WB/pRarET1Vq,`bNZIS8+XN.7=rESA/\j/;T%Mf@EG4W&]?+Q2qN4G#rJ$)0<r%62(8+l#nhFsBh*lCFPS*_aM
%LF(h;=VsSSZ`'Lmb=L/K.OJ%"BbNk5QqFi(.c"f:SA"?b'1mnO!H3Uf`,K&^Jf7O^V?<"r).HPsIUjKNkqXNDNhcrE`#3pX_\+SO
%W_##O9c>A#1cTWFc/<(kl;RIlQf[`^6#MbFVaUD(_,6iA:H<n(UE&s+I\[bXfT9lUZ_YfT+J0iqrA9'5ao<D,DJ`,'U9OclK>p,f
%c#eP"-c_"h"#%Cc]E6]C0:mn@&#';,HhQG7-hV!hJ7lS$%Tm?,d0-VG40$[<CN043/Ga?-T;E7>,5SPTlKH,.ep2rPL[<p`>%AU.
%UW(9[&D=f^%h\i:((Xt#>3$\*S#YOGnC[_oqG/bVD6a(U='FFVHKBI<H5S_3I^+aS4^6_sp2@\gXc9j]I^4H>5VaP,s6uaKrKBD-
%/,;>U(V6,*Oiam(\Km@VOa94=\n>O(BdL?^,pgW*kp+T:pEtTa9;B3_H(7k5CtT*k8B&KEC6hFLf"j/LJd560XA[*aU+,t!b*Ei@
%j!Q^UEZN?5N`VaC&6_P'ep,D=4QW8mbep]JT,ap,eA"LC5Q90M2F!Bm+qOLW+-@i-?s;t'XomX-pSJ*ip#!fAmgb-EX[C\M;sku=
%c:,r0n(T&(>Kc,/IIGM]TkFDPK0I0dV2L>I[hFrW6Z*?aXGN'CSr9%TX<-=p?,Ej1"%[p_e;foVoiPqf]WOQj$'kYX.:^m7b?B6f
%V7osr!e(H1!QSA9Do&eZAp_>%4XY('E^j.t$rR+VGF9,V7o&XC"ogQMR:%.V:p=o^8`D>\[pW_,/Gbr\17DUlR*9T3'fT=un<"C4
%"%QQ6E6fHY^^SLdJHKCd3cN!kQ4uH#DEgc&/i_XLK5Wap+E/4Ngerf@P&LsL;U/&5d#B=YDlLT2=nj-TjIs*;:PeRI71(]CI%MD=
%qkAR5a-*+Q)rj#@<W20EWgl1l]C8=*9&EF&;q3^oLD&%l(T7-(H8aS"34,tH10+FV(ZACDA5mMP,b:N<8=M!!DX"(N)$*hVmDROt
%124A##[>99O8(aX-cFdbI!h)B[&j3_OfL:mIC^lfYbk%bnusS'P8sb4A3\>#;6qd;C)<!:k8>K+)(U%<i]?5,f80:j8)Et/O9d%H
%TbB`Y9b.X%A"&;tSa\@6_Cd+i"HPa@^9#857]_q:/l.`\2h<2q'^AdV?1."JI\T\*U&(SF]s,o5W'4["X:b+pWFkU0:n#qkb-8(k
%aJXCAarnh\,32O"A[]++?2$emUMobF$86B6rS&0(>Qr=XlaVgY5V>cul/*%L@m'*=WRpD2lLY;4XJ`)JY:Z]d*HcgrmM`]1k)Qm5
%g/uVBC3J1bg3R!;PdGOo`mgGW7(Ym'-nfKEqPG?+D4Kml*9;5PEfGB>H>VuUdqd:BCp/\WO7e2;qU,UCM`f3irZEYQqc?%if0C&?
%ck8(#q!B4Y*K'CVfTIWJqh56^gNYV'asG/oPJ21<85a$5VOC[kdOXe=^FRp@VHT;O<)YF(e_,Z=$V)t'cXCh4rq]hGZT,#ehljel
%m^68S?[+K\07,e<19^I8Qh\63`4IYInqGtb-![d/YO$FRgYLY6<u/QXb=G69>@Aa,CVk*i"1DC[eo"TFClP",\d[?ipf[3DK!ZS-
%q=lIq>l59X^ae]&2YTdk79JdFT0F0;nURBjA*jdgM[k"7%f$2B*W_G0<_fEDXL4;$H?j9YEO!_V!eX$L]n`9&>tsm)DPSV/2$qK;
%Y`W:"2=hYa=j2(2K;AQ*92/E'\K^B5<lk9r11i6u4/U[=LSOe!1D'L!'@Frn7+6$lj6DUl+#=Qn?mm3ZXZHbJ1DLoc(*,.H/IY+e
%8QJ<UKq>h3)ter\\[KWN*,REmk^'B&^^8-.Lt'X>c&f;LdMn="O%$r]1O76@[JTNcM^,4Q8W>hN0cUrpaa`3G61+<cj-)jp;h<t]
%VMCE]11n7=GR?B^lYps:d'[R,]rkd88/Ae7C9-sE&_eomfKAUBLY2s\k.'ZOl+RX=a7kOda-ucr,H4o4Y7;'\#DjS3m.a#EWf[Dm
%=LYD(^auM^Ude>d^B20;kbMh/#:@h^@OqQbD%B$2S%V.i'n%ELOa]JW5jtqlQrTVCI,^?B$#!O-_-=RrD9.Jl7m:6-d:5\\SM$ES
%hL)8d*fd&L_JaIh'5s:pM+^>hS&u?1Ph;UoHutq"*M6$i.(f!U7jtcs[Os5V+NfPMA5(DHFqg0c7m5(aO"uibr[CXDW!?8#*;rK8
%C?J>J#QE*jq!i$j"mZu_0u[uU;!+^t;:M9lg$1-P7g_F7K()QShk"+\]\.\1TT'>8-9MFnBDhC3Tg)Q5GfnoBgj+CM5!HINgu<C5
%qPQ[[-bY3-UI%2%r2\VOpUl6)+o'qBq@fi&]oTZ:rsul'GPsSZKc351TW&!m$rhAb4NF0+b[8OTIkbmAC>LQ*K/_nbImL7Shcocd
%mCQHlp+PZIYNaRRos0pp]r]glf@sWagY>c*5g3ThH_Tu'gp>+>MmqWDJTt_3S@tE?e-[oGgM;12_6@#:[[6ebC-6Crj7ZC.TLR%8
%6uF[P4mlYGCW_IHk-peD8M/&!>`H'krcTXEC=G*sZb??^h\hsO0]0g2?=nNOD+LYZN9[HpS)q^mqiu0(C?OTP0ti^\[jURTpl%CC
%DH^203ZD"?Zeh$"l7n\:B6L4Req]=?Ucueq+%N=p1",-NW]X4FB<(Mr<?@kaX.s:o4I@3l8%oa'4t[f$+tM+e9)hjZcl^a>4k.:H
%JD#"0_FM',S>G^89AsrX_WNJ(c_n/mICec*\,LGdrTDu4cRg1dnXNh`3Of!n`,fhpkJK]KbcUpCG/3:M"$XI?nG2I%cYj&96Apm^
%VLEQ!nUH9/TAL.RCrCS:gB"q]BmGl]:$ZpW@p4k/DX5i?-aQN^Z0u8,mnRff\nBYO1TI]q(%P?T-WV1b*6,Rb#FoN/X,+lXF1PLF
%C!Um66)@al2(WLI(RcBVQYJ5?4RdKi[BZAO-i4nVWm/3@;(Yd%KUDSGmlmq2l?Au]<Q1hl67pAOrrg`+g0ZpshJm.fA7$?PmB=j!
%pYp0<qCoIOT?4Xi;0'a_d4!]TdBZ#ZX:Piq&cFa:g(fE]8QH[=K/kqWXgWUbl^0,dB.?pR9a?K`F[VQ]Q0]Lr-hSJb@P\*4!Z_=W
%o(nB!_ObDeT0kLl:nBhDekk7K0_.:9NnGU'1e&mPckiQ30>8Ro!npP>Y(3OB1.<q`QV\=A&YUDWZ[3&=\il0Y*@NEXmq`M?f^duG
%`;f'=j(E&qYIbnUPI1+T&`q]%EM!i<'/8Q?XB(\VY"m<8AOu$+,4*i,Ep*p(e%-?E=]HgYW=5V&OX)YT&;nk,O\&A@&1QC]#0!if
%H-BqX1<T)HG0T4-T0m$D;'ag84M?3<a>%ic;,$)i\b.PL7%1*GFrggC^hBB3+=JAUhbq=[#F1XHKQo&\/c0SID<^)5-^J@I;)KPl
%cUb?\E`@,Tn`RS,e`+Jr$X9om?aI)LCMQn1]8%'*c%N.C,i;sSG*VK!Rd0(fa=68kdrk5kq2S\IY$nTI]%eO#LA=dJQIbh>B$7f1
%eeS>,Z`<l'Wie/?s)/Zi<e!==U%<3[ikq_s5K!0a((VHAr;:I]r+iu=nYa.^n[#rLnh[udo<7bocCY^c)Ton3:]g@r"Gsj3g:O.0
%#=.\C.f?L"n#7YUKBa%*iJaf\nfg(lQSi(*[\h4uI$Ro11OG.75#lk@''25T51`VV$^O#VWUUIp`CjLP]HtNYW?Lk[I]J]ebY'jj
%a@CUQFFG#[O%rGr2EKG4q4WP`>G=2V>7_GX@8Bjg/SC8]U$icpcAKdpn6NrggY)KnaL_Yidk7hTmksmr!oQjhDB0+;[nq;WLEC;l
%VIHN<33I3A(>hI=>BkN;,2[E#[6XP9%@#aB/u"sMVeU]sl5_]>efnR]VQAHBfU<a9eP+Kb0dE17,a#FH;H.ZrA^/FUH.#ACl]S)G
%Q:snB1FA*M+_diWOA9TBUL(em)65&N3RMY4?DT2-^"&A2RX%HJDl(TX-=$e@Xth*sQjWMk1W+K-Mo:Gq7m9bTj1TJ2V5i$:<P)D4
%R[N;/HfCSWEdk?sVE-_L\On+t1"7LEOZ>030^7kiUMCDmka@<YRS_U=$S<*WQA3au!k#s6(3[4"-_Yt8Ud1IJLR9Esqc7:i^#\[O
%8]s\HDr!'"a*p`C>@Wkb#L-_3Islp<-9GGsJgNWbDCUdB8'OQ3CQc%O^,L>KV7j,Jp_.Ge4-cpB\i0AQ-jY7HP8oC3I=/gQ47Z$X
%p\Yq5_1]o#[7StdSCL%&SmP1GYQ"pDT[m0HmE"V,X$MWOc:+SnSL2%*><Abt/P0d&$"M!/aR0RqR[=l\&go4(!*pjQqpY&@Ue)*+
%Gb;@R4LoJ,UdCF3R9FERUY?gFrg:Gqfn+96QS`Qbm1@Thn`#b8TSK>seIG5lQG5&Y?99di1B+\j.8Da]bWLI.ih2O5m<[]h<-MGZ
%I8K4E@4B;;=C3`rC1b+`1Z;%coA.,m\i];"gU3PpQHd^R4c[5C3neQ$jfn?_gi^/>Xda(.]"QMtb>-*gk\C+-a9VGj6'b?)Xmuam
%'TH-QQ?4[r3O/K\KQj@.7s+>c#Np%-/YsPLcc?9d,JmA)R?hOQ>>@`%B<&h;qZmNQWO3_hCI,@QE1G/CgrT+Wo_BLLOZ[7TA*LEi
%ZhH$77--jo\PZcuhe5n\_0*tNb1"M(KMD^%rYq2eUg2-E3&-cHYJ'KXO<*@cQDU_QY9l1EG!npMY)/?9EtcLJpA=g*A^HqOc#(fI
%#O?',H_[Y"FLINN*I+8Y98;7EGAZc$YtKU!/d7ulZRi#dcF%'*"`l?(>[#0RZKqMJ/%Z[4Q!AGhS9-3_9p3h&P5!Mk?uCaJQe'kg
%>17r(7pk*=kj(tqbgYq2CR<+gFm)hd][HdnLL0AhX6&/Pa'IYqR-IQ#1s<YaNk)HsYBtY$o;\7d+8bE)ojDR!kBeZ7Z?!5"c?/8g
%R?%<(mO-^]lWe5eM%6JP$]<O6:o:YZ,>P37h,#AD0$eX=,O1@@lB!f:jc6'X^\;j%J[8X'[oDg`Widf1DS;C23N*FXp6qQFR]<-_
%AQ7^M(2ORe+,i>ab>>MOX;%,3Lm&urNht\_bqhXK\r%=t*-"<@7N.%aXWU,$$o!<m>l!;lg*]mIUA<jl^V@Fnpq+f=lKnFU@5jU&
%kB;?$7\u/L(0C4Eqd1rGd#$:*.4]&\RjVcakud-;P\[7!Hc[u-998H,EBAVrgg4?'A6Q7im)H$=JER;'#GPo+Go^)*2pn#:gE7Dt
%"ed3mLF1E!+jk9"cc#[`BKW2olQk&&G-'Y)fEq2=':Kp)1PI\(kV82e9_QEn4bo>>&U[5nECWqCM2L_8dTRF&*DtbDkAYt7E.ET"
%!7*XpN"aMsnVe,'_hl.ZHa)s7C\!iTPQ^gYG;jI?E-qESmdfah044GD;ub%!07NYUIgbi%+3s<B/oKR0BXReG+)W_i?W*<dOKA;^
%)t/iNr%F'+5P4Tc$hRK4J&CE@I[&^hGImer"T?LjDLT4no=k^'2dGdC^;TKBWU'DG)h!^L[JB5@(O80Ib?s.IZX5oWrVNLpoZ:-"
%qWNr3gAHY>a2&h;S`-c7^*]#,K0P65Qo5B6L[s7]2aCa!j9-+-9$uAQ@ec6ZC<"5P<@QUij#\l+O(&C(Bsh+L\_qi#F.5Gob)Q.D
%Y$GB,=FjMJQE2+h2S'A?)ZOVkpjZ>FQ(E2es49:OL3\R/b-nn4JN=@C'PDjQ.3I]#DKsXmc5sq9RFe.uF))>8DKpD3n^,jSX3Ck+
%:!Bi11p+1L%=bcc[T[PH)fF<W(rGsJ<pSeYgC6+:X0$L2G4"t&doP/%//Ep-CnYJd?-L0%L:@mtX*&C<kCt$UI$jZ=TjOj9*GD"N
%=pnl+R31SIm]^)(G.UJMeS:pr\(c4J[q4fGXa,V4j6t?;>g8bcNd5R*FC=GhKZc1\Z)9=0s(A`Cl$9`WL@A8Kmb7'^lW'jbc]rn%
%f47V`qN3CB@5^L.$*2T;3:Cq+&1KfeqqSV]f:0#m+?eC\i9QmON#dX(p6\"FXanr:IB;9(du+n$[)AN#cQ6]3];lGYS$1,O\[jc8
%]".\ZluraKIcfn0:M%1Pi**[b(C&%Le_<CX#.kK@qYLNNle*HT8ulDsb1<FQ-[0e2j0s8n,n:I'1tKn-P20=`6IiHn=u"njOM9P=
%/6,mmXJK@QQWC^maQ*,`g[s'Rb_t%nhrNhF@t/ZMoASH)ZgTMs);R4m<!aMV8*/3]!Y&DX%CO*%j7_c?e(Lsp),aiHS7Hrt2!XZ`
%n/274.$F!c'n5NBlj<'Q>u+YuA2U)lJe)<q<#[&')<I".''\_Fdsd9rC(Je^qOj4:ar('ICOLH.h0$Pn,9H%c+c`ECZ'j(;U1V]5
%IjCt9_,3.BVqM7O)NTcNc;-qO_0Q#n**ode6rHS)&V?`"8#$KDLt%P_M_F%&/>:3SJ<V:gqbR]U^"%>qNeWArSHrF(N(5uDGTjo5
%r'p:>;lg]6,I/>E6IbQSq&ulSk+a(4i=P^_Yj&(pSsJ-Y?tjl/mkN1pApoKOb0c;khTuN`\AnFsd9tBLFeT9[#o-pBNZdt1ol[&7
%U:5S+/3C+ta.o/W>CB4&Gse-/JPAXp1u+(m-%-;AN:f9kbFSm!6?JFfBD>uoXZZ-OJQ1=V?N&_FZN@OAZl$,ug@s:I.Stohdud9P
%XM=KcBL&%uC1O+l]`-b>Peh/jWOInPm.L)o+Y$<N`b-J80s/19n?)fr2<c@^33L!h\8=Lc!1jH$Y\NjEha/'VRuA9-6V=EJr?aCh
%DIZm`h;e4Z$!&m7ck2Pb3tPCFA7Pc#Zo<T``sAsdjYun=#\f.&98MpaA^PF@-ti_-jd:sJBrk\=?5ou/'9Zh%Gi8IX_AH,4OIhmJ
%U##;:C`t9)(5i_Pa"aa2no?7@(f5/q"//tnrOr'a,?=t'p2Qdhiqe"__%ihL*YZf@PZQaT>GVCD5=HppC&Pa&PQn3'L)?a/VtKd%
%aYBI:#[M!d+o9_;:7;Gm;WD0YSVfr+M#IQl\klHT>%7B#o20\\DkW'noS=7.GYcP>S[\MlN>'$0,m+df+$@P"J-R^AdSRt]BAS.a
%Ge8bT_?h+.qE&C5DU@QG+PmH(d"f`0ZMYW`OWQ*E2dda/T3,/=8s6MfIJ4E&ZHBN_8GH2jN*l]?>^e&J$q@!#8:j2MBo=?7F9*A,
%q)skUPdOBm\te2_AX]n;ZWhi2KEsTgfk+>GR``.F<K=@rm&SR(8gQYi!kl2@bM1;8mS;T@ZgYh3\_BA9%lWsW_Pjk`?,$r%H*)L%
%I<.H4e:3nP/B]gVpW0#hLmQ,^IOX0R=^k.=7%llpJBa2K%,C@=O%3.B;'EKNP\Yo'%a[hIcU<=C>/pkb:2WJPd7<G>V5r-hn[pT7
%"32(T3^WU4KgRtC^0+V?Tb]!qZ_5R)M"X\GC)hr?@_<rEEJfm.nZBI5`mcmOMG$PbohEUC!>V:AL#e.+eL(YoH_GRp^$J74s7$mC
%?5V%qCh'6DZtkNg0_[iJ27P6_,&L7">H+r&ZTF.dZJW1p[B<5$p.afRKN<c\e@HeDeY`0!A0?=V6dS-$eb\!\nG]aR\q#?Y(<u-<
%h`VS@YlHLVJVZ$7Y"\'*cnMG4.JYjc8/\;^RUJ2?4E5_U-KCQ%gX*)ePsO+KXkEBV)s0M""-I]k&nX7DJ9X<m(HiHI2>!Ohe_3IX
%`e>8HO0`S-m?b5ir&mVU<m?]ZU/r+J&&Spg(9`/P`aT:ILhPgRgFK#gnlsmk!FtNlFn_G;SJ[`$9LEEc9"'#.>MCnYScs\d[^USZ
%X\OY#-WWh*E)S8^XjsDWK?>DdRCTJ,f@OoUrSaj'IKHChdQcC+FbA$F:Z,j#HVY<23@+-j@(TLbK)$F9EC[,8J'eHNU4N>k05JG4
%'"`"f8blgGaNkN]p.jr!qRS#E[/4)c?>MG`abDh@`b8=@+LGQbje-OE#9r[oS_Qel1-N:k0BoF9Tk'p]!W`jLpHfOi(9aYoff!2c
%T):3hZ+>?jB69B[9@@6L3m-n,<4g'ol@N+"VdCIdW.I/b()F51l[j!M`CLG#\@$j/TiTdK.Y6-R&CQqI8DV'hD*50ke>I'_l`+!h
%4b!h%&8k4+=;dl#1.cnF`@hk@A^OW7$cTiY+bnNdJW."jBMF@p^apd.1KloFd9IRtc&J[J$>NHTo]CJ+DY=5+YY5^_n0q?<jVsJV
%=;/lle?(_#<9gr6h7_KsDQdeDg]bT/+R_Q.]G;!_P1j+'&5OCG+RP$8XdshH+*9fR_MF0QW:2bN//Km`d2gSN%5mN@'GAKg?Iu39
%OM;G06t9CP[PhW2e".s12ll/.c-C.GU<]7qR#-gVN[s/$Y$[$^?tr6,KMKTF4&fN>6rHa2!4Z4Koo.)!0ZiH#2)&bq^.o4ummV]5
%_KjEtFesIn.th`CCs,5B7-S:4anBkV.`bW7C\445qi!sZ\)sE-"m,)p-du8bg\3%I<tMXZiq_ie"ECf!7u)D+bX/mK^KVMVrbN9E
%6.@kG&6/agE3LQD7#c2;WO-Mg<1R"udh5f]*pKb@lrriHeK1eVc`8[&IN6'k5=\iOXp>=#XJ+u;a&s<e6eY@O-/:D3_`("QX5L+^
%Nm8L,b2]lrf=.Z]*cqHJ><S^6TNjO5Sq!(UQM]@p#q5F'6e?4bG/O_#3ajmOhm2R;egF[QH0o2'O-&,=8o0tiD1aQp@4nkq.^F10
%>?M5JeAmumVQ,>,k8F`97gV_4@<MHB5+PE4-'suT$")qBgYJh\h57C)g2$V;kIpBjf@oPl!qn=U(sFJ@7B6sio[:)<dW+n9A*>Fl
%mWs%?=J_]HhSJulS$DN!-VllM0-).DNie^:e8kficKC(1,UOe8-(,Nh<!,o"-B]*pJ>8!EOefjF0k&5O!qj1I.RSa[B8&li/n<Lh
%IFfiHH!Gn[]XFf!'YO.MH]ih:8nC>h'P_->7M]L6POWmug)kdV4hJFU_r5e3?<l$Ekd@$&A_6a#\ZOJ\<j'/#jPR'X0=5pooSrm[
%J+ksH\U!GW@,B&5\XIa'W[iGHcm^J+NB))&irAN@?WCL6mpl;AqPAOLrs\Q@HPl\d&0I3UE\>nMO+7"bLE=g'UOPP!Gf#%PLC)t`
%nNt'$rRVS>@l&:Ip7@"[?XCCur:04Knf>a`FPjlc*W*@q-Y&](TtH*5WG_Y%Q3t9BA_1pl%k2IQK/lF3jUBen8h1!]H#ioZd,]RH
%f^($$m;>/$s1Yr7bMQV'AY\.=g&)0X^=:aF0BR[G4FJu10?Zo=NO-/4"+;-dd82/;T[sRu&E+(?$Km9O5Z7.>$hWKRbA_%N*>KjQ
%D[<[-jmbaqU79L:6kl*MAJ\g=MQ`AciGp!P_HZVS'KBi^!m@=nja!n4dCp:[4qmkK(Op`cD1;;]bs20eM_G)%JsV@\GJ6n7>!QFY
%D#m:)7n>(\mV4GFbiRK0?8p55jBG^U!2usni)6:A,W,m.Lc^WraQ#o?:,S"nMh,N'@"m7H$_tr@k_O9]3!s"<+DffV#RNW15O:i?
%a5A_qNYt+a$65^!&TH0+3,,cgD."PBQ2UoV>XAPQ5^X9>FPNoG#4u:K2Eo-V6V))ed_\Q)/e6<K,_][Ddg0BBEWh>_Dhr:0BA.*[
%KM8.:dRPAcOU,(Kd0RjFJRtdq&Fq*^ELO8t@jZI`-PV<i[n%lT8'Ti\,^)W@3"7YDk)X2B'Q&BoMp=+90Z&s.q/Ah`nURN'L_q"3
%+G<.S:e2R$>EG,-6/YN#R9$\>fb`@^=akOTngqDpg$Aem>`jjdp(KqJ*+JQKj':6\EK2A[(isI9ph6]`-7]JM[r`c@^H%+$kP&BH
%'fPFF(Rhf>\@'9.7(Rln$`$MaR13j:QqJ?!=IUG\%r%'3..!Lo@kHL05)_#!,rc3tBo]XOiA`h^7pEidTnnbUL:.4t7p_7b[%;!%
%`eq6)L.L=66=+ta)(.@5hF),sV`F/X/B6)@EL0W*+8d+&Z^7rBO>jcr*+3+u0?AL/j),bq!,RD$$'P"D<iAYSbJd1sgr3"h0$J:$
%-D=hF/o_]s*6K7F0k5oMVSh5CTT57;\4^cW_Dk%l@%Br[K:'0e?%]>#2a`MtEJ;"1;@mm#iGPfZCoEg04a^KJg^J>;KK8<1d,eu1
%UFo_%7WpiBc+Jd>Nk1$B&;&RhQXJK<T[!se#sJ]MBp_Q:9OfLdF6Ojc<6>PhWM^o(Bo]_,/>Q_#;3ueHS.nWGc%W*ni-n&L6?6K@
%H%EQU&]rd9Kt:ELF,%:e9+]DXH0M:bm]]#aoYqDQNkAKb^jYF.Qfc,F2MW=D&j3si5=8`Y3a\aEnkugC&Anj#Yr\Z+F6#b3ZCa#[
%EH-iK#%(kYdEp2Sp.e*M3p\HcR14QNaNSX\^;Z"T2FCgcG2kPPhr6\?hk;^>8N:\toURJjD"robVED$.[g^,mHM"$;c-!L5IAmWQ
%nZ:*H+Smp]3Vq0k67c].^'*L&i?e=9&t&SN/^S\SVqhc0Bej0R]%<W/c4r=4HOYB2Tthe8Z_9%S;926*47oA`dA!KAqU06^2U'OW
%^iW\U(&A!'Rtr3NMb,FqbgDc-0a5$Qhh"\AqD^q$15MXj+>PRsfAHn\G9guAg^8IDAsDk/kW?4c2Y8;'nA_gsoGn1FJBb<b?p9o>
%a'Q,V\UKUQ1uF>H?AH5d>U,g\p5W,C&GhF*F+i%CoVKt1O@)CmM8[(A<p32iMSohakW97eT/T-p&b0T_pN5UlO(;JH%"1X7\&-eE
%U$oK,GgVZ?(IH#1&p$s>;DFLZ595i0$-]Z61W77I#O`Ib4%TS@$?75t%"<c;=Iu$!Lc_kQF+q*1/7f.r]L@4J?O.*qKe'f9psi0j
%:c1W,B<a&8e;o^s=LI](Je'%X[.6)qC^W5M]Y2;UTp?`CO+04q,3M2CF>q##<JkFq*c,5!J"YW;;OLAC6MR371SPVDVnu</0NXtS
%<aJ5S&Q,m;Ld9,DH>a6Di3*T-RRLWm\\NHP=AU=21+P%>mkuZ.&"tknJCfOhBRltXEDc23_rEFB];lP4JK&Q]kn+iB7#h<4G[N7j
%kjL'$LfCj+mT)KMF2oHICge38;2b[]qD-`=MW1oAdLtj_d2UJs&:l7A*P2Ub&'lZY]X9".3CZA>V]T0q_ArR/escj\KeL"'C^lfB
%$b^VV_FWDSJnfGj)lPZMUilg&mjuB,mkcaF`*"TRW4$.E#NKRS<-1a)Qo?P"'IC=CebNC#CV+Da@%(rp!s6n)=akun<Y`D;89#2I
%Oc?b-_(="$(]g0O?qffk,R1QZ:f0/di`o3IC9uLH9umE9Ofb7aCBK^Gf$AJ1<hc?&q^'e>ehD3;nM8aM:Pjoj:UkV@1u[8Z+c]%H
%oi'8g<G?K1(mpLa%[@L9o>$l@L@blnqrh^f`$9jERi#8ldkmP]!Edu_-#p416N@!=\F$L_[O[O"aZq>@C`h_[qNO.a)gTk[>c-4E
%i;#p"2tu8Sno0t^N$P%*/1n@S]=>,22"k3Z_mO:0,?8AHhoJRTjWdbX"J]1)*@aOIEpM?Zrjo8[&60o-Gqb,Ci&PF\n\q?LE]#@R
%n>=RFAeT1YQI&<#s$^oH\MtI-X9Vj10+i:I+p(P?Oe>QaQ\6X&Ylk4WhRO2tSIpN$['"(cU)LtMXofNH(K"u]3n(pV3GY;>MeQ.<
%`GjkeJ"KH`&l`)/A^J]c<TWD/@()#Z:m9O1QP1bJ"+[%4Rc7q13`5a!&GmT)I@BN1kr_%;Q$])HKmAjI7>QsZGkLaF:(fYXlT*V8
%Jf/&CEn\Zan?/1g&,CZF6Q0JSNtTiZD/`DNeMJ@Qiot#i3A2?l&ju2Y+/CUT!5uMVc>I`$FpU-nUqhYVJ6LSO(;<*LT=[3<H3#@U
%onZsIi<1dP6?HU,T=7Do@:l5N+]$PE[BPk46JT6t-LM)%1,2\QqTLj/F'aqd`;>P?hj@o(PnYfDH;%f,"C;3Yl4=AmUKP>Ds/BR$
%>9AHCbrD.nJ46n/_I<UaGqE9o#^RAG$R-TL@*g.5[;_S%Zf.]a&t+c1,Z7Dn6[A710G0.u25:.3JIPlbNl$I$P67C[GS8aU_$:;G
%(LV3`)^::f9X]Hh,!pI)HR(@fb:jO*dNe#fVFW%R(?,I/@)p(hS)D(ti^s'!),^ih3A&)'i1T]mK6pJoW8$I<@=oJnQ^=J<[1*9e
%#oj]taf8Ko;^Q+ZAYC3MO;qXL(LE:Gq_o?MV:(6YFP8<]CDM[DQd<^78n][U,AcT[=c5TY%aqCT9+in3%=hm6\?.0rUrFN5;^Ro_
%9XDh*/7=PAZn-(YN2Q2k#9?c0J3*i>gWNQC$h6%;Z=Qj&OA'<X3K?G!RM:Ld_31n-!>sl*-TD0?KJkp6JIl--oCgFZCf@9\:`b0I
%UM5gH(hms,.+H/R\e?k6X$O49.7;OO:a$)&`JE$k_UQo)+pp!qCaQ*34:\31g%4eZ(nDSHBt;.lJ^^D+Cigkk\Ep`G->"&bDhDC?
%=e.DoGBo(_fBL]$[f?i0AVRjn,*7m>ZcNmr0N(CK]@Casr*WDj&e,A,=^mN1KG0'K+bEj&X?B<Ll8kg_"n>Jg<p./>,,_BLDAil`
%#<-d=X_$bEP;l9VkZ=:[Ci:n3J-G)A3c0=<k4?gWUf.j/K;e8R@ouJp8"L*KR0e\W:b>hjgat;_-Z@jNm#iGaFE3#-c_UC@jJ`hN
%`.0m^)[Wr;U7@SnfRTCk!hqF06m6S^KqmQ9T4nu7A7A,tpg#.j]rbI;[PO?Q(Vi>H*0g-Gn19rc"3-Q?++gJ:JMFU-D\u!1O:e<8
%f"Dr_c\!i/;+AX!;4^X\8gk%WUO2.0.CEI@3E&PNZ74JfK'Lg2.f!t0R72G<eAg/tN^VN]RlnQJ]ch2%$7S2q$$Zl?l'U*h$H-(q
%%:)8%aeYZ(G9W.l7R.Y8;"Gi4^Z/_!LBOd+JIj%r)NP6l((c8X930@`nNnZe9""eEe?ZA4Kd"Z>pMh1k?lOWm,8ZqZdP4'#i)n<?
%.@R!>N-_5Zchbij$`>7C5b2@2*8oZfIhdahC/J/]dYN%RS5>jY.Q==WZ*Fkco#@J-,`(EQGUdA4Pp>7@rl"(\c5=HT4pUYq['EFb
%')_667e*=0;"28;)E_4V2B4;W4;fM_MUr[Rm^JL9XMprjSUW_FEC_,UZF-o/QHUZ-rWaR_2hZG6DQ:BHq+0T(OOX9S#6UAnZ(.b(
%Q(;nJ85:->mlckB0>6LA#m+),%83RNiDg*f_$X@(:DTra6H?':V`]tpc/'1AHt)$0H`C-gXP4*&c2_Qo=rYKDUV4>*"C[d$[tTU.
%72jaBY#@1.kR)Gc!D!ls99$$u=r8W;Q-<%So*-:l(d&uP/QP3tTF4O6R:IcKJoIVc",j8(LrJK#'LS-B>SNfg`l?XF].aUe8m6<T
%K9@#()n@iL:.JV;j9OKlJ[AEm_h>>KCIeZ8?>G%#?str:01?hK\We+mB`b&(UJ>9!;/=i?R;:U!J"$WJWj#dY%O\LqdIK(8IEBbP
%(@'CSRqp3'R:H$pRZ6Z>V"PWn;4\q8Rl+%';7O&%N6A/iBg`6;(<4`@VgC'kU4VFL>7r)FpP0G(7QIBaE#,VWUlCn3R3K.QR-OGP
%H&Dfg1`G?X1IBd5f5;"+bQm/ApFTkE>m_TiCK\`gN:ONjM&e]IN)drROfHjnTYn"e$pn_FZJ_`'P6qsRQr\:UO_@8;'VjCBfO:Ut
%;2<u0omhu^l2[6@*'Or,$!qi?W/bNm\oH)Q'/k;Q@9R&9)Mr7mil)R&"N1V`NY7VPKcP"/]%'ppOVZH<%deoPs0d;]p_`O-ZU5A0
%B[d>3.\tKR).$Q&E:]ujF\.\MG9`,u_0:5eW)%Nh/A<4R7\<_N#mPN"f]EG"Mdg'.P?Of"S4C^1=?-4c`'?C7#Bgt%:W=M8s/Q<M
%L0Md+;n-?,E%.)6JgQgL^/YNK(05nZBr7ifP<FIell=Stl/Kb/lCH1?2IHa]TU4\<SUXoC+OI,59[s2ECFHrBYpMJ6(82Sp:k#iC
%E<,dN9LY^t1`Ek!+"q1%9JNk:4@t4%aEsGV8L.Tq1I7P51O.@;:P#uu&4mU-$sCHLI=ct?iYPt:g>:[,?_6.\hRl"`rGhFE"IB)Y
%-!UQIqpjgD6Km<U\,#-'[lltUE;enCh&-S"C@cWtqL@OTQjPuki5E1cpkq1@MBir#5L`6UH52#7f.BLPN*'2?.p9C(Cd4HGBSm"4
%JU?V&H8;StcTLE[WK.]Y'KJeFjnQN[K(/*BJkK_a9'QU"7M1-990A\s_kT9Frb!:S*@g"]Gi7MC^M@Kf9"NE=1]\P`>$e*VV%=`?
%`jcrMI/F5iZY9.jO79FOq5"uN"qCRHDON>.G(UqbbZccjW!3I/G\%Z:kb:KSQ==?n[JFssTa<cGR.uoj>ao0PE?Gash-_%(4h/Li
%2*9I[B--J2:/r??K^6T$`)0LEfCsC_okJHLmm5bUgpZY:_t7_IgkbY:DFD5)#Y-fL[-I8($2CUc%+/D=1EE\!L@euh#i-h[)[%LP
%X+tZa+GLnQq6OPe/.UqmLI>uapdA6j2AeG]"M]8F*%3^r#3pf3i,:muj6K/$qqt`nDss1.!pV_(rm<^BEmbQZn1$Yf3$J5ZMVJ=j
%FP-NQKrh0JB=L=F[nWrCd,:'grGUUYI^\ZKP_G<k4-j2<?IeP.*@$@F=n]7T9Aip.f4N5X)JL_[X!O-4?^J*m2$1k=p]-g4"!@QR
%>0b&Ln?/>.2FX7P&)pBB%SRLehedqgLMeW5*$p47I^h9*HJRjR>C`O@0ouV6pas:M`Vo&ik+.L+IFcab2OZMulNMZ"#ag^m/U8uh
%7clD,-fZ7mpY9[Of8TX"+4fe+PdC.JUr=FC(H?jjgL"YON>VM+('?"q7M75k.,+\6aP$43.uUCr&gbbZF&6K!br?&'J`7tG2U`3h
%n//UWaXMk^Mg<QaS_,9J+Q,!M3O%ujl+Qb?*In?rS(1:i1'ADNW<2e[d9IWS*,#=koVlpt%>]0OLs-7=UD2e=a4Qoq4cm?a[0;33
%Lds1d'%!U$G*;W!m6_;U")84]&RI<,.NG=[F5o+d&3s@8gN`&\W27'U$r`42g4sYRAIarMX?GK8^'<+X`Bal8:ckar@X#a6!taj'
%?f?B)+P@%5Z\'0A&gtffq$a>L0K@;>UU?bl<]FM2=R1j(@h1]2?(5=rMo#M2!WmF3#@T<FTq5q*YC4fn'!,ubPUHbu"iJLN%-D9_
%96[O1_=2B"0._0"'V6*<)Dl&V:]"*n`?LWq5;,&g65JO1=kj%FW%][IZ;\uU6E)>q\p]M,8"UU5q%E<=O5[:/E+Ip#7Od'e(etT*
%?UTi8k750L)rkXO/d32bL,frm']cc5#>B_l[=nfD>j@d&1uuLLO<ncKY$u@U3^5p3SN&akVo`V37%M4s4DEkN-)3n#ebMAhp$-U]
%q*,1b(ThsjonM._Y@:Bb^C7sOBJDgsfI4s/NZo#P8V04JfH43BRNXC6,@!`*Y<g?$[bh]oNukTV=`DT8g&U>m*33e-Z!HEY7Fs)G
%O(cAbYT*ZZR5Y7p)`0n0gFg=PjPVZ'i>a2>^_U2/_jM9H)*A%Y;,#MMaC4:(T;EH[SK)`hEoTr,YQH6tNiYm@-4#:OT<SRCF[4?"
%leE>E1UB]CP90CbjERXdIu:rFC'Qj@<m/>l6)`KcHR8o`Hr>SSViO$N.I_Xm8)_m4$615+!=g$3fmlHua4U($i6b;^Q=0,N>KZak
%bh'=ZHTBQuK93=4G!^ui0pL#c[=p"PBnBe;fND,@MtTfiFj+6A(\jeN=S*E-k+`",TSKSA#\V'G<6poV$L8R"5%Q&,)#0eeF>I<Z
%+en\(_7^&?:pZ<2)UbB,7=\gaal,#ZC('N%%XCo2S)5+.=r:*Ib]2oO0R0\^?Fh;(4/0uq*'CEWBOK\_YNl<eITgR>A7;;Z*-O5J
%4dJO@=:[*,-Xs?_3pCZ3Mc&s;0@<!Cop`P;c7"Q\=1F(J;>Oi)=[`C>)D+*:9O^4F.=[!X;`MkAoW<I?1Z7#`0)Z%_YlN*F]'(#i
%2$d)0LrScBj6qW05('eaH+XofI3?PV*uZY<8.Af7;Quf;@*E`uTC)sY-S[Fdmf8.H3'R8SR[s?6[;2COdS0.,C/$h>9S(lbcn9:d
%?Cg_*V:?2_Z5n6&*$ga<ld[f[!HV=+1O_HrB5k<5=MkiBHJ@AaOkjZ^kht1?l[.@chiI]n^f+'`Q=]H!UNfJM)*V$R^ij]Z9L"P[
%=$XigfH<#,B[YN,2#fRkq!#f#e;RU-2/d2@V(N]#'ZB.@-t4[@(Hb_K;9R?t#:g9sDk'fdD7*PN"ps4>4B\ECiTu[<.n:FM]lpQ]
%`74=RP`'+t:a$DD%&HEeX%d1a4"^cm2"<"d+A4oHlic7kUY9TP0bMj.3@9TiX49(X']YW/HPYG;W],T/A''p:%%QhC]j[94%Wf"]
%Alq=2ERDVb3*=fm++G)27[G6nYR="5-Kk1*97po(!U+H*atP)&(faJ_0a94fQ@bq].FY6YamH_gd^W%5f$I1C)42#5o2lLAN<d9U
%7!L<Hb3ja>_ArFW3T#=7Ir!ADp&?\PZ6`iiU'CWKf`X2cIjV0&K@(t<o?ql[Joj)e?I7S^<;".e29"-Ob$&ZKgRet,jY4`m<;WB&
%#6^&2X<@])<&lMTnr+Ji??:.HUhI9,fgta)kk?!7W:=Zd->[Ja,^`Q08-Vl+A-UL3gQ?_:!@".Tc%H<B5H=t6lBece[;aVUfZ@?@
%LPnUHeJ%&cF>90qePCA,ekVW/d)YK\JtA&.[Z>!7qKm6O2c"1$N9mWdObcQEI#b5hakuF.p'[(jiH,AVUq%""-[WBFh+)DMZk5&R
%8_c@MYFI^\0C$*2iHlF:XS^U=+:\hOd"L19HO$JFd$ib!IYS^9&6@SE6&2]3+BmWS_ZpeQi79kIjnGq(Tp8k9qu/9d\S@AGqtn3>
%ArZS#]teEHqAH5Iq/knZ0&(9S?@Y#%QfSi+<\H)%qr*MIp9"&Ln0+X.D^^F.oQp>k,i6o0;so9B40+B"ppVnal#rQVa/VQ<_<=X8
%AoZCnlSUe<Sl%/Ej:iCs(7u_iCeN3Y-q>@:)j?HoeDdnS`5U^?McqXFRUQlM*@sicB=C=:[(<$D_?FXne/L6E^s`</c7daJN")@0
%RjH,%7sQ*%-1sqSDELS)1gUYkXb@cXMk$R`c:+3sHB?/jX@,0c$EWila*IR!*k=bjQ/^d?=$U)Lg;5h*.[hro&qFE]2@;*O(hQ#k
%`mtnbA=_\F>7e&G&sWX#/%M5I4t,pUd%S95.4(T(Lmi%1?\k\BRKiB\jOg.nG1j&+a)$^N&o9QRY7ijb!k!`uaBr;!W#d6m9CaSU
%@r-"U\Y!-0#9mh3BfnGKYL>[o;[9@U:h&1GD7`,)XMBrm]Sh%DeJY@Uf5#W&`5N(VpD/jS]q(]2j8]ts"-Qg:'q,1G(Fo:@mJ/@U
%-.lr=SGEEu4Gee::\/<`*ou[g!0`rP"1(?W?QC-`60<kGZ'<'XRVfiC(OC&fDU]fAIU(:+$S3VJkjdd1KQ2mmjjZ1r^HU$XN@`X.
%icn+&/2He6bg8b.lKk+;:9I@?Y&(NT>!521i#I)jGXZbr$FYfWVFVI7ZIhIbCfL#C0rArq0l_g!\SepbKgCC#^+]irGq9?Wcia.O
%:3NqNV`HD&>XtEL8S<*Jeq#@-96Qo*Vi\"cF)p!P/+$&r1iu\8S?MQMD#nmG_P6O%AZj$%3oGt!i;B$I&K;7$oaF1-XZGC![<:uY
%#BB[Df]aO=R#]'8V\OO^l3q6$2VCs`SnZZ,NMBj%ppMP2EM.1--9(S$IO3\p<;>c***1_.8-Y\Dj'H9N.r?m*D+oh`P6FUH'+6dc
%1p\QVmME*(F*Mk9f<?]Hb(e+4d%jF1-MV6f,OtljqCrj6<Cm8TD+Zr*W0B+h_.mdQK:KNi?CYs*B"cR+<?I_OGjY?c<$9Y!>ST/h
%Jdu$uX#8R)CD.-Q(%@AcI(i^Ba*#SZJ;OI+HfS)u,Bg=3A*Tqnb5.9kUmj6%Vm,r=Rl,H1h2k[DL@]1hRS=^tnHV:N[150c[Mdl_
%XYnh0NH;,q]U1VL<<KAWZsceRA_OM6^tH*2,9?]0eeVZLP^&KD\o%2IUYEYc\uj97:(CXpkQ8$qHAgB1$3H'W##"VT(c=<=<uB.g
%1Dr+qecBCtYCee)LbrASZll0c9Ii`TN9E0=,LFLlVnlDnPTtV7'\7AuAnQq*!P6-b,o\q6!BZ1Z5mqSUViZ=&1(8:FD$K@:*tU""
%"fI$oE1@4jo.J6(n-j3iRWB*r1?[tJ<fP`!KRf1:\oCU">EY@K[MZ[pO-bG(N%%afY(`FB(R`B(1LMR=Fmp_<EU9o:aCFFdA=f1s
%AD!0iA@fWp;`$3>!B8,fGX%C/&'e_));G?i7)qtJFIQs$YccBUUtAO#?d(pp[Y:2agr$#'\jDn%NSJ-/DlaVs7m4Q7M=<<q\tHQL
%E=c;lQ)[7tMP[j@%cBsMk^d$#k?o;MJ>PZ`=^YW;[b?rHSd.2UPlOJj3n"jR%cgXE>77;m.Jufr]tU<k!MJ`M'mC#Ane':Wd/]MT
%$[p\R7r*JDm=@F'cf)Gi\5gM1\qRX%ad;+</,Y";L$B)>-8TDk(dQ9/g$a1p30/]!'X#kW,:.D=gF[r:__a;2nDfZH<cV5#"3%LM
%@a*e'.+.DBLRo+'qp:Pa3F$8Uc\'0o<h`o4hmI@1PRMuND"cW';gMitIgWs$`9=k<We,UKBl9U/?p4PU^m.uq8IOR]>a9Xc&IgN3
%N.IG%g_IgJ?->4flo\(dk^"tVh[<FrkVo[O(NW]n!,_?#&q:Fq1(HN#Q8k(_qB]s0'CSF_U>'307P8=V?W@r4".SB&_d/<neuZuG
%JD#8fHI7k%.krYNcK&u%kG(VE*>tCSr<LDZ-,9Tk\hD`BmB]6XE+Y4NYZ17R5T%IsN(@MCb),0qeZWaXfg.T'$^%"H3.OAnN0in)
%R@FSi(?1@9;t5jRkIScZZ0EKBF$pP(=sJK%ib!1&L%QQBM`B3WFrY!5(!`MU0A5G!.MKp8Z;Us)r6Rln=e;*]Wu2DFd9.[0Tjld_
%X\>U-P-D6d0=<pOBcP00f"&V"f#48LX_AX>W'RC.H-A.^10cZ!K+EQFd8Mh)mhXPpS?TIRA(+8=@HK1+G*!pq$r=iH$Fc=Rh\6n;
%&P+CGZC>(s>fj>n%Pl9ERqbM^gl\18!1)ro@UP*boecrm9ZV0[Bjm[dT\??$\B&>1W0I2R#U#sHHf9oY(T4<+H7krU/&dU/9nMN\
%8Q?Q-D]DZhKETZ]'138V+fXtV7]_rH=A0[T'$Vm8KO!&JU^rTh,D.9ol5%B\SijpD(@H$"*/,n7'Wjl=\C1rO>I4A=8l;?'&^U_q
%PDk]rn/5am+FAtbPnrFX1a&S$.pf=Zm6r9F?I0]E-Oec;00,S\"^I$Ei&ij"&JDe<DA(/=2V?cG!":k<q67(5!_,aU#O6j#H*r?*
%Q!r[a<g^4'#kdddZEtm`q;XU^+;BEd!MS7c6%Wc\+\q;ZA[u!A+\<e<?<pOf6R?HnltDg$Q%LHn./D)e\GB%nh#pkCklS]gV)#<Q
%j@ApKd0+d@.O3"W[KD>"rArT#(qg'7(kR$[#Dsj+N^L4LimbIoP6-Et@\gkQ%)PgtG>jV_UQ"c<3Mg)9.CKcjY6%]eBiORg'jWYC
%f?'ICSD/Bt7\`U4^;7#98G3N3jW"HeHsA,,ALiThKD*H\auKgDjD?Y6PAlP6/Y)/b3ne-FLVYP[7nLF@lmq*E.EdX,HcApENG5VU
%"-%Ad>k;2Xc;?j##G5Y!UN#Y@EE[CC!jZ,1B$*+6SBRk3N!&[J\2Rn;Kk%^<.]nXs)Xqq,Gmk&/@tleZ;>=P#Tp3tQ/-L0oE=U2Y
%H_jKt*/1^F:ZICTaOC]@c;B\B=]20B3!\B3<hngt!9P2+VXNN]47kA#>0f2GD8aQK3/8VYRW/hMQGu\/cJCh(EG7W0S>1&+;g[>b
%EXobKAlQISk8]1OZPt2hc;>.HSAlH,+GM4Hd"6<]I1r`^Gr.rtS8s%QCuZK;JcR7Jg`,Dn*5DBLB,lQ5du03(i,q9L5a_)$!O&8V
%H,_e)RRg"Siu>AT`aNJ,UJ/e^<+?nZWmY0_)upIh?tI>;0F-`WY)J#)>1J-9AK2,C*2>=0!P#f#U@A].eGdhi#*P1'&sd?dA8d\#
%r]f,nY%=pc\IuLrkl5U>"uM(7g%h2nG>d*12J$\o#f[]+6qN>K\pC#$@HQHoYD?9mOjEX5h5Ae?cHTR5o#[GpOn#t+nXk/Q=H,Na
%=G<I(q04e_=!ZJkCrk>Y36Z$qC4)5kB*35`MMu18b2uS_jKihLR@*b3,PGOi1[@6]%6\$^%di)f=aVK"RKEEC=CNt!qfk%8,<bV0
%Z&jEHI[L%NJ5.8B4;dUi$;DGb`WqRB%h8(*UZ!f%`B_PUP;.mc**;`7*)<A85Mn]ihr9-878uqZEE@hL\%spfiI2``-Y2Q)D.l68
%',F8D;CufsqD@-o,h]A.a-,Y9qD,m!#d*f;86l=jhZiU2?2Agc>gNY.=Pa%h25M[!A:kAmQfWo_1bhmm9`i1aU4D/I\cO[%^@AX)
%q`9'5U(+q#GbP02SPBIDpfc-okAt0'[#SW7WGu5Mn+CO?I_;gY$r'Ti$cC&P'ajn2q3CU?l<Lr+7I+8p%qQ1GC5HUJ\7a]r`Xe3?
%cKI.uD%,:=$iRR'FR]U+T;u9g16'P7-Cr1F;WGD(m.PjUI_;gZN(l]P^bH?8LPZ[jdVZle*/Y1G>Iu)=i&Ct7LQakYI\*J.dVU>N
%3V\.(gK1tYoDCV`&UA3gp>h(+`]KI4oPWR;kK!Jrj>2Z@I*ZTCT$`a>)hnT^qQ"NdLfV(H3!YLds86c[Qc=q3?+J]`N-"IhrO8tP
%5NqoaIO4R;o)6ZD8W@6&WS=oTq=20_ECTsPTsjjE9Ooh^Znk3G;DpZ<S]D;5d+QD4pKi>dW,;Nk707aH.q+?prr%P"IN?5l##Fk/
%]dXN`gFPO^VsjW,Tt/SZ/#=jtg@D$O0i4@Obs>ocmGMl'BH@cs:n**ObXr/bO2VCLd2h_3[L3+epq[R/qkCQ:9Eq%D[b!.V.oGRt
%J)^g9Hk,DUFh3q5*JQY7]NYo1A+Te<[?Y?$+hADu.a3B[>a^,"eKIUY&@^:N]n7G+p7E\NDtTc/*1,4#,LOcWUXR2L)Rl2*8V9nG
%XjUmS5bV$!^`mVn@kWmuoptE.-HkTt0Q[]Nm;%]@XX"nPQO@ZKYCh'S3s9ciQ`Z:;hI"!76m$m)BsD.3Dg=a*V/&Wdmp-Rr#;;ST
%ES_I[]'8`(onBh2S`GR\iE,+LX>VD'odBs#.X9=Ol9k8l-c=QeQla/(@&/l8qBDeKFc[HS#`C`7N=4]6`7Gdo=cHajhJ,(R]EqX<
%lb'_`@lX]ID*tm]7fWH[+.=FLSJ]KWS8H/PJ@L_9_9(\]FjlcmLf_3u4NkTW%Us4qcU)Z/e)[&8O6?T?eKUYa:EU=;(-+9cgZA3)
%Q63G9X<;cO1f!`('AiR(?3[ODp_,A\-,OpF]W%A4T(Oscq)s/mimD>#r4`*XCM<)k"n+.o/S"tFZmU6W"oFBp4]o8FZZ2bkOh6;N
%n@!8[0P^o8,6lpdD:Lt[0K&T(:!FFf)O!W$E^NCHDs>'C!&i9u@oa<R+'T4LF:l?""r\4oMd";t;\#jj$$Z"s=948Q5)E;2WI/\V
%L]*u&ccT^p!ERsfr01?F89?LiV^[mJ`DThJ!GJc@ct65s6K+B.cI"s"F=!B^$*db?X:d>m*pkccdYHD8<2,-?A;mP@LLYfE\lE'<
%a/aV^!YfGXC2kNH4"+9u1r2`a!H0r\%"[1h0b7^YTg-T0)>F@h)lBjA7lDNV<#@u`[[7##,:d^oRMu<uQ=-UG\^I%]);(:LW#YMq
%`:/Eq(>JN%%l9U%&<-CeB%hoWi>uja"-"ZT)g<GW+d@\L5f&$naNFW9[c_p3_6(*:W)a,.fsYH[OhH0PQH'I2AUa1rpaX>'7@N0d
%q)6:9R$Tll#*aK]A$fE*e&u!ZMuNL=\Xnon^I$_"N#h`[;uL4TM=Z;Gn]Z/o%e9-c&s9DppG5'K5,Q@;I\eJGrtnOK+Nd^ik:sR.
%%hYAq0NhG.o6a*:6r'X@50o#FfelOhD0hi%@t\<UdRVm@p>R\JT#/9c'QWPeOEk$9mT#(;o*H:Dff8WHnd!9Rr@3/r@RN9P9m70C
%6pF05R7`t4f$F(dqYq4h$XUB5$.8=d\TgFtRp18RL/'Ogm/$(QUY/Vm6YT_Rme\Bfs2D2UlBP'Rs(8%DHoF(hG#(spYKuJ"imm6H
%rrf)aqT:e%Oq4<T_Fb<56d$=eBiL_O;a5"bpm#KffV',/f8E4Vlka+dV6MRI>PqRqXALK=iY#9)e17d4ZU@%T$aE<7T`72k$Cg$j
%;CQM7r64Fr]H6am<V39,Zks@^b1n@]lCbl]pOm6<qJY9U0"9B4LJbL`LXHqlO6t<`3h]6Q/pK1&M`:f.r:,57^%$\88k\_libK,&
%+he//-qp[bRh]C2)($MSTfbi>Kp/3C2aYrG6JdUO((K@G6sg'$V5D9*YR).GAN^G-1S'VRh':=4R&q!UMj'!BXQ,*_;hrt79fA-F
%?:J<j5@W<uie:GC$X1b0<mJ1NLlO4G<s/:(D%2M/$q$:YfY+^]oS?,_!R$K"@@T)1+qn6S9@R/r1YSG*.bNiJ**Z9Pf*O%Y#kjf.
%f5.(K(Ul+<o3r=1qAK,+)jtgX6+`P(HC<S"3o\+@mZ_8d]#>k1,!)X6$^9]oDo=a,L(bTIdS=Bd+Z-:Tl9&%i"Mqr]=f]`LVd.b.
%Wo/eC[F0A3_<N7kbIEM/7$u(f+:MMp6R$n*MkIG;-aNY91;O8]SE[3hXPTT.T<ImLd0#SGrWulkE/3.@lh24p&.:[`+AT><IBGJU
%-rTu^&Q*<=1M!AMpA8l[\/a>"Kg)3&daNRC^KQ:_T/oB=-!lf/-:.n7'U@+n5,%uq7B"_@h>^#&%D8O\o>Dmgm,0@MGd*in:4=L6
%_Df:ePd)ALb[SF!-FbA!qIGtVH,b4Oj/eXq9_]QVDV6:)p-_b.0Uhe6p89G_!_KF;$Vdf/Eq$6`[RKkYj!@=9oOo7E^2K/e=?N]W
%?U>0oNV@'a&eV>Dd^Zgm.:2$T;6%[[]e'iY[IG77*!LqHQl\FYNBJNrI'$,_#("_Yel"hioQ$$Bl0O4:%[e^Si"2Ok3i/tG,'JcR
%]+X>g&E+ld[_=T34T-bj_F-Lt8EAlm(NFMCBL`\/G7$"F;Ja^DaF!4dFpQ-OEBJOkqC8oVq/nJ4<345tJ1_DnCV<=2kq[qUT.Y"0
%#mW3RK3peeIt&VsXs1F6QRr?*R^A-2#.,TY-Ia?30LK:V^$6_p%[P0^T-j88E_<hV3Bjjdm934^)0bi':TdnK->]4;a!\MW$W3t:
%3Tq$KJpn&"qM9Vdatf,4igW?4R:NK6db4C?qC*Y'&DXnaFO66@oKL0",<WZS_EVDlLQJmCQSeJjIL8YnHpW.cUjOFLXMSrD;fE*?
%):8..:Aj3"Vtt$s:(bmF!BV1[DL(>-RnIMuHq)E^T@)tK"n2ASjln8;qPFmJn"][r?et;nc/8N_O&hAVM7Qj\Q["7[jBY^UOO:hX
%d$J%sn)XJ*9_TF8CW0^H*2[t/7R+X;jhAdujR],Z#LCK_O6O\d@nf1_j0P*+en%SUaJL!TJZKC#WP>#Od\Y:9m_E2f3j_-G3c&m6
%b'\ZPck/7CndW>N#lYF(]mTjUpHS%_]\SKU6uVhZI7X"/n_8Qj)a,LZf(M#bTL6k,mun%JYIJeT9/G.Dq[0DK<p/LFX7u=kF?&-G
%F)X6LD=0VV8!Q&hLW-r=c*NJP;P%MI6hOJ2NmHouigT1]OZoIKPkKY,s*>X`]ZQ:arZ=krZBpMKE>!kEme`r<q>i$?qo?D!9*CK=
%mjIqk%g9-.dJmjUBRs$+Xnu2O,P]kT#31cXB55c[nX'?9^,:'4Mti:P`CqV>bo`O<IN@+`&hHB$_7Ji.DnCAonBII(AeEWblF_:.
%Y"5RU2"p-n8#7`9)DN^X%O,m>Plab*:"V?7Tn$6Mm*;f^=oQXp@))e(<4S2q*67L+emPX^3`=O&9=S+TagCd$.)`;^rSnF<SbRdJ
%jP'>+lYC;6@CZ7qk6n`Pqs@!`rpqc<eBX3?Do?d`?aG:\hV3GdqHn+T^5,k06:X5,kpHSU_fqaAqcWai<./om?]XK-kP;I%s5?]J
%n4nCT!C+/t+'n1C:??-Op[sW_hhH&&>OZZ+hR;Q"](pj?7q]P"3q_D"kVW'>VFCFH3[@VhY7JE1,n!hlb(l6VYAHPMdVCLi)4j3r
%.d7TAj_Ma?0Fe(J!0K6EQPaI14$m-#2"H'q)6[Dk=`<>9D&RU$r#%rOG_j%Zlk@``'KQB\!_$t"_lX\kaOaC+YZ+l&q*?T$ZK@o2
%@,bP*>]*k2^Q88k2`M7IN4n7_=pPD8Ba)5uOL`mDfr!N-`7cP8FU]4l`=85]dfDbbB>TNV,%5WtL!^YlZrBZ4-%(lF3Jq!k^;^)3
%U:&qOB3QO>7Sug5'"c$F+X9)e]c(t9`\Z>SBn8/:VbuOu.F#*nNTOi^;T;AY6>RJ1q(NU05"Em:Q?LS.!F'fa5Y+^!/AKF05!_!Z
%("PQ7mQ,B]^X7:O'f!4?,cL$N@ER-=q.D^[4erbJ,!\5kX#%ZPBNP[>*L><I1s^Q]*='S=$'"Y<n$s=a>)pH#qc1Y%HC,JFplMN/
%iM7*F?KC::N*L/<U3?FQm0EBOe(65^ofZu="hHk[Jn.uf_AF/$r%W$g/D)X6`)VYKmOYoh4""8kio<-N5d=sY``GQk2AYL%b^tSD
%H8rq+NbT)n&/VH7#P%doR_Z2I.fp3t%;BC5Q"YLEo:fOKK6[9oQH7#uHg8"P;VX88^o+ZjUMTb_eKW^W@Lj(B4k@D^*pU9mCF,EY
%@BJl?$Mk2!D-'O\q,!lA2O9$9"mgm;,n.2^Nl?VjdU%Q<!V+J\=u:UhRZ94Rp,T.noc=2P(GUBeBKIi`.*&[t8<&2TYl`j(#-*iU
%`q[*EI1UYegk&;ZmBg/lBrk7efL3r=i#o5QG$1i1K=Ac!Y$<>87LS\*YRZ%aG34i#3:=Vh=N2Y,B=@Y,YcNRd[3Yep["h"d@V`/T
%>9iVj!GeAfnKIc%k3WR\bAgBS-K"Ut6C)_TAj+d$":14%o^Is(]h.^i%I;].+YO1IgoYMC\B%Br(\X>s]E^C7\u9]3i22%Xdl/HC
%i;SKAJO\>4o;oAL*Xn\Y?LF<a'@iGP,E>s`*GlJfjr'-nhg/s:\*A?Sg1'n5B!+k#%GAT?n5+6PC$Yto\bQ"g/dd^L\p94',>uM@
%$+(lE1>^]]@!bDeOabQQ>@\bBd.ttr_<Mq1-tpN&p65-1Bh?BZ_jnTRj#t,QW^Mp;reL7gJYM_[n0Ej'r.[H,CgT,($E-rO%>NC)
%.Umk5Ht(49==2A%7K<c`[d7=QXLK-l'E<[n>P\LYbVeK#2Ir5$"u@Ipmqj)hDN+[p=*p5\+%ZRsY!garhj8WNUF!]Vp:ej*Do=ru
%oBlE6J4-Sa%TZtNjuR*s07r+#c$mFVa4PKLI]@iihcLGl^,Yfl<L(4LDQ>WDXpOWafJ*AY)&V@!gj'#J58r3+hSE+cB`Ui4P?=.`
%L$*[kL9fGO3sftiS<gT@n5*gf*MdPq>efOL/MBE2A)',tU%_?=`ZDD;r>rt6"CU'jnArh#Qji]PmG2s0C:QS^Cid6#++^fk(-MeK
%bf(Xc(<*5I1nS5Wh2Tt/jbCu"#GGhU'PI[T98*CR.`addr)TK5LU\&39E8='A\J_:.^-lX<9U!#6;#DA*Kg%:b>V(sf?Q%oPC86f
%mi&F%86u+%"\qT^@K=Q7$lsCd,OQA#Z^2*>/h5L(n]F&eK._Y%0fXF.r,/GW`4iF`F&7sIE,&lRM2I%36Xpp/q8H)cWar)^LtY%&
%^)S.i%?J`S8t1]3e[DC!4iAKe--]+D5PTS`iP@7@ar!EDLn;*fR@#VQ8[aPCHhAnW7Zafl*j+>m4KXaCAIFUP#8ZgVqYS\2fb8d9
%Jg3kcLe>oTfU(*rd+$4rFjE7!<G,NLj$;Rm,:W6\o@e>:O/C"%SFr`%BCp&RI9mK^SGi$c6.Wq:O#]'.[Q:;C\t])91nA.0R(+Ge
%N>BbF;A%/8fXmR6?b8I;W-^(i!]JR=^d6b$"=2#r8\I1Ze01d+PdtEJY="Vu]^!U&FUcoH]`YB=786<?Q[S1/&W[-Uc7ghg_t8:h
%pM>j-ZQAh7G)Aqn`7lW=jV"d_9f6m@g6@Le7\h7W;X;V+3!?SYq[4F=lcf$I80<_eogR'@'UE9lQVrkrIBa?T>okIoKj.PeQR9*T
%'XW$[8%\Q(d&2ALmglt)LcE(k3;6HLaOSomik&Xt,rPCi&*BfgMZli.Bi7P5@ONpe>hkVVSJL,*1k:`@:,,k-\5Te"VA4D[XMCOH
%4f`-[gsPasetiP-P$7YIf!A0@9'jIBm;5K'kJOo+8dWc7daS&e_d6YZ.CFOupbgXUjb5,V2Vu/t?(*73#:j9(Pr3`K`b_X'!^OW4
%HeW13`(6+kLK-/mN??D+/Ee!1(HSW_qXo!rYaLl=^e%k[eiHOPHSL&P_kth9%\'?W3c%uNHjKq<Dc='?%L]X3F83<VHX4MY?>neV
%YbBg7:BVnFM/g)fi1*3q"Q.j!E/s3tNKD:7>NHEA+N,3?B!<RPqrWb?"&hDnoE)'keS\A^9OAVD!iLohS&I4E1#!jj#U&$YDo*uA
%k"Im>8OJnF#TOsFX]9C4*2$NuIn1P%??>c!&]qsBXrl^:D6<S<4C_#Zi97@_Sd`kS(4RGm1tP])`*RSp*sXLFdfMm59/F3kP9<^g
%2C(<02B<j"FDE99X%2Dh5h[hD__@lUXFs!tb$>fITg^tR2^KA5WodeFRf4;WUpVmCC:\)G!"R+e`5OLuHpf23@U9%S9/R@3$/Z)R
%0CV#K<\4qNM96bhTLfZN;fUN\UEg'>=a.8g07i\5jB=u*&JVIdneTOsI9t[!O1:Z\Z&+kP?#Hq43MSZZI(o.'&$No\b[D??m(l+[
%B*%[hjU<&FNAV/UgU#r`H.YCkI[A-l)ol[!bo]-:D2^5ik*SoJn<j$fm@TRTp/s;%`,'M<`<u`,*ued?D?*2.QBc]`!14^;:kAnT
%B5W*`rOH,6%ra@i]'/0<HUKpOh;8XL$\FOr^SddB"7=ZFS!-5TQ++dD];SiQdIa,d("so=&?S^W+`8hCF4N<]'-Z(C?&6V@]__r%
%-RJHN@T4C8(:hk<>s(dO$99`@_/]7Bjm'7Enf\cl%H\1g,e4KB55bEUK=<*d[(EA-JY+52R>?8@bU-MBmXd"8_i%NRKD[F^@BdkE
%(<>T8PCR-`m%qeh@^I^;:<1omOEf:!H6G$Bc1D?15tO^j^1tB@a]oMF*G1kpS'qKS)k$%]Z/tda$f^]XA[4Nmd;.CCdLZmU=;l'Z
%c-jQ.=\EOl/TGd";UYYV&:]0+*=XZH1'JlsU<pbI]-6Z.Zsmkh(_Ms(>r4*pJ?70+$)saGm,TcBG-1`:rFs[Ca'aJfGaEm'lJ[Gc
%>B7s&hr_>+L>C&C4mR#=E4jld3>#2M9/\aTNQ9ZqK0g2q?M(B[FmhYLL_WrJ7@nf'"cdVE,Yod4]473n?p8;?p<TU\pl@h:fe=GV
%Cl[jA@O3+f0^Y^(SVM[)5[e!RQ=/jZMU_b:U?To=$'u.a3[JZTlF<O!mFW?[7E'E+C?'D]!;Cpl;[s^J6uT7A`;g`J.Ba?fE%?72
%SC7$L:JZ2P\@S8+r9k2P+TQ6/n+Ch'"sB(l<>ABA?YQTiH)4_,^aNQZ_Pl+(:m@1%Mbs]b6>[`Jp%bOMp*`=LR7+i]*bKKikYV2u
%!+7.55,&WA7^E7eka%a0M4B:R/Y&KuLaKE7'JrC/1@k9Q,!JDN]0r:2F0o/6W[0oF.^UG?d$W#,S2j<BC3<W<m\Q:8cZ)?$KfjI:
%O)b8aS4Wr:^#-&2R&&b:.h#&BQX9B-<Cj97.mD*!2nIrkZEXm$XRPKh(9s2mO9b;XJkWA*N1PC`dhSbt!DMa%jV216?m\Oi=2_b?
%9Brbb/IV5Q-2sVtSYFaP1Z(pW#<t0PRDI*o'.o+Ur:rsgE^i?A=qpLdF?hIX??KOICkIXd&Io6PUa,!PqWT+4.]5ukMWk7DD)[Vp
%0qsoT91s6mDVj$FaBm2nq]'6Ga&2E-1EH(L#68GFFg0WWi*,e2[HjV^1(fR1%Q[3J'Rd3\>C`0AC_9$r+MjJ+WJu+U.NB,V?7NgY
%^dtnc^0&c<<`R:)h"S>_;ZD>FOD2H`emb-4)_6ca,$KA5$@YB0gMDlm3[M#K!_>Vl$u2[oVG)eLl*mV+k_80.pn3r&d^m*@?[[D'
%8lbOLY?L2k]Ns,*7%_RQX8sU<iZ$-kN_F+t_pNS3PfRC*dY-$#b4&_W""16Mo1)4(m1Uf&#%&<\9X>Codn'1JABhR[Cl'!]ZbqRK
%h\Xlh^-/J_L?;o2rR8n30qIJ.2k9GKk"u(7H08kPe>\JIXOCheQ@"R=9NHqbMgOdA=5$=W:crEc,2:EW=i)rIA[f$"3Iq$T2.Gu]
%=p[i$b1RTc::#AuA+i;h\>f9df9b.!LceQuD+]K!14+bp'MO/h1c(;JK,'lm?%r\1@E0Lj]Sc4'C\O$ITMh*>#Vso3`jDm:7P0SE
%rF^fT`^;Lt=Ms*Xn!bk(:W5#7L+#H5/./XJP`*Utn!.S_HRSbp=#QMajPr8uf.FP=1SXf?R$HqW^a4H9dS_ULq#79si\W$+V@>=C
%g@(S;eP]q+lC`*-1bNB4Lb,;C"Z4ReBM%,%,/@VfL+_I=M4UC6o&e/prKLLFI[N-Dho]D)\l)NT]]nkVSl2C_T:uf'A20BhBgh,^
%RkAC8I&"dMrC2NNio>Qi=gno"6('.HU'B8&B!kMYU'.\[7l%GLS<11;27>QB+R5c@1+`<@2#I6:ibG6fV>>dEFo+SaSi5$bAgu*7
%AC;ki=5fbE.>np%BOOX<frBj"N3K^sZ@\1;e:'$B=n^j5)X'D8oH&>?bM]9,&HOAqqU@<@L.Oea[G4'uh6ZhU&t^bt1dJ%A0S4R/
%jcsddg>VQMaq2ut:iI`nc]6l,)P5>s2@hV/'Yu&5FOEO'q9?_XYN>\$FD^=Ia/PM&AnHi*Stjr6]qbqi$3$Z.*"(FYQ0Br&%I_a[
%]a<GZk)_e`(9=Jb"dMO;^kT5;lu_$;@@1I.m8PQ+#-bNS`6bEUj<3GT)*L[b`DZ8BnM_nj3LJDok@BjE?rX.X#!S0VU!!coLIU@Y
%\U'oTRF>P1Pu2pD)W-c().EZe;Z6IP0jo5VT-ZI;bYUr,AZFb=nq5X9B"0-q?nG;s/e%p"ag59-NRFRL_+t?gC5rZbjMjqk=7+j:
%>Z"mU,.:WM5*?s>Z]B2!,p&/9^S>$Z-M[L*e992A0Q'>>:"0ZgWiA`([%Y;g2?8n;Bu[J`'7#I>hhLFb$-s=(2GMlh)G4nBRP%;m
%6:H^_2crV-mqdf9LT'.JA-`oAkcAOD4=*sjOC+PG"(0DW<;I/TP&=sPmRI9%.aj&opa!F%Qc\Yc&>Fkn]/)aejS%hW-HO8GHA'P2
%!2<a>2j&a$[JjaGVFs74_aCcp;TSEFTpOsNX[mK"o7st_rU_FM>/PbJ$"3-UI[%MPGZi;2P+(5A;,X%(D2%-Q7\euqNHTOf=\K4s
%6P[Y%'c=#jIC*gSIXZ>cLq1[tVQr8aoV!T$_OU\$,pJ%)+VXGj36439+M-1Ig^3O#/b!_h'6IpBC/67YQT6T%6kU0=9\%>$qpRR`
%HCW3?Y\+aN:(.(*>L>qI`,ZG<.RKT/#>lCB.T.bD0!LuW]b..t2X_gQ<>>lQ6e:,b.LfgqKS6GoDJ9A_>fmm!L^&+Q<L[&.$Osu8
%:b#OT&56I#e]iRs[3Dg?NVpHB%%9]7%[in)&WkiS]\?%Pom0&0(?:\%qd"FE#<S<])1tfP!g]UQ3*?PNOGSe7iL5'8IJN8%'t>?'
%InAS2jB18F,BhH@@u*3"HOje5.trB"h*3/Fk:J#P&MiS-Z:d'g=@"oZLSQ(JE$V5NTsM*U)(TB,VS'n:8W+N&e@9n!C".RBVUK\P
%o1ifnX.B5XRHo8*j@JF2Ah4rb"\6Or0lJO>*gmB2'Xji;O4&$F[OT8T_uTmC0M\L&L\Pb*9NA+2Sd@@Xj*'hcdcF1,mJK/6I<K8'
%U,iV)_W=RIKH1KC(;,#l/E][J23CHlgt#(9YH%nCIp$I3e;eTnW+h5\o:P3].5n;n01p=hH[U5OK\Yj>e,J38TC4T)FH>K_RW&eF
%QfVHo]'#^+,gj/"0ZIJO5'@XfrQP4t]tYNP.A`>U:u:;eRfC+rpL8_I3iI7Or_:O(fNQ&<8u^Tg+cLoMN$n1pMM'OJV.1HqqE`np
%<h_GsF(5t9VekXOCDl6E\9Bf@(\-.0Lp.fVULp,$Xa@L$8HT@kb/dbS501&r/A#'H+`lj00=$n@2/g'!cj1<:BgaccLAU0tFOHY<
%'_0Np7BQ?J:!J92IOWHb1P<mG-&?DTl852_?e[)b3PuQjFY_0n(,j.)\epmJF>5V%5Du4LYT\au=f!plq<'hp*Ii1lo5nDNr>O<C
%`3.majDpdDk;-F?`"2X-M"(:ti1(&r^$\sVq$79;+5cs33YH4<T65-PcN.!i/RM$&,h;ZpJ0mV'H<l)W]PV(ue,/9:fdd17M"#9W
%aTC;(LZ3^aZ1e&/6Sn6n/a>XaECmjT(n-5A`R$GJ(IQZa64Q_*E86%G4HIja>-P53'$Go2AejN-hEo5h?uNEl8VFI$(3eMB=u%f;
%[3Rg".$^'u1;1!7?$m+GM<[KfJ\gnXj)f8N@O/;)ouSDT7H<+N_W7)M["o=CP#g=I>11\90eI)Y,Glc(Gf6t"@Z"k[aVN?gH_'*u
%MBV&JQ9<rb%g",u8<(7dfgHX#.@T8E>ojSuq[Krlq]htKeq\BQ[rjBMSL'ijaSL/62p;`75qV"A#M$?0CWac*Nj,OtV:X\nGeS8H
%Lk*TQ=#iTIoM*!ef*/Z6dY`3cMPkc#%lMcH?p+/#,G6;?bMIBSL%7c#B@kc:#TI!A=X6>rQ*rLgb68QSO%TRN`dK-eKtE3i>icSQ
%PDTuE46M\,lZ*-dn1b@P&`MI,eq3XhD2'nW$Ng5!+rN\egOt%ZrMhEY:c7_%OX1iTMeG+2h%7,SHXs:+]#ZiO$>:q[;+]%?1bDs:
%+][ONhJ-o:E>=3YTr%&.@!<AG[gCijnB.iZ3,d[mN6i7k\$k8A?AGeg9CEl"A<8D44-jZc2eS'0**1u0Z5R"V3E&F3<dLend(2[]
%csC,5XqIOCC@uVCM6?E"&kB!X_&G6-?]o7G42&"e<,+I.ou_]CY<Ms`rLqS%k?(5@SFK`*lXm"/d"Qa)Z'?TpK'CFn_Q'$b#a(qM
%DL2CX(n/F#"n&m'd%4h66&*^nR*BoVdh#S:b+U/7hS%\Bo%YOL>U[^ugg0Xto6k"or/lUsY4f8;L/s)rkmm\\+&%Lkd@>t4<E;dg
%*&N2_hrHS@KEu4o2sWqj=?&bW.l2bTTXe$,Drr(E.?]`Ts1YL/oHB[2>4?6lZV2@">G"jj:IA7QKk?-7'H$92-Lm-;.K%Vt4u'qW
%0n_clYm<a%)@Ug=edFSUpEB#VhTb0pSruQb>ITjK$<$M3:ILP:/N=k1^8>a3DO>]#Y!J0hFum[ER29*k)An$Eb?p8]:OupBkMq=E
%ZD51H')3#E0/[Lj8oKXk0X,fT&9KS-,GEAso7imNI/b=^XTN`JXf"[<7AbE`7=Wt[C?giM"H/:.RUL1DO^HLS89!;b$7s#f,99>2
%7%Q:+ge,RWjogT^%D!3Oe*/bT:U#'^0k0rLYQ-iUROuEd5Te^GF^]iRcU"?g.;)a.nr[CDl(2C9ISDb^*".^UB"XXD!P4"NKi3fm
%p7!C:PM)P.mIfg%K+a"ck?9<O>m/k/LUuck<]gLIXV\*=Lp-6/9FEX_:r>;V\d[amqYoFnM8:P%8B`RM40\d@.HhZS0UGre-\D=1
%)Fps""$I&AYZFrOf!)`Mjs;#&4B$u?qnnLo>e!EY*NCB-=UST=oD98R%/W6/=so4H`2)[qUiB)CDLZnOdi!$GZ]%6<;+?&(;<qg2
%H*Xt]Iq+[b2A,Ne36435WRl*KU`g_\OVi#H7Uf]G2\KnFgjqL'6P):-(A9bL#**1cl);keB<kQ!.U['Nd;`,;"YhX=WMQ#Me^?iM
%OtAHFZRt6ZK.mLqD'<E$%E0HQ/MN7:#rZ56(7;@`#a&qc<[TDpBdH,$9hXo3C"f.G0hm!4MJ:f;:eWZ".AeKG'[tj</#IRt=Y\1=
%*VhO2@]jOD2+W$r\koA?:MC-EhbnO<*dT!4FPAGk"1\7$-%c8(U0\_]^jb0==p1<1`cIq>0?KK/_k#2aWh*BNT"oV`OPg/I\A^T1
%IP7!Ro;;JhN-pP"MnYksFj"!FC^[oL+jjH$7?S$&h;SM[,"ofOFq<u&E09D/\EF4%2%V+\\/6o5CM;7\EA=Uu:<U.l"><,6FO:l-
%Kk>XC+]oNN*\T)]hkeE'^c"#>To+4*ciY!/nh$#D&.'/@Qnp?-rCFK?FO.M5k=i"7S-oaMlPVj+/hf:TIX9Fr85F;0j)&FAHH'Yk
%]"fe=P9$E4@K!],]"lUYo."BYa=cbq+'BCo]-H_&K<t(mJttK$T#OKX6NkQrah^En&6t3@_a\bcXgE(%aPI8Xk0+r6/pG;A;OSW>
%8@%XmcQ3O>EAuT?,kf<a#190\Jj3jVif>I46sKBM3S%mI3Q4%?el/[AZppK"=!4i)k"ed[*.4K4iUfAh41J3*4e:.X@qE?cKunUH
%LWO_)`%q#[5f_XXCl)e=S7]ACNj>%1QbJM7^j$0%Y_[pFjdc@$l03ZA70ArtI(?5qO2mFdU&h,3mh=ncG:t!n+i^tEXrPBN8+:t4
%Ut9o7&$HK%-FT#NdQ1_"p\LWIH25p]f-&rPKOIOYigQu20C5h"$QsbH(I<6'pFc`R$/4V&L.0B-#8K'Oi.#5A1fM[*ionj4iBAD,
%DLbEaMXUZkK'GDq!*dr0&C!"'I\IL4E/2A--EI"iG(Q*,bONa`3P>K2YS6e&9iMCA1*$huj<k5[[ntW5-aU<j&-jHmo3j]$j<pqY
%i$W4E#=D)C%>L#m2U]OTB8jiaRf-OK5TIi#?8r:d&asphkNOeMH2V.k<&7tP#mBCT/6UZp]i8la)CF"u'<6uq;4I`-K]P&Cr<Npl
%4NV1=m(`,R#QWO5(lkHtPaj_U6Ze'I(^f741`.Aj'G+b]D-%5,c3&;U0<*Q2-o$=+T;9jq5=r0gIZd_S?\:iYgs18f:F*l2XM_\e
%*K$mEar_\80&YEK_b("Ee5=!;k2je)K;/SJ!//L:=7"p^T`M$Q*U7+&7d-.P_P)[\`Q9$6>0,'.du(aU*1M"_b\8:h]hVcQMYKbb
%V*1#J_9]g+.3OTmRgmeR_o@e8ji3+`!nhIRmS[fB3u=cUF?^;J8\3,SA4a8eXYGYuAA_.$-)mk"S^_:kW,hsTcI-BYn&;A[732gJ
%h"58pCc?0=M+8YBZc(5.b*H.Zf]+_AT7MX=o9+EBF'p%U[N278L7p=rbUnul%?>5^YA+&(V<?G2U!ckfhSXTi!td"S!.bE@M:l^/
%k^nb'G24F%HpU"78tlPXJRQ:ZPG',<B>+CpFR]L@1Ou2mbk*ls>"Ns#(,?$+`(r]D%"8i;j2k+ae4^8sK[Os-%UpET6k4qa@W>j*
%+[_kA,m<YS;.=!S94A?j$Pi5]C?kA*\tl#gS2WK.Ncb5*2$l/Q9$G+K+Q:TjS5]&(B3spZPc43F9q^-F`X9t,]Z`U)\7>N3mi>+s
%0h`"pQ,o/]KYj/P8Z8MCT-Rl0!XF!>>P9!5,XuaWP8J.G-S_`2-a<`n/I81;nWPX;"@!2k_KcZ]jFqnBU%/lXHhlbM5=reGT*5*l
%9+jD;P5&9[9A[o5jpGqoJU9D?m9/EXOTu@W@q$U;;'SL5:sbYW]X"Wmi'smtW,"ca_kNl@LU"sj45\Qf#)!qR95q_Y!@,nTR8<s'
%]/!_Q$gUM:jS!mX*KC/mqHP'jE=?5nVR!#F+qgcCl:SYr&^?=NGf]E[BH"*<`_mbMAe]7b&D'4WC;;!qK4l<^&D'_;NY)EI`H<>m
%DWB`fI#?%S+g)3`d^H"=7n.80&/Wr0Y52aBEP:1pk<_3Z2V*#?n%hl+A[++8iBYB%k.%D+5d<Uj?BrGoYqn+e@\7`E`<O]uq>lI*
%T@/&,#:MLol6Q^0C^aC9YlT[jR_=Xb,^-d9iWR1&OWgtkr6N']3T2,I^27\HM#@bJCXlg]5f<lSY1S;]%D()f%Rb+EDfnq],'G;F
%7-p+TLtEhF(0*%RC`.'HB$YWkln/M4C"f%B@e\'(>6dK+^H@GAd.?2^<OZe34"a<s9BH]aWu@#K@I=\/)NT5%F2q:OVhOu9Lfr7k
%aAe'rYG"4Z+WT3Z)K0<OBjr;]N,+N_rF`eFFc/skH0b\UX2DV<QB[=;!)3-=;RB+?N7puV-GBL8pZepjZien!N=a[J?=.&bEX1OF
%8+oltb'>kh!0asbV#ku9oXn]5FgKlPdBkWkPFDW7?/[gjEtd>UeVkM*9o7&SjW8*R3f#kITB%s`d:q5o0E?6*S]6[,XP5dH:?CE)
%3rSjmqYTc[8).M]'uescZ4aMgRe[&JXIZ:tJVi1``(W2,+L,MX7Q[kfT2"Ie4<Umjd,$WGo74bSoM]0ioMAZJ`#=<\221-PYf&%S
%,c(QqNr<Df5qH1+0,BYt)-hF-C&mA0Y8<1p$n@mCYnTV$^W!I1be06<=?sO>Mai%)6X!4F:fpW!Ts2H@%XfW-S+Mu5<X@Zh!f+Ep
%.ViOjVU&Lj5GLNU3$"E3EBYGI8\O%M-D6#-!rhtG^2cC&3G:^P`.2rKrnR?d5eUnr;?)*W+lS_c@1fcDT9.um`9`c4$NTbIm%'p9
%GZ@j2m-b8haR)u9!O9?g/=Dlc^e%k[[_4.AB`qRI8YZ`K,u)PtQF$_h&jS]t*kZ%k91-Z/[2VqL_+IpK^Z-(nCMo4HTrrn]=525i
%9[)coU*"p<ON9"bnrS)=^`,=(0Vp+H&SAa74R@f;M"Z((4D[k<)P^OG%i`ZG<V6`>"3Lrq)7#e/OLp6X]!ropc<.!S+^1#*fH&rU
%Zma0X$>Dk@=$LKKA7CkS&+W8.-\:7C"oCPl'2:(o$N4$T&MKD,!R(dIkAqf[Z=ZB^/MIP?$>c$kZX-e@)++0UhTC`GLhgV=#>ocK
%k#<@#(KT"r@mtJ9KI@$3R2UsLbs_cd!f1kK`\e]H3=501Ygb3fK/HYs)tQ63_KNKs?d9-YhR1o0p@W(9MF6!8W!MR`_h)r5>1/=m
%s/*PsnmSD\#`>Yq+$IH_99lWE#&uJX#%'N+BmYO6J9Ym1.^k_W^IT6a9?Smn?r&_M_6>%!\ThOW-[3h/<175/!`/[$dZe^8MLlB*
%kiEQ5nGTr"#H:[7K2m^-";#WPWthQ1i:Me:2<B#-ZWN2d2i3^cW?6\?DSP(t.]N%u[03?CMZK\MT.H:BV2I$T7-E;//0_[C5<Q>c
%fc"2Kj8%BA[+gK7^)#uY7XQ/mV8s^P:0luD&LpuTV/%[502cZ8Wj<O:7f]Va/MU[EX'mIQ/bA>&J$fnZ70-N`r!HVgl=a7uENZ@9
%:0*qe+9u`c8:%)MERMF15()D:Pq2p'gFI&#Gmf(QP+nV*'e)P`ZOS&O4!dK[%bC._/:Nlm%=h1[Qi!Mr2MVSaWQb0MU@DgL3e8H"
%dETM"Y0-M73U"+(';2\\KER/)18<=nBW;KR&kDf/'3Ap_I<J>J3=#$n[Gb\edTBB#A[2Qdl?2+cjbI3A9Q*Y<a;]`^N+^A7Y_^kU
%Yd[7]KS2Ou2?qfh(6ekT\>'hg0q/)j6sZ!i>(+Vocc^BUNra?RlFG6giWe4UqNLuXV%kV1f"ge/<`n4I`0e)]0OS"*P%1I5H8FX+
%fG?R?ME)b?GS&?5K34m[o;X/K,M4XO^b*1H!'&]4V7b,'eX'G1O=Tt+$&@MnYU-C$r"2u0#o+^I$g+hS7KD=L!KYWcm7lBig.mge
%DuID6aUPu!OInt/`CjG#M*o#']gu](,9Tjc1p$#s%)cs_b&ih?"H*@#hRm3@,YF)7Ek^Io(o2fJZ3.-@.:Xr(J-e01\OsBAo&qP]
%/3M8TG]a,[r1[aB%55;?[BoH1.2'buqL!g"paU$G[$77`PR#RD(X(6L&NoFt!1p=4#LGF[da>5;oUB9bkgQ/"jKm_9B\1[.q&6a)
%'0;_&A;'VUc?C<Y@Cr'36-p+p!Ej#%O[T`H`BL0@ZoGM3b'85<8:bMj0n-1b-W\[3%OgIn8G")dI^=?gO:0;1X-n'10CpCcL695a
%4VnIP`eI;kF&WZ6F/F^b2fgYu]s%Saq9i_SPm!lH#a5.Ti+14F8_U5;rS89rMp@AN't#1[(b$pf[W0UVp:A@8Zel;n=Dg/Ij%A_+
%P_)JqEXJ@JcP7I:>*Vb]PBog_<k)00IO2EbJ0<1=GmA*R(!UL"$59as04d's!`c^k@ThC#@OPJ[fR1oC0EPl#7MT]MSk9jb083KA
%.uOm16A$&^\K+fd(n9%`lMqNnZP''afI69)*Wj#k?%Rkgj+T`2h/KK\BK#gl##4uZq99>dbW@MJ-ZFZQ@g<,LSa%HIR@3kCTJ3to
%b'`WQ`njKAn"<>fU"Pmn.d_Ed]#%NlWO](+`pRK:MX3J+i@/uUq!I@e9+U'O>*e7>\CoM4irHu61?Urff>i4\*C-f3<_J=H<=>_.
%O!J6<S(!sm72-P7/Tt2.33=IeZK!KlVcJ.bdPd@d%`i3;[aO4TKU5IjE_b*&i05'P*keK'a[B9>.W^aRCrD7:@s/edU>MK)Cptti
%lM!#&E*V39Cg?Qg.H^qMrg@o%"s&*shR"CHKPGGsiht6G/]#"p),E]7?ur9>pW/uNit52&(n[*/nJ\P@DqKp%Q9%E3%-)le\#[Eb
%Uk,tt?,o.&<d[(%gnd9sq.AQ9A";fWr;b3>"\g4WVqgg2LA(s?Z8HNS'+9c*2Vs7pqZhDD[aqMN9c6:Zq/a!4L?iYSVr^EP)5f+'
%gZboK(4pCHrDEg!k,.'Z>HpZ5i)6noL6ou74mP#@@]NSj(9.fTL!5m`da(tKPr&uH"+VP$r@pie]s_"`F?5(TaLZ<^XjD;bS1E)d
%($SQ]Fh'\^\HIS%mDYfRJfO_XC2??C/me>tV4LD)\)HaS/;ptH:`^C77"r"X48MoIJKZjVo[2ZC^Ie#VLjmr2OiDq8ZMPE7chD68
%8gE^A7rZaf]M(Cmnn)R-g8$M3/1GfD+#2gQnO<M/`/s7NF[XN<$6l0R?Gl97%rLqG5gF%G?sBd(Qg;B#]%.dl7sT+GAAqYN3)ZKo
%>.1a9]B34=Cgr[l6Q$'TMGYD:.-QWPEb/4+lH9]LoH^;P#I1.l*[,.<BHBE>7e:;!)9l*[0=.fYEh%"^=%9HJ;k8cJN+s7%np7o5
%^(hP]0MUtM4-M:6=g(6*iAQ9LE<H=*[gJIn(k9U\&BG:b-Ff$LZd]RSYJ4*4`MLtK!?thUY?3f-0-Qco=cKUOQVkg892IUfS+I#R
%LkgKG!<X7T-&B)?!?u#%Z4I'5/BeJX+TfU@--[i9+2jP_5q]/(^<5t*aep[o+hqP<"\e`u-^/6*e3Mm?Y9.\Z0AG+5dcI9XjNj$I
%.$,cg(D-XNH<W'?WY07$jobZOof?iL%Mb=K-sm3rWA@7&TlkV$%8n9uP4Zf4^g;'!61Y.Kf?fD;%]kJRBl&Y)IO^Shcp`B\,*eeE
%4od)dcs+7u4fkBR9&'t*0$3Kld7^BTKt,P`f?Ln5]ih$aJC-6$aQi0X!q8;Jh0CNYk+68`blA3Oahai?M\V$>L]a"&2d;KVq[:0#
%iY(n\-K[)I5Y-h>1duU[/F+F=oP5hWe<53Dr%`^"@'44F_26Wo?K[hR!KF$_==a?A?3]Jtg?=Q0"Qa7hq1t^M*K>DnRS^*2:aP]`
%-C*u$IC9jIbrE<<L9?fJ3^1;"5$uGr`sQaZfjFF0Mhj)Ok9\Ma4Z<]%YXng;)FER0/kFs9HQ8a`BXcUJ1)]-uVG@GZ-R--D!@WF]
%$VPcH-<K<n\GVVic/T6dk9ei:ZeqX:4B_5ZJAs269h[qed]!Tq1*qahZ6jo&l$1-;'u+&IEgELZeN<+RC(,cLTkG#cN(JTY`1ksd
%*.h5e:ee8MM!qd@\6f#Z3=4k9ji`ua.^@3+H&4+5XYdb?aeBIGS0+b)9Fk,Mq_R9'L@H\sE#P`cYfWm[dn9(nYJ=QqM^t![2N;$,
%XDa816e+#]l;7"Z0m]+.4lQ*9emlN$ME@'_f8..(%>?4.<;/F8**_HI?GA+2c?M&X!bts^Jsb$Y%Z[U&c5u(>e4gi5`Ji*b+QdrU
%c+QPTCiN#M[Vr9.f"47CVl.313+s?YaoFYH+\TTNReKh1#_!goe<?(Ucm?]mAsTC]daELCo2i.Jpfjo`ALr6I@9;$l.>=:hH!b^%
%@J*rK2T2nIH*q<Fq8bfLgfe<5TPb8bh*gf+D7M<Sr]VOTbb>*s;QdD<dST`2;`m=i-!2TlnGp*q]2R]kPEiDM?$0,ddK:qS<@c>9
%.`0(TCm+]5F>_A;Q,fd9f@FX/ql8Qa7oPfPAG_KMAKm2".PiNVdnMKbViNcCe?7TaGMZ0%4u`s85,qtHlLl\K8<?X=qNV'VWog\G
%3Z_7XYqiD"OXT^&d&-;TY;?o7@l)\O;^i.DSto1m#R6Os;:ui8'LbY0fqqWF?_lE40M#D.$IErJY)_fMMh>4([0b3()Z>`G*iJ:+
%8bhL_?F/'QafMXg?G1E7AVI[:.kVp^4Rkf]GUcG]p28j$1S#o5!4-iY&54"H,fj#g>3WA.'XVB</L5A<d'?n_CP\6d`2gk;I^nu6
%NfoZ[Qrom8cPJVR*u4YH;/Ink%t8<ELJ[Bb&f:Dor&Ppl3AfZ!1a*_b/Z)NSJi%DpdtA4+g%M-CdX=#*K@OQZ,P]iYQ0UGSQW4B@
%NXphK`6T445F:(0Q"Y/@EeBT$#4^L.6sk7bNc#H`@V$s9#foUI"XD%!6\gYX6!/J>"/G,LA%B6d>$(?Q@L:(%?iU0u[8$-2>?19k
%c7NBAPOm`nplUG7esh@SOi@^(pF#2mMkiOYMqJ`;p4NL9MK>2!2RK,6at1*8VJa!:gJ%hen%_1@7>khIVr#U1dUg&S6PkXZ'K4iG
%Nb0;Oj&UuW.`29:W<O,%IgbC]o<lrFHn]LR<J@iZ=d9%]gKe$^B(nFS4^'u&eF0^W'Y141j`;GTE0b!Ad*u/>8Oboe%_$RU&il-J
%cBH2qXfcH@fOP/nLEk&+<bT9L.1FTCh4".W9q+MIM%],=O6p:5Rp%CMadOh-ngWrZ*N4H,Q""N?gL=3?Olf>aL)5KLaAsIQDM9C$
%+p)LX:lkR>\3D9n%hho[jANdu02eK?$c!n'EG-daVkH!nA8hEqOLM+"It&VGXZu]I@F8G>+fRiBRYNm^nhN?3NHq<uCPnf,q:b5o
%%TqpY'?uhb_dRj59rF4\28*k8c8'Y\(^K!Z_4Ump@sb!R@jFqk'ZB[pq8cP&2UT_]BYPotX@?7eD'4%=.tb:''+D\99bDJF*W&lH
%Q9@[2l2kcR3L66B3BX(L4=3u%ZS6:-ppTmc^?qfa"5!2!bdh]51+opKLkYu(+YTeVpb44Fm'hi[=q+=Ug>oj1\NiuGMLrqA[f(!N
%ST>e4b=aZujg(fsnNf1e=W1Nk&LL].!]l),2S&.kBVqLCc$mE*+=`ifJqHM%>go(sigO<VDDIBLE(/?M'jo'+Xf]S$*42qp$/*1*
%MoGF@L>44`5dP4KLGWHK#@IeoSVh'_#3iDfZ$X&BGoC)('-H&m)jel=q0!^p2Kk-4*]jmg3N0.L?#])2$kc33GtflVcXeb?TBfq,
%6JB6P>I-/A$E=lUdhW*;W4K.]/hbJ-k?2:3OWJ>.N^?gi2%^P"@L\2n>!3in&U6Dgl;Lk_2GF+Z(,;0@?Q/E`X0*eW*ORXQ1d5#.
%mIrP)Odk33$*jLSeKO=9D[iG^Zkr,fMRUA0Q-q$k.c]rYbuJ&R>,q:=.@MZnTr(<R02ceqGSPN2QMVlf-El,38>:%Cpg8`k<lk+k
%M,amqd4-Ko11`pJXkC<8Ju.j#rG)&BG`0"7:T$Epqj1,R^i&MIDUu>"CAm!#ZO4l[g[;q?keW'Q34=!6Em%ji8Ril@N9OfbLW003
%\>JYp%o$id2oPDp_X!R=F,`ed^&?S2&:^nh'*+*q'9.,b`J('"5g]"fh(qN.A-:`bIZgUphb]IRAS7MZaC<9m&B'Lj(E6Crl-R:#
%9pF-%@-jQ"X\%^afcW[MP9?"g3Rm]rjWd@keNG_843K_mLJsRXl/,fRZg!*3'O8-*Sj^U'cGUGL=X2@SqB/Z:a@:RqQ524cUHXLQ
%$E=R4G>g.0%GXk'1:_+qibkG+g+6bA)d;,#Q%`T8%%@E,1#_7,-uD6\4_X\5`,q7a57Q=WoL/,r[Fk*J&GSr`O27R_TWO=TH[&7[
%s.(AsZc0AahJUgZ#YQbDGSp,4J@dj0aj$h==R_YoT*_(oD8_L+`WLc%4V>tUqEhjO9_pduY<h6%Dl6$2MC0%eRM@9?_nd&$Q%DYI
%2:m^,AmJA'CYpEArf2O-"#hf9Maq#'p<!HW#>qcoY8KKb^=@V)6plI4>/3bZF!Y`i'\7ArSOFkNAZsWW$f*at(02Y4_j2(SMOpNu
%,D#Kb-b^qe-5JDccka0Z-ijZhK9te"N97YkR=1Oo<GE"Y'F4o$Xk#Mjq9aV@fj:GbKrAAoZ3X=dd>:af14$GJY0Iu<cZLEo8T?a:
%ZHc_&a;=/N3=gs`LM(cc@c!X=U;RY8SAccN<ruH+$X;%uHj\8b91'+-Z_%X=WoIP[BASDraGY*NH,HNB/uG[/"(qMA\!W$r'ZDAj
%r<UW`^R:AQ?ZqYLCU+SZ+O@k1Y\MSkK:3::R^a7#O4#Uq>RrHOO_O[`eQHc92'&cNPIm@'_`>IBIo.fC+LOH80'0Ho&1.12<1&&n
%fd-*".@lAG?q*'.^1,@JhZnL^7VPEjCb`&6>OKHaWJqZX<=SS:\op6J1I/GA`H>HVPBGEb0<PSl\d9gHdsa"n`g<GT2Bf1AKYX(H
%R2-ZR-MQgQmnKqt>DM"nQ(LPE4fUEJHFUdg*@aOt5%3EX_@"<`O;uJWQm_Hb-X6Var(3PPKIBt4b#g,B>%Pds@!EM^\shT\73!Y:
%Q7f@SW#D1:hRVEkh/6W,PaF+%Q,`=,[,.3M@^/8[X:O?eAYtpbYOkPd/*/.j,=AG_"<Y059/=!"A_Q,im3C1LMB=_X*mt<#:m]@A
%Z!=1E-t9sT]%q8@23oVJl)A\po0lKIVq)aC"*%)LK$O*cieX33ECJ'lQ8??2%j277H*f1@jse!hg:s^\f5(K#!_qd46RF+&arAr"
%6(d$!.2S^>>OVG#p/&]0ch5HS;"Dl2,=bZ51ta826P2?Hi%]aCR<Oeu>N(b`0kY`HS7e4L;&lQt:&:LkBQ&Wi^)IKFN!BRZLG,jk
%2$.c'B>j%#94)i\%n,^0"iL92//dTDRUhduj.]tR2:"5>;q?'qn&c:"RgF3%:BRju@uOM#Pice_=To=oooK6)EG;=Ro6\(-&atkG
%YZ*mar;K;YY*W<@j)YKp<o7*i%Cub^kr8u1%63@lDA3aRaN%T_\M-&),;!AXI&+aTOH6b'8'"3S`JF>Gm>d9hK@\W._2*W&gndMg
%V!fB;+).egnW@GFJIH5n%LZBDRqPtogp!FJrT['.3as^\F5(4N87<$kDJ"G>?j7CWQm+`02JSoVBLB!?_@X%@Xnhj[)MVnaOo!?K
%2EXh7AbP]1mFN$W.B:#d,K+5>38P[u<i@8M"Lda?;VTC0_Z?eZ?!)L(`@_cjVa5TBRDqY,245kg$`-4;;6_,*EiSKD4ZhusdY/=#
%.M4:>(g?I>>sa>$rUNhu[1nfBqR$bW7,juU]a-TlG[4Y>EO&OM9R*#>!%DV1EZ[u'<h-e6$8,dpWXV.)1Sn%faqq&B==]Y775^4K
%9aeuo>1H89#()uYDO.J,Y#;:%oCoZVl7U\dT:VM?%YDGp'+2@;'R&*P8_?Z.cGB%U'Kloh'bEUE;5:Vb2@48X12Onm?hAi#==57Q
%`#2ALh/($(/%DJ&ba,6%`?9>9VU1te3NMG,:6oNa:,P."DqM_\:?o%q3pcchAWgCA-kKgC`o0iOIumJ+)\#/8op)RhAKDYGOW_B^
%[(nRuXf%o]6%p,]%4gi:169fA=PKjS3t=0MGqFBYBK^-tec\^ICGLB>CJossc&;+(hYV:lG6Gp"23\Y,Xo3X@,Q(/dKkAi6kuJ5a
%Mq!`WUKY[`oSK7oTX!!aSAYQDdW,>RaP<3E')0hU>&T3HOHZ*lA#b:r7F4+01<">!>]Q79Tt3<@`,5]_RQitJL[pp9fmR1hDCur:
%N)=6#!dJb9Jps&5N_jh&K/5fPpJXJ(R2Ut2kdctQ][JC]Qs^-$Y!+$BIo(T4$JCU^_i,aj2%&Z:)Z[k@</)/=J+;NYKiJEk_5;[7
%F;-i2lMYu*?u\\)>'2WD(BXD_,9)a4BWB"<R;$ob6uDpofD=jqj5Q)!4dn#Q"I\[L"Mh;rRa;U;"G-c+0g<Ep#l7ho2B,3j*>pM2
%LlnbCLl@40S<=/bWaFXR_aYq4OpFn:b)/(=*!3,&V!<<f&:eG=[#m]u24c^1H58dj+*e!Wm[42#l@"IV!\)]6k-UXL+JgV>=d&'9
%10HQLR>?U'8M!QV0jPk!<ineF@nNsN^pe`"9gcH;9.pV%&k"=4)iDR")t@F9X_>`b_r6]kIQ/=q:rD7Rk4:@gF:&]^d2I,IedpNS
%2*&+_b]-c^h-gsGKnYQ)G_-iMmq.mF@U!RRk_rRR7_-53iphG)2t$2kf%PocW=qUP_G._sIQ.(uBFEmle5N?2Z?9Zi>:h@Mf05Hl
%&37N[L*";*kodPB.f'R/6Q3c!ECck$a!'RY*euRhT'^0%g)qTPC6_mfbA7ZjEn$$/bRV#nF@0aQ[1\rB\(0!N9[%6_U*#3pRI7$W
%pfpZF,#S_4PV@o[<!#a(?d'Fm<!'&bBFhhT&u:f7H=\X:W0M)!?*-ftEi>7;'18lqgDtV%8T_rB,b&D6HZdRg%H5Ybdr7[\N-U,k
%'J#8FX)rD\;g;]UW\stb[4l#4h<*rjdp*2!V7SR!b2P[(o1Z+ep1m/mn:jgARPb6$iKYqMUp%tRF6^MJAYl!IH/o1h!iDC[3s-75
%;q+a[$uaeI#k/<CXS7iHcm;4kRT[SW#h&;cM$+pA!^D\`NUGjiOpMcWdg>NjO%RO?dKr`fd`Q5Ekl`F(B<1:]"F(>+ToqaBPQW&B
%*3uZIUP8MiZba*tOpOB10UO)Q5RJR8S+g$K$.:%?kldEA'+2#FO])TBh3/16;UAnn8Hfs#TqNGt"X;^"^)9KGOFhZCN4<uOW)%$q
%VVb`KJ+9DAe7pRpU]T3c<AehuJaB'ok)iZ*%tWmYHuLiij9gm+M#/m8+aD3\1fbeei4uA\/N"LTF%2*?!as\,holi>b'>sR>\qQ8
%kAeuop;6%.a9<?,B.Xl?\\Ngdh#!LKFV9+Z:ND<#m+$0.dh%OEi&'<3"\o_h4!/6WY_V@Z:,IA7g`EBO3*jCIBLE6rKPD0[:a:Z7
%\93TIYBMYeR93t>4mqEF7nij1*E%[+i'@,qU2A)q(o7q,,J;e"@?"qo`/:NeFQ#AiS)+W:DpJha^p$"5IZpQabffn6-)-bgb5F;U
%Z24co-Ug(E8__]+bVsmP%_)-/Lo4t+CS-pN\,jqr.jOu93$$2"CXof%$\DiH7p!N(ZQ7]:DaC1p64-<#S&)`n)cWQ"c2ASCTQ0L6
%4N);T$"*9InZ^_[3^D8t?56A9R(h8>d`RN>?:j]"SO<Sl,X-ff4Hma9O$(=j[:\g:MRV+k$T9bX$3uEI?oEq:_24/E"RgC/G%2a>
%RP^*97jb*cPfY5ZofA7H,;Fk8NPp&T)tA3Mqr'&E>U>X/H5/1H)e#RLj*Em]15X%OL5Eb2]_;\VGF1<P8#q+3JsZIHA:EnkG(#L9
%D7"bhraa1?+5\\$Ulk)6Wh`f'd%T$+ROW't7:Ap!*!t&cHj%FQ=<T!##X&%m\WYUd*be-T*s](4n%YKZe8)9#%cCkA$%Kj\8B`M;
%&YK&BqLR(4r$HZE-6_(80j!!P"$Zk+`J<7IAmLLb0>">C$N^/Lm^7B$1@\`s5sGp:1>N\ToXRfkdb#&C0MNgWa>E!T2e.!/PbpkX
%jYa.uF^3gi6Q&W\(n,O"lXY#rM!q5co_.(<C\[GqC^eDFFNZtAd<QnDJ(Cf_[ICdCG)UMT&#2Y+[:(4M\(aV+_$73m-1Qn,)2oka
%)-lD'I^#n1f\gWDKa$n_J$!bH$hFmE<T:ZHBe-IQY_+6VSh+IYnX]?N"-NEg@pL"g@G+;KFYdEo;14ig%sL-t!Bua>;?n:9cgH(b
%if+H?U%FcYqG8MNMbBcH?$T:F#asZco#W*h4a7)4RrnoQ5VBXTFMKmK5l+5VpE5BUB]7sLfd6^/'^!RUdTYWB+kAZ7#RU"]&g8kS
%/eN\H4qsF[/qPE&iGrdE&g7@LCa'#E`$Wp.?3Kc-1+oJ?',N^YbmV)^]V_hVUati$6sT[e3=[Zm[&J(tCI<pbL;Y]3j#K?]11$?K
%8!g-0^Sk?u.=4b9I8Mj8Rg;1GA.tXN-8lJ$@q$)VnQjO9-R/4$Ca'>H?k[7]_'[TplH?8S^dB8@Hm2Pai"MgHT@XG^bUN6\q#iHK
%imJa;8Ap-V"T;:?&j93Lpfp];hG"PG=?WoEr/:]b<DT\QIY9rq,%5pL.=r=(6<pI*X.e%ufb,rY2gO3(?'?YB^T$<mr5@pk(&"jL
%#>7?cMCdVk/,6<Q<>pb^%<69/58AS\FCF7Hnb#&4Q][$6Q^@=73Gl_$n,%8$;F7:bf;9<;&gF`Jb#.6/6`?;c3Gk9Q[?f15C<\n%
%Lb4Z1a<jjoELp:)66i(,#h<+rB-68YR=QPPLJTRVJP9'<;Df5JV>VAZq3`<Tg&sr%f%Q!W*[&Rt?\EnfN+D:A(&n`%j@mc7adMQ6
%aWT$Li#p/4.>?,.5a"DlMm?h<2l<G=KTQZem2-]c)&8$pf23$:jF/h0c_1LaP/E2;4u.ppV*"1/6.DrX^a#Vo<Rm0l7n3ccWOF;&
%O\]GZ,A4T_,AZBlg5Qge)$B)[>aNj#]@a$ljbAfNYJPo3d"Y_6X1i=X%5-1oCck=q5b,&GJ4N$u[R2l;6CF_l6AWY&iZ]A\\24GY
%(G,4t=##GKhV/lc]&Z&Yd'$p_%TOLb!#hu3RWcq.5IC;\'4P<#!Tcog.VUe+i,Loi->K`L=^SZc9"42qNcs`h,Ik'AGT&fPB%FaL
%Nc>,lGFrPOW!gZMc#]4lJc'pQh-02!>DIuGS\CMT-hZJ8GFi]n8/CJa9\/Q(T$`k;L*8m<0]0BP)K1ue0JA#,dh3fsn:iKTieUXb
%3?XJ^"gJYHg^oXR#:3&p%Zu^-QhLkSZKu!CVN,)NU1,IQAVN`Fn[qN$$kJ0T6pHrt6kAD>+dr\&[#aCg4q_U['9B:j9_G30!.Nb@
%%mp.A?ME'*ZVkMP:"fit]5*Im=(&7;Gu?guNRU0o5#?BDe5Of>Zk5NG)E!T*@Ak7;nO)n=_[Od79k_2`3Sj3UCECg=ZF""qoC2L"
%_K:)K)BZ/Y-Qlg?$5QO5&>o3)H_;#@.&3;,a4K;4%C5BaKt+<FeH9@oqq@t5+VKGtDf1oJR!S7S_F3XN73r,@?Sr?"(\\0'#O)%b
%o)NdDC*"aB`6[&9k)oO_bp*`ACE@c.Y'K(WeT90'*Dda'_Ll+`^]LNBms9bRZaR!Y(CTl7..!XO?t7W5/aJ[hoo;F)d#k01TdC6i
%,)fJ[1oGnG)C]O5/H<N$OWiLaE6nWG/BYb&kGNkUUL)k6fQWZ)TQOA@^`c!/)4<-%"G2c\lQ.5Qe=/o6,`*'Ch9*nf&Rna@Zq)CZ
%5tk4uj:Z=3KQk(&+)"tF?Kr[4h/E;k?iNq!n,LGcrSuf5ra5\ts6G13LO],dJ,9-4Ie3#]qD\HH?iKkF-iL7JmWZGCLS+V=O2&(%
%n=+oOrUSR=V"h..\UH!B>k6d%rbiqZcd,tupI"h-J*F`G0>IE,s6''u5<`r`o7+XH2hE?5iALNq.Ed[.MN.WulqM7gI7ADtrS6R'
%q43K/J&P7RT+=[i38t*a/R"#?rZlo;`OBVsOXUi!V[c*FV$*LoF@`f6(7^SK8Mr&Kd.Fhu33;tlgBbNmY+4ZuBebF9S21g,0,EqD
%2m'/V@_;[0fSDP0WI\6"2:*N%?]A:c?jJqU":bmI-rb^;q8-:R-E13O\18;=-f&7LUfa&t'd4@'e[ofe?[>K)>abtSMu_eX`F^t3
%UC!rXJ+H]/:T7!tGL0^nq/0O>*hB/]Jc!<PX'Yk?G09n"AOM@ZHj'FsCM>E.2#C#ElH'SZFR5VNKH15gCCKe8IGBMOD6%@3ZU[,T
%5oR\E$O3se:Wd>VNW$j<$nqe*(<R#m>?59MD3=TK"tk29rMVPA,1=lTr]$;:>o:4%p!V>P,0cJ*M7Zn4"[oJ#n_Pq6Lhqj_2b-\5
%XKF&<.TS?aZ/cg\^YW9(i4>ct%7jO"(N6MG2%e$<pgA8\],:l'oh[jm!QR+2(d$Z&*Yk5m"ULr=.2C/qH_%]]ZM6fDMOu"J`AS;6
%+F,e-kkJ@%O6(<e\AE\UfZVd%PXa00Ji+9Zb_V`V;)eGqQluq2U;^M*XK4V24tW'2I6nJ@('DY<id""M;>6Q5Khpor?j'r,,*Cj5
%?'2R[BL9/k]&2-@;n9/]K*@qEp5DrRH"g,'o[-eVHYb@^pG+R4j\5m`+Nj2Fg+mTd+JY$<>C$Ub@.239,R"^<VMSQYX1eG#GG&Z[
%WtV'u^1KeC]-:+"3/$;t>_DctQ[B#8g@tHe>MF2q&b(NG+Gh[LBI]_17#KO&IHgA;#".Qb;.(O?H7_$m*t53Mr^W!LQ()a*!2Scd
%[k_X,CV6jV<X'3*M_n(Tjum[4CV1NO?F.1*7"%&BfLj)p%H*:&U.$1a0MC.`X]TH3]-TrPZr4tpV-`(=n"=aP-eXTLQ)0GK(N0/(
%&(Tn>d[Gsb&Ahsoe593K5ZM`'=!)Rj$kfn-Ytfp6!Pc*\]!PFeI7tg2cpM`dHoM*9%8W\V,Z_#KmW.-nl,OT26'p/se@_#m1?*8I
%ekLM[R%KU:5Sb`\6V[^=1_k't):;cmY3]Ie->u)mII_J%5Nc`hetMfAbP^J>!IQ+IeJB[AHmq#j0(s=R!WmYNp(0d%[1]UQ&bHVd
%i.Uq4VHG(3WHt[Zbj&da+"U"@8Jh1s)&+p7TW<or+\TG5TUTtSIMBY-YO50H6%l^!V$A9a<CY#a<VYM7PBM;HX6%l"_<3^t;n!Hp
%+#XZBS=H`WjIlSL+AEd)j[Z`cOq:3Z(OHmi'b3U:c+]BZ#/"Mj0\s'.+VnWD$?qhqH0"8<BZu0o(Y1Y(7+fMl'd"C57d'ZSWe%)V
%mM`8s,[8$^j'(d]D$g?G'uM[Lne-PQ2g-'`]D!EdJ0\u<Hed3)!k\^.8;lV^W884sF?>b(heEX(Ml;&NH'e`G26O4>66MO#]P+C>
%9,VIWbA]f[f9f[Aa*k5T]/%K>l/_j@W^m`cTN7XoWZ4>aQtU2MBS+`=,j*1fH5FkBZT=r<n*WX-eWqbU1J)sn#2:lKiURIn@hC((
%o%o).lqp#=Zb,rI/RE/):dPdnbr4[<'e$Oq:XkS1N+g%,;H:I*kTSTc/AQJXU\pT$#&C;"YhS3\5Qh(M[M4XppUlnGB6DP9ccfGQ
%OHq$;j_\USs8Bj-9eTbK>&<2]=cKt/BV<MQJI2>#=oQObj!c\A^6\G"[>cTV>I06>Uc>?d>6^<@9V_>C#>;'q4PYomi=^Z`ZX_0I
%`HQNB_pbmeL=$eM?G'o(b%CGN@XRAr'h\?"QY_fJnji&L7=ECeZ%aP2CmiGp_$Xb+Glb2O"t;NRhn2m/HG`^-NFe+*Wlp3(S7H-`
%#\]-/DgUG63&G(#s6aui>S/!sLmLQ1BW<M.0T\NXRkZ`%rsFc:Rr'uJ"u+cUYd-.Gk5h=@#GeT00jO&<`!\i:j(42b'>*&>]Zo*5
%$Zg9k8^.`_+f6s%G[@q9_2_U%bC:*p(6''+5T!5Rc/9Ub<_'s2"sq;s`1)HuE&1..*a7s`=_*6!"(o2`RaL,"S4\m:OSTX0o@O>C
%!92dm^`)K:#-f)nI<-"VhQt?q.bRnl=ku1WZ&&]'/&.,_'%<n#7(QBk,iG=,$S`?NeV4;2YLMaSddB78I#-!lEssMe9C6n<Wa(+I
%'3e/,!ih5h3\qB-VB*V)Nht[N65'?+s1Mjfmu(lE6CaS`OCmgoRr;+s<B9Y0MECMULW+[?bMMNA\k/\G$@$*rm>E#b>ir2saW\Q=
%HV6c\;upi]>u7e<qX6)lS"dRc3s@Z3SlUP.2i2L8_2=r7Lmpl%.&AO<Uh4jm+hN(UMA3]ZRY-*LSUO?WcV**A.]6%535IfXU@PTR
%o/JG<ZMqL:9h\XBm:LsnXECR)X0NXZhSF;\QjHd/L7=c>-!lH_Jm/e)OTaJ1*!f`=/Z^'Lcnna>G@>Tu7.[TE80u58hTqLmj$H.2
%(^3Xn][FB-P8>m`G.6#-fA?]&n62?d.5g]TnJ6c5Wbqhpd5Ik:[7KUkVt2?.!nmYWJW#Fte#QR!"R\G"C&flc=*/=@/MH6VJn@j^
%KFmbcar%"+O00g'J8F)L)Kc3[!7;L0=iHqX\8FM1P4\M)HhQ+K;9E>qRntAp[UtcPX1:h_0M!.0VV_A:9F<nK)=47;"qb5W5J)"4
%'2]M%jZD_hXP24jdRoo=Nc!<$8b=(li0VmnjO&5+/g2I'`f-dh+Rkg]HNb(hh[bu#FMnto01!(iOs6:Ybs8dZ]5:%II!,ULn=k'I
%:K/_0$lCONeX:V17YbG0Rb")iGIfmc)!s.L;!%hjiF!M16'DRo'=m6`"!HeZKd9;&X#;l7C=-6b[QsML`e'I"'m^Dab2FdfN2#1X
%Ts$-\Kj4\a$m)adPjtLu""d&?R+ZJ!]*XYH<,+aWlYJ1k.iUdX#+g:C2X3F:=iWoi&5aF"StU9WMaJJs=sU=8=4hifoW"1RP/p"L
%4!]]D&rBE>gg=ST&D,`qd=?BVekdo0)P%B8e+@AFhj_.qii[m7mh$,B%a+r`aDM("+,8EGc/BeNs*)mcLPLCZou[f+@1d^s=](fW
%(Zi]<\8gG@Cm_u3fF2*=&U("N2%H]$l:LU8m'mr\I8t^9LMYK@G-OGRFK3IMfZRecmc3\S+3P%7<Pj@1bcV%M?AT@m;"3O@4`j::
%#*5Xa%e`M9_3f\TX+L"oU]5tOj(>SuU9?0AbV:)*]]g<@%L+)IZ*q)GSbfqe@l;('IA]rH^7M[S%_Cs-Q#K4@K6lA8ri(i5%S7qq
%#5#.`LV)qr6lnU$SoGj`6F,=IFL>Nc#Mcmr6Prjh8Pb*Z\<1Ys#F06JmsqR)i\q$#kr603D/,c/IH@l&](*KH&[XiJ1c@Zn1CMMI
%oL)uE`,&6lNX$*U[`*rJ5%7pZh4AI4O2<YS&oD&?1d<7PRm,3/d&BB-2OYl*4=BlpW<X#<lpbhI=gVh;Q9OJ(A0tL/Jiu`%/\?GU
%,AY6P.I]iS\!K+QRU14MX$a<RkJr*[1\obKg"u8\?7<W_ZCXKKFd6LCPMu@oE=6IU2^dBu+)jqh&ii=e)@j8l[>\1U#Sm>[6G$:3
%TLu$YW3Sr9LsKGrF'Ek\5d*LS0'>CE^Y6>UG#q2Q+3FI@4'@<f"jt>1[.KG[]2kPMYKTuQ[Wf>6S<-/UUZBAT>q$,^d,7Ab]V-gl
%eWtMLDFQDIlaumTH1dMD*I1uH%8M+Kdss0NDf8FH3Z<4_QeeZX^%p9pZ%K=7JX#!]NaqZ3C/hoZrpCs6Q'>mBSTK+gF7h/MPhVr.
%!+\;C<b4_S;N@P",t0;o*I!m;hjh761$_hHc;g\XQd8D/\j3p@/@*2M>/uP/HeTYIPt::1O1s&:_U]G3E-0GU([]cJYr,h-eK`kI
%lfeUciZ2-0+^'TQN58Cl_DgnFkViZsTp;q13GUiY[o5N0ed5P-VL87b.dUta_YT_o6$,FMm^A@a+7_9&B)@QtQlIm+njk;;98lHW
%da2!l:a//C['*RE&;XA+SjlF#7Q&/#\q5R)LBn#:mNpsaigj*f*dJGXh59<Ol_/Y9k-7i/d3m[ML)4rV2^oIa.+11jQ%_qr[1&fI
%0%3i9Q-jh-4(uU9JCF`H[r!beJDM/L;k*.XU>MqB(Tl&mOWZAa.M#)g?ZQd].l`=6qm2A1^PH<H/]q9`6kq3;[t]qR&`1tK^FVpM
%GT'r:pa@Gs:%:iM!j%$teTOU%ZB(9?08U!V.-0O=^>ubK%hqcHF=3a@7\I@L0<;MgU1FoBCXo2?\nm^+[%.76+sI7Ll#+f<3tD+q
%cih_`k0g^\#8E1Tp0KR^dKaCP,)I%9najF-SJkL9Wt#tFNjMj,-\8b9`?(aX59ut4H4R^#=?t.Q72ujMG&u^4n-WH=MZQf*2=9UD
%$OK*0qYYp^]BP$FUfOK+_;]LSM51q'COT,3*a/pZ$d#?:.mX2gY4,X.L.Kjq/ZZ78`b*Oa0#pBuU73"LUe$iCO7'Xh=f;O9O#l1B
%G*;!WV&JGH/$VoYD`6K;&>7G<?3)l^0.]Rs#ubXtY%5&SRC+osG;1Xc+UqCF#7*2n;[*[/_SD3<cWFn!1V*K91g-R/=u/=$YoFAX
%7nZDf]\Lbk3#J*P$<p;EKeI?lhR$C9>p_h1o?,ZSarkEY`JepXCRV#V@qO*PXb.\R-sEYQII:BIr1=L>D(;CAq>]CUi8RpSdk.Q'
%Rs!aDmrc3rQ+S<#2%Tao4OaJfMO/Cp>iS@4^+='>!b-%SY=hme=/%hjTNq[H'dKf>^uLf"(,,c+HaKe9#8i_<=Y-U_lbD%*@^ojj
%0*Lq.G+"4G9pl*4nmL1TjPkChh.'j;+jhpe5qna];M'._]/k4%d=JIZ;NnK48nG36%:=<Pn[%?M]Uf!X#LATc;\9S"OPJT4a4hYO
%WUVn%\uYoEF[mj&@S=eH^)HC[$;IX>#m7599M4?3"JaR10[U:+:5`^-ZH9U)VKOcLC"Wh#lh@#Ur?_@]3#jh2eFdN6#$QASU`bb"
%N:^6a<f8AG76_Q^VJBYKi!iUo+,!qP?:+ULfIBl1jJWGo,0Rs\2@udUfVco\&,G1lK.Gu.%I0c#ZC9dH?rkTHmZXpj%(C<,B:)$4
%ph!XL2V*gnQ!\$Nf$30Bl77%6fqX>$?Zml?[Lf>?OB<N2Cek2.f8,m4[LJgL;3\hZ*i#YMca4Q'&T4>r]>?)rU.AQfk7poGlUW#<
%id%[pX#KnlBUeNI4]JY/0prFJCAh$!"d:hu[EDZ9K#BQEOdc_\:%J+g2O<j@n"cFVNB:D$V'(/p&/@HAb1:5sK.h=)&hT.E?IMs'
%$Xr#+bDJ.rn\/hfQZIE%!YOCD!/,S>MT7!1pHbAkmcMEBpr"kXF(OD*6SF,n.#ah9f=&*CVW;+lSbt@hld,%[PV@Qd7GQU?71D+0
%e`O0u+chE46G.l`U!^$fX(ABS;YD<H7`>!?4HC&LDMp`Mjpct$Bd$4"UR0AZ9"u3.nZ]JL@0.3'\*$I'gkmuLOI<?#0>H)Za/hkJ
%1\6mu\]1V,*l/CAaf[E;;p>I7ojd;S]3%2m$qHXn)n,"lc_ufG(g_IurV'p_PRoOXlugWT5el,LF3o<'2&CaPO>YKP]_``NL]hdY
%F@I[/EI)0aDm$`=Y!`0QN@gnVT;\9HDs?%VlqH3"\e^3M-nirq0GdgWQCi;Sb!;HI+9DZJQoG69?V;Ld[(c?Q&\8F&0u=r\?5?['
%].<N>XWmZ,7h#Vre1ARHl0kF3ae4jPQ-Q4'*88_e1HOFKTa71$(W5Xl^:A&3^A'D@`L5M6js,dj@j%KXeH$e^EMoIZVXRt!;]FV9
%N.;b-i,<Vj7P5+S*1G.X,,ME@9`(*b]L'"oNVg[0B:]`GC#%9bd=-fB>q$OP*X8mVHmemdKjYJG5l<U&ca>o#kHc-<^BW6UX]@"T
%ggCO/e4h($5"mo2_!p/_*0[*(N7/SEm++R"0sTJ30s`5J4dak^>bR7Zl.jM-e>:/7R#%jRWrP7@MQnMp.r=;&=4eX`S\>uYBa%m,
%31=PsE)p)2B30L+S/<'_+@4[QP['WI_k05"c/r#Ap>sL^fYOBXb9"^,Q83<d[/)BF5pGS"D:Kj83eop/@0='"(:b<jC[e/S?%Hm,
%Hk%PKSt$fgTUY<ueH36R9u!TU#O_L^VdA!-5"%q#n'l`q#[ghuaqc5;V;?$)AjMr_TUf4_h?!1hm@&QB\AQf?ck&rhdJ;aY`Rc[-
%n&&BJV,u3p,m%>JjKT.o"`r^Xg+;(e@ZR.N7Y.e@gQP=ilF,:N!=\B<g7CSfoPAkqf$'O#af*-pU0uU,l!MB`h,a3noU*79V/tq\
%0ZEAL+?HM?c.okQ8jBo5T?kC$Qk^-%Y]O;VTZ(jQ7=8M1N@tpj^d>Isird$#"7t_/0>"C*``rNX;A$F3.F5Mk#_2iH#@3hP==SVS
%_K8FMLRfh]d^lA3*SF0Ha](BmNhEg)%TQ\=[e&`07MLY]7_6@&W$uTrmmDM`8gN<5/bUOm&MJ;bi&0(S)"(+XA:Q\gA%<f)(<''!
%3u0?dGLCc@]?5.8r3L9jK=Wfj6sXLDkA'iCI$)2t#3klP4h!%Bh.4GFe[l/U;8@N&[X#[t_UOQZBfRR[DmtAmS7OlEjYG'_?'0`A
%eO@c2D:$hP/M"CL>1]q&CMWq(pU$?,OfTqM03r9["[oYf9c[Zf,Mc9>0-DB<EWEDh#djladkJ*6n9N?B;8['.%$0ai0^.P.^bQY*
%#mAMiU3WD!^anObY:V$hkn3:lm$R'C^K*5bKS%YCW/*>L&d/5Dmpo]\)]6P/lTn7K+>Ue,D/A*-N<3O>Pu_9I#PqJ'%>Sd;dCs!#
%7?AKBn,4r2<7(R-&f/CP:NEu?_Mijtd(PaV\<NN_&i(3oZ[`"\#?X5^KIuI:00`BuVE\!%\r\m!6f8A]#kD9ooQt:f:SkRrh`<Wa
%hYRSKHPiJ$34@L*_)`oS5uVd!n.PC;ECY9Z/9F)269apqD8$+YXA=VE[u`nNi(02I7gbY^1]u%n,$H]f_`Uhk3AH1G[M17#=Nk\f
%"?5>_e5\0EF7W_i*bce2KAk!@(F?e-;k>$cEP%;jO,tICf!30l+*c;]2>@q9]@4.t&UccQQSooG<S\^M#"M,@Q!U..]_.JM$MZ_I
%(DBV5Ss]Q!$YI"qfL2LOUa`?R>.PRm:u'ol,(2^0dlE81V!k)q1PcSC#$:?JKT)@`GF*LbN5VK@hBp&BHldBeWA)%m6q'@'V$8_J
%2g4gDP90qRTojRWpVH3e,T&$t+rLpC8tqH=oW=J&l+BA3dlglLY>,HB,)7'F0g&X=2Pm1XWGn"+/9%2/?iH-Q+'639G,?ns$A^uq
%.tE?m5!b\Kg2Y@W.*u+RM)dqO-Ee,k]foSr=bu&/S"?(Y"3Fu_pEn>WhIhu6B?Ah2<Sa:S.o;hO,Cj<=m?aq5k<Yh&l6Vq9UX6V!
%3l=EO0?/i&"+PRr<*tYlYR[u@9Nngo':D.<8*ED4X7J5#?_<[qIEugmqV"("Z;NmZl,ehE&W=QV@QnbA$+;bup?X][Bl(*\U;4p[
%J3VC:);k"+$E2m&],e%1;!)?5a'0($R2L(3^-=hRhi3p<_/]+/"e%TOqF?KHBjN^5UCV\M`ZD^`XOd9+T"!HF4H-:/(+9X.+*O_U
%F1GFeW@719c_<SM%3j0T6q.RDM@0Rqbr*Tlr>`QDm,)V1MBi[`qi1iejF>Oc#E;i]QQTp`L7M.,"[6Adis]-`/Na]kjrUC'[g]t[
%JV._q+U$!]0d5%6o#*+8W0+I(:c?[U]85>@iJRjAqK?7U4PW.MrmLXjX%rM^F@/\6s-cSsn,44b&(),/1:!T5@ZB;JP@%P%;^#3A
%[T8C9p^DJo;^NImmHWiRPV':Ii\nl/BqOnQ'C`Je#&0+'/+gfR'Q3R1_7b>+#h82/L`s8GUaauJMrV,4Hl6"="l+ttV4;H\2RYS7
%0XJVVO;mWSp-].NQd<>qgB/]SO#9EaLc^4VS\o;jkO\E27G>XOEf3BH8_D,/1U_T:-[DTI/nL*D1&,`kKa>(H%tdZp!kmMemCnV>
%UG\6QF/PUS9g+&2[aI5[#Y<fE@U+=@KZ$m&-Z38UkPRo_H$/$cAt3.>:t+M]W;%)Eng]SB6ID7JYd(=@VSt-&P$.OWk>htSG<g0,
%G,l%ck$HIt_X'H*JgJTM%Mgj\DOD5/:oa7YE1Z<a9d"%qFTr">ac*DPJFC5)OU+N"H5Snhi+iJKK:'TWAF%V\5-u.ApH"=%K,;14
%#"TnLfLIr[O)dXUiUE(?psXNqqUnT))=/YI[Qd?+1>XPGfH9dL2"nrSG7rueq$8-KhIGAt)1`.SP>QtVYa+-f%ssj/8!S#4DY/62
%.c"@XOpp9"icgH:XXci*1HHX&eaU,haK9/?U_+JD#VXjeNFDB'MV2<m<]M'sAlLeMUl/MOBRATee1Xkn'a>#KdioV>QES[U)ASqV
%B!?_gi8^bpPn4\KHN'+MAiM607bGYGP6:IB]piMu@2c5e4=4GpJ!/$GXl;\G6e$_9&dGHoRs,!t?4l$T*O&]WDIN5e_oJp`b]%q-
%ril[.CIG'h<F$*edlb,'b1=o#E=*PWZ$*B&hKI1g>tcV(kSjs.Eo@kT7Xf5Z_cT.P(uL*kE,'')FkAfF:j/3Lb8Ie!_!g.8H8BNA
%n"4^n4`H@SS?H&=r<",?8@Z^*PIgt7:l4#Wf>7C"nb4^8*Wd"]"nh$<V>3]/Utnft[DT9QTZ0%N>$h'a_urbk)4oj7p+J+6bHP$+
%=9oX2O.s9%f"mj_9qat@\Y1e$Hd$.m=pP8BL*pXl(M8?HfR9]O*'td;UE`mnUSNE8)esS@L^*_o25#8=kG,oh/X8=Ve[7.6OB8RD
%$`%Trq802:#6G!/ae&5a0TV4o;E<$^+mMT,GQ#EpaHs/F`=d(@n?]_Hki1Ad517:\SH0.nOY*b[Lc`$bAKlhSg;Vf1LJ*obDsY7^
%hW9oTdio.('ZC\@U/+2*%6b\uGMG@Khcskl<u0[2-?_]IjW0Z^"ogaS0H_/@1MNnR8JYT6P>,I?G9iq9D*"4*AT'qTaNnGfr"+Vk
%Mgl,QAW4ISd]&3sA&9B[W2!)(ZeCV$Aui4OI)U(g*,/"JJ^/DJR=NqT`IGTY7#<<A*>fCCV#+PD=r.#k=`)u/DhaU<=r1he[%>Hn
%:d<[gi7;q3(.F0i3)No'![^1u%"VrX2a1M1XP:G_,#iFjh&Qe@Vc5k.ApW/@.j[L/b(j:mFhW_L0=^5RMu)sQ6AIrp?\EW2<qtco
%fS=.'#8gtF9Y#:k,-lbM\<"sT[7)u0/A'*aIf`,b'o0?0<-P[?EW)gscte1R3mk$B>C)psWum2b<>30cUW8rC/NPd%>G(F'$H[7O
%)t]`hpr*mj/@8/WG0EDEr4^e/^PZind!D-86*IX3MWn)sRj5J2>.ITt;.<pIN9."A:gWsE^91O*UF`;3A"AaUl5e76H2AIHhKNJJ
%2\T0;D;e6HK->tg3M'C>o,ND8.7X7\PB_7pEcjL>SDNo*3GIsJGandogFKPgdk``o`(:DHGT7]GU+&E^4;6K:no*?o6Ot/p#3,->
%#\412&@]it#)jd]mc$Pb&`m%Q;aE$RXl"iR,MV_a[\=JhQP=R9*\1lK!e+T!FT9%NLG-!"Hnjt&L>C&E&\kf"31TF)LaiUJ(tdPl
%?j-'JKH5&HjsK*4=rqa6&4OBo0iS2d_?B+Z.U7b*[7[!=mY)%b?LN]$B#Y"Ne;<ic\AlAE8e@,AoAeM_&sO:&b-36eI!$?P"imD.
%q<=;Wmisg%_1[N0a$h-@lkn,FD;GBr<hW7]2Ka7>^KFdg-JTb[fkre1+`#EGbS\Gk.."hqhNjU)P\@$OE!)'_ec<8/10YQ,Ln$"a
%Jf#.f'0Zc@YTlYC>P";0^F$@GLTb`9-6J+Z^N-P3X7bN"W>O)dh=*kK?QFk%%)M7FYc'o@-;"[OEX$IQZD\CMGdDD]pe\59]mft9
%j]gcJ[mN!a##3uq=1$BDUs!r(2fj4p1A:,*=l2I.?I&S#pNJ#a^npQV.J6Lr-W/j&a0RB/i"ZqWHaH"'4U_%FDCBt>OG+#cESK?a
%n':=ba\i?jr:%U]m+F]bM+*Yeh44*D=GYWR.^]G:'Vt#0F\b3r]FSh'"sdT&DMQ[7nk"EcdMUqg><u;*CrB+g8FAs+@!a/SB?.E1
%5SsuD!T0.m*:G*s^J!6D7?nL@EcrZH%9Z\;G,fNC,!<2V1Q9Ca6_?7`EbJ=^fnVrQJg,t^%2s#E%:t.oVCPTNLgP_O)J1`[/>g:9
%:MFZO^)grl*0R!j2@b,4SAoU[iCC!)E!QJ1&b_JG'/`]<^K=YU`EFe-oD.U9-El]"bZ49HUNf:=!K4EA\3I)@)m=LPbRIQcitPLl
%0V?X\+/5GkSG@YIj2a+O"QV(L(90=%.hFJElZ`+:ES-VK+OD*MX>$LAD5]\9.G-`&,mi`%'Pqhlda_8o4kK](^`O+,o.!CHp?7%i
%LN]"b*DGL6[f&CAjKQ!P40iJD+-@[,Bocc:05AiPO@k&X[YTgMlBOQC4l%8j)#+W(#+S>K2a/1O2%FFn_\pIE4id3JL&72IBAoGC
%Mdj=aI;Fre\GSZMQ?NDXhuUb'Us)Mg(R\%>r(-Q"6q*49r_C$N?3('`-&Obc;i,VjQa-@bX2AWdXT3(17Q*1W)hq:H&s&5g/j;AF
%OPh='$GLcj`JYJ\m66`C&!F7C)9>`d,[S9@nsY0k\O0&jRgu2!i[-Q?Q(.M!UMoMXjb#a]QJSm3U(-T_n6$?1JHn/rKsc_JBi-G6
%\^GiN^(ZYfi(r%ui$,0"AuB+?E$l+hE4+.`p<nprC-!,)e`=K$?KqZ"P,rF06j_WZJWY.@ek861YVeq7X,!XEI8uT)2f#kURb_H(
%@#SP=o+8,+S7"2r"JIpWU6FPa"Q)OA&YWP2cgnqM'!+dUCQ7Ej9RDA=cDCVa$BS%o"%%LOp&+3Z:tM=HZ`E8X?0-D3r&k=8>4&Jm
%JXQS#`_8PB6B*lKIm;%QI]Oi?DX6C?HKlhlGp,TU)(U5ak:^fI4gH@@FZn.qE:'5=Jjhi>d"Q;La`:a,KCE8XZ)g-pANB6F0?k4H
%qBAbr`@ra_^+eXTceH^11Zo,p68).:Rfgg#/I_(4fktHR_Nk1od]X?u?m,6#kV.?5bJi0t&i`LTRiIoIs7cQ`YCHR*s2.)$pm6L0
%YJ9sihuC/mrqkktr;Bt'p?'aYgOK"[5Q:&br;N=<pKrCFX2"J"^]*c`?[r'Qs8)c'pZB_G*(SlDs,+U9Gi"G,"uU1JF]\5qFsBQ1
%dV&in1a9u+k?%ln66sQ1p]@*FdNAA>\+6]iINIti.8q!6o1Dtpf@=#,H2R6q#hja5q$j_//c5edhChYYi?%!qi!_1k[hp"g-J8_j
%l^C5)5DBITWN9\OL-&D<ZmrS5R,NY=!JNcDrZ\CQA?NLE]OZ$"hcS!)0B9lc>7\dX#q9s>iXI$!UN\kYj0q+Z+H6p@G8d@2BDA7M
%7^'58%^4.Agoe,F9)/)Yg9qT;DVAg[p)JsHiS(4]6Y6j6?N23-g-kZ`=G`nHYYqb=Ng7%oLVL5g*+U7,//(PX9YEo@[\*&UQ`7#(
%ld"@*F6+bHY/"r:[Hn'D1r.,M82o`K8*:$U%tg#.=?HTu6Ne1C;?X%m&&,op'dDXlK(m16il;.0QM0Qe@l55\0Z#,Gdc(TR-BBT<
%Ep[Y*7O:J?<)pt@8TdmNmq!KZ1+bqWpXMgo.9*6c[N^;dqb]*jX%A@<M6bY-6ptT>71sQWmnu&BYgTM70W85XX!NIh62Qj2_?kf\
%@CmL^!8+5<F:Kk>#SaJ%\]bP5g=38(A$K$"C5n6^b$L7@C6gt4^AL@JJCkoOf'2`:l#/\<6#b:&K+d":BEQsieZnpX[0+N'VP4'e
%/T+i.Yf#%O@S2/bN2kK0N=UdV>87qgZEObmQhAX(:\8t&DuUrgFIgLC"UGe(UDQq+e;lDErhMG_8"&]K13^+,Ya'f=5?2+/&E7A%
%d!=.iRo7cl[%82-e-IEMGl3^u.Yri]!nQLVq/W(X<F7U1KuG,"KFe8r?HU4jJ\KdI;&"eaEh/H,j?(PlH_;44qXk].(1(06PP`;d
%0i+B62(hKe)e\SY=SBTE-ho*HGOmPQ6O!sgYj3b]K@>5,o\!b@:.*!)(W90Re7+8d+H7i5X_qL3^W7+,=i5*7]qq3Ba\C=4_L[CO
%/SPF+Kg!mZ[GXA2fdi05H5+#!?@%(%?[[Ch%ec&R!0\M<`*H*C8hOX?h%plqUVE4%+q#a%ifCE&0im;n:'-m!fG#+R7T]<-@#YrS
%7M4Sd'u4PD)'!?f@bS'_%MGnp2<+Y!mi3C4$E-C$k48T;]:,rI'&QQb1F1.)Fo)4!7NaQMa=>&D(I'Q>XJTr2c"2R4_JDc0<Dj9I
%,WCR7LiQN;L>53,5c(MCUaP?$aJ8?u]rI$Gb]iXA_;uG5?4G;@Bn5uK)AAF+ph<!'@jGYW@%ujOBP^i!I$-a8#XmSkbE\C=A=/Cs
%L^TF?,4D#kI*o9Q=5EGZ`jFhZgNp34k=*hD'#[aCP'4pg^KAG*8No([Hj)W:YOaB?o*\ATA>#2cI;-U8?MTe2)9=rL_\g0K<l7"`
%)Lgl`!l9i)apB9?h+"D9M_;_Z(\a2k1'FP_A4ag/_\3Y/^C*9E`#OLC[8Jj))ksglC]Z'H=[<@7ObD&_`!$C;q'7$/WWcNK[8^Up
%[5Q&th(kni:KFqC+\&5PK[a:(.]Sa0eoH2JS:QVKioS)^)LE#Y6%jZqmCZ,<MnIh;I&RZO$;(N.Asrqp3tXdD-[ZY3[$!H4]/Mjo
%F:9S7mo70V!,NTK;H,taFtk4_!5M=V%iXE#1OXM(F%S8_4%1;E0s'^*3=pi$6D@Zo('1OF6!DQ?Vuf8NSH9-DXhp5Jok<."I+(FP
%8u\iJ)F<*IM?-kD9c\M;=Z`"MOqB00%'&A^&hHMKP$lHICn%IGo=AcJ[P-2i)1S.>>DYreM4U`A5[_<i)@+5/hW]88]hLZBW_4lX
%Nn$(2nCldL_E.OJ-IFrE7,&ZK7%NUgE,97D^!RRU!"1eaR,sb^:ET#_MPeb0AUW9["`d"1IQcLhjTerZFe9>#:PbM/pLYFtqdJ'=
%p!mj6;5PEfkV@[p*<YX"LV!cQ5pPe11V`4rma>+#JW1l8nsnV.L=\B>27ucfn4==bJ7Ls<Z*=&e]j4p2dG_`n$e]8mG1#9!lt;L/
%.tR.Cs4\mj-^`H@pq&$9GP+#S;ca1R:rLAuJHV=OBOsBVG*75YF'^Y0K'IB*OQ(s::sbS`!CuG1P*jobDK0>s)V=#>41>uQ#58uc
%<C?1o(jee!.H@jIWt0:2%h4)fQ3ZA;q956H#3l4XgD7qCN:nPA6S1o?-4\;McP]:jb>sQN.6:JSMB7qf\gErFhN)W:Ut-)$gVf(3
%@:i9q3aaHJNDLUfBT?$3Cd06EWagrY3&V!rY>$+2ZNBRqQqj=A5\GiS&6n/#9Mj&c83k<oqe$,ADk&[&h2ATm1GTWi7*q6B@),pa
%^fYX?4bnl+W[GE$#VnB`9YjA!RE!S_9TL>SF4*qq)#9c5Z,AD+G)^,Y3bp;,,Uiu%3L1N4&EJfb\.=NiQ,DN_/TADeRKd^W$&F>G
%_/+'W1V20>gi*d7)o4,uXSAH(reEC;N$T"r#q^#qF,9u<5W)o&Yr:5a>18oGhhToc);.o*4%*Vo11""5?P*MSniBWW%eX7&;WF5U
%]8XM<*eA,2d*u_b'uo^hPY[tTaG&^k7P4uQ"Tp%P4UNeC>k#$Ic4$?QEMh2]oS<meQ=;^rU?)8<>:CZ%lBlnLX!GB/0sciLRS&hZ
%X(>JYLk7l$6+<*N+@JpWOdbZlNK$65A>?R%+<WSqkNGB6%]%T@f-D62;HaG?,p-VS#T4]5)Q(3"(e.9o3RGnG.s,og(NS"+SHHO@
%"%:&PN"J<C^<GYpr$;TbJMS:]3m%JI=NlTHJOsp3YmNC\A3rE04qRS,S-("X_s:E:2u0p+!XVG09B<]Yk3VlFPG2KAP=/+]#^9u$
%L,_aY/'p;](Z;hQ*OS9ChUCPr_QL-GiBUsE+j_HJJlt?$pdk%m+RhM88;mBdc\MV]RZt"N$Rc'*d_-'.kU5dM,%_Cgd*=.]XDJC(
%p6BIS;+l)Y)@sb[B#7<5bVFcpk)JOidVoE!<h;E1h7R"X`We`$9&]%t6t@u7/>c!.k:fIN);rju56[p>'(po62kD#`+XC24<X8^!
%dB^lK'i&90a/lsI7=j!34&"$O4&FE@@ROtU(hcSCQU#IliS'Q!CQjHZlotB,]`<SW-XE!*N,b>C*3;ssq*BSO>8?a&Bo*Z7iBWuI
%Z[-VW!im6#TSD;Lf.u0:JQObj(CQ[+_qPZTm+I0?WO'O1"/1X`kgi,M5s)57/75nnE>^/W:C:LZ'NeV9&JHT?F<RAJH85&<Lm+Zg
%?GpX&dQ`WO#9KBn$\<jC_'WI7km[8P:?KAl38o`ddG)ZaCqB<!JcO+qar(CQ`,,%\*u"@,Z\Pr-4@@:HXU8o/%1C1f'mpEc(7C-S
%$&1Q4cN>%7PHERi?#280Abm:8%@*-o*RC.oTS\YLc?b^&5u`@c]54XU`5P/"q2WlUB/EZ%7iHsp*m!BCOQ8;0"^sjA*nUUO\8&.j
%q7@F@OrbFa"@gM4n-#+j26f!%!pG`0V6m+f=5".h:G#"mdX+X8ip]BpO=Z4:'Xi#>3lSG7<E?`,Q1nPn5mLHo)S9t=P]J_EPJ0ur
%;57ku&)3n^`!RhLH'&mh%@FS\_I>gp(]pOR(fI+aJa!P>>sS`q[;=&q-1\XLUDUuefWm[`l@B=r*L0VZ.^CO.6]PMSZ,!c_\SEEq
%@X,[k6Dl786%pY,7NGm"9b,E8k2!9fZC53C"14d;OR[oIgY+F!GU:?A/1+bl(s]8a\RGk>$7<r,VQ!m(3:-^%:*._qDuqK!#3u=.
%RXrQQF_<@B<mYCp`2"P'[[6&lgI@i'bEA(nB6d5Z(7Fh_N*7U%A;T!3'B:pk7q;qOd$W/!iKMSck7kYU+LL*sYB@d0-(@XaCj-#4
%j`cR9Cc)?\T+KVl3Zl?gBt-sS0OlY4DU8YXc8oL-#Pst6ODi5W"*C`T+mt&:$W*\[CMOPI25lQU0e%Y$UaB.@RXm9\-5QGXa13]%
%P)opbLs\*rNg<9YkSd*2m3Nkb"1H9U!CqYo2W6]],HhG+#Aq!Y2F9K\8MjYT_:ZkjdrVb]RM;3B_,4CsS@Fqoh6ooB+HFfo2;sri
%2*n[mQ2tAD&[!T%PGDW]p8>u;5bCH)C@Z<b<5juerQ%:DSJ["gcOG[r`3toT?4UK^?I1bMC9]f^:Y&%/o,XVTp(#rt3.-3F1mFmU
%B1_I!kPuaJ=d9-V'o6:+ORfc)R7%o_bElOpiRgW_1;1ts$X+dJ=Be4)kpQQ+@dAfBN_+IWNgC+u>QZ&7lj)*4h5$@"5ZYGk6o&qE
%9b1#=G\rn`NQf""P`c*K60R;sJ]1)tr]CT"@F]%Wf][jd,8W#L5V,cQf4=.VP_7bMFdd0qU/o7;H&,rBn=e0*n!#UP!bQ9iK?D\/
%AP$!:9'VTH@S%1n&OiqJM0tqRA$nCko@5F-FTPso;cXc:(._b,TeaE]"NapjT*HJS-[#tIO;pjRZa]NCk\LGsC53%g8Ee,#"4^$^
%&,7&t3)Dj'QkC/9Y"A1?O+Q9EHAkL3@@Sl2P4"GNp=70EaU$BfS/]3+5nJ0eHs':0DBe-C+u6=2%*Vb'e\`ZJ)R/@g67rp@7#n=c
%Y>HUiH@tF,kp8EhPgO2A]a4!l!$aU<5I&U8$JQ&=Atm#&n&g@M6YZ1n$p8<ne/HgpT?1f[[;-"/YHP`lS-b*^5_Wu#A,-2n"K)O/
%3bQ]q@0j!Fhr:G(&mYW@DZG-m4>h`<_P$7h\2L,,Jb+CfBdeO,+VP.:Tp<$<o,Q,9,rLb6KpS34LJhW6%tR7e<VYQV917aNlL9Al
%%C9]B3iIBMBFl$#a/WM%g*`N%Og?!We>a0D!o/Y[280']E.Pj:cKUT2?g;nK.OUR6-!I`JMZ^+(")3:.5?QQ"gZck:j!-^c,77+e
%C?_d&.1suC]Yq?T773Ta8d?aW)GLDA6+jFf4iqe0Jurrk"*oP+'+*H)2E8QGP'MjXg5:U9-DtTaeA@$l`ds5O$A[1D0kb&O6*1se
%Q;>k)\r;V7(Gf[sW\gWHf+<DVf5$#j(u*V5]"hn/j`t&R17=iBL"qa>l1M]f7=!^oK:Q@fR4,oXf3KQ91!bOU]-W@=^.`D.V*7Wf
%3.H08,ZW20\JU.*Oj0&><#+O4)Y/<SNqdAQ<_LXZZ[isAOQ,aZN6I&p:m)&aK7N3>oejI$;Ib&RbH(bY6:37V>:-Af6?FYU1ic<<
%1bC(ppRX[+l$BWqCk1^6E7K%\nM\9//.n4u9!iEt8f.+5!JUYZOlBlRn\S>4>9VBu]hWfljgI2t0^h[C*7b@_!X'-6B+BJj#oJ_0
%`hpCHq<S7hr..4-J[Co]TC_I/q5PZ1Ujgmn0&#t4*1Lh>RDr@0:Xe_sbp=_C`%3j-f8^bti$fn$'iU+qi0LCs7]KpO!KKUu@.jrF
%laX;Kgq)^Jc[H!<^`l`H;BIG(#4Klh]:frp5aNi#(dL[rl0s(>H6_nfV?Z2b-odMRbE@*JUp&dSo%&D[,fft(+:#bLE/0rM?in^l
%ERSs<Km!JBP_FU&0F<pRQ-@dnS8Bc0>Kp"c>,LQ]0loYV8psN+QSrDKL"t&TgOq58`5q:]S$?23lNEfGBg'("$;U[Cb_`p&%!F8j
%%sRNrrJdSsYY)&ABTiX9=-Cd_dt8LrgLNl$5R<`rR6n"H/J*>jln^VB$DO;SMd_B.">h3q'7CT`'Pl>XSE(Pu0'O$*#+Ta7%-S[e
%AAQ1u-oL$s`X/CL_!'g/U;pqJ#,Z)&_DBUN8Oqhr7eFVCD$:oJPl`/8&I,bR4<X&Lnuj9E@iJ$J0g6?HfZ9"@#2Zm7"iW1Qa-LE)
%H4HRM`(84jXL&lXd/C2bLZU\>MHNA4@<bNqHYG0"n5YRT&'JBVnl84cDq:YgP#=ulAEHh:[mhcMl.Yn=E[Xm6>t4(:Ngs5gR1U-J
%F(5aF?B_WBQO&70B+,?Zf,WQkS@*t^,L%6AiC-g`koR;Zo``.(!+4g>"=T,h@V;^=Vu^WqAP$h'^akf^l[q',2&h?^TNi&1&!hH#
%+%:-0AAV"EU>R#9cI%o3[SEgteMM5aHHrOd"-G'6b1nD#`$\_01%Am09QaJ%q0M=4FJ9mcTi`fbV0*@n(;7ZfiaL6kTHEChc")hl
%ZK<9(!ju^UmmR!+>8_4@>Ec4?Tb\o+U7IaZ@:BTr3[Z4_UI57l's0D,(6-HP#nY2i]:nG`oX6;Q9d#9Q#`r`?dK*5C1R/@/?;2E"
%/<r)*,8f2^l]K;p5i#\JQf5u(7#:-hb&Es->sosq#1.rKA.T#-fWq#Zd6aL=iG<;O'nV6<"q1',WuGB`[G!UOi]n=dd&,F+M-/lk
%8J3ru1dq^Jg[HiW:m:U(G!oB?&";@r7h.okF7c4d,%oFt6&eDjhHHg7EA<B_VZ?+d814dL?1fm1s(gPK(,uJ=<<$`t4eX#D,P#+T
%i;uG^3A_6"2Mhn].eS[7#N4?/Znn%!)%3!ZY_:(?i\tdT2DVjlZY8LDJA:^$b!pTNH#9+)"5A6EL^%m;lgBs)L/&7F-<[h-,aAG1
%KJLpt=@@A*mO:gH@iCuaAnVDnl^37YFj(u-:),1;kti6*fulmX22Q3GjLX-j5kbtB/j\Nm?kBHCSmT^cYbNJV0T9t`\I,&5d(M!D
%,O["Ur(%ju+tbC%o5n^kcUD(E&/<:6/^TmQl]B[2F[pGB9-?:g:-f[e1P\e,[KYhD2.Ycj>6gk>!tu9gpOXScZf2mkCbqLj-)$4P
%Kp^UW$&g1bbV2gBqI+Wk=Rs$8a:b91TJ>W9)A&dM<=Y.a=pfh]d5pee61(AFPT_CU4Q>s_<ll[H/F9Jh?0S,>r%OP2/BVWY6W&B8
%E3qk7P]b4VUIrp!p2rn?j039s%F3Yk\O^FLi0K"&Cm788)LWcURt8k!s1k?!"@oLl5$ta,4^$Hg_Mg)V$S!8$_%)ia2A)aA'`q`9
%^?mUD6-e^+m&bp&cg`o>T$`6"=5;&hXU@PMa0YLL[He4<3C:,HG3ZmJ@>cL`]]uC?QgZ4&S"ZM`XK$k^Of`Z1+h4%sD'@KTTI9rO
%$.4OljfE"B%%-]q>MIrq!Pf"13**c;#-4ki20bS1WuS##V6O;"MHi+aGLk<Q)F_*AjfC>JL!E(A@MM8W"_,UV=(<@`m+L?DVkp(,
%I,Xqn`PCX.'-F+QGId(iBn4/;HS/*jZ;'U3%URW]LY^5j,hATBIPfu7Fc:g0hK-pM?j-SYR!E%-"e..R4IQ]^V,7-e@sPe!.@)JA
%,]XS(*&&,C?$1`,LBHM^Zi_L71]k?+eRV`+fPP/MFjk%A<7(/^)<T.jl]G+.AjfapA*%LeCj?`<pRR_R@cJ5Mr^.QLiac[oj@@cT
%2.2VIQ(0hlHF?n\>$0pmBDcFBct#_=+#i>@R,T4lg!6peFuGSiGKN>#jO]#JfJ<E3rB3[u`eD2YZ:Jlfo4u?-CgJjfD%a'cluEq!
%]*&//V\TGl)p)o-M.@5B%T6k76[WXu_Pu$cN7c@@Ln5)hBM=c*W!GD+L=?QP2F9ik=<UkC7(Z':d7g;HX;]-r!&M>ka6-:_Pn"JC
%*b$p-N8e5shNAT^+EHT>@"pW`LH;Xc)QTr:Mi!D[TW?-(ZrAc>C9`[g2!h/;rgbAK-]Z`(@oE*uUmMV/,0YiOl3SH9g74p-O?qpn
%L(tM'+G\KeA$T3fH[tL9YW$+4"a?6Q!m],6ASaJde*eZ!/U0WaAN!d+K'E2*16E!W@C`':dE]"ri1gfto)h.C/13\q\@rs$h$-p_
%.2`aDU`2W9/:[uh'T.d10oQSJ!>E[7ZWdW?7FjG4W3VuS6P/V+$\eZ%-]K+?\F;60-4VJ:JnPdq[^TkOM9dM^Ud(`J#q2,MDDaR<
%EU)E,ZSE\32W?9>.M2)@6>/iO3.Y\u`2n[WYS,-0hGEuI3g3-%;=TYdWa->qM*<Jn_FJ&j5U6ZCc/osS#205UD?/Q4f8<.)2?J3J
%E:E0"\E-7UC-f"5S^PWSY<^0aCGJT#i=7KLGV.Fo!Ztp\iWFY%d@6nCj^g;7_T+&`9sG[=MPW@qa'%^tlpSR;WZ>/)=s.S>87g["
%F)YY(B;ro*b\OX1GSXHFp(UY)/VdLl?8>'&mPUGF4ljN:$fWHB6Y)HWO1c4kb+%]q/709H#_).7[][j,fP>J)[a:lLY!=*5D5j%5
%Vna`teu>*sQaF+>K'H4o"!F[%3Rk?hUF#D!aj:3%))/!+3t4jh?ARUHM.Do_%V+P!4V5M(UgsoYZMsr[ldY)"oH[lac$G.;fCiZD
%K6cs\+=POEAqU03>ERc;:V7`OMS"oXZr[!;G"(?*>WSi=K9m1@G<%aSB)3gUZ6r*<QrpmcPJgVL8'Q,r[Hp=7K#;Y'efq34U_W+t
%HkC-Yfm;^WVa\q3g`iEt;Pha!@7@`fhm%?U*$J-rNphM9P(G":/XNi(@ArKp;c@n%.h*D\l6)e=lX(@i$j$DA41NYa_K(0E<LIc$
%a8.MfZ74-hfCkYK;(-.KM0*WIcKnRAHp4829r4AU<BtL-"W1c;DQ*F:7[DT(SuiD7N1lKdo3?65)Cbi+.uDgW'1c=@(ef;Xo+Eg<
%<ktu_YTu!MPLdDokZG4G^k<BF\#tc5r;_?.3#m7W%XSNOJ`7\e&8k+[ek0QAFA8Z+1&=>hBk^MRAmZEW=lMUV4AjhP=CeEIh:>B6
%MRNr@3@k;_7W7.tbl5;Pb#'r.8)AE`fU^uk:*M/*D&2[]%"]8qb:&K:)]3[.!smsX"Jn]2%;<.M6NL#UW+R!>apTr>NVRq!gr'p4
%OTU]pPD"Ru=L-Lk9,;$%ku^jo*);_)?%^mPgef.qdR!@K,1CaIca1tA=+Z;m:7m%cRge<\r,Ym%jR!l>-F/qU?-Qg<HH#"VL,"AH
%LBRQ'd2BX[1jBHq"!W<a!AU!2_/m#-@A%t2NU<c0c:TRnDlNp`"ptr&B[2:al@gdKJ2;rcAG+$-_`k67N.X#CWNY?//G)StVW?CP
%Ju9g"ooQG=NI?i`Q/OU;L)^>Q?3<%(3Q;-S>?=D2dj!@k9OntPJ](?R.!UW+8L!,!V#^X[A%r]-#sV5r8k1ChDE>o$8U*`aZDG(:
%!uZ?&M@]=8g1;9u&fHD;Xs'B@?l]?7Z"G9<)BDNb@O#LTPZ<\sJ8fH_r1j!YV'iW_VeR>5$o]M3C,J@9&1@/Y9D(k';lK`/?c'U9
%8?W5p,E>_+X'r"9HmMhMKpOHQ?dFZp5VK"5U&GY04f.KQLYWZF;mq/8ckk8+i$V5n>UbP"O6JJ08[N6V`2M?dB(cE=Hqj\ZN!A"4
%.$5jn`9=#Z8]P2lT(R2Y_Vg]<&flVh6?KC5,,b*&EqNWISb/#=L6IpGJ[PuV!(3!0*:0(Wca@1_lQn0O8;10V'<\4+'0ltR,07rp
%E=bNU@E_,sp)GH0,j)$@2jg*X_iXc[CeZ3OG;b7;LW*GhmCYm5-5]AXT!+Ju^'2GU]A1a@5.e"J;9NT>Z:WKCQqh:<%@Eh/\P?Xu
%3bFaI6pXaKCMe^3BN"=;i7nsol/[RS*fREH'Z$a^ZT-cF<0_SqAnN:6#\F<JjiCU?Rq0/4E@?"-TI]M\WJoC4@5@JJARR[hJi0]"
%nZ61=KVF,s`2;XqL=]-<*4Y@)29(2$k=L8JCD^,pp-t060^p@+0ZdcTQLi`9Rn[E#PGB?R$,[lU5j&Ji;!k>`NbFk./L82)",28I
%%YOkL?5djgJ3fJ@'Id#fouf>/Zk34uEbMgYKRTll/7$GbD%/k3NVULR(/i>=^_8;5/U7A0_IRmI",uWt631Y?P2oZ#JRLE[]5;UC
%a>V4*Z[#R_1s\V&TdCb+EG'3j4?1Ogdn,^eG'&C0XgtQl2n[7JQl,IS8rEbA@;)==jOgDi*JY3V,sQ_oXtJ$:m7_1D(7fG2P95NU
%>4h-hgEq;&M7]<OoA3Z4.@/>E/@cU?^=$hU/E^e4>U<UC=OL[P]?.BB.C[V,fbSYC,o:&'o1#82\lp!*9$;Z`2&QTn?3"FH4'gpI
%b<Y.#'\hISKL8\5*h(uB-kTA)M?GtsQ"HI[PW0H<-idAG7HEqb<LtNpa:2FB2%Jc_8W%";g(9h-/V$F>f5YCLZo%]@=l3b65rUo%
%)'5#HkP*V@?I0*/*).ee?ir1g!ZWg."99r'Z5)Sn9q9K(2i4l=0FBTLRkurppPeY?KtMm(_Q6U%5USQI@kF%7Cc+*O(c%n\a0m^k
%FC[QJUBe+dcT3hs[+j*I"@<fgY-)$RB(T4Rn]nCMibY?$.jNbmLg$UgN%kP\8k(4n.q`\,..qX2#8AkS>nD_>ir`^tNTJ^mD^2WA
%3="l%1J#6RESb?'gV>[FD@dCQ&9Gje2bP:"Xbb&Rg+e&J9d_*!.Mu,NNl%$orW'PbPhqBVd73<PEagTBS7FBjC!iXuM"_7tK&,%d
%.<;d)-E%J4S:k`Zb+UlYMj9V>Kq-\Pjlr3UJqWJU>;"@*"\IlXTb,/k@R\t%=6*!6WQ8l'OIu9#'0pEfK,D6j05$7]$#2[?6^)QK
%6p^$R,l&@K(^Rp9`hhU+7)T^L%YB`G.iG+jAHTL1,H!jI<"-GF"YE%DoUtkQK%32n!6ZJrDt<.36^FHc/Eu7#g9T3[MJ<OZjUg^O
%W0m\Q99$[uF:g#.UJ&!0Qq9VoJN0N=F3Z41KhOhUJTF20cB3iHXRc$A4ojb626I1<rF>DGeVe%/_7#15?6u"N]_)OlWYQ%,L-<]N
%=>clT2DYfNNZ*!F!mOgtA_l%r:Q4U'^raEZ6Fg<k/kQ2o3?l1PnfI9C^c#W<hdDam_m7Ml9+FBH1>sbG.$p[T.e(,A#sfN9$KmC#
%F)KQ8JiSDd*t32nTHPqkBA#Zhj@lJ[&5a3K$R1l:#o@q?$N@K\9m./rYL&V0P0rF4MWtIt%OOFM_rV5Cd@)"-.eelMp_7eDm1&!T
%WU6Fb7S)d-,l#H;6_.n(!n!1AJ?B5;E]t36Ue0cj+dmE6qZ-7SE=R^R8Mp4uU6Vrl'n`8<-DDaq/3*ti.]LJD?Ok..$@t)#XQerT
%ftf'WSk?P)njrsB$GmQcbq;N\(/"/Wa0Qkk:KnW;FH)Y&,-$a^=G,?R][lQ_0E=_m";k,>U5kCI[h%C,5S"2-m3UnSSL6Zr7O0o#
%&.N4fUS"@1)d0p0dOK7j]tjD.KG1s4B$iD3YrO:9H\m<jGZ]9@/:*5>7!bT559.#X[3.?6cJ0j]5t%8[i8JG?.@N"je5O,REENYk
%F<L'53Um.I+CSYE586-\;Dl:5";3MoC4bkA!P,4pEH32J$h@D"7jeic"q84.-U`D^*Dst7%Pr`Ka2%L=MN\S9NL@OTH\T@j>C)%d
%0kK]BD8;lrUl9P@bsG$O+bA^f!eAc4B#pJ%V$b;)\$EeL;/!Yp:Ss/'i'8),L;J3O:h56u:/rZ)&G_e#2rGrRpcrcX]`]19YmooN
%XHQ")+?k@@-a+uYD+lC2[OgU1#)7Co4_tPrNjpl5'Hu*)RA`\YhPm$7T^Lnej-UOkT?k6F?diZrK;ir$F3`?RY;IAY_010Io^VO/
%=)6!C-2ej:)0KsNM4<U]pS+8^D,S@n:^'818/l`t1ns4CS#;=M9u<;a`M'Qc+WD#q'$AnJ1t%BT,i-qkU^E_%)ZSR!_HCg)GeU#`
%'#>j>9D[(Q$CjQ*"'pH=jg^d7`3N%B:@dhWk;aTr%2n")$S_/f)5m6iL2CRuC4qaX?TX192?s/3aI$M-@S3NG@he'Mois87*;`T"
%AhAurPI%2LRFor+%5',&QLpA1Z$&V"qg0R6/9c_4V4&05>mkg=Ibh^\UHn>W5'riFZN5d`Cug@<kJ1cH;5#uZPLfMfjLuaGOg*f<
%:,DsO2i2[XK#,aRE=dK:AJY?`?0t[V%g0JWfY9laG,I(B!kX0mm\GXdJm(9u%S0]$;Ij^]=t^M]:`0K=L;g;2W(V$[lq-4c'1&uI
%$G@$<%YgJ:JH8];KR*!CYL1>TA!$E2=>/'h)7NqGh3RXu%@JUnja7G!q_;iUMhKkP#<mo)ptt'HMeXYX'F]0!Kc\?_(q!*A&@q^K
%N,%]sj(3\bJP1#KAjDSq-(0mY@oP.,30#g*%iR6/@\X4"-/0VH'<>!oB+q)6'$?`E>&03\DclX"US?bH5umn`@h@RgEA@_9J=Sb5
%"t$o,gFRY>]:Cc2/UH^^XOBT#69`cXM,*X*7FrWmV6KF(F]&p:3$R<L(9,\\(B^Ig<tQ9s@H`%!+?IntB6af@!]h^$!g2CIn8squ
%$#&ca?;9I)iXAo;B[m?B/dDQ[)nI"Ko2lprZuaNqcuhL(:WsYM6G.C[[5)FtdBFiB.LNAL7<hU=i)J!\Gm&mBV\B5sT_]9K4g"J:
%@)!G(aGENZZMc\$Z4!ZN:5l+AQ->&9+$@f,N"eg!A7e(R.%CW!+ioXTdempY1BPK_5sT$KE3cX\LojZ$8=DSm6e&dJVSQe2QOGAm
%/Mr<D75RD`L'J)\OnB]O_Le22]b-H;i;bUUY)<.rJF/,1Rp<J@Cd2`DT?IQ]oFa6"-pR>s[g?s,j2Di8J#K<P.n$f::NZCU+sX].
%O?d2]nVTnLHS%WWN#i<0"V&HPi11L6-pcLG%+St"-d^<C\n=LNf<'jCfJsX#/7Y:=#&).oPjLtoLE(ME'n(Kc*GDl[;)T9I3N6K+
%aO;qSjhe]P@^7&QZ#ZO>2\"-ek/-4bQJIc$)=,UfpYcSQ;g@CN`AJ*&E!WD.RgX/p^^<"K_Fkr^O([>qg'6=A0S]0V4[BMIU!P*a
%hMU*2U?&;(<J1cDd#p1_fOo1H*$cs:E)-1/?NgEE9`#eWiQ%>91te/4i^a*47,;@%#\V[,Gn\\H`(Vi4280]RaktdZ_D3\u*B?4l
%p1MZ1f\l6l4P&cEi*D#3dqP#Y4ROs<Xa2hI">=^OJC&2!1ORX^2j4Td$n?IqnC;KcT"B38D\=IRd.%I+32;h^N''h@flki"mpjWB
%Q@2lSFPHplkdf&#@7TNLj:kQA$c^IZ&$bkR,XGQenEM&F#?##8<)9V4aMp6"CDJg'(-Pu?[q;V1[UFNt6sj+.6LAKEIpU#0RI:jl
%*?pPHnad*>L[`60ED(>]Qh\r1iS`AN*YcE8><ZoN\i2g1c6\UM4ME4W)t5o6J!^gXV9#_ULS<W`]T0i20qFG%Q!#13OOu'[]!ShA
%BW<@+"oBR6(!snWPS=*NBWf/%$'ofH+#W0';s*V\FIGiu6ATGO1.RLfn$O!l=("^[Rq6V?TH,b+7Kmi9Q$cIRi<W'mPf'52g1`et
%@@pWJnp8"Y/h!udJ/R$ubKEaL[tcp`-Oq]N47ud."R$89mff'\hSho*]OEmOB?YZ"R)"h,'p9km#.dXM>p^Esd+=T45h%D?a>)$Z
%b8lD&38t(NCW6B:AfSh$fpteB*@o:@C(UHLeQHF)LH7I+?Sm[W+[COQ8aub=35E=S/aEN1>D.S',`V&_A&l2-UUf^%mTGHb?ZsB;
%\ZINBq[;V`^&eZPL7GVkT+;9m3DlHUR\U-K4-JbpZ0k&co%&Y4qA9Gm/!#YlVp<k]a\P7g-`[3A$lD%=1@huE\[](ED$4?kQY_6>
%is%;)(-=Qa4(,u2;@dkmWD@&c;PPl)37j"'=%[+j&;n1W3"/t)4ZArlI*W&>@tVA!?l.D!(gSAl_)=f'I8F@\.Bii?k9sRL\8[fl
%&4;c'N3ES/J]eS2e:uN6.2<'0R*uIoc8[gL,ZH-6H=]cQ@F?rAbaR[iG`9(-=Fo)i?D6IfER5^[EO\!8SRecX4X1f=GoEHNJXg;h
%$Q(6&=`EkV/jG>1T\Nki+D,I.rjPW0N=Hnsl@ApiR[7bYG?S:f8'(qO'"DAC9BQ5LELsLt;1J^K+8OiN'9SMkqKWW[0X)HRFh%rL
%:>nYuYaBB>dIKa_cBuU9R%Apq>]U;f]$,seR$W).$X[sA,dE\.#+Q2B":rI%K(R9,n.2&SH1VTNY+%7G#T>Wnm;oh(`KqF^S<uSh
%^s,ONE*Ob'fWqo'&.!6E)guLfK3Zqe-V<(1+M8t:-^'5\4<p!r*Jfa3^bqRtTX:MKi0__;gQ:<WUa^RP`[PkqG75p$ecD[_KYo(H
%!L6o)UNi[[HARS"b(6\-j)/o7]FVM?'so/p,1$N1i(,NXaU"&i8db9<VZ@uuN5!FX.j.Ft("<Q68s3R6G[:IQmD<E&c\`M%S_u[5
%Ysp$[/7U$g;E7.YAd5FY"QNn0<b?*g+]sW"QaRMg1X`R8M$H.cBH&7.Y'=5)6CsFMo>O1`]ZIgb7W0(#jP>pV3A?kC'RJ>UFfI.C
%p32e&nmiffjI'dJIc[UD.o<,,=Sol\M]eS_f[^<m*O't949u[0:1FMV5FchSmoU>'(ln>A>=:g4]OkEdbKB&=oG"G<FAlO7ddR[k
%V:l>W)<ad6F#;*W(l>$&"sM.I39D#fXe'KX<jLC::Jb=]CLtOPk\%1lR"(=+=u'ZcZRV*U*$Y4EWaEi6ZDD'Bs+@nk+FMgu66o],
%RJaV<6,H[uZaR+BOU\EDZlBZ1>E;04/=g'b)!c\^94uj"0Y%<sitQ5<L`F4j[$W'LMlO/0D?^LQ5t%]`%_bo"cZE&\&kf7*A(`#;
%p->LP/k3R#A_*FmCg(_4@'f\l42HHmqO?M+N,UT3mhOQe33^oQZX0(UX,o-3TJ+TI<m]SMVD6!I'$UT>TB)M9f7iuFf/CQ*@KoDO
%f.[8$3<N`URi!K2&WodqQ&8Zo"$$lA<Pgq!\sL%/+=D7Ta8"/]@/n$p.<(&R9Y2QVHiVFtMAG6JbT;:NpfcgNCBuoB*FNr:)e5%=
%E*ha+.+9KBG=@MeZ96@a1aWYn/PZQk=N^eUAgLDM7S`7l!ccZSJCAf_deHX?PFVp,#cn5P(;T(a!@FhW%rYu4G9E?"he@X8TbC;9
%m?9#]_bQ[j]jjfMK.@N/(n&l_k7%663GM;kJd^f'oZJB7nslh,r-9?JK@*'Z_n9tQes`1aq0\b]]cj_%%R0dL(UIhMKS_1&4D-!9
%AFl>7NCdD0d#uB5Zu>a!+H@(Q=3N0S<,rSL(bnrL1]#=P.OHO\3>`XcUmZrn5q,*6Y)qaup,q!<La]]p7e%/3R,]>."l_6A8lS3k
%)^hA'+n#"GBNc'`U92396'JlTP@CB#-7.Rs65sF'3cUTea4uXB`5WqO'Uo-oG3G$.RU?M>bsLL@N^)u!NoF@r:5Ol`%*'=iX!I7;
%kU@kkX\$i^=%(lO>/*=4E8*3]2o(;-#&=c30JI'nHr@`q+AN!q+4]oG'Ef;p>Xi,X<^,<5nQT]Yrr[?jjUB*Afnh;-*nRXPkAtSn
%PEYY0a9q7DLf-NWANc:>DB@Q<e=J1f.Z;89M7&.>E%=eCoUq#,i-+n[YmPR?):S8C&NpgPU8M_E=K8=F36\umE.CQ^`jn\/'jDTH
%6,q75@52I$2Ou&&4ZNsn3fWPec3B*+iqe'mkef28Y\SH'CAZ!QRWJe4YuWJkHH\X5;C,G$beXq%SD*6KVf18cUE7\lTVAng(\N7@
%'a#.PElfR[qR(;_4<Derg:TI*3jGugcniHk0P%YG+6*c\*i3D!.(7#Y\V;OF3Q6$\5fn8g3)m1_Nf]/(crc-T"J)DGSYZt:a>XFb
%!OsC7&IF7%hI]3l5\Y7M9@&dN1E&cG1mMdp_2*_"BZ=1&2lU-B8Io'D\=DTPd+RhTcDJrKWIlmX>G;<LDa[+_iL1:s<`j]L;0Z#V
%BocVZ3-8Dig(<10JdluX$YF`tC.WT.BY$KhjZmA>1mMg`SS7+'\@ej/=^=A6jX$XT%+"//N?jf.YBaL#;D(+$cS1KHB)i"^X/:ei
%C[pK+kJh=:nHtiPU'.L="uQmrObU;L)d7D*&]K[na,IH%GBpVc&(bp&;[5],"s-#;;Ls*J[QkbSI#eL]aXMp[M'uBZ\/NDmE(Gjj
%+_>AB`aHpMIKabU&Q*BR:,Cg[?0HkY^4TJ(KSG@bljOBE=["7_k<4Wc6,UW4I)0L,<t=5tRrKj>75&@45RX+M51Doh4cf72/C#*^
%/='5A_^Gc-NRg1=<+n3EppXtBD^#p0YWZS0fCHL$\NS;!#m18go`dZ:HpD\)gN$0V=A,!G/i+*HCY@(D\^nlA5V-9_am\6k0tM-F
%L_i767u>\'A-b.?_3PuXF#4m'*788j`nuH;/HRKb!a1doCPrZ-KhkfD4k2(<!9]4,,*n!Z@f6jhPbNdMJ9qDG<d%=B;37\kYe.Oe
%JOVX##)J.O?,E%rZUr+*AI,ig6p@V9h?G-DXVDuT)$^>)&=5*[9EDLVURhL+5\&Cg7d(e<&#+Ys&m[f8K>HcqfQ\oj!d(l0$t"Tb
%i6S@TE'TAfe:X/*?K`)]a5AhJ]h!g*;-"_P`!jR5XS?7DW:JJ:5!r7WW<1>DPo6ZXl=4k[WWOP#o.+6\_u=]qkQU\7_QU/l,Yj]!
%#Va'0!bj'<()sPRSAhrl?rr:&=[F<j#aOX>jP,Ts<=V?N;!,u=/\Zr_i.5Q&l(f%'J=a/l'.FDVj'3oM(_A^nC%qt#NB)>$L`m(f
%3ZgXYe8n'_GDRq@:'4o?EoT9aq]J`B4L-OYGh'%'`ZCsQBl]^&,)!cb$1u7%iS92UTc<&,m1H/Yi,CaiYlnc"NI9i4ltr4[$38ll
%DA7stpB'U)fe5m,CH7nmSnV/V8A;$4H!]hgnjsru_5]Kd'o<nGbD3`R=KEZ3nn3Ii'O?edf9,:X>M%mTaAtn@A\d8fcGqcjX!YEV
%FMYt#=b3k^Tco%PJNO@?X^B-^R(;cMW;HiD#M%+Q4Z8=@#,J\R)4qXb@adYB8/FS:%b^Zin76!;81R4%aI(er3]E?]7$sqE[Z#?[
%,A7.Z&S`;3ehgS:l%a%8(QKF^1/Y:Dno`q=@<rWS8s7S)D`METR%)L,$h"_gUUkF-UYu'83O*kaB9a+<M,$"u@Gb1j#Vpc"GZ0f>
%-L%\f<(raU?YT;L'?Th@a-J`\A/#NAE\-j2;B.W*BEehbJJVb%%MV`>T#WpgME!%<c?,A!P@4#lQ3U&XMI<PkhEs;Z6raa>MZ69G
%We$g+n,VE-j*)O0@ABuAZ>3iPrcl6:T(THg?i%DCPIeGkSrLY2.&CP$?uUf]a,->G@Q[W(juMU&RDVV?.m-&R#;8:i!ZHB$RpjYs
%YjqX:N>re,VQ)Vue;C1Ii6P<c8Xar-/@;!qj*Eb=MD];-;+#s5678OnW[Oi^I2!?'MV]m0@aL.!L62R>G33#)`N5narM.reF<-k7
%itbEIk`6J[1?1JX?/3-udL7P^VPZ_TAs(IU%?:b/M3;d?)ZlNqbAJ5,;uNA@>2Tmc;ZMls/0#Hl>Mh7o[]1cQ665R:1o_UJ+XTc*
%T`#!i$^i+P]OLAs8gmsMo"9L-8lZV0'a"GU^eI-0=$S&bW'6gf/-9^()GSQL""4.]dt1HDD/=S??VCH(66^'^k6FAQDZdR==Cr]V
%9u>>Fe"uY<#Ln_![8`3@_aDb5i`</8*uZNH`.F![@Ib>S&"G1WG9k3PPb8rY_lU7D#B[HJ4,4qp[dkQ28<"BKbUP!e3=Mo9!^Kc(
%Ag#6T%rpW`0")4_959WeCuJJ-'ibG-Wf.$KW<:"-Z-^0.7i9T![74Z,!Brs'=(8*/pqo3R5ZYgh1;J6=%DP7*913<Oj%.B=@-%r^
%#6feb`$LV;pN]"YeJsGt/ir\gl1:Dc4q9/cboEBJUg[<rFKX)=X:.)IE0t$UK>Tm>GdK$+LpBmb$f&('km1E8>H7q+$k:Ua@a@!d
%,)T-'F&3=:!7'68qq>qYfXM7%9f"T5cNA!B=<;lkeBP/%dJ8g@/EtQ2Lj?:@Q&OM%S6<mfp'eRoeQE>L;I2&8J1E^3X=Q`OIo>VF
%8aOkF!'hlm:gVoCD+%YJ^;?``HO-u[J.X5.47%'\*ok&+.ts0C1!7p;&\$F0587r*i7Sh??Pu?Co+M7@Ke:\.#%N+?QCEuDf+1O>
%+P(r["b2.UhR8<9624(F5X'nIQSP:q+IDEf.dk<iJL,WfAIhoBrD5@q7NXmLf6m&ss0ak'mX2>9qTjL1c2RS0rQj4W^V>$ai9J;S
%ZS.AWDGI>ep-(h.K9N42(N]GDJ%N3M3^7nqWLrO*j>Qc,5'jImUeL[d`..3)qsR;WIZl[>f_id>\]p>pk3K4TG:a+4Glp%J,6$Po
%\UQq1>gNRdlC*W=I!3mB4r=1r?hCLDrM*_jTX]2r5PfdOD]k^\b8=&O]1NC0B7k\ZBF-+1DY"V@2TlNn_tJMG^(1m.?/+Lg/>E64
%.,&6`[_.p=`beKfD)N:7MRo9:M%6ZOhdPOX`3_s.+"W(2m><aJ/H$=i3?*cL9ZSfIBVEFJ4kWED0`+I_-&Y'aZCBEi21i0JNumc_
%#9h#";'"*iJl`W`bL&.IaCp/#$h,qW&04YCCa.*>L:HZrUY"m!B@l@h/j]VY"_5<Bq`FMVD#hej_B6L78LLLJWnHK!kY/R3$GsMD
%4^#'-+I3;(`Aq'e8B7*)R4eqi2?AO4a\Je/`'KYb:m-nR!N/qZ/3ri.5)9RL82(:!>*Em-Da-O`%[2DlLa+SWXiq'Di*Q8AU4tgU
%XZ\AL3SD-u&sc"!_^"<'1P;]QZ@8FhcDO.")Jmp_E^.hX?l0;?cU1i)XaN0#dI3lFo3(T+Z77LI;0"5"4EKutGVckd[dJ['Rjdi.
%D+3S0g,`W8U<51sJgCbnSWf9XiW.Fd'%GIpU=Kd.Z40BqLhrH5#a_2@p@'8HZ+.N'8]9)oWU$%nM_Ra(bTIei?sLs-UQ.$RJiLO^
%::8%P$\CM.Gi^M$W]?4S&P*(+XEQs^`\A9&&Eb?C$aY\skQMd3BRg0d,Y,[IoR$`K0+8<U4An-H,ft)sp8"'tG^*gr_7k"d2D;;j
%:uIM3_BFMpo'E%W-!*o.]*Z1l^;V4<e:oi:Qn2q^BP4%H@9tHa#bVbB]?nsa6]Ge"C#>kfkJ.]e<*GEbhuXS-%!4!oFCjSlC]_53
%P"l"3W8Of`#^j?nA!dPG<%MNR]]oX((d;`lL&D_uHN8$<Ur9%JL^OJ'"X*f(4-2k^:)6#ics92g(Ci3PK'*T>7YI%ur9t_g702]"
%Afe*bHQ\QfXd#P_S9TbhG6Q4^beQfl/]94"C?2V&n5BbG8lAFd>78KM?5IXGR$@YY24%9pq]ldTNi+q?Z];J_/h^GP6ab;oW@&UQ
%<7AfLL#5?.PY#h</8L"%HM,.:q.)o(;R<ERIg*#n:g\fcEmg*`aci]i"_+5Tj\F,?1>TDB7n#g@g\agB-S(#B=O(&0:\'ddSWOje
%FPXbDJka`oXp4&/.s^iPQlA,L_.fWi.Wf!-:Nc.heFK<N--KKQ3+DEo;+;^V3E(n9f!FjAHrB^"*=gONCuK&%?'TAJA:"j-.4[ZV
%/V4a*X"%43lu1Hair-e%oGQ3CA\2@BI@n5GbO_8Eo[AIc9;icV!KAO.-M/&>],DSPKJ(7MRTA%862d7F1Y>-Pk=/;a74Y].p5/;j
%.j0"@lW[@];,;o:jlq;+&G"oHZc(J@L'hD.MOQpd.H1"HVtopa.Lej:Bbi<uCOp%^HS<bXV[3#9.Madg)Z8.5]qN1QqXT8pLjmH:
%e6&6V'Rn+i)Ct0'-ULu078eAkL*a>3N?us&I(8pjl?kC1r\YF:9[p8A\FWB2WV@(:&Iu':QpEgtRRTI#ar3D+iD@9)p2NMi'Xpfp
%?aQTe\\>[P+(+d&>i+Wni=mpA_0!b;!$Q<ikfc;A\G,MPp[2DEr9j4Pk4J6(kj!rJ5PBs5jppCF:+^k!\bGUUlLa*#k0ASapQ(AB
%S:>[,Es->Eg&)%XrYBsX(I/<'`+g&S6D)_n_MYeB:P-Vk+MkdQ1i3/:DqD<O3Yn:RZaLdr%Q^?QoW;\HXp;rDcY06ToK2.+`g[J+
%4VVJU'&lo]P</jh37+nGjMM-=rQ_k.b%2CFfN_f#^K=bFO2R+-%sn=GLf-)>h(a!U<OMta-0GO=c;lOY!?MJ$EE"QmC*"/-l9qRn
%I9thQ.-QO4.Q!K+n=E@+h,^R]D(qbo$;BN,Qs5;q-B9+9*#+IJ`QDt4Ep(sh?7D]H>j)f.Vl1LD-+As[PD0AN>2.2F7F)$b!Jf;'
%@5+.ZiC?-@[H[bpd_b-`fiSNuXBeqei,)7%grO$<(tJi0)G8&675bLkQiU;Nd/=t\#,VcATUtg=8AJ'K>,bM[>->I+p3/gSi+,1n
%ZF,<XX/)X>`]!m,QI0q]g.<t^oE%4SEo\M^<(LfYeicinQg^/kT=W<,:%IDNl#c(kHd1b3X.e"*T.hU3lE)DkkF5m/c;Gsb*k$?V
%D;K*pH_-p&'mfd%AN&UUMr.k&;-,@MnEpMeJQr?+iJ.K.N_u('XEc:W9T7^5@6p-FP$i*.VuT;i2H8WR3%Z^4JBW">0/=)gm]Z[/
%&rX?=':%QEH>#Tbgh8k`J>>a(?.!PdBE>M0etY6"d!&1sj;Xmg1Y4*1%mU9T'X(H4Y6X<7dSp7!lgbfRft[-IGR.TOcaJs/NXR?l
%(%i"D=A$$C4H<!KDFe6RcjW5h6;3RmTd21'J1.*Mi(bC+0K17#@DI]mJAVmG?pdg!-O[b(S?jSc\G=&g^&[Ybog!N0@a7+1bDl.;
%2_+#3Xborj3!@e>^_Y:!FAEkd!_#AL,W!?pq[9e8:V()m,$Hu=q]0/Fh=V_"5PUG<5&7#[d$*YB4cZ`N>/0u-T!\rkM>blDR=?'n
%F<Fkf%!fXef1b7.LAj*mi+0W*1dsE\?*6b-&f>TqQ&2#R#?-?\R]*(BGlV-5N<%t!K3a(t6IgjuA^]K8W_-*'UMr7o4uloC8YJ/;
%V9#E?b^nN'-j_4?qoH]&O@pLe#?_+noBES*r8?=W'KR,'YZk8A7D`P6L`:#-_&16petb>SNE=gH%.9EAGhXtp$Hb>"pc#5VA7]e!
%;NmOtLajToZVk!JO<#>0(N8EK&A18L<em+Zj?ULP<br]]P%bUnTcE8YJ<s7>rgB"%\nNC?&eK%2C_0%ED$6h*Zr/]h`?6*D:,tnh
%*(J#c/FZnXR3eTC1H!(DZQqbon!f8'T2VRF`V[iApa[eS8=WX1"U1Vn:eN4[S-S:GX?geH-L4%L*B[<IJ.0oN*/]!G'=l8JaCTX*
%)?bs,@SF-2=;RN39(5.[)]YRS(lmR8%O@B0gp%U?@oSbe;FjI`a?"l((s7%J1#HGEhMg,O\!T$"_G[KjNQm&)Jo!1!P0B8pqEWi`
%K<3N:3*.'>2:]ZX]O`Ipg>/^YRk.;+MqsbTm;."Lcnj?44BB/+:$eeIO>&>sO3+4A0E;>k`s!&baAk2Z$1CH*4PGgL_;k`G:-k2G
%Ae,?u%93dieM2mq@\J[$Tb`Y-!aSoM>tLRhFPBA>,6Kt]d&Xrh8C"="XqOZoCo^UU@hm]WLiJ8-D?'u%aLaFZ%qo*@]-5?-ikfe\
%/#V5"Bn-Cb>d[/=]hpREa=qRKacoG:K39XlB#k/FbDE/<i`C_1k@#Z-3[3-H?O+.8J!.g7]MTE1""NdDVdbdNYotuL9'b)S%4:3.
%lRitiPfAk#"!-u-i"K(f!BU*i!?+_KQDWUR-a>E\BCb"hIcmu]fs:!GVRQ2*96[iTD"fL%r"?0L?)lI7CJ$G4LbM/NT+?$o2+%8C
%1?DfLOP:`;Dr&io/W7&[Guo@Op5QE2AUfi^lRfYioBt>s^mQ1!Lr0m;IZpBl`QlaU;UBidq;qaCEf_K'=s=%kE4"CC@j`S)hLL=S
%Ouhl,f63^X"Y^EmC0Goq,5"J:AM4T/=PcsgK6*7"bReCp5R\"l'uf_0^t[$JcG;dPfca)=?THO;NsbtU`dGA0BG3%QdsHt;i0FEp
%JRQQ%&7:Lc7>O=Y'-h;@&XqA\UGQJIl.pUE@!kZ5:SIh<MJ07'GI7CDJY@(WXLmPSDh=K(0mHs,!Z=B0#ql9Sj4Un\(VQZ*>kS/1
%c+k>[ZSi<p74qBufAp[J/ZITjK5BtAF@<?XF:>QFG"LtIMH!9De$GeAJiA[,KFeQV[!#46RFrL/=/]s7"Y*f^qZe7!B!^LM=SnHJ
%)-r@#fggbAcE'4H7n\P&)WP>U=#A<Q!f7+s#?abikYfG/!o>+sG%%F0BKgOWL](X`U):A_?'&_(#h#U)>dNd2pq#^aMNH[teds@U
%7NU@G3N<jfD$(_<M?;.[.BuGk%L)1VfOcprQf;jiV'Ao5;!]G5*A#DJ!s^B[;Je0e@k.5\X)';LJclY1l=@AYQ3Y@pWZ?.cW5'cI
%iM(68Woh8C?19Jkhni$=oSd(sE&j<fgJj>(fg:MH,drcd#)pf!\p\X#LX1l])7jB</3`E.[d",1a_)QONU*YGDBjl51p7WV4I.X5
%=u82[W5)]+JHU>08OP,T%,5MD&[>`1RLJWl_C7Ur7Jd)q?@[1[QKKSpoq:kEbJk]"!k9c3Z&(2S_)0+cgC=8e$9(@)r`Gb!\)#>N
%fDE%#G3cB@cU%SOaIgqOq$/$-:!?uYQfCE^0XZmS2D!:_!9FP9:"K4"U`V#sFV'prWJ4%ph(WQ!,JjauiP>,XSS?l=U>hOBg<I/=
%Jn=;Kkku/\r";^d'GEbP.K`PdU$,8f'IP7d6FGZ.Z9bcgB6j/M,:/h6!P1ToRWPd!-jWSnH[_5!Z?r5sK:I0!-''Hg@^<e\(k7^g
%#59E9K,TXK>)`!oG"oLbgEnYu+d.p^(h]F"ZenJeA@Ka7p=:'SIVj?*bM0GkGcp&Gf/'=i-5,AGaW9!tFZ`Aqn$5qG\=sb`D*(<a
%T^aq-[<Oqm0aj8d"jRMk8\L4T)(#YVY[R4@%T&S+(rc#LS>Nb8X,Z0Le!G(/iDnpH2a`6'KXfFO+TWNS_-E-[BfPg0P!jHfc2Hhp
%DN)ka*2>n&^_EfeSp$"0*[:g-G=!^S_2VX]%(A\5W/8fT:s0hXX^RP9JBNggRWFSEmR*XS'<!Lc7W'bf`8d>?`_*1QBP;/`18_*<
%hR:fQ$p3h7Z_Q\2&'dp&T(J:tpA+0%Mr"2qSS]GHnGHh2&KNK"(GhQX=0t:2<S$ApJcT'pN)65CE;Y?`[4q\2#iZe*IEiXNE$oYi
%8#VutdHaA^T0_*\\bq.p9>q\ICY[p"dP#Er."1$=1V-Z*RB_GS,EB+:4p[;JTH,'l%mr7`lZp8\F9L8!)Au#^jcho(AcTjk(q#9V
%^-bdoG(O&e1mD^I6Ua_\N^?E\&j<\/@1Ep-#E$eP(Xa.(U8I>VSEE/u%VW5SiFkbbG@QQA:E8js*=rR%5eB(a*!Tt:f/"PukVIl$
%Q5!cq&kHT&`^jeIZ!XDO)CGP:89AW,?]^c<PIIQ'!V(n0g&M7UYp5Hh3fiK/R5Lj':Re[2Lti0)8"k9hI5eSGe4b>?TasK>^hG;c
%.ueCV`cX-Fo81[.1('E<'2N/5ClJQe,b@O4S[R$Y/X&)S+c(pgaXX\*@9[\cAfl[k-8Emp1AE\EN)EcnQ\F`jU`T"f)VHWe\8a*T
%?>EgXU=r)D[%b":E=H0>F.i,\dZJ/o?s3ua,L7p:LWD;A<CJ.+17U#^75+J@>XdGf!aUb=DT'scjBI59a0go.0l0U><]@GhOo(e-
%.<Mcdgl-*Tg+1_Z+`\[3_dd0qg;%kh%lfoW*Is$%!jOZ)0_0/jj)cH3ed<`H#RU144VK9ON?D"Dai#+]RJ24Gb:&#k9Z,ieBHcZ*
%"p5Y&`c0QaQJM,hr8qKDH<F[V``hH=d?,Ytrd#p^l`I?X@iNe1FuB-NFGB\]6t_%ee[R0#1<)=\J\I,&B:]i@Jp\OAI>O'UHEM?j
%ZQ\1nZ[X`u\B+T98Zp?p@kree@0J(O!"Nq--Z=s&:%K;Q03j;on!m`=2Qh'*Bo(sr.nBEt@+e21TE'^UnkZ`rM,@/Y@CJR\)IaQs
%!Oo&9>Em#C3Kl%LBMolkmSDn^?-iBKjbiK=Bk3lco>f%40DfXsko8XM?)HWkAGjR+7t5nMhG1dIHdR?CiphMj*8gDCao*TRO&,Og
%nqWuuUSfJ@RkLq9S6UL5Z6*uJV[#_)B;\P/Nh/Hs4m&W&/hbQ=D9D#:c0!K]URTNA>FL#Hkrle6%sS=TI.?%?fkh6rdi_@Tk/;'4
%'B.K0G=CWh%Ir/"Fnt%VafPZ\8$\>p9%/R9\6R[DGY-WpB.m"<?fGA\oO;$GC&$B3dIhX#Ie;^>RLu`Gj*s,$Gk)i?r;%]jT:]p0
%:QE/C<]p+<gA^X5lK6d^iQ]d#D&aY3G^OUSH%&AuNr/eKlK7a6lpSJ5L#!O]+JWP0`S^>1>[;fn[2&5[[Kk-=Y)Y/PiO3h*oS$#g
%d"6M%m7sj2KBm0ZF*i.ZFa8/=q=<TUBLf_D[-lrJ'">gjd[EDOD>h+.4o+X/*q-;![Jm3#!p'<PO1m^/aa5aLT:VUd\@VRujR1^c
%Faq_$J,NY^beO+#+@k!E"=1s&`rj.rmYOphooB@-2#PngQs>d<(YgAVQ86)\->lY8-ac.J%1V(J5/Pq?XaMFPY#ahfLRdSH\^;jH
%G'$fTW:+th7#f9!rp*i[?/8S6Dd=/rCeAsX!t`!t*s)*X1S[6]Br'+$q?qF1-(JrB^!/]9G/($WWG_"5l+;eW`T6oCW4mJtTt:J@
%]C9b:hqc_1q*65[hg4`b,]`AQGk/OqNZ7G,Idt1"2MH]?K66oA;M8kupg$RjaQ>c<04o?=PD&A1q1uBVkq=l\#!'&=<qc^PU0)qk
%g<a7AL+fmj]j:P]--nJ(%YL%!L'PH?rT*B`jM+C#V>m[t&R"hsB\n,2G4eCdZXo2lFbk3%QZ7G/?'2I4fp2+ekfO9u<n`PtkO4.r
%qpLo&'+]6@2"IX?/`Ya]VD/Ni3D#pgq?4'X,i;80AeD=@6\LNNmT.I$o7![NPTAN_KBfc=@dEOX2#P#rPMq;33u2Kl:u4J*D(X;?
%j$4o/[8^SuFWBV_hm<9hnL!!Db7VCP:Z/\\O)!im*JQ2$E?0pb(b/6eUT\T_TC'.iiGeEE8;$7.Fi?,rs.dJ=iMTH>D6LG'/%r\J
%;g"9Zr82AJmCU8Fkl'E2IrI%e[qX?CT;4U*p3O5Qo<"JE*a]:nLL9Lrpi]N4\+`r?H>?T0;\BQ%S\3\c,5gk'K@0Gn:\ark)Y]_K
%,np6YT.LRlIcsD^hFI>>jl5k.$iCgn+7D<OrUIq'X34;M7bb[h0I5MeIsc>6h2+&#GAqj,*1$!@dkf?-s,f.+du+Ym+n@"&,]]C3
%Ck&PPcc:N`rPr7+D%DZ0:QL9DBMJ>HHhsh9kTlIqq&TINrmC!%5'37Zro4Z[KKK%k]gntZB/D>adquiYI<Et&j?(tk5EZ>]Y:#O*
%gji*+8=Or:qBkEcc>T9tjgQ2iZha"F8,^D445\cjLGr;$Im(>jbQ7``p;Ib*??bo\rIgMX_[m:k.LD'?2A(196jtu`SId'6!0h:i
%"UJ=A'VO:6:S8(ChemnTl(bjH]RBP$kO\0N?N'XL=oA'?(4S=T#F?6&?C]m=RY'99L=pjoY$&sb4CPQb&M[\L0ea]+M"-sO&M^a`
%n3G19"R55kHCX>eJ%Io?rHBV*?T`W)VUL:6U":5E5%8#OePQdN0b1[9]0Goas#E)g!AC>m,)\&9dMX#>?Zkc,G=U92:9NKH"7#(I
%>&T>?gA-:8=fJQ@^4gLtk8`u'$1k];0=nV@KAJ8doBHBg2;/QBj]6qQFaAIWp;?bP8)C8GoC&SQIlr%geoWs$oC#1FGAB7pi"f&-
%MdCH.]tHD9^)#gba@D;p0@*t[SENaJ&NVuA:Ya0.=!qYTNEh]qqW-n_oe/oC]fRP8]b3l7#;qn]p&Tj@=T/&\ILpuF6MfX(qI]?g
%g!Q#,n)#3QrA0;%T5aB$!qdObK;YA!\V=/WO&FUa$_+o-R!Dm`o\5b5q3glaS<WF#p=$(+PKiR-L33g=1/"<&rcGX1Sb(JcIf!DA
%CbJl1NXRELa#XdH,Dk425kNf7H>Yb')5nk>cjdp14QEl9O]ir$OB9.lY&ChR+\qnU+I%VQ0QTLQK#ggdM;S-Q]'GosmQ(n\?15^S
%f7E_QcZnH*lh'#'3PVT;c0m<W>[EtMH[>VKe9nGpc1gH*H/8)O_.-T/4+D^&H?8YH%GKk+[<F"'JI9j2:Z8P`&)Pt_o92U;IYV:p
%L\6,bf":lCbP_q%X^?YUD=H;dUSfK3n;LRnS_O(_YRLQ>H2`9M_1+qNE);O#U(fp(j/XV_F.TiiKl`ip.>92QhG9,8ZpH1J$OFKt
%XY;UCV*2s:X`46_]'h<"$AZ@1(L#dEThg)_FE)ADIJuO)qOgWtealeZpk*4(ek,que#T5kV^E9>S+$`;M7Wa9C>bE`"Hs-*r?;*m
%[pRcBm/70slg8PIbeGI>C2:*CLu_2,L$a\?.Gise\aiHPlE<BuYkb<f`lDK:(/*Mr>d[qV!I](s+]Z:__teFA,i5!rM>'M";``p5
%UW7!pa(Mo3hW#!pC')+sGlPn5oDYq3T&V]mRtId-/_@"TWunK_+;FXlPPt45e*XWEU!`7f:?q;s9=bl12gsPDUH;83DN5c1guH'Q
%Vt@dehYi37T7>_gmnSlrT-2%4s&]6Xs&&c9q4F;ZG]<M/a#ieZs6K^^IpgLAjen(;MrT`!f&QeipuLXJo@<*sk@]2E*e1eM!le9E
%0a"\nfaRfP?g`C:8"5'ZJ:IT_rVMd[RZUsHN;rJ4k3DU0k4H0ee)SK!dIu/1rQ_q35'mO$<u35cf3>#*mDl]U&<C(>mkG7t#'KCR
%D*J!/F?86LYHX<@gDfQ%q>,Y^pciOF,bW]#fh$GWZS*C"pK.=6s0rqf7lE#i]mF8K7d#2T-f?rT*#-;3q;(<.o<Y26kb#'GGl<>u
%ih6>J>F-pi=LRs;g%;>_5NKTXgX64t0)a\l&q1)trju,g?<hVaE:`1L-VmPdr:O>IpEr:NS$][YY0=*5P52T.)`.63O>jU"^f7(Q
%<WT)?Zk)??f05,,q"EJ.P8hRMJ%"H"AO"s5lktSL6bf\X]_qL"Aj5q[Zd\MAGjF>mlb>)jT"i99hM-Gs5>pb>$,I;EJ1L6m]J$P8
%^B,k.L=4>5B1JjqIW\Q`SU98N+(O*\1T19D_Gf79'`%NQBs&P*..<S&"_FM@ioK1e=!qZGGZ+P7DXK_qIWpI*D(IRMImu]i:DmpA
%KFQGD$U:tEHf\c4m-8&d<f0,RlEe4Z\UZnn%Bi).Drt&5O8dHiIqrADBBA%Fs47q]p]"I$:B0EYDtfaupc&!8dl6m3r)@s.5/`#b
%i^&@ZGk9kWC@h8a5L2pqi?S,:oD1uI=.MJ,r14Nsh\V")([Th%FiW?#0kUV;ci@.,KS;kA?LQ:?n_P*>ITGcHU\ZGM$IsAM?i`ir
%AER*2JA+g:LIolmIg;AeIp\Qm3lps=#PgF'm]Sq7^:8pUL+c?Z7:a<n<ndQ?Df+TAhV-V"ro3),oE%Jg4PnS0^0n8<0R94\]h8T"
%Hj'b0g[;k%'nhNM*>n7MEU/6]p)Q`HLW<JoNuu+Mi267bqmQ_be@d#AU_EsIq)[1KosK;ArQ3Gof-=G-ffc9Nr*DS$B9u[ac<ZXk
%SQt!,'VOD*>oZ(u;bet]s1Xf.cfpcLDVff+gq1PuUG?(R[F8U<YY`9a"$-%'M,/_UM)AbAQ[isURN/@$JQ6aJgKVkYLS4V3aj'@^
%^K5ru^St=_Kuf7_,;;P?>!PXA]:aOqEqP@#R(`t.b<$+NqQRe"Cp4Ehm)'&)=Z=u[V8I_k!l$81m./mMKL5^:e#1O;qQHC_7nNT)
%$&j3Q!]/^)m'HH+9tlE.=huEZ89bFNMOXA;Us!n%2n&Z!CIQ_U0-q!UL=ib4Z.]'ClLML&hC]Ulpu1Z&SoNDnfQD=;f55.X]&=a'
%>s+N6H$o>FMJZC+ZoYepleJpqq>BH$I\]1m3dmRjqX6a]5<AV4Rho.S;]^B!f71!`qCTe'4(%u+F``*/jSG2H7IWs$A,O<9=L!=\
%)<)d:0Q$7SR.n9%&-t;l(dCDMs"oT1+.[lQip>gB7Uc5ao_eNQ$0)&%>B?%VkkpVtHi,mQfqlp;XIE=fn+RVomTYO^Qe2*2o'#H$
%k2q=Xp#Y4FkO/8g=2!/Wc.*EMb("hk5Pk4HR"WEh^-(71?GZ[_J#WT6g>gUTr6tU8f^2ph2Gd\!=%]<f)ZGH:I<Kc*K089Fe]MC!
%+`-b0-MZ=KHjUD2c1l+53GuiC;m3@.+[E\RhloX5E98No:UL)ZW]Bg1_h&j<KnH8t)4:0O,EBoX'7`6l'=[qhl"+4t7Dj_+T8iVl
%AmJP%&8J(/g_QoC:UO><((]5-Y3aG@:<q-M6'PHt@aVP!C"iGAoP3oP]Ds%1fK"D\%)&)o'NtOH:8P@i;MO>*'$ADUgZ_A`^K=bN
%C63.Z<N&Ion&GKPNQ\=,R+6167g;'`=FQe^L.V%8dPS,jpt1TH=PEPYnqB5O0%7s9STeuJkn/SHDV8;:LX-oT=A=*L]tnRe]n"/;
%3dG1=%/2>TE)3ih]ln4ZVXYgeM+\fqQ`B5(L@=gH7k_U*%ZufI"9JbP@K/!a:9NP;4ZUohCqSMLpDXncjC&:U#Xdo'iJIf8#CilI
%Q'siiKl#k@]knr/(dlIjX=HG#$al@eD%@t`IV:/C,_L/Y\_dqL:Poh7QFlX\dpnb]Y-.lGaTlU<,\_UGFo)($`F$rWHR[CGE7.>R
%T]DS%lGrl;336a:7=4/sgA,_7^UQ>9Ge2[\/;G]=bAp.?ObUVq:?35*/GB+'05EIsoIs&#aC-G7p$Qeo7:Y;^d(SqH^Y*#Lbu\3N
%JuFTo0])ZMd*(#Ig0ZZX\@b:kgUup6O]$YQ9,LO$E@`aqY"l/r?9Sd3#LC*rZJ,-uAG',-U7jG.I/h69le[$>25XH&IeEcI!(/8%
%JinN?!:F!:A8ooA^5L87RiC1i04Q_dJsa1l%/?ne0_k3i.?^\`^0\52_lbH6'^%V0(G-`J=J9eS`(f)m!c%(=!VG)Mk'QPKdh'M!
%YjIbG]icKFg@R-g2XJZr9^U)'+SQ"=Ec8%WZ"K=(f?-/!cl6&j-Tg0t=-kS3It$qTV4%K0@W[7sT5-m/TmptDO\S&%rD&/^'mp>2
%SY/!TJ$,ud%>*g*,O$#_M_?\r8F-"jKB4W\"Of01ne,fPm03HD5Df3RA*i/4f(0t4qt1WrSmD5H^V&H0*ks[!\[_Ikd7lhD5Q9f:
%&E%R9s.!B#5Q7P@gpK8Mf6/L1IP$"rH$&^iF*r7VH.BmOeHoOX?_Q^_dU$7^nRGNqZ#'t"[,#T:d"drG*W,?S`^:jGc?@tc$k<(#
%pYu&FdFH@XnIPSXVb]2hN;<!&C,LR.c]=[lFhBn$IrU2ZAo8:,r!fdBG]E?Q7@-VPZ?/P&7r6ji'Y;ER+eNBXrSaR@NL)a_FrHIC
%DGDea[d%4,*1`YWr3/1Dq<m=&S,O1J+(&?*i;Ci7X).5&na^;ko@Z)V/iT-SSQn=54h3SdkVIG^r:1b#!5a0'?nbk;G4!>@o^Lr(
%`Ucq.*Zk9!E^b_E;5:'q*UKh#>'U>;iFCABHg?[kA93!HKBZb0EpHpKL%DnUH#EqbSPQ>FhgiF]J+'04]a(T]s6=a.2T^0>I#=Dr
%amQdjDh[@!/aZ?9?\Qf!4t7`CQdDU87"4uK$cc"h[eJsuMnL,X-:uJ`P=k;;GFLh`D<od([lrODf=bm>kEF0BJ(@bIrR",Bp/C7/
%3hOl1X*$>ISO@l%C^\:U1A\7[>Mo.?7\B#GjD('A^=-7h%WiL!T0D#HnL'<Fkgn=o]qs+PdscDhcUQf+BIB/VF;GO]523sE-]NT=
%f%.=DS^F@b0>(j[HDJ*#[2fL`RongJ+),XUqQX7/htE@*hnm)\I8K)7R]C-dd%/*A;mPEXP=@cYC[9a3cKK>*STQ%(q4*bo@\>f>
%q"35TN^%+IA%/n\m4F=3A2)rcA:?00E%?jaD$Q2q523sE-]NT=f%.=DS^A8*:Q[OW4jjDR<djXY@[iF-UqQ<^a)5aBgNrLq55)Sh
%OHO\>'VG$p;PL@;^\ZH!T[?\Q``AftI^Y5K-XQ0<_i(',[9"B_W^*h=Hqgu==M#QAP#5TCEiWe2C/E?!QPO,cL:5m21"aUL/U*_f
%G)Al7SL79;[G3(9<B<aq>nYF.M721h%E>SH>42</FGI$MA#?oa(.ju"."+0!d_)FFq^\KlbaKGihR:u5QmP%9X2J/q:r(REj]Pe4
%cF6dQQYTNh[5HrkA1mV'6<ajmM=\0`mC1[3]WDfZD0,FJ27.XYNAt]hP<QA0YnI*+Ds2()Def<i%6d7)9KI9L"oO0Dn(Qq$]j/Xj
%S"&:gbeKks05p\EU%aCeABXlKNIDO>fajnpT_4A=^V&$CJ?Juf[[pD"`ui`Uhd(d2cjFSoUnte\l/N9NRCB-@N>J_H^4U*,^,Mto
%mS(<LNI#(r6+VJ&/7V;O9-ujSAIW[pp%buArc8&$jCieJ-i%V_14r*LZAZI\O-82YZ.M+Jrg%PAc\?UK/5(3`ddM'$r-$F.n*+R]
%@6Xm$_7j*r'spu#e.*h"gsSsmm@ZW!dligj`YE`>S+c/gT@i#je.-0[Q?L,`#OV&QmC]a^*51%;ZlbXh;&d)=%=sg`BdX=5clSYj
%M_;efJqR7\T9bu'5(naZJEE`bm=a@,>(<l-7[*9[J_geJ@/4Nik8(9BdaB`7R,8BWJ$XR)<R7&8;onJkI)4OB1d-+H<(5^#;L%UR
%p@kUmkR9imn0N1%YS7j"6)*WL50)D]$I<"rrdGSJrPNDu)"er)V-&n(rB4J#I3NjC'7N#VO,%dqO=S&K9j:4SCH4p$hfljf/I+;A
%Q2#TBOK"3l:j?=?Bj;!KCY;cnY$*QegKFs1?,Xd1KD9>15,BmJi_lXXb;/<Y;f?VJ9B!F>pip^:.E_W(`0AaFoCD[\Q@8`[-+_i7
%$I<"ra8JPTF@fV+kZc7b8,_c;du%2-raQ?rIIu@P7utC&^Kk[a#$]k3pbq[42e:54qHrt\](aJJX4*iM5<RZpfT/5qrGIr?Z+oeU
%\&eH8K$*'(UE>V=6WRrr_6:%LO?GW(o/E;4rUBa<_\\B;DuO`dJ,eQj`Q8=V^!Ak:q@N]&(]=5-=M:[I+7FXMo`H+*hE3j'2[=U)
%T:u&Ik0[fsfLMk71oHph!P=2X8'd:j^O+GZs*RFU+.XPiA*+h\^\?+rmloDeqOcW@49'TVs7UU8gS:nV$s0fU$"2rh@m<p_B?0]\
%kY1_XLMI/,KbIh92ST`#fe(VG@i#N)D""BRKCQu7;S-Joc1?pLrt;JQ2YsEAiR60"Y(ekPIYri>adl,_B`'MnqaM7Gj[9nJ&<OAr
%YON&K+ErgC:!W3>qF2.f1:D*X!P.OT)#1YTVs+YF?X3W,ZHKkJ^<uFW`qHfph[et7i370+!NCMado:?T3F;9*f4,bW`]NV]B"I[\
%^FQB=HP[\>,^j#umY9M^ofBeY'mKTA9iC3LMje!696\8=SJ#5CpZ3-9)d]SSWU#YKV#4-!n[3\4]@Pe<YEr$OI')7kIW)78bBLpr
%oQiTmH+F3TEZ=9r@52FP+BA73]5TS"%5jS9f>gBoi0406kkG@6&7/im5f6)*9Y^)RdYU&XIem`!H*KA]Yc!u>([%8hP.'k;]>4#U
%^TC4JlMHh=kO#JCoO7,K?g-N2d:A0)e+8dJJ)7_"3PN.NErDW&h#@/^^>Dbb>l#i(:t:PV_a,eWOSReQUP>r=QiH4A(OLp)KGt*t
%?nBRC?QM?nH$"1NH3WmD:Tohn"+Z#^bF>8rPNVm7&7]b:fApI`rTs*%TYNqk!(Q[0oD.(m$d=dD]_\M?@<:o"jQc[8U9iK74h97]
%*(\QEB1Gbo9(urb[UoaUN:QdiIpHtqDJT'<,,/t#mq7.FjtfRK\qSPV&'lm`C?pYANSt_OijK&(&8Di$ZhaCVhgb1\hFIT1n?Eq"~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial 751 1810 a Fs(Figure)33 b(3-1:)42 b(Impact)34
b(of)e(execution)i(scaling)f(on)g(p)s(erformance.)150
2302 y(state.)44 b(Mathematically)-8 b(,)34 b(w)m(e)g(can)e(substitute)
j(in)m(to)e(Equation)g(3.2:)1072 2672 y Fo(IMR)p Fs(\()p
Fm(S)1372 2630 y Fk(m)1438 2672 y Fs(\))83 b(=)1797 2604
y(1)p 1728 2649 188 4 v 1728 2740 a Fj(j)p Fm(S)1822
2711 y Fk(m)1888 2740 y Fj(j)1942 2539 y Fc(j)p Fk(S)2009
2516 y Fb(m)2067 2539 y Fc(j)1942 2577 y Fd(X)1957 2787
y Fk(i)p Fl(=1)2103 2672 y Fo(IMISS)o Fs(\()p Fm(S)2479
2630 y Fk(m)2546 2672 y Fm(;)17 b(i)p Fs(\))1559 3022
y(=)1868 2955 y(1)p 1728 2999 329 4 v 1728 3090 a Fm(m)22
b Fj(\002)h(j)p Fm(S)6 b Fj(j)2083 2890 y Fc(j)p Fk(S)2150
2866 y Fb(m)2208 2890 y Fc(j)2083 2927 y Fd(X)2098 3137
y Fk(i)p Fl(=1)2244 3022 y Fo(IMISS)o Fs(\()p Fm(S)2620
2981 y Fk(m)2686 3022 y Fm(;)17 b(i)p Fs(\))p Fm(:)1559
3373 y Fs(=)1868 3305 y(1)p 1728 3350 V 1728 3441 a Fm(m)22
b Fj(\002)h(j)p Fm(S)6 b Fj(j)2112 3240 y Fc(j)p Fk(S)t
Fc(j)2083 3278 y Fd(X)2098 3488 y Fk(i)p Fl(=1)2243 3373
y Fo(IMISS)o Fs(\()p Fm(S;)17 b(i)p Fs(\))p Fm(:)794
b Fs(\(3.3\))150 3725 y(The)30 b(last)f(step)g(is)h(p)s(ossible)g(b)s
(ecause)g Fo(IMISS)d Fs(is)j(zero)f(for)f Fm(m)14 b Fj(\000)g
Fs(1)30 b(out)f(of)f Fm(m)h Fs(executions)i(of)d(ev)m(ery)150
3905 y(scaled)35 b(actor.)47 b(The)35 b(result)g(is)g(that)e(the)i
(miss)g(rate)f(is)g(in)m(v)m(ersely)j(prop)s(ortional)c(to)h(the)g
(scaling)150 4086 y(factor.)296 4317 y(In)e(Figure)f(3-1)g(w)m(e)h(sho)
m(w)h(a)e(represen)m(tativ)m(e)j(curv)m(e)f(relating)f(the)g(scaling)g
(factor)f(to)g(o)m(v)m(erall)150 4497 y(p)s(erformance.)78
b(The)45 b(data)f(corresp)s(onds)h(to)e(a)h(coarse-grained)g(implemen)m
(tation)i(of)e(a)f(F)-8 b(ast)150 4678 y(F)g(ourier)27
b(T)-8 b(ransform)28 b(\(FFT\))f(running)g(on)h(a)f(P)m(en)m(tium)i(3)e
(arc)m(hitecture.)43 b(The)28 b(x-axis)g(represen)m(ts)150
4858 y(the)36 b(scaling)h(factors)f(\(with)g(increasing)h(v)-5
b(alues)37 b(from)f(left)g(to)f(righ)m(t\).)54 b(The)37
b(y-axis)f(represen)m(ts)150 5039 y(the)41 b(execution)h(time)e(and)h
(is)g(an)f(indirect)h(indicator)g(of)e(the)i(miss)g(rate)g(\(the)f(t)m
(w)m(o)h(measures)150 5219 y(are)f(p)s(ositiv)m(ely)j(correlated\).)67
b(The)41 b(execution)h(time)f(impro)m(v)m(es)i(in)d(accord)h(with)g
(the)f(mo)s(del:)150 5400 y(the)31 b(running)g(time)g(is)g(shortened)h
(as)e(the)h(scaling)g(factor)f(gro)m(ws)h(larger.)43
b(There)31 b(is)g(ho)m(w)m(ev)m(er)i(an)1901 5649 y(27)p
eop
%%Page: 28 28
28 27 bop 150 100 a Fs(ev)m(en)m(tual)36 b(degradation,)f(and)g(as)f
(the)h(sequel)h(will)g(sho)m(w,)g(it)e(is)h(attributed)g(to)f(the)h
(data)f(cac)m(he)150 280 y(p)s(erformance.)150 825 y
Fw(3.2)161 b(Data)54 b(Cac)l(he)150 1144 y Fs(The)28
b(results)g(in)f(Figure)g(3-1)f(sho)m(w)i(that)e(scaling)i(can)f
(reduce)h(the)f(running)h(time)f(of)g(a)f(program,)150
1325 y(but)46 b(ultimately)-8 b(,)51 b(it)46 b(degrades)h(p)s
(erformance.)84 b(This)47 b(section)g(pro)m(vides)h(a)e(basic)g
(analytical)150 1506 y(mo)s(del)39 b(that)g(helps)i(in)e(reasoning)h
(ab)s(out)e(the)i(relationship)g(b)s(et)m(w)m(een)h(scaling)f(and)f
(the)g(data)150 1686 y(cac)m(he)34 b(miss)g(rate.)296
1886 y(W)-8 b(e)35 b(distinguish)g(b)s(et)m(w)m(een)h(t)m(w)m(o)e(t)m
(yp)s(es)i(of)d(data)g(w)m(orking)i(sets.)48 b(The)35
b(static)g(data)e(w)m(orking)150 2067 y(set)h(of)f(an)g(actor)g
(represen)m(ts)i(state,)f(e.g.,)g Fn(weights)h Fs(in)e(the)h(FIR)f
(example)i(\(Figure)e(2-1\).)44 b(The)150 2247 y(dynamic)33
b(data)e(w)m(orking)h(set)h(is)f(the)g(data)f(consumed)i(\(p)s(op)s
(ed\))f(from)f(the)h(input)g(c)m(hannel)h(and)150 2428
y(generated)24 b(\(pushed\))h(to)e(the)g(output)h(c)m(hannel)h(b)m(y)f
(the)f(w)m(ork)i(function.)40 b(Both)24 b(of)e(these)j(w)m(orking)150
2609 y(sets)34 b(impact)f(the)g(data)f(cac)m(he)i(b)s(eha)m(vior)f(of)f
(an)h(actor.)296 2809 y(In)m(tuitiv)m(ely)-8 b(,)52 b(the)47
b(presence)h(of)d(state)h(suggests)i(that)d(it)h(is)h(pruden)m(t)g(to)f
(maximize)h(that)150 2989 y(w)m(orking)e(set's)g(temp)s(oral)f(lo)s
(calit)m(y)-8 b(.)79 b(In)44 b(this)h(case,)j(scaling)d(p)s(ositiv)m
(ely)h(impro)m(v)m(es)g(the)e(data)150 3170 y(cac)m(he)38
b(p)s(erformance.)57 b(T)-8 b(o)37 b(see)h(that)e(this)i(is)f(true,)h
(w)m(e)g(can)f(de\014ne)h(a)f(data)f(miss)i(rate)f(\()p
Fo(DMR)p Fs(\))150 3350 y(based)c(on)g(a)f(deriv)-5 b(ation)32
b(similar)i(to)e(that)g(for)g(the)g(instruction)i(miss)g(rate,)e
(replacing)h Fm(C)3488 3365 y Fk(I)3560 3350 y Fs(with)150
3531 y Fm(C)220 3546 y Fk(D)309 3531 y Fs(in)25 b(Equation)h(3.1,)g
(and)g Fm(I)8 b Fs(\()p Fm(a)p Fs(\))25 b(with)g Fo(State)q
Fs(\()p Fm(a)p Fs(\))g(when)h(calculating)g(the)f(reuse)i(distance.)42
b(Here,)150 3712 y Fm(C)220 3727 y Fk(D)315 3712 y Fs(represen)m(ts)35
b(the)d(data)f(cac)m(he)i(size,)h(and)d Fo(State)q Fs(\()p
Fm(a)p Fs(\))g(represen)m(ts)k(the)d(total)f(size)i(of)e(the)h(static)
150 3892 y(data)g(in)h(the)g(sp)s(eci\014ed)h(actor.)296
4092 y(Execution)k(scaling)e(ho)m(w)m(ev)m(er)i(also)d(increases)j(the)
e(I/O)f(requiremen)m(ts)j(of)d(a)g(scaled)i(actor.)150
4273 y(Let)h Fo(p)-5 b(op)37 b Fs(and)g Fo(push)h Fs(denote)g(the)g
(declared)h(p)s(op)e(and)h(push)h(rates)f(of)f(an)g(actor,)i(resp)s
(ectiv)m(ely)-8 b(.)150 4454 y(The)30 b(scaling)g(of)f(an)g(actor)g(b)m
(y)h(a)f(factor)f Fm(m)i Fs(therefore)f(increases)j(the)d(p)s(op)g
(rate)g(to)g Fm(m)15 b Fj(\002)g Fo(p)-5 b(op)30 b Fs(and)150
4634 y(the)38 b(push)h(rate)f(to)g Fm(m)26 b Fj(\002)g
Fo(push)p Fs(.)59 b(Com)m(bined,)41 b(w)m(e)e(represen)m(t)h(the)f
(dynamic)g(data)e(w)m(orking)i(set)150 4815 y(of)32 b(an)g(actor)f
Fm(a)i Fs(as)f Fo(IO)o Fs(\()p Fm(a;)17 b(m)p Fs(\))28
b(=)g Fm(m)21 b Fj(\002)h Fs(\()p Fo(p)-5 b(op)20 b Fs(+)h
Fo(push)p Fs(\).)43 b(Therefore,)34 b(w)m(e)f(measure)g(the)g(data)f
(reuse)150 4995 y(distance)i(\()p Fo(DRD)o Fs(\))f(of)f(an)g(execution)
i Fm(S)39 b Fs(with)33 b(scaling)g(factor)f Fm(m)h Fs(as)g(follo)m(ws:)
1138 5325 y Fo(DRD)o Fs(\()p Fm(S)1460 5284 y Fk(m)1526
5325 y Fm(;)17 b(i)p Fs(\))28 b(=)1772 5231 y Fd(X)1825
5440 y Fk(a)1933 5325 y Fo(State)p Fs(\()p Fm(a)p Fs(\))22
b(+)g Fo(IO)o Fs(\()p Fm(a;)17 b(m)p Fs(\))1901 5649
y(28)p eop
%%Page: 29 29
29 28 bop 150 100 a Fs(where)26 b(the)f(sum)h(is)f(o)m(v)m(er)h(all)f
(distinct)h(actors)f Fm(a)g Fs(o)s(ccurring)g(in)g Fo(phase)o
Fs(\()p Fm(S)2770 63 y Fk(m)2837 100 y Fm(;)17 b(i)p
Fs(\).)40 b(While)26 b(this)f(simple)150 280 y(measure)39
b(double-coun)m(ts)g(data)f(that)f(are)h(b)s(oth)f(pro)s(duced)i(and)e
(consumed)j(within)f(a)e(phase,)150 461 y(suc)m(h)d(duplication)f
(could)h(b)s(e)e(roughly)h(accoun)m(ted)h(for)e(b)m(y)i(using)f
Fo(IO)2737 419 y Fc(0)2761 461 y Fs(\()p Fm(a;)17 b(m)p
Fs(\))27 b(=)h Fo(IO)o Fs(\()p Fm(a;)17 b(m)p Fs(\))p
Fm(=)p Fs(2.)296 641 y(W)-8 b(e)35 b(can)g(determine)h(if)e(a)g(sp)s
(eci\014c)i(w)m(ork)f(function)g(will)g(result)g(in)g(a)f(data)g(cac)m
(he)h(miss)h(\(on)150 822 y(its)d(next)h(\014ring\))e(b)m(y)i(ev)-5
b(aluating)32 b(the)h(follo)m(wing)g(step)h(function:)603
1246 y Fo(DMISS)o Fs(\()p Fm(S)1015 1205 y Fk(m)1082
1246 y Fm(;)17 b(i)p Fs(\))27 b(=)1328 1012 y Fd(8)1328
1102 y(>)1328 1132 y(<)1328 1311 y(>)1328 1341 y(:)1416
1156 y Fs(0)98 b(if)32 b Fo(DRD)o Fs(\()p Fm(S)1974 1120
y Fk(m)2041 1156 y Fm(;)17 b(i)p Fs(\))27 b Fj(\024)h
Fm(C)2358 1171 y Fk(D)2422 1156 y Fs(;)33 b(hit:)44 b(no)32
b(cac)m(he)i(re\014ll,)1416 1373 y(1)98 b(otherwise;)34
b(miss:)45 b(\(some\))33 b(cac)m(he)h(re\014ll.)3549
1246 y(\(3.4\))150 1670 y(Finally)-8 b(,)33 b(to)f(mo)s(del)h(the)g
(data)f(miss)i(rate)f(\()p Fo(DMR)p Fs(\):)1106 2045
y Fo(DMR)p Fs(\()p Fm(S)1442 2004 y Fk(m)1508 2045 y
Fs(\))83 b(=)1868 1978 y(1)p 1798 2022 188 4 v 1798 2113
a Fj(j)p Fm(S)1892 2085 y Fk(m)1958 2113 y Fj(j)2012
1913 y Fc(j)p Fk(S)2079 1889 y Fb(m)2137 1913 y Fc(j)2013
1950 y Fd(X)2028 2160 y Fk(i)p Fl(=1)2174 2045 y Fo(DMISS)o
Fs(\()p Fm(S)2586 2004 y Fk(m)2652 2045 y Fm(;)17 b(i)p
Fs(\))p Fm(:)755 b Fs(\(3.5\))296 2397 y(It)43 b(is)f(eviden)m(t)j
(from)d(Equation)h(3.5)e(that)i(scaling)f(can)h(lead)g(to)f(lo)m(w)m
(er)h(data)f(miss)h(rates,)150 2578 y(as)37 b(the)f(co)s(e\016cien)m(t)
i(1)p Fm(=)p Fj(j)p Fm(S)1096 2542 y Fk(m)1162 2578 y
Fj(j)33 b Fs(=)h(1)p Fm(=)p Fs(\()p Fm(m)25 b Fj(\002)g(j)p
Fm(S)6 b Fj(j)p Fs(\))35 b(is)i(in)m(v)m(ersely)j(prop)s(ortional)35
b(to)h Fm(m)p Fs(.)55 b(Ho)m(w)m(ev)m(er,)40 b(as)150
2758 y(the)d(scaling)g(factor)f Fm(m)h Fs(gro)m(ws)g(larger,)g(more)g
(of)f(the)g Fo(DMISS)g Fs(v)-5 b(alues)37 b(transition)g(from)f(0)g(to)
g(1)150 2939 y(\(they)43 b(increase)h(monotonically)f(with)g(the)g(I/O)
f(rate,)j(whic)m(h)e(is)g(prop)s(ortional)f(to)g Fm(m)p
Fs(\).)73 b(F)-8 b(or)150 3120 y(su\016cien)m(tly)36
b(large)c Fm(m)p Fs(,)h Fo(DMR)p Fs(\()p Fm(S)1358 3083
y Fk(m)1425 3120 y Fs(\))28 b(=)g(1.)44 b(Th)m(us,)34
b(scaling)g(m)m(ust)g(b)s(e)f(p)s(erformed)g(in)g(mo)s(deration)150
3300 y(to)f(a)m(v)m(oid)i(negativ)m(ely)g(impacting)f(the)g(data)f(lo)s
(calit)m(y)-8 b(.)296 3481 y(Note)38 b(that)g(in)g(order)h(to)e
(generalize)i(the)g(data)e(miss)j(rate)e(equation)g(so)h(that)e(it)h
(prop)s(erly)150 3661 y(accoun)m(ts)k(for)e(the)h(dynamic)g(w)m(orking)
h(set,)h(w)m(e)e(m)m(ust)h(consider)g(the)f(amoun)m(t)g(of)f(data)g
(reuse)150 3842 y(within)31 b(a)e(phase.)44 b(This)31
b(is)f(b)s(ecause)h(an)m(y)g(actor)e(that)h(\014res)g(within)h
Fo(phase\(S,i\))d Fs(migh)m(t)i(consume)150 4022 y(some)c(or)f(all)g
(of)f(the)i(data)e(generated)i(b)m(y)g Fm(S)6 b Fs([)p
Fm(i)p Fs(].)41 b(The)26 b(curren)m(t)h(mo)s(del)e(is)h(simplistic,)i
(and)d(leads)h(to)150 4203 y(exaggerated)32 b(I/O)f(requiremen)m(ts)j
(for)c(a)h(phase.)44 b(W)-8 b(e)31 b(also)h(do)f(not)g(mo)s(del)g(the)h
(e\013ects)g(of)f(cac)m(he)150 4384 y(con\015icts,)40
b(and)d(tak)m(e)i(an)e(\\atomic")g(view)i(of)d(cac)m(he)j(misses)g
(\(i.e.,)h(either)e(the)g(en)m(tire)g(w)m(orking)150
4564 y(set)33 b(hits)h(or)e(misses\).)1901 5649 y(29)p
eop
%%Page: 30 30
30 29 bop 1901 5649 a Fs(30)p eop
%%Page: 31 31
31 30 bop 150 888 a Fq(Chapter)78 b(4)150 1428 y(Optimization)f
(Algorithm)150 1941 y Fs(In)42 b(this)h(c)m(hapter)f(w)m(e)h(describ)s
(e)h(our)d(memory)i(optimizations)g(that)f(are)g(geared)g(to)m(w)m(ard)
g(im-)150 2121 y(pro)m(ving)31 b(the)h(memory)f(b)s(eha)m(vior)h(of)e
(streaming)i(programs.)43 b(First,)31 b(w)m(e)h(describ)s(e)g
Fo(c)-5 b(ache)33 b(awar)-5 b(e)150 2302 y(fusion)31
b Fs(whic)m(h)j(p)s(erforms)e(a)g(series)h(of)e(gran)m(ularit)m(y)i
(adjustmen)m(ts)h(to)d(the)h(actors)g(in)h(the)f(steady)150
2482 y(state.)88 b(The)48 b(fusion)g(serv)m(es)i(to)d(\()p
Fm(i)p Fs(\))g(reduce)i(the)e(o)m(v)m(erhead)i(of)e(switc)m(hing)i(b)s
(et)m(w)m(een)h(actors,)150 2663 y(\()p Fm(ii)p Fs(\))36
b(create)h(coarser)f(grained)g(actors)g(for)f(execution)j(scaling,)f
(and)f(\()p Fm(iii)p Fs(\))g(enable)h(no)m(v)m(el)g(bu\013er)150
2844 y(managemen)m(t)43 b(tec)m(hniques)h(b)s(et)m(w)m(een)g(fused)e
(actors.)71 b(Second,)44 b(w)m(e)f(describ)s(e)g Fo(exe)-5
b(cution)43 b(sc)-5 b(al-)150 3024 y(ing)39 b Fs(whic)m(h)j(scales)f(a)
f(steady)h(state)f(to)f(impro)m(v)m(e)j(instruction)f(lo)s(calit)m(y)-8
b(,)42 b(sub)5 b(ject)42 b(to)d(the)h(data)150 3205 y(w)m(orking)c(set)
f(constrain)m(ts)h(of)e(the)h(actors)g(in)f(the)h(stream)h(graph.)49
b(Third,)36 b(w)m(e)f(describ)s(e)i(scalar)150 3385 y(replacemen)m(t)g
(whic)m(h)f(enables)g(register)f(allo)s(cation)f(of)h(in)m(termediate)h
(v)-5 b(alues)35 b(that)g(are)g(passed)150 3566 y(b)s(et)m(w)m(een)44
b(fused)f(\014lters.)73 b(Last,)45 b(w)m(e)e(discuss)i(an)d(optimized)h
(managemen)m(t)g(strategy)g(for)f(the)150 3746 y(data)c(in)g(the)g(FIF)
m(O)g(c)m(hannels)h(to)f(supp)s(ort)g(p)s(eeking,)j(that)c(reduce)j
(the)e(n)m(um)m(b)s(er)h(of)f(memory)150 3927 y(accesses)d(without)e
(in)m(tro)s(ducing)h(substan)m(tial)f(computational)g(o)m(v)m(erhead.)
1901 5649 y(31)p eop
%%Page: 32 32
32 31 bop 150 100 a Fw(4.1)161 b(Cac)l(he)52 b(Optimizations)150
391 y Fs(The)26 b(cac)m(he)g(a)m(w)m(are)f(fusion)h(in)f(conjunction)g
(with)h(execution)g(scaling)f(represen)m(t)i(a)e Fo(uni\014e)-5
b(d)27 b(c)-5 b(ache)150 572 y(optimization)35 b Fs(that)h(sim)m
(ultaneously)j(considers)f(the)f(instruction)g(and)f(data)g(w)m(orking)
h(sets)g(of)150 752 y(actors)c(that)f(mak)m(e)i(up)f(a)f(stream)h
(program.)150 1152 y Fr(4.1.1)136 b(Cac)l(he)45 b(Aw)l(are)h(F)-11
b(usion)150 1410 y Fs(In)44 b(StreamIt,)k(the)c(gran)m(ularit)m(y)h(of)
e(actors)h(is)h(determined)h(b)m(y)e(the)h(application)f(dev)m(elop)s
(er,)150 1590 y(according)e(to)e(the)i(most)g(natural)f(represen)m
(tation)h(of)f(an)g(algorithm.)69 b(When)42 b(compiling)g(to)150
1771 y(a)34 b(cac)m(he-based)h(arc)m(hitecture,)h(the)e(presence)i(of)e
(a)f(large)h(n)m(um)m(b)s(er)h(of)f(actors)g(exacerbates)i(the)150
1951 y(transition)h(o)m(v)m(erhead)g(b)s(et)m(w)m(een)h(w)m(ork)f
(functions.)56 b(It)36 b(is)h(the)f(role)g(of)g(the)h(compiler)g(to)f
(adjust)150 2132 y(the)d(gran)m(ularit)m(y)g(of)f(the)h(stream)h(graph)
e(to)g(mitigate)h(the)g(execution)h(o)m(v)m(erhead.)296
2318 y(In)45 b(this)h(section)f(w)m(e)h(describ)s(e)g(an)f(actor)f
(coarsening)i(tec)m(hnique)h(w)m(e)f(refer)f(to)f(as)h
Fo(c)-5 b(ache)150 2499 y(awar)g(e)35 b(fusion)e Fs(\(CAF\).)h(When)h
(t)m(w)m(o)f(actors)g(are)f(fused,)i(they)g(form)e(a)g(new)i(actor)e
(whose)i(w)m(ork)150 2679 y(function)40 b(is)g(equiv)-5
b(alen)m(t)41 b(to)e(its)h(constituen)m(ts.)66 b(F)-8
b(or)38 b(example,)43 b(let)d(an)f(actor)g Fn(A)g Fs(\014re)h
Fm(n)g Fs(times,)150 2860 y(and)32 b(an)f(actor)h Fn(B)g
Fs(\014re)g(2)p Fm(n)f Fs(times)i(p)s(er)f(steady)h(state:)43
b Fm(S)2188 2824 y Fk(n)2263 2860 y Fs(=)27 b(\()p Fn(A)2455
2824 y Fk(n)2502 2860 y Fn(B)2554 2824 y Fk(n)2600 2860
y Fn(B)2652 2824 y Fk(n)2699 2860 y Fs(\).)43 b(F)-8
b(using)33 b Fn(A)f Fs(and)g Fn(B)g Fs(results)150 3041
y(in)g(an)g(actor)f Fn(F)h Fs(that)g(is)g(equiv)-5 b(alen)m(t)34
b(to)d(one)h(\014ring)g(of)39 b Fn(A)32 b Fs(and)g(t)m(w)m(o)g
(\014rings)h(of)38 b Fn(B)p Fs(;)32 b Fn(F)g Fs(\014res)h
Fm(n)f Fs(times)150 3221 y(p)s(er)38 b(steady)h(state)g(\()p
Fm(S)987 3185 y Fk(n)1070 3221 y Fs(=)e(\()p Fn(F)1273
3185 y Fk(n)1319 3221 y Fs(\)\).)60 b(In)39 b(other)f(terms,)i(the)f(w)
m(ork)f(function)h(for)f(actor)f Fn(F)h Fs(inlines)150
3402 y(the)33 b(w)m(ork)g(functions)h(of)39 b Fn(A)33
b Fs(and)g Fn(B)p Fs(.)296 3588 y(When)i(t)m(w)m(o)f(actors)f(are)g
(fused,)i(their)f(executions)h(are)e(scaled)i(suc)m(h)g(that)e(the)h
(output)f(rate)150 3769 y(of)f(one)g(actor)g(matc)m(hes)i(the)e(input)h
(rate)f(of)g(the)g(next.)44 b(In)33 b(the)f(example,)i
Fn(A)f Fs(and)f Fn(B)g Fs(represen)m(t)i(a)150 3949 y(pro)s
(ducer-consumer)27 b(pair)f(of)f(\014lters)h(within)h(a)e(pip)s(eline,)
j(with)f(\014lter)f Fn(A)f Fs(pushing)i(t)m(w)m(o)f(items)h(p)s(er)150
4130 y(\014ring,)36 b(and)f Fn(B)g Fs(p)s(opping)h(one)f(item)h(p)s(er)
f(\014ring.)51 b(The)36 b(fusion)f(implicitly)i(scales)g(the)e
(execution)150 4311 y(of)k Fn(B)33 b Fs(so)g(that)f(it)h(runs)g(t)m
(wice)h(for)e(ev)m(ery)i(\014ring)f(of)39 b Fn(A)p Fs(.)296
4497 y(F)-8 b(usion)44 b(also)g(reduces)h(the)f(o)m(v)m(erhead)i(of)d
(switc)m(hing)i(b)s(et)m(w)m(een)h(w)m(ork)e(functions.)78
b(In)44 b(our)150 4678 y(infrastructure,)33 b(the)f(steady)h(state)g
(is)f(a)f(lo)s(op)h(that)f(in)m(v)m(ok)m(es)k(the)d(w)m(ork)h
(functions)f(via)h(metho)s(d)150 4858 y(calls.)43 b(Th)m(us,)32
b(ev)m(ery)f(pair)e(of)g(fused)i(actors)e(eliminates)i(a)e(metho)s(d)h
(call)g(\(p)s(er)f(in)m(v)m(o)s(cation)i(of)e(the)150
5039 y(actors\).)43 b(The)30 b(impact)g(on)f(p)s(erformance)h(can)g(b)s
(e)g(signi\014can)m(t,)h(but)f(not)f(only)h(b)s(ecause)h(metho)s(d)150
5219 y(calls)25 b(are)f(remo)m(v)m(ed:)41 b(the)25 b(fusion)g(of)e(t)m
(w)m(o)i(actors)g(also)f(enables)h(the)g(compiler)g(to)f(optimize)h
(across)150 5400 y(actor)35 b(b)s(oundaries.)51 b(In)35
b(particular,)h(for)e(actors)h(that)g(exc)m(hange)h(only)f(a)g(few)g
(data)g(items,)i(the)1901 5649 y(32)p eop
%%Page: 33 33
33 32 bop 150 100 a Fs(compiler)34 b(can)e(allo)s(cate)h(the)f(data)h
(streams)g(to)f(registers.)45 b(The)33 b(data)g(c)m(hannel)g(b)s(et)m
(w)m(een)i(fused)150 280 y(actors)i(is)h(sub)5 b(ject)39
b(to)e(sp)s(ecial)h(bu\013er)g(managemen)m(t)g(tec)m(hniques)i(\(e.g.)
57 b(scalar)38 b(replacemen)m(t\))150 461 y(as)33 b(describ)s(ed)h(in)f
(the)g(Section)g(4.2.)296 641 y(There)27 b(are,)h(ho)m(w)m(ev)m(er,)h
(do)m(wnsides)f(to)e(fusion.)42 b(First,)27 b(as)f(more)g(and)g(more)g
(actors)g(are)g(fused,)150 822 y(the)g(instruction)g(fo)s(otprin)m(t)f
(can)h(dramatically)g(increase,)i(p)s(ossibly)f(leading)f(to)f(p)s(o)s
(or)f(use)j(of)e(the)150 1002 y(instruction)36 b(cac)m(he.)50
b(Second,)36 b(fusion)f(increases)i(the)e(data)f(fo)s(otprin)m(t)g
(when)h(the)g(fused)h(actors)150 1183 y(main)m(tain)k(state)h(\(e.g.,)h
(co)s(e\016cien)m(t)f(arra)m(ys)g(and)f(lo)s(okup)g(tables\).)66
b(Our)39 b(fusion)i(algorithm)e(is)150 1364 y(cac)m(he)34
b(a)m(w)m(are)f(in)g(that)f(it)h(is)g(cognizan)m(t)g(of)f(the)h
(instruction)h(and)f(data)f(sizes.)296 1544 y(The)24
b(CAF)g(algorithm)e(uses)j(a)e(greedy)h(fusion)f(heuristic)i(to)e
(determine)h(whic)m(h)h(\014lters)f(should)150 1725 y(b)s(e)40
b(fused.)67 b(It)40 b(con)m(tin)m(uously)j(fuses)e(actors)f(un)m(til)h
(the)g(addition)f(of)f(a)h(new)h(actor)f(causes)i(the)150
1905 y(fused)36 b(actor)f(to)f(exceed)j Fo(either)e Fs(the)g
(instruction)h(cac)m(he)h(capacit)m(y)-8 b(,)36 b(or)f(a)g(fraction)f
(of)h(the)g(data)150 2086 y(cac)m(he)h(capacit)m(y)-8
b(.)50 b(F)-8 b(or)33 b(the)i(former,)g(w)m(e)g(estimate)h(the)f
(instruction)g(co)s(de)g(size)g(using)g(a)f(simple)150
2267 y(coun)m(t)45 b(of)f(the)h(n)m(um)m(b)s(er)g(of)f(op)s(erations)h
(in)f(the)h(in)m(termediate)h(represen)m(tation)g(of)e(the)h(w)m(ork)
150 2447 y(function.)58 b(F)-8 b(or)37 b(the)g(latter,)i(w)m(e)f(allo)m
(w)g(the)g(state)f(of)g(the)h(new)g(fused)g(actor)f(to)g(o)s(ccup)m(y)i
(up)e(to)150 2628 y(some)c(fraction)g(of)f(the)h(data)f(cac)m(he)i
(capacit)m(y)g(\(e.g.)43 b(50\045\).)296 2808 y(The)g(algorithm)e
(illustrated)i(in)f(Figure)f(4-1)g(lev)m(erages)i(the)f(hierarc)m
(hical)h(nature)f(of)g(the)150 2989 y(stream)36 b(graph,)f(starting)g
(at)f(the)i(leaf)f(no)s(des)g(and)g(w)m(orking)h(up)m(w)m(ard.)51
b(F)-8 b(or)35 b(pip)s(eline)h(streams,)150 3169 y(the)g(algorithm)g
(iden)m(ti\014es)i(the)e(connection)h(in)f(the)g(pip)s(eline)h(with)f
(the)g(highest)h(steady-state)150 3350 y(I/O)i(rate,)h(i.e.,)h(the)f
(pair)f(of)f(\014lters)i(that)f(comm)m(unicate)h(the)g(largest)f(n)m
(um)m(b)s(er)h(of)f(items)h(p)s(er)150 3531 y(steady)30
b(state.)42 b(These)31 b(t)m(w)m(o)e(\014lters)h(are)e(fused,)j(if)d
(doing)h(so)f(resp)s(ects)j(the)e(instruction)h(and)e(data)150
3711 y(cac)m(he)e(constrain)m(ts.)42 b(T)-8 b(o)24 b(prev)m(en)m(t)j
(fragmen)m(tation)d(of)h(the)f(pip)s(eline,)k(eac)m(h)d(fused)h
(\014lter)f(is)g(further)150 3892 y(fused)i(with)g(its)g(upstream)g
(and)g(do)m(wnstream)g(neigh)m(b)s(ors)h(so)e(long)g(as)h(the)f
(constrain)m(ts)i(are)e(met.)150 4072 y(The)31 b(algorithm)f(then)g
(rep)s(eats)h(this)g(pro)s(cess)g(with)g(the)f(next)h
(highest-bandwidth)h(connection)150 4253 y(in)37 b(the)g(pip)s(eline,)h
(con)m(tin)m(uing)g(un)m(til)g(no)e(more)h(\014lters)g(can)g(b)s(e)g
(fused.)56 b(F)-8 b(or)36 b(splitjoin)h(streams,)150
4433 y(the)27 b(CAF)g(algorithm)g(fuses)h(all)f(parallel)g(branc)m(hes)
i(together)e(if)g(the)g(com)m(bination)h(satis\014es)h(the)150
4614 y(instruction)41 b(and)e(data)g(constrain)m(ts.)66
b(P)m(artial)39 b(fusion)h(of)f(a)g(splitjoin)h(is)g(not)g(helpful,)i
(as)e(the)150 4795 y(c)m(hild)30 b(streams)g(do)e(not)h(comm)m(unicate)
h(directly)g(with)g(eac)m(h)f(other;)i(ho)m(w)m(ev)m(er,)g(complete)f
(fusion)150 4975 y(can)j(enable)g(further)g(fusion)g(in)g(paren)m(t)g
(pip)s(elines.)1901 5649 y(33)p eop
%%Page: 34 34
34 33 bop 197 221 3507 4 v 197 5041 4 4820 v 323 321
a Fp(//)37 b(F)-9 b(ollo)m(wing)38 b(recursiv)m(e)g(algorithm)g(can)g
(b)s(e)g(used)g(to)f(\014nd)h(a)g(set)f(of)323 441 y(//)g(partitions)h
(for)f(eac)m(h)h(pip)s(eline)h(or)e(splitjoin)i(suc)m(h)f(that)f(all)h
(actors)323 561 y(//)f(within)h(a)g(partition)f(can)h(b)s(e)g(fused)g
(without)g(violating)g(instruction)f(or)323 682 y(//)g(data)h(cac)m(he)
g(constrain)m(t.)323 923 y(//)f(F)-9 b(or)37 b(eac)m(h)h(partition)g
(that)f(is)h(returned)f(for)h(the)f(top)g(lev)m(el)h(pip)s(eline)323
1043 y(//)f(all)h(actors)f(within)h(that)f(partition)h(are)g(fused)g
(in)m(to)f(a)h(new)g(actor.)323 1284 y(//)f(T)-9 b(o)37
b(\014nd)h(partitions)g(for)f(a)h(pip)s(eline:)323 1525
y Fs(Calculate)33 b(the)g(n)m(um)m(b)s(er)h(of)e(partitions)h(required)
h(for)e(eac)m(h)i(c)m(hild,)323 1645 y(if)e(for)g(an)m(y)h(c)m(hild)h
(this)f(is)g Fm(>)28 b Fs(1)k(then)h(remem)m(b)s(er)i(those)e
(partitions.)323 1886 y(F)-8 b(or)31 b(eac)m(h)j(sequence)h(\()p
Fm(i)p Fs(..)p Fm(j)6 b Fs(\))33 b(of)f(c)m(hildren)i(where)g(for)e
(eac)m(h)i(c)m(hild)323 2006 y(n)m(um)m(b)s(er)g(of)e(partitions)h(is)g
(1)f(use)h(function)h Fp(In)m(terv)-6 b(al)p Fs(\()p
Fm(i)p Fs(,)p Fm(j)6 b Fs(\))32 b(to)g(\014nd)i(partitions.)323
2247 y Fp(In)m(terv)-6 b(al)p Fs(\()p Fm(i)p Fs(,)p Fm(j)6
b Fs(\))32 b(=)h(\\)420 2367 y(Find)g(maxim)m(um)h(bandwidth)g
(connection)f(b)s(et)m(w)m(een)i(c)m(hildren)f(\(in)f(the)420
2488 y(in)m(terv)-5 b(al)33 b(\()p Fm(i)p Fs(..)p Fm(j)6
b Fs(\)\),)33 b(let)g(this)g(b)s(e)g(a)f(pair)h Fm(m)g
Fs(and)f Fm(m)23 b Fs(+)f(1.)420 2728 y(Estimate)34 b(instruction)g
(and)e(data)g(fo)s(otprin)m(t)h(of)f(fused)h Fm(m)g Fs(and)g
Fm(m)22 b Fs(+)g(1.)420 2969 y(If)33 b(fused)g Fm(m)g
Fs(and)g Fm(m)22 b Fs(+)g(1)32 b(violates)i(an)m(y)f(cac)m(he)h
(constrain)m(t,)g(use)f Fp(In)m(terv)-6 b(al)p Fs(\()p
Fm(i)p Fs(,)p Fm(m)p Fs(\))420 3090 y(and)33 b Fp(In)m(terv)-6
b(al)p Fs(\()p Fm(m)22 b Fs(+)g(1,)p Fm(j)6 b Fs(\))32
b(to)h(\014nd)g(t)m(w)m(o)g(sets)h(of)e(partitions.)420
3330 y(If)h(fused)g Fm(m)g Fs(and)g Fm(m)22 b Fs(+)g(1)32
b(do)h(not)f(violate)h(an)m(y)h(cac)m(he)g(constrain)m(t,)f(start)g
(with)420 3451 y Fm(m)g Fs(and)g Fm(m)22 b Fs(+)g(1)32
b(fused,)i(try)f(fusing)g(up)g(or)f(do)m(wn)i(un)m(til)f(can)g(not)f
(fuse)h(up)g(or)g(do)m(wn)420 3571 y(without)g(violating)g(a)f(cac)m
(he)i(constrain)m(t.)45 b(Let)32 b(this)h(result)h(in)f(a)f(partition)h
(\()p Fm(a)p Fs(..)p Fm(b)p Fs(\),)420 3691 y(use)h Fp(In)m(terv)-6
b(al)p Fs(\()p Fm(i)p Fs(,)p Fm(a)22 b Fj(\000)h Fs(1\))32
b(and)h Fp(In)m(terv)-6 b(al)p Fs(\()p Fm(b)22 b Fs(+)g(1,)p
Fm(j)6 b Fs(\))33 b(to)f(\014nd)h(remaining)g(partitions.")323
3932 y Fp(//)k(T)-9 b(o)37 b(\014nd)h(partitions)g(for)f(a)h
(splitjoin:)323 4173 y Fs(Calculate)33 b(the)g(n)m(um)m(b)s(er)h(of)e
(partitions)h(required)h(for)e(eac)m(h)i(c)m(hild.)323
4414 y(If)e(eac)m(h)i(c)m(hild)f(can)g(b)s(e)g(fused)g(in)m(to)g(a)g
(single)g(partition,)g(estimate)g(instruction)h(and)323
4534 y(data)e(fo)s(otprin)m(t)g(of)g(a)g(fused)i(splitjoin,)f(if)g
(this)g(do)s(es)g(not)f(violate)h(an)m(y)h(cac)m(he)323
4654 y(constrain)m(t)f(return)g(a)f(single)i(partition.)323
4895 y(Otherwise,)g(return)f(the)g(set)g(of)f(partitions)h(required)h
(for)e(eac)m(h)i(c)m(hild.)p 3700 5041 V 197 5044 3507
4 v 762 5163 a(Figure)f(4-1:)42 b(Outline)34 b(of)e(the)h(cac)m(he)g(a)
m(w)m(are)h(fusion)f(algorithm)1901 5649 y(34)p eop
%%Page: 35 35
35 34 bop 647 3 2607 4 v 647 2320 4 2317 v 838 103 a
Fs(//)32 b Fo(R)-5 b(eturns)35 b(a)g(sc)-5 b(aling)33
b(factor)i(for)g(ste)-5 b(ady)35 b(state)g Fm(S)838 223
y Fs(//)d(-)g Fm(c)g Fs(is)h(the)g(data)f(cac)m(he)i(size)838
344 y(//)e(-)g Fm(\013)h Fs(is)g(the)g(fraction)f(of)g
Fm(c)h Fs(dedicated)h(for)e(I/O)838 464 y(//)g(-)g Fm(p)g
Fs(is)h(the)g(desired)h(p)s(ercen)m(tile)h(of)d(all)g(actors)h(to)f(b)s
(e)838 584 y(//)97 b(satis\014ed)34 b(b)m(y)f(the)g(c)m(hosen)h
(scaling)g(factor)e(\(0)27 b Fm(<)h(p)f Fj(\024)h Fs(1\))838
705 y Fp(calculateScalingF)-9 b(actor)p Fs(\()p Fm(S)6
b Fs(,)34 b Fm(c)p Fs(,)e Fm(\013)q Fs(,)h Fm(p)p Fs(\))f
Fj(f)935 825 y Fp(create)h Fs(arra)m(y)f Fm(M)44 b Fs(of)32
b(size)h Fj(j)p Fm(S)6 b Fj(j)935 946 y Fp(for)33 b Fm(i)g
Fs(=)f(1)g(to)g Fj(j)p Fm(S)6 b Fj(j)32 b(f)1033 1066
y Fm(a)c Fs(=)f Fm(S)6 b Fs([)p Fm(i)p Fs(])1033 1186
y(//)32 b(calculate)h(e\013ectiv)m(e)i(cac)m(he)f(size)1033
1307 y Fm(c)1075 1271 y Fc(0)1126 1307 y Fs(=)27 b Fm(\013)c
Fj(\002)g Fs(\()p Fm(c)f Fj(\000)g Fo(State)q Fs(\()p
Fm(a)p Fs(\)\))1033 1427 y(//)32 b(calculate)h(scaling)g(factor)g(for)f
Fm(a)g Fs(suc)m(h)1033 1548 y(//)g(that)g(I/O)g(requiremen)m(ts)k(are)c
(close)i(to)e Fm(c)2704 1511 y Fc(0)1033 1668 y Fm(M)10
b Fs([)p Fm(i)p Fs(])29 b(=)e Fp(round)q Fs(\()p Fm(c)1725
1632 y Fc(0)1780 1668 y Fm(=)33 b Fo(IO)o Fs(\()p Fm(a;)17
b Fs(1\)\))935 1788 y Fj(g)935 1909 y Fp(sort)32 b Fm(M)44
b Fs(in)m(to)32 b(ascending)i(n)m(umerical)g(order)935
2029 y Fm(i)28 b Fs(=)g Fj(b)k Fs(\(1)22 b Fj(\000)h
Fm(p)p Fs(\))f Fj(\002)h(j)p Fm(S)6 b Fj(j)31 b(c)935
2149 y Fp(return)h Fm(M)10 b Fs([)p Fm(i)p Fs(])838 2270
y Fj(g)p 3250 2320 V 647 2323 2607 4 v 696 2442 a Fs(Figure)32
b(4-2:)43 b(Our)32 b(heuristic)i(for)e(calculating)h(the)g(scaling)h
(factor.)150 2754 y Fr(4.1.2)136 b(Execution)46 b(Scaling)150
3026 y Fs(After)34 b(w)m(e)h(ha)m(v)m(e)g(applied)g(the)f(cac)m(he)h(a)
m(w)m(are)f(fusion)h(algorithm)e(the)i(next)f(step)h(is)f(to)g(scale)h
(the)150 3206 y(gran)m(ularit)m(y)f(adjusted)g(actors)g(in)f(order)h
(to)f(reduce)h(the)g(cac)m(he-miss)h(rate.)46 b(According)34
b(to)f(our)150 3387 y(instruction)46 b(cac)m(he)g(mo)s(del,)i
(increasing)e(the)f(n)m(um)m(b)s(er)h(of)f(consecutiv)m(e)i(\014rings)f
(of)e(the)h(same)150 3568 y(actor)30 b(leads)h(to)f(lo)m(w)m(er)i
(instruction)f(cac)m(he)h(miss)g(rates.)43 b(Ho)m(w)m(ev)m(er,)33
b(scaling)e(increases)i(the)d(data)150 3748 y(bu\013ers)38
b(that)e(are)g(main)m(tained)i(b)s(et)m(w)m(een)h(actors.)55
b(Th)m(us)38 b(it)f(is)g(pruden)m(t)g(that)g(w)m(e)g(accoun)m(t)g(for)
150 3929 y(the)c(data)f(w)m(orking)i(set)f(requiremen)m(ts)i(as)e(w)m
(e)h(scale)f(a)g(steady)g(state.)296 4123 y(Our)39 b(approac)m(h)h(is)f
(to)g(scale)g(the)h(en)m(tire)g(steady)g(state)f(b)m(y)h(a)f(single)h
(scaling)f(factor,)h(with)150 4303 y(the)34 b(constrain)m(t)g(that)g
(only)g(a)f(small)h(p)s(ercen)m(tage)h(of)e(the)h(actors)g(are)f(allo)m
(w)m(ed)i(to)e(o)m(v)m(er\015o)m(w)j(the)150 4484 y(data)c(cac)m(he.)45
b(Our)32 b(t)m(w)m(o-staged)i(algorithm)e(is)h(outlined)h(in)e(Figure)h
(4-2.)296 4678 y(First,)40 b(the)e(algorithm)g(calculates)h(the)f
(largest)g(p)s(ossible)h(scaling)g(factor)e(for)h(ev)m(ery)h(actor)150
4858 y(that)22 b(app)s(ears)g(in)g(the)g(steady)h(state.)41
b(T)-8 b(o)22 b(do)g(this,)i(it)e(calculates)i(the)e(amoun)m(t)g(of)g
(data)f(consumed)150 5039 y(and)38 b(pro)s(duced)h(b)m(y)g(eac)m(h)g
(actor)e(\014ring)i(and)f(divides)h(the)g(a)m(v)-5 b(ailable)38
b(data)g(cac)m(he)h(size)g(b)m(y)g(this)150 5219 y(data)e(pro)s
(duction)h(rate.)59 b(In)38 b(addition,)h(the)f(algorithm)f(can)h
(toggle)f(the)h(e\013ectiv)m(e)i(cac)m(he)f(size)150
5400 y(to)32 b(accoun)m(t)i(for)e(v)-5 b(arious)32 b(eviction)i(p)s
(olicies.)1901 5649 y(35)p eop
%%Page: 36 36
36 35 bop 296 100 a Fs(Second,)40 b(it)e(c)m(ho)s(oses)h(the)f(largest)
g(factor)f(that)g(allo)m(ws)i(a)e(fraction)g Fm(p)h Fs(of)f(the)h
(steady)h(state)150 280 y(actors)44 b(to)f(b)s(e)h(scaled)h(safely)g
(\(i.e.,)i(the)d(cac)m(he)h(is)f(adequate)h(for)e(their)i(I/O)e
(requiremen)m(ts\).)150 461 y(F)-8 b(or)48 b(example,)54
b(the)49 b(algorithm)f(migh)m(t)h(calculate)g Fm(m)2216
476 y Fa(A)2311 461 y Fs(=)54 b(10,)e Fm(m)2703 476 y
Fa(B)2798 461 y Fs(=)j(20,)d Fm(m)3191 476 y Fa(C)3285
461 y Fs(=)j(30,)d(and)150 641 y Fm(m)235 656 y Fa(D)315
641 y Fs(=)40 b(40,)h(for)f(four)f(actors)h(in)h(some)f(steady)h
(state.)66 b(That)41 b(is,)h(scaling)f(actor)e Fn(A)h
Fs(b)s(ey)m(ond)h(10)150 822 y(consecutiv)m(e)46 b(iterations)d(will)h
(cause)g(its)g(dynamic)g(I/O)f(requiremen)m(ts)j(to)d(exceed)i(the)e
(data)150 1002 y(cac)m(he.)87 b(Therefore,)51 b(the)c(largest)g
Fm(m)g Fs(that)g(allo)m(ws)g Fm(p)52 b Fs(=)f(90\045)c(of)f(the)h
(actors)g(to)f(b)s(e)h(scaled)150 1183 y(without)36 b(violating)f(the)g
(cac)m(he)h(constrain)m(ts)h(is)e(10.)50 b(Similarly)-8
b(,)37 b(to)e(allo)m(w)g(for)f(the)i(safe)f(scaling)150
1364 y(of)d Fm(p)c Fs(=)f(75\045)33 b(of)f(the)h(actors,)g(the)g
(largest)f(factor)h(w)m(e)g(can)g(c)m(ho)s(ose)g(is)h(20.)296
1544 y(In)e(our)f(implemen)m(tation,)i(w)m(e)f(use)g(a)f(90-10)e
(heuristic.)45 b(In)31 b(other)h(w)m(ords,)g(w)m(e)g(set)g
Fm(p)c Fs(=)f(90\045.)150 1725 y(W)-8 b(e)27 b(empirically)g
(determined)h(this)f(v)-5 b(alue)27 b(via)f(a)g(series)i(of)e(exp)s
(erimen)m(ts)i(using)f(our)f(b)s(enc)m(hmark)150 1905
y(suite.)45 b(See)33 b(App)s(endix)h(A)f(for)f(an)g(exp)s(erimen)m(tal)
j(ev)-5 b(aluation)33 b(of)f(our)g(heuristic.)296 2086
y(Note)42 b(that)g(our)g(algorithm)f(adjusts)i(the)f(e\013ectiv)m(e)i
(cac)m(he)f(size)g(that)f(is)h(reserv)m(ed)h(for)d(an)150
2267 y(actor's)32 b(dynamic)h(w)m(orking)g(set)g(\(i.e.,)f(data)g
(accessed)i(via)e Fn(pop)g Fs(and)g Fn(push)p Fs(\).)45
b(This)33 b(adjustmen)m(t)150 2447 y(allo)m(ws)43 b(us)g(to)f(con)m
(trol)h(the)f(fraction)g(of)g(the)h(cac)m(he)h(that)e(is)g(used)i(for)e
(reading)g(and)h(writing)150 2628 y(data|and)37 b(a\013ords)h(some)h
(\015exibilit)m(y)i(in)d(targeting)g(v)-5 b(arious)38
b(cac)m(he)h(organizations.)60 b(F)-8 b(or)38 b(ex-)150
2808 y(ample,)g(arc)m(hitectures)g(with)e(highly)h(asso)s(ciativ)m(e)g
(and)f(m)m(ultilev)m(el)j(cac)m(hes)f(ma)m(y)e(b)s(ene\014t)h(from)150
2989 y(scaling)29 b(up)g(the)g(e\013ectiv)m(e)i(cac)m(he)f(size)g
(\(i.e.,)g Fm(\013)e(>)g Fs(1\),)h(whereas)h(a)e(direct)i(mapp)s(ed)f
(cac)m(he)h(that)e(is)150 3169 y(more)j(prone)g(to)g(con\015icts)h(ma)m
(y)g(b)s(ene\014t)f(from)g(scaling)h(do)m(wn)f(the)h(cac)m(he)g
(\(i.e.,)f Fm(\013)e(<)e Fs(1\).)43 b(In)31 b(our)150
3350 y(implemen)m(tation,)f(w)m(e)f(found)e Fm(\013)i
Fs(=)e(2)p Fm(=)p Fs(3)g(to)g(w)m(ork)i(w)m(ell)f(on)g(desktop)g(pro)s
(cessors)h(P)m(en)m(tium)h(3)d(and)150 3531 y(Itanium)38
b(2,)g(and)g Fm(\013)e Fs(=)f(4)p Fm(=)p Fs(3)i(to)g(w)m(ork)h(w)m(ell)
h(on)e(an)g(em)m(b)s(edded)i(pro)s(cessor)f(StrongARM)g(1110.)150
3711 y(W)-8 b(e)43 b(note)f(that)g(the)h(optimal)f(c)m(hoice)i(for)e
(the)g(e\013ectiv)m(e)j(cac)m(he)e(size)h(is)f(a)f(complex)h(function)
150 3892 y(of)35 b(the)h(underlying)i(cac)m(he)e(organization)g(and)g
(p)s(ossibly)h(the)f(application)g(as)g(w)m(ell;)i(this)f(is)f(an)150
4072 y(in)m(teresting)e(issue)g(that)f(w)m(arran)m(ts)g(further)g(in)m
(v)m(estigation.)1901 5649 y(36)p eop
%%Page: 37 37
37 36 bop 406 3 3089 4 v 406 1511 4 1509 v 434 1487 a
@beginspecial 81 @llx 554 @lly 441 @urx 729 @ury 3600
@rwi @setspecial
%%BeginDocument: code3.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Microsoft Word - code-fig.doc)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050610160514-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 81 554 441 729
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
81 554 moveto 441 554 lineto 441 729 lineto 81 729 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: file Pscript_CFF PSVER
userdict/ct_CffDict 6 dict put ct_CffDict begin/F0Subr{systemdict/internaldict
known{1183615869 systemdict/internaldict get exec/FlxProc known{save true}{
false}ifelse}{userdict/internaldict known not{userdict/internaldict{count 0 eq
{/internaldict errordict/invalidaccess get exec}if dup type/integertype ne{
/internaldict errordict/invalidaccess get exec}if dup 1183615869 eq{pop 0}{
/internaldict errordict/invalidaccess get exec}ifelse}dup 14 get 1 25 dict put
bind executeonly put}if 1183615869 userdict/internaldict get exec/FlxProc
known{save true}{false}ifelse}ifelse[systemdict/internaldict known not{100
dict/begin cvx/mtx matrix/def cvx}if systemdict/currentpacking known{
currentpacking true setpacking}if{systemdict/internaldict known{1183615869
systemdict/internaldict get exec dup/$FlxDict known not{dup dup length exch
maxlength eq{pop userdict dup/$FlxDict known not{100 dict begin/mtx matrix def
dup/$FlxDict currentdict put end}if}{100 dict begin/mtx matrix def dup
/$FlxDict currentdict put end}ifelse}if/$FlxDict get begin}if grestore/exdef{
exch def}def/dmin exch abs 100 div def/epX exdef/epY exdef/c4y2 exdef/c4x2
exdef/c4y1 exdef/c4x1 exdef/c4y0 exdef/c4x0 exdef/c3y2 exdef/c3x2 exdef/c3y1
exdef/c3x1 exdef/c3y0 exdef/c3x0 exdef/c1y2 exdef/c1x2 exdef/c2x2 c4x2 def
/c2y2 c4y2 def/yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def/PickCoords{{
c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2}{c3x0 c3y0 c3x1
c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2}ifelse/y5 exdef/x5 exdef/y4 exdef
/x4 exdef/y3 exdef/x3 exdef/y2 exdef/x2 exdef/y1 exdef/x1 exdef/y0 exdef/x0
exdef}def mtx currentmatrix pop mtx 0 get abs 1e-05 lt mtx 3 get abs 1e-05 lt
or{/flipXY -1 def}{mtx 1 get abs 1e-05 lt mtx 2 get abs 1e-05 lt or{/flipXY 1
def}{/flipXY 0 def}ifelse}ifelse/erosion 1 def systemdict/internaldict known{
1183615869 systemdict/internaldict get exec dup/erosion known{/erosion get
/erosion exch def}{pop}ifelse}if yflag{flipXY 0 eq c3y2 c4y2 eq or{false
PickCoords}{/shrink c3y2 c4y2 eq{0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs}ifelse
def/yshrink{c4y2 sub shrink mul c4y2 add}def/c1y0 c3y0 yshrink def/c1y1 c3y1
yshrink def/c2y0 c4y0 yshrink def/c2y1 c4y1 yshrink def/c1x0 c3x0 def/c1x1
c3x1 def/c2x0 c4x0 def/c2x1 c4x1 def/dY 0 c3y2 c1y2 sub round dtransform
flipXY 1 eq{exch}if pop abs def dY dmin lt PickCoords y2 c1y2 sub abs .001 gt{
c1x2 c1y2 transform flipXY 1 eq{exch}if/cx exch def/cy exch def/dY 0 y2 c1y2
sub round dtransform flipXY 1 eq{exch}if pop def dY round dup 0 ne{/dY exdef}{
pop dY 0 lt{-1}{1}ifelse/dY exdef}ifelse/erode PaintType 2 ne erosion .5 ge
and def erode{/cy cy .5 sub def}if/ey cy dY add def/ey ey ceiling ey sub ey
floor add def erode{/ey ey .5 add def}if ey cx flipXY 1 eq{exch}if itransform
exch pop y2 sub/eShift exch def/y1 y1 eShift add def/y2 y2 eShift add def/y3
y3 eShift add def}if}ifelse}{flipXY 0 eq c3x2 c4x2 eq or{false PickCoords}{
/shrink c3x2 c4x2 eq{0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs}ifelse def/xshrink
{c4x2 sub shrink mul c4x2 add}def/c1x0 c3x0 xshrink def/c1x1 c3x1 xshrink def
/c2x0 c4x0 xshrink def/c2x1 c4x1 xshrink def/c1y0 c3y0 def/c1y1 c3y1 def/c2y0
c4y0 def/c2y1 c4y1 def/dX c3x2 c1x2 sub round 0 dtransform flipXY -1 eq{exch}
if pop abs def dX dmin lt PickCoords x2 c1x2 sub abs .001 gt{c1x2 c1y2
transform flipXY -1 eq{exch}if/cy exch def/cx exch def/dX x2 c1x2 sub round 0
dtransform flipXY -1 eq{exch}if pop def dX round dup 0 ne{/dX exdef}{pop dX 0
lt{-1}{1}ifelse/dX exdef}ifelse/erode PaintType 2 ne erosion .5 ge and def
erode{/cx cx .5 sub def}if/ex cx dX add def/ex ex ceiling ex sub ex floor add
def erode{/ex ex .5 add def}if ex cy flipXY -1 eq{exch}if itransform pop x2
sub/eShift exch def/x1 x1 eShift add def/x2 x2 eShift add def/x3 x3 eShift add
def}if}ifelse}ifelse x2 x5 eq y2 y5 eq or{x5 y5 lineto}{x0 y0 x1 y1 x2 y2
curveto x3 y3 x4 y4 x5 y5 curveto}ifelse epY epX}systemdict/currentpacking
known{exch setpacking}if/exec cvx/end cvx]cvx executeonly exch{pop true exch
restore}{systemdict/internaldict known not{1183615869 userdict/internaldict
get exec exch/FlxProc exch put true}{1183615869 systemdict/internaldict get
exec dup length exch maxlength eq{false}{1183615869 systemdict/internaldict
get exec exch/FlxProc exch put true}ifelse}ifelse}ifelse{systemdict
/internaldict known{1183615869 systemdict/internaldict get exec/FlxProc get
exec}{1183615869 userdict/internaldict get exec/FlxProc get exec}ifelse}if}
executeonly def/F1Subr{gsave currentpoint newpath moveto}bind def/F2Subr{
currentpoint grestore gsave currentpoint newpath moveto}bind def/HSSubr{
systemdict/internaldict known not{pop 3}{1183615869 systemdict/internaldict
get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck
get exec}{pop 3}ifelse}ifelse}ifelse}bind def end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Courier-Bold
[/N11/Courier-Bold 1 TZ
%%IncludeResource Courier
[/N10/Courier 1 TZ
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
81 554 359 174 rectclip
/N12 [/DeviceRGB] /ColorSpace defineRes pop

false setSA
0 0 0 setrgbcolor
90 711.72 m
/N10 10.02 Tf
(void->void pipeline )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
210 711.72 m
/N11 10.02 Tf
(Program)
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
251.999 711.72 m
/N10 10.02 Tf
( { )
[5.99983 5.99983 5.99983 ] pdfxs
89.9991 700.38 m
(  add )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
125.999 700.38 m
/N11 10.02 Tf
(Source)
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
161.999 700.38 m
/N10 10.02 Tf
(\(\);)
[5.99983 5.99983 5.99983 ] pdfxs
89.9992 689.041 m
(  add )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
125.999 689.041 m
/N11 10.02 Tf
(Printer)
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
167.999 689.041 m
/N10 10.02 Tf
(\(\);)
[5.99983 5.99983 5.99983 ] pdfxs
89.9994 677.521 m
(}) show
89.9994 655.081 m
(void->int filter )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
191.999 655.081 m
/N11 10.02 Tf
(Source)
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
227.999 655.081 m
/N10 10.02 Tf
( { )
[5.99983 5.99983 5.99983 ] pdfxs
89.9983 643.501 m
(  int i; )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
89.9983 632.161 m
(  init { i = 0; } )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
89.9983 620.881 m
(  work push 2 { push\(i++\); push\(i++\); } )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
89.9983 609.541 m
(}) show
89.9983 587.101 m
(void->int filter )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
191.998 587.101 m
/N11 10.02 Tf
(Printer)
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
233.998 587.101 m
/N10 10.02 Tf
( { )
[5.99983 5.99983 5.99983 ] pdfxs
89.9972 575.521 m
(  work pop 3 { print\(pop\(\) + pop\(\) + pop\(\)\); } )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 ] pdfxs
89.9972 564.241 m
(}) show
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%DocumentNeededResources:
%%+ font Courier-Bold
%%+ font Courier
%%EOF

%%EndDocument
 @endspecial 3491 1511 V 406 1514 3089 4 v 1193 1648
a Fs(Figure)32 b(4-3:)43 b(Example)34 b(StreamIt)f(co)s(de)150
1942 y Fw(4.2)161 b(Scalar)53 b(Replacemen)l(t)150 2229
y Fs(After)27 b(t)m(w)m(o)h(\014lters)h(ha)m(v)m(e)f(b)s(een)g(fused)h
(in)m(to)e(a)g(single)i(w)m(ork)f(function)g(using)g
Fo(c)-5 b(ache)29 b(awar)-5 b(e)29 b(fusion)p Fs(,)150
2410 y(the)41 b(bu\013er)g(that)g(con)m(tains)g(the)g(in)m(termediate)i
(v)-5 b(alues)41 b(can)g(b)s(e)g(replaced)h(b)m(y)g(a)e(set)h(of)g
(scalar)150 2591 y(v)-5 b(ariables.)42 b(Suc)m(h)27 b(transformation)f
(allo)m(ws)h(the)g(C)f(compiler)i(to)d(register)i(allo)s(cate)f(in)m
(termediate)150 2771 y(v)-5 b(alues)37 b(and)g(it)g(also)f(eliminates)i
(the)f(need)h(to)e(k)m(eep)i(trac)m(k)g(of)e(the)h(curren)m(t)g(index)h
(within)g(the)150 2952 y(bu\013er)44 b(while)g(adding)f(to)g(or)g(remo)
m(ving)i(items)f(from)f(the)g(bu\013er.)76 b(In)44 b(order)f(for)g(the)
h Fo(sc)-5 b(alar)150 3132 y(r)g(eplac)g(ement)33 b Fs(to)g(b)s(e)h(p)s
(ossible)h(all)f(instructions)h(that)e(access)j(the)e(bu\013er)g(m)m
(ust)h(access)h(it)d(with)150 3313 y(a)46 b(constan)m(t)h(index.)87
b(As)47 b(our)f(example)i(will)f(sho)m(w,)k(w)m(e)c(can)g(guaran)m(tee)
g(this)g(prop)s(ert)m(y)g(b)m(y)150 3493 y(p)s(erforming)33
b(su\016cien)m(t)h(lo)s(op)e(unrolling.)150 3883 y Fr(4.2.1)136
b(Scalar)45 b(Replacemen)l(t)i(Example)150 4136 y Fs(Consider)g(a)e
(StreamIt)h(program)g(sho)m(wn)g(in)g(Figure)g(4-3.)81
b(The)47 b(program)e(consists)i(of)e(t)m(w)m(o)150 4317
y(\014lters)34 b(\()p Fn(Source)h Fs(and)e Fn(Printer)p
Fs(\))i(that)d(ha)m(v)m(e)j(mis-matc)m(hed)g(rates)e(\(\014lter)h
Fn(Source)g Fs(pushes)h(t)m(w)m(o)150 4497 y(items)h(and)f(\014lter)h
Fn(Printer)h Fs(p)s(ops)e(three)h(items\).)53 b(If)35
b(the)g(t)m(w)m(o)h(\014lters)g(are)f(fused)h(the)g(compiler)150
4678 y(will)f(create)f(a)g(pair)f(of)h(lo)s(ops)g(to)f(matc)m(h)i(the)f
(pro)s(duction)g(and)g(consumption)h(rates)g(as)f(sho)m(wn)150
4858 y(in)i(the)g(Figure)g(4-4.)53 b(Note)36 b(that)f(w)m(e)i(can)f
(not)g(replace)h(the)f(bu\013er)h(with)f(scalar)g(v)-5
b(ariables)37 b(y)m(et)150 5039 y(since)28 b(eac)m(h)f(instruction)g
(that)f(accesses)j(the)e(bu\013er)g(uses)g(a)f(non-constan)m(t)h
(subscript.)43 b(T)-8 b(o)27 b(allo)m(w)150 5219 y Fo(sc)-5
b(alar)38 b(r)-5 b(eplac)g(ement)36 b Fs(w)m(e)i(need)g(to)e(fully)i
(unroll)f(the)g(lo)s(ops.)57 b(Note)37 b(that)g(the)g(result)h(will)g
(ha)m(v)m(e)150 5400 y(three)k(copies)g(of)f(instructions)i(that)d
(corresp)s(ond)i(to)f(the)h(\014lter)f Fn(Source)i Fs(and)e(t)m(w)m(o)h
(copies)g(of)1901 5649 y(37)p eop
%%Page: 38 38
38 37 bop 256 3 3389 4 v 256 1703 4 1700 v 284 1678 a
@beginspecial 81 @llx 531 @lly 477 @urx 729 @ury 3960
@rwi @setspecial
%%BeginDocument: code4.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Microsoft Word - code-fig.doc)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050610161400-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 81 531 477 729
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
81 531 moveto 477 531 lineto 477 729 lineto 81 729 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: file Pscript_CFF PSVER
userdict/ct_CffDict 6 dict put ct_CffDict begin/F0Subr{systemdict/internaldict
known{1183615869 systemdict/internaldict get exec/FlxProc known{save true}{
false}ifelse}{userdict/internaldict known not{userdict/internaldict{count 0 eq
{/internaldict errordict/invalidaccess get exec}if dup type/integertype ne{
/internaldict errordict/invalidaccess get exec}if dup 1183615869 eq{pop 0}{
/internaldict errordict/invalidaccess get exec}ifelse}dup 14 get 1 25 dict put
bind executeonly put}if 1183615869 userdict/internaldict get exec/FlxProc
known{save true}{false}ifelse}ifelse[systemdict/internaldict known not{100
dict/begin cvx/mtx matrix/def cvx}if systemdict/currentpacking known{
currentpacking true setpacking}if{systemdict/internaldict known{1183615869
systemdict/internaldict get exec dup/$FlxDict known not{dup dup length exch
maxlength eq{pop userdict dup/$FlxDict known not{100 dict begin/mtx matrix def
dup/$FlxDict currentdict put end}if}{100 dict begin/mtx matrix def dup
/$FlxDict currentdict put end}ifelse}if/$FlxDict get begin}if grestore/exdef{
exch def}def/dmin exch abs 100 div def/epX exdef/epY exdef/c4y2 exdef/c4x2
exdef/c4y1 exdef/c4x1 exdef/c4y0 exdef/c4x0 exdef/c3y2 exdef/c3x2 exdef/c3y1
exdef/c3x1 exdef/c3y0 exdef/c3x0 exdef/c1y2 exdef/c1x2 exdef/c2x2 c4x2 def
/c2y2 c4y2 def/yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def/PickCoords{{
c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2}{c3x0 c3y0 c3x1
c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2}ifelse/y5 exdef/x5 exdef/y4 exdef
/x4 exdef/y3 exdef/x3 exdef/y2 exdef/x2 exdef/y1 exdef/x1 exdef/y0 exdef/x0
exdef}def mtx currentmatrix pop mtx 0 get abs 1e-05 lt mtx 3 get abs 1e-05 lt
or{/flipXY -1 def}{mtx 1 get abs 1e-05 lt mtx 2 get abs 1e-05 lt or{/flipXY 1
def}{/flipXY 0 def}ifelse}ifelse/erosion 1 def systemdict/internaldict known{
1183615869 systemdict/internaldict get exec dup/erosion known{/erosion get
/erosion exch def}{pop}ifelse}if yflag{flipXY 0 eq c3y2 c4y2 eq or{false
PickCoords}{/shrink c3y2 c4y2 eq{0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs}ifelse
def/yshrink{c4y2 sub shrink mul c4y2 add}def/c1y0 c3y0 yshrink def/c1y1 c3y1
yshrink def/c2y0 c4y0 yshrink def/c2y1 c4y1 yshrink def/c1x0 c3x0 def/c1x1
c3x1 def/c2x0 c4x0 def/c2x1 c4x1 def/dY 0 c3y2 c1y2 sub round dtransform
flipXY 1 eq{exch}if pop abs def dY dmin lt PickCoords y2 c1y2 sub abs .001 gt{
c1x2 c1y2 transform flipXY 1 eq{exch}if/cx exch def/cy exch def/dY 0 y2 c1y2
sub round dtransform flipXY 1 eq{exch}if pop def dY round dup 0 ne{/dY exdef}{
pop dY 0 lt{-1}{1}ifelse/dY exdef}ifelse/erode PaintType 2 ne erosion .5 ge
and def erode{/cy cy .5 sub def}if/ey cy dY add def/ey ey ceiling ey sub ey
floor add def erode{/ey ey .5 add def}if ey cx flipXY 1 eq{exch}if itransform
exch pop y2 sub/eShift exch def/y1 y1 eShift add def/y2 y2 eShift add def/y3
y3 eShift add def}if}ifelse}{flipXY 0 eq c3x2 c4x2 eq or{false PickCoords}{
/shrink c3x2 c4x2 eq{0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs}ifelse def/xshrink
{c4x2 sub shrink mul c4x2 add}def/c1x0 c3x0 xshrink def/c1x1 c3x1 xshrink def
/c2x0 c4x0 xshrink def/c2x1 c4x1 xshrink def/c1y0 c3y0 def/c1y1 c3y1 def/c2y0
c4y0 def/c2y1 c4y1 def/dX c3x2 c1x2 sub round 0 dtransform flipXY -1 eq{exch}
if pop abs def dX dmin lt PickCoords x2 c1x2 sub abs .001 gt{c1x2 c1y2
transform flipXY -1 eq{exch}if/cy exch def/cx exch def/dX x2 c1x2 sub round 0
dtransform flipXY -1 eq{exch}if pop def dX round dup 0 ne{/dX exdef}{pop dX 0
lt{-1}{1}ifelse/dX exdef}ifelse/erode PaintType 2 ne erosion .5 ge and def
erode{/cx cx .5 sub def}if/ex cx dX add def/ex ex ceiling ex sub ex floor add
def erode{/ex ex .5 add def}if ex cy flipXY -1 eq{exch}if itransform pop x2
sub/eShift exch def/x1 x1 eShift add def/x2 x2 eShift add def/x3 x3 eShift add
def}if}ifelse}ifelse x2 x5 eq y2 y5 eq or{x5 y5 lineto}{x0 y0 x1 y1 x2 y2
curveto x3 y3 x4 y4 x5 y5 curveto}ifelse epY epX}systemdict/currentpacking
known{exch setpacking}if/exec cvx/end cvx]cvx executeonly exch{pop true exch
restore}{systemdict/internaldict known not{1183615869 userdict/internaldict
get exec exch/FlxProc exch put true}{1183615869 systemdict/internaldict get
exec dup length exch maxlength eq{false}{1183615869 systemdict/internaldict
get exec exch/FlxProc exch put true}ifelse}ifelse}ifelse{systemdict
/internaldict known{1183615869 systemdict/internaldict get exec/FlxProc get
exec}{1183615869 userdict/internaldict get exec/FlxProc get exec}ifelse}if}
executeonly def/F1Subr{gsave currentpoint newpath moveto}bind def/F2Subr{
currentpoint grestore gsave currentpoint newpath moveto}bind def/HSSubr{
systemdict/internaldict known not{pop 3}{1183615869 systemdict/internaldict
get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck
get exec}{pop 3}ifelse}ifelse}ifelse}bind def end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Courier
[/N11/Courier 1 TZ
%%IncludeResource Courier-Bold
[/N10/Courier-Bold 1 TZ
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
81 531 395 197 rectclip
/N12 [/DeviceRGB] /ColorSpace defineRes pop

false setSA
0 0 0 setrgbcolor
90 711.72 m
/N10 10.02 Tf
(fused_work)
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
150 711.72 m
/N11 10.02 Tf
(\(\) { )
[5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
90 700.14 m
(  int buf[6]; )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 ] pdfxs
90 688.8 m
(  int pushindex = 0; )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
90 677.52 m
(  int popindex = 0; )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
102 655.08 m
/N10 10.02 Tf
(// execute Source )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
90 643.5 m
/N11 10.02 Tf
(  for \(j = 0; j < 3; j++\) {)
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
90 632.16 m
(    buf[pushindex++] = i++;)
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
90 620.88 m
(    buf[pushindex++] = i++; )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
90 609.54 m
(  } )
[5.99983 5.99983 5.99983 5.99983 ] pdfxs
102 587.1 m
/N10 10.02 Tf
(// execute Printer )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
90 575.52 m
/N11 10.02 Tf
(  for \(j = 0; j < 2; j++\) { )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
90 564.24 m
(    print\(buf[popindex++] + buf[popindex++] + buf[popindex++]\); )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
90 552.9 m
(  } )
[5.99983 5.99983 5.99983 5.99983 ] pdfxs
90 541.561 m
(}) show
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%DocumentNeededResources:
%%+ font Courier-Bold
%%+ font Courier
%%EOF

%%EndDocument
 @endspecial 3641 1703 V 256 1706 3389 4 v 228 1840 a
Fs(Figure)32 b(4-4:)43 b(Generated)33 b(C)g(co)s(de)g(corresp)s(onding)
g(to)g(the)g(fused)g(\014lter)g(with)g(no)g(unrolling)p
406 1974 3089 4 v 406 3107 4 1134 v 434 3082 a @beginspecial
81 @llx 599 @lly 441 @urx 729 @ury 3600 @rwi @setspecial
%%BeginDocument: code5.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Microsoft Word - code-fig.doc)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050610162002-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 81 599 441 729
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
81 599 moveto 441 599 lineto 441 729 lineto 81 729 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: file Pscript_CFF PSVER
userdict/ct_CffDict 6 dict put ct_CffDict begin/F0Subr{systemdict/internaldict
known{1183615869 systemdict/internaldict get exec/FlxProc known{save true}{
false}ifelse}{userdict/internaldict known not{userdict/internaldict{count 0 eq
{/internaldict errordict/invalidaccess get exec}if dup type/integertype ne{
/internaldict errordict/invalidaccess get exec}if dup 1183615869 eq{pop 0}{
/internaldict errordict/invalidaccess get exec}ifelse}dup 14 get 1 25 dict put
bind executeonly put}if 1183615869 userdict/internaldict get exec/FlxProc
known{save true}{false}ifelse}ifelse[systemdict/internaldict known not{100
dict/begin cvx/mtx matrix/def cvx}if systemdict/currentpacking known{
currentpacking true setpacking}if{systemdict/internaldict known{1183615869
systemdict/internaldict get exec dup/$FlxDict known not{dup dup length exch
maxlength eq{pop userdict dup/$FlxDict known not{100 dict begin/mtx matrix def
dup/$FlxDict currentdict put end}if}{100 dict begin/mtx matrix def dup
/$FlxDict currentdict put end}ifelse}if/$FlxDict get begin}if grestore/exdef{
exch def}def/dmin exch abs 100 div def/epX exdef/epY exdef/c4y2 exdef/c4x2
exdef/c4y1 exdef/c4x1 exdef/c4y0 exdef/c4x0 exdef/c3y2 exdef/c3x2 exdef/c3y1
exdef/c3x1 exdef/c3y0 exdef/c3x0 exdef/c1y2 exdef/c1x2 exdef/c2x2 c4x2 def
/c2y2 c4y2 def/yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def/PickCoords{{
c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2}{c3x0 c3y0 c3x1
c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2}ifelse/y5 exdef/x5 exdef/y4 exdef
/x4 exdef/y3 exdef/x3 exdef/y2 exdef/x2 exdef/y1 exdef/x1 exdef/y0 exdef/x0
exdef}def mtx currentmatrix pop mtx 0 get abs 1e-05 lt mtx 3 get abs 1e-05 lt
or{/flipXY -1 def}{mtx 1 get abs 1e-05 lt mtx 2 get abs 1e-05 lt or{/flipXY 1
def}{/flipXY 0 def}ifelse}ifelse/erosion 1 def systemdict/internaldict known{
1183615869 systemdict/internaldict get exec dup/erosion known{/erosion get
/erosion exch def}{pop}ifelse}if yflag{flipXY 0 eq c3y2 c4y2 eq or{false
PickCoords}{/shrink c3y2 c4y2 eq{0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs}ifelse
def/yshrink{c4y2 sub shrink mul c4y2 add}def/c1y0 c3y0 yshrink def/c1y1 c3y1
yshrink def/c2y0 c4y0 yshrink def/c2y1 c4y1 yshrink def/c1x0 c3x0 def/c1x1
c3x1 def/c2x0 c4x0 def/c2x1 c4x1 def/dY 0 c3y2 c1y2 sub round dtransform
flipXY 1 eq{exch}if pop abs def dY dmin lt PickCoords y2 c1y2 sub abs .001 gt{
c1x2 c1y2 transform flipXY 1 eq{exch}if/cx exch def/cy exch def/dY 0 y2 c1y2
sub round dtransform flipXY 1 eq{exch}if pop def dY round dup 0 ne{/dY exdef}{
pop dY 0 lt{-1}{1}ifelse/dY exdef}ifelse/erode PaintType 2 ne erosion .5 ge
and def erode{/cy cy .5 sub def}if/ey cy dY add def/ey ey ceiling ey sub ey
floor add def erode{/ey ey .5 add def}if ey cx flipXY 1 eq{exch}if itransform
exch pop y2 sub/eShift exch def/y1 y1 eShift add def/y2 y2 eShift add def/y3
y3 eShift add def}if}ifelse}{flipXY 0 eq c3x2 c4x2 eq or{false PickCoords}{
/shrink c3x2 c4x2 eq{0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs}ifelse def/xshrink
{c4x2 sub shrink mul c4x2 add}def/c1x0 c3x0 xshrink def/c1x1 c3x1 xshrink def
/c2x0 c4x0 xshrink def/c2x1 c4x1 xshrink def/c1y0 c3y0 def/c1y1 c3y1 def/c2y0
c4y0 def/c2y1 c4y1 def/dX c3x2 c1x2 sub round 0 dtransform flipXY -1 eq{exch}
if pop abs def dX dmin lt PickCoords x2 c1x2 sub abs .001 gt{c1x2 c1y2
transform flipXY -1 eq{exch}if/cy exch def/cx exch def/dX x2 c1x2 sub round 0
dtransform flipXY -1 eq{exch}if pop def dX round dup 0 ne{/dX exdef}{pop dX 0
lt{-1}{1}ifelse/dX exdef}ifelse/erode PaintType 2 ne erosion .5 ge and def
erode{/cx cx .5 sub def}if/ex cx dX add def/ex ex ceiling ex sub ex floor add
def erode{/ex ex .5 add def}if ex cy flipXY -1 eq{exch}if itransform pop x2
sub/eShift exch def/x1 x1 eShift add def/x2 x2 eShift add def/x3 x3 eShift add
def}if}ifelse}ifelse x2 x5 eq y2 y5 eq or{x5 y5 lineto}{x0 y0 x1 y1 x2 y2
curveto x3 y3 x4 y4 x5 y5 curveto}ifelse epY epX}systemdict/currentpacking
known{exch setpacking}if/exec cvx/end cvx]cvx executeonly exch{pop true exch
restore}{systemdict/internaldict known not{1183615869 userdict/internaldict
get exec exch/FlxProc exch put true}{1183615869 systemdict/internaldict get
exec dup length exch maxlength eq{false}{1183615869 systemdict/internaldict
get exec exch/FlxProc exch put true}ifelse}ifelse}ifelse{systemdict
/internaldict known{1183615869 systemdict/internaldict get exec/FlxProc get
exec}{1183615869 userdict/internaldict get exec/FlxProc get exec}ifelse}if}
executeonly def/F1Subr{gsave currentpoint newpath moveto}bind def/F2Subr{
currentpoint grestore gsave currentpoint newpath moveto}bind def/HSSubr{
systemdict/internaldict known not{pop 3}{1183615869 systemdict/internaldict
get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck
get exec}{pop 3}ifelse}ifelse}ifelse}bind def end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Courier
[/N11/Courier 1 TZ
%%IncludeResource Courier-Bold
[/N10/Courier-Bold 1 TZ
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
81 599 359 130 rectclip
/N12 [/DeviceRGB] /ColorSpace defineRes pop

false setSA
0 0 0 setrgbcolor
90 711.72 m
/N10 10.02 Tf
(fused_work)
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
150 711.72 m
/N11 10.02 Tf
(\(\) { )
[5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
90 700.14 m
(  int buf0, buf1, buf2, buf3, buf4, buf5; )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
90 677.76 m
(  buf0 = i++; buf1 = i++; )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 ] pdfxs
246 677.76 m
/N10 10.02 Tf
(// execute Source)
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
89.9998 666.421 m
/N11 10.02 Tf
(  buf2 = i++; buf3 = i++; )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 ] pdfxs
246 666.421 m
/N10 10.02 Tf
(// execute Source)
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
89.9997 655.081 m
/N11 10.02 Tf
(  buf4 = i++; buf5 = i++; )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 ] pdfxs
246 655.081 m
/N10 10.02 Tf
(// execute Source)
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
89.9995 632.401 m
/N11 10.02 Tf
(  print\(buf0 + buf1 + buf2\); )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
264 632.401 m
/N10 10.02 Tf
(// execute Printer )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
89.9995 621.12 m
/N11 10.02 Tf
(  print\(buf3 + buf4 + buf5\); )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
264 621.12 m
/N10 10.02 Tf
(// execute Printer )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
89.9995 609.54 m
/N11 10.02 Tf
(}) show
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%DocumentNeededResources:
%%+ font Courier
%%+ font Courier-Bold
%%EOF

%%EndDocument
 @endspecial 3491 3107 V 406 3110 3089 4 v 150 3244 a(Figure)27
b(4-5:)40 b(Generated)27 b(C)h(co)s(de)f(corresp)s(onding)h(to)f(the)g
(fused)h(\014lter)g(with)f(full)h(unrolling)f(and)150
3364 y(scalar)33 b(replacemen)m(t)150 3661 y(instructions)g(that)e
(corresp)s(ond)h(to)f(the)h(\014lter)g Fn(Printer)p Fs(.)45
b(Figure)31 b(4-5)g(sho)m(ws)i(the)f(C)f(co)s(de)h(that)150
3842 y(has)44 b(b)s(een)h(generated)f(after)g(StreamIt)g(compiler)h
(has)f(p)s(erformed)g(full)g(lo)s(op)f(unrolling)h(and)150
4022 y Fo(sc)-5 b(alar)34 b(r)-5 b(eplac)g(ement)p Fs(.)150
4421 y Fr(4.2.2)136 b(Implications)46 b(for)f(the)h(Cac)l(he)f(Aw)l
(are)h(F)-11 b(usion)150 4678 y Fs(The)38 b(goal)e(of)h(fusion)h(is)f
(to)g(allo)m(w)g(aggressiv)m(e)i(optimization)f(across)f(actor)g(b)s
(oundaries.)58 b(Our)150 4858 y(cac)m(he)45 b(a)m(w)m(are)g(fusion)f
(algorithm)g(is)g(mo)s(di\014ed)h(to)f(only)g(fuse)h(a)e(group)h(of)g
(\014lters)g(if)g(a)g(giv)m(en)150 5039 y(unroll)29 b(limit)g(will)h
(allo)m(w)f(all)g(in)m(termediate)h(bu\013ers)g(to)e(b)s(e)h(scalar)g
(replaced.)44 b(F)-8 b(or)28 b(our)g(StreamIt)150 5219
y(example)37 b(in)g(Figure)f(4-3)f(the)h(\014lters)h
Fn(Source)g Fs(and)f Fn(Printer)i Fs(will)f(only)f(b)s(e)g(fused)h(if)f
(the)g(lo)s(op)150 5400 y(unrolling)26 b(limit)h(is)g(greater)f(than)g
(or)g(equal)h(to)f(3)f(\(otherwise)j(the)f(lo)s(op)e(around)h(the)h
(statemen)m(ts)1901 5649 y(38)p eop
%%Page: 39 39
39 38 bop 150 100 a Fs(corresp)s(onding)34 b(to)e(\014lter)h
Fn(Source)h Fs(in)f(the)g(fused)h(w)m(ork)g(function)f(will)g(not)g(b)s
(e)g(fully)g(unrolled\).)150 280 y(F)-8 b(or)28 b(our)h(b)s(enc)m
(hmark)h(suite)g(w)m(e)g(use)g(an)f(unrolling)g(limit)g(of)g(128)f(to)h
(allo)m(w)g(as)g(m)m(uc)m(h)h(fusion)g(and)150 461 y(scalar)j
(replacemen)m(t)i(as)d(p)s(ossible.)45 b(The)34 b(cac)m(he)g(a)m(w)m
(are)f(fusion)g(algorithm)g(also)f(k)m(eeps)j(trac)m(k)e(of)150
641 y(the)f(co)s(de)g(size)h(expansion)h(due)e(to)f(lo)s(op)h
(unrolling,)g(so)g(that)f(the)i(instruction)g(size)g(of)e(the)h(new)150
822 y(actor)g(after)h(unrolling)f(do)s(es)i(not)e(exceed)j(the)e
(instruction)g(cac)m(he.)150 1185 y Fr(4.2.3)136 b(Implications)46
b(for)f(Unrolling)150 1430 y Fs(W)-8 b(e)33 b(need)h(to)e(p)s(erform)g
(aggressiv)m(e)j(unrolling)d(to)h(maximize)h(the)f(n)m(um)m(b)s(er)h
(of)e(bu\013ers)i(that)e(are)150 1611 y(replaced)42 b(b)m(y)g(scalars.)
70 b(Ho)m(w)m(ev)m(er,)46 b(not)41 b(all)g(lo)s(ops)g(should)h(b)s(e)f
(fully)h(unrolled.)70 b(F)-8 b(or)40 b(example)150 1792
y(fully)29 b(unrolling)f(a)g(lo)s(op)f(that)h(do)s(es)g(not)g(p)s
(erform)g(an)m(y)h Fm(push)e Fs(or)h Fm(pop)g Fs(op)s(erations)g
(unnecessarily)150 1972 y(increases)34 b(the)f(instruction)h(size)g(of)
e(the)g(actor)h(\(this)g(ma)m(y)g(limit)g(our)f(abilit)m(y)i(to)e(fuse)
h(an)f(actor)150 2153 y(with)j(other)f(actors)h(without)f(exceeding)j
(the)d(instruction)i(cac)m(he\).)49 b(Therefore)36 b(lo)s(ops)e(that)g
(do)150 2333 y(not)e(p)s(erform)h Fm(push)f Fs(or)g Fm(pop)h
Fs(op)s(erations)f(are)h(unrolled)g(no)g(more)g(than)f(4)h(times.)1901
5649 y(39)p eop
%%Page: 40 40
40 39 bop 150 100 a Fw(4.3)161 b(Optimized)52 b(Bu\013ering)g(of)i(Liv)
l(e)f(Items)150 379 y Fs(F)-8 b(or)28 b(FIF)m(O)h(c)m(hannels)i(where)f
(the)f(consumer)i(only)e(examines)i(\(p)s(eeks\))g(the)e(same)h(items)g
(that)f(it)150 559 y(consumes)35 b(during)f(eac)m(h)h(iteration)e(\()p
Fm(peek)f Fj(\024)e Fm(pop)p Fs(\))j(a)g(simple)i(bu\013er)f(of)f
(su\016cien)m(t)i(size)g(can)f(b)s(e)150 740 y(used.)55
b(The)37 b(bu\013er)g(is)f(\014rst)h(\014lled)g(up)f(b)m(y)h(the)g(pro)
s(ducer)f(and)g(subsequen)m(tly)k(emptied)e(b)m(y)f(the)150
921 y(consumer.)43 b(As)28 b(sho)m(wn)h(in)e(the)h(previous)h(section)f
(suc)m(h)h(bu\013ers)f(can)g(b)s(e)f(replaced)i(with)e(a)g(set)h(of)150
1101 y(scalar)33 b(v)-5 b(ariables)33 b(if)g(the)g(t)m(w)m(o)g
(\014lters)g(are)g(fused)h(and)e(su\016cien)m(t)j(lo)s(op)d(unrolling)h
(is)g(p)s(erformed.)296 1282 y(F)-8 b(or)39 b(FIF)m(O)h(c)m(hannels)i
(where)f(the)f(consumer)i(examines)g(more)e(items)h(than)f(it)g
(consumes)150 1462 y(\()p Fm(peek)i(>)d(pop)p Fs(\))g(the)h(bu\013er)g
(will)g(b)s(e)f(primed)i(during)e(the)h(initialization)g(phase)g(to)f
(allo)m(w)h(the)150 1643 y(consumer)i(to)e(execute.)70
b(Subsequen)m(tly)-8 b(,)46 b(the)41 b(bu\013er)g(is)g(nev)m(er)h
(completely)g(emptied)g(b)m(y)g(the)150 1823 y(consumer.)k(This)34
b(imp)s(oses)h(a)e(di\016cult)h(decision)g(on)f(our)g(StreamIt)g
(compiler)h(of)f(ho)m(w)h(to)e(b)s(est)150 2004 y(implemen)m(t)48
b(a)e(bu\013er)h(that)e(has)i(to)f(retain)g(a)g(set)g(of)g(liv)m(e)h
(items)h(for)d(consumption)j(during)150 2185 y(subsequen)m(t)36
b(steady)d(state)g(cycles.)296 2365 y(W)-8 b(e)45 b(explore)g(t)m(w)m
(o)g(basic)g(strategies)g(for)e(implemen)m(ting)j(bu\013ers)f(that)f(m)
m(ust)h(retain)g(liv)m(e)150 2546 y(items)d(b)s(et)m(w)m(een)h(steady)g
(state)e(executions.)72 b(The)42 b(\014rst)f(strategy)-8
b(,)44 b(termed)f Fo(mo)-5 b(dulation)p Fs(,)42 b(im-)150
2726 y(plemen)m(ts)j(a)d(traditional)g(circular)h(bu\013er)h(that)e(is)
h(indexed)h(via)f(a)f(wrap-around)h(head)g(and)150 2907
y(tail)c(p)s(oin)m(ters.)65 b(The)41 b(second)f(strategy)-8
b(,)42 b(termed)f Fo(c)-5 b(opy-shift)p Fs(,)40 b(a)m(v)m(oids)h(mo)s
(dulo)e(op)s(erations)h(b)m(y)150 3087 y(shifting)31
b(the)g(bu\013er)g(con)m(ten)m(ts)h(to)e(the)h(start)f(of)g(the)h
(bu\013er)g(after)f(a)g(certain)h(n)m(um)m(b)s(er)h(of)e(execu-)150
3268 y(tions.)43 b(Our)30 b(exp)s(erimen)m(tal)j(ev)-5
b(aluation)30 b(demonstrates)i(that,)e(while)i(a)e(naiv)m(e)h(implemen)
m(tation)150 3449 y(of)44 b(cop)m(y-shift)i(can)f(b)s(e)g(2)p
Fj(\002)g Fs(to)f(3)p Fj(\002)h Fs(slo)m(w)m(er)h(than)f(mo)s
(dulation,)j(optimizations)d(that)g(utilize)150 3629
y(execution)d(scaling)f(can)f(b)s(o)s(ost)g(the)g(p)s(erformance)h(of)e
(cop)m(y-shift)j(to)d(b)s(e)i(signi\014can)m(tly)h(faster)150
3810 y(than)30 b(mo)s(dulation)h(\(51\045)f(sp)s(eedup)i(on)e
(StrongARM,)g(48\045)g(sp)s(eedup)i(on)f(P)m(en)m(tium)h(3,)f(and)f
(5\045)150 3990 y(sp)s(eedup)k(on)f(Itanium)g(2\).)1901
5649 y(40)p eop
%%Page: 41 41
41 40 bop 150 100 a Fr(4.3.1)136 b(Mo)t(dulation)150
345 y Fs(The)53 b(mo)s(dulation)f(sc)m(heme)i(uses)g(a)d(traditional)h
(circular-bu\013er)h(approac)m(h.)102 b(Three)54 b(v)-5
b(ari-)150 525 y(ables)41 b(are)f(in)m(tro)s(duced:)60
b(a)40 b Fn(BUFFER)i Fs(to)e(hold)g(all)g(items)i(transferred)f(b)s(et)
m(w)m(een)h(the)f(actors,)h(a)150 706 y Fn(push)p 360
706 31 4 v 38 w(index)28 b Fs(to)f(indicate)h(the)f(bu\013er)h(lo)s
(cation)e(that)h(will)h(b)s(e)f(written)h(next,)h(and)e(a)g
Fn(pop)p 3462 706 V 38 w(index)150 886 y Fs(to)j(indicate)i(the)f
(bu\013er)g(lo)s(cation)f(that)g(will)h(b)s(e)g(read)g(next)g(\(i.e.,)h
(the)f(lo)s(cation)f(corresp)s(onding)150 1067 y(to)i
Fn(peek\(0\))p Fs(\).)45 b(The)34 b(comm)m(unication)g(primitiv)m(es)h
(are)d(translated)i(as)e(follo)m(ws:)150 1355 y Fn(push\(val\);)54
b(==>)103 b(BUFFER[push_index])56 b(:=)c(val;)970 1536
y(push_index)i(:=)e(\(push_index)i(+)e(1\))g(\045)f(BUF_SIZE;)150
1897 y(pop\(\);)258 b(==>)103 b(:=)52 b(BUFFER[pop_index];)970
2078 y(pop_index)i(:=)e(\(pop_index)i(+)d(1\))h(\045)g(BUF_SIZE;)150
2439 y(peek\(i\))207 b(==>)103 b(:=)52 b(BUFFER[\(pop_index)k(+)51
b(i\))h(\045)g(BUF_SIZE])150 2727 y Fs(Note)31 b(that,)g(for)g(p)s
(erformance)h(reasons)g(the)f(StreamIt)h(compiler)g(con)m(v)m(erts)h
(the)e(mo)s(dulo)h(op)s(er-)150 2908 y(ations)h(to)f(bit)m(wise-and)i
(op)s(erations)f(b)m(y)g(scaling)h(the)f(bu\013er)g(to)f(a)g(p)s(o)m(w)
m(er)i(of)e(t)m(w)m(o.)1901 5649 y(41)p eop
%%Page: 42 42
42 41 bop 150 100 a Fr(4.3.2)136 b(Cop)l(y-Shift)150
345 y Fs(A)43 b(cop)m(y-shift)g(implemen)m(tation)h(allo)m(ws)g(us)f
(to)f(eliminate)i(the)f(bit)m(wise-and)h(op)s(erations,)h(b)m(y)150
525 y(not)35 b(allo)m(wing)h(the)f(head)h(and)f(tail)g(p)s(oin)m(ters)h
(to)f(wrap)g(around)g(the)h(bu\013er.)51 b(Instead,)37
b(the)f(liv)m(e)150 706 y(items)c(are)e(p)s(erio)s(dically)i(copied)f
(to)f(the)h(start)g(of)f(the)h(bu\013er)g(and)g(the)g(head)g(and)g
(tail)f(p)s(oin)m(ters)150 886 y(are)j(decreased.)45
b(The)34 b(comm)m(unication)g(primitiv)m(es)g(are)f(translated)g(as)g
(follo)m(ws:)150 1175 y Fn(push\(val\);)54 b(==>)103
b(BUFFER[push_index++])57 b(:=)52 b(val;)150 1536 y(pop\(\);)258
b(==>)103 b(:=)52 b(BUFFER[pop_index++];)150 1897 y(peek\(i\))207
b(==>)103 b(:=)52 b(BUFFER[pop_index)k(+)51 b(i])150
2186 y Fs(An)27 b(unoptimized)h(implemen)m(tation)g(of)e(cop)m(y-shift)
i(in)e(our)h(StreamIt)g(compiler)g(copies)h(the)f(liv)m(e)150
2366 y(items)34 b(after)e(eac)m(h)i(execution)g(of)e(the)h(consumer)i
(that)d(has)h(b)s(een)h(scaled)g(only)f(to)f(matc)m(h)i(rates)150
2547 y(with)e(other)f(fused)h(actors.)43 b(The)32 b(cost)f(of)f(cop)m
(ying)j(a)d(substan)m(tial)j(amoun)m(t)e(of)f(data)h(frequen)m(tly)150
2727 y(mak)m(es)j(the)f(unoptimized)i(cop)m(y-shift)e(substan)m(tially)
i(less)f(e\016cien)m(t)g(than)f(simple)h(mo)s(dulation)150
2908 y(as)f(our)f(exp)s(erimen)m(tal)j(ev)-5 b(aluation)33
b(will)g(sho)m(w.)1901 5649 y(42)p eop
%%Page: 43 43
43 42 bop 150 100 a Fr(4.3.3)136 b(Optimized)45 b(Cop)l(y-Shift)150
412 y Fs(W)-8 b(e)37 b(can)f(reduce)i(the)f(cost)g(of)e(cop)m(y-shift)j
(b)m(y)f(increasing)h(the)e(size)i(of)e(the)h(data)e(bu\013er.)56
b(This)150 592 y(allo)m(ws)48 b(us)f(to)f(reduce)i(the)f(frequency)i
(at)d(whic)m(h)i(the)g(liv)m(e)f(items)h(are)f(copied)g(o)m(v)m(er)h
(to)f(the)150 773 y(b)s(eginning)36 b(of)f(the)g(bu\013er.)52
b(W)-8 b(e)36 b(ev)-5 b(aluate)36 b(t)m(w)m(o)g(transformations)f(of)g
(a)g(stream)h(program)f(that)150 953 y(allo)m(w)e(us)g(to)f(reduce)i
(the)f(frequency)i(of)d(cop)m(ying)i(the)f(liv)m(e)h(items.)150
1477 y Fp(P)m(eek-Scaling)39 b(Implemen)m(tation)150
1789 y Fs(A)31 b(simple)h(transformation,)f(that)f(allo)m(ws)i(us)f(to)
g(reduce)h(the)f(n)m(um)m(b)s(er)h(of)e(times)i(the)f(liv)m(e)h(items)
150 1969 y(are)39 b(copied,)i(is)f(to)e(replace)i(ev)m(ery)h(\014lter)e
(that)g(p)s(eeks)i(\(i.e.,)g Fm(peek)h(>)c(pop)p Fs(\))h(with)g(a)g
(\014lter)g(that)150 2150 y(executes)49 b(the)f(original)e(\014lter)h
Fm(N)58 b Fs(times.)87 b Fm(N)57 b Fs(is)48 b(c)m(hosen)g(su\016cien)m
(tly)i(large)d(suc)m(h)h(that)f(the)150 2330 y(cost)37
b(of)f(cop)m(ying)h(items)h(p)s(er)e(execution)i(of)e(the)h(original)f
(\014lter)h(is)g(reduced)g(\(since)h(liv)m(e)g(items)150
2511 y(will)i(b)s(e)f(copied)h(to)f(the)g(b)s(eginning)h(of)e(the)i
(bu\013er)f Fm(N)50 b Fs(times)40 b(less\).)64 b(After)39
b(scaling,)j(the)d(new)150 2691 y(\014lter)k(has)g(a)f(p)s(op)h(rate)f
(equal)i(to)e Fm(pop)1623 2706 y Fk(n)1714 2691 y Fs(=)j
Fm(N)39 b Fj(\003)29 b Fm(pop)2176 2706 y Fk(o)2257 2691
y Fs(and)42 b(a)h(p)s(eek)g(rate)g(equal)g(to)f Fm(peek)3582
2706 y Fk(n)3674 2691 y Fs(=)150 2872 y Fm(N)36 b Fj(\003)25
b Fm(pop)484 2887 y Fk(o)547 2872 y Fs(+)g(\()p Fm(peek)876
2887 y Fk(o)939 2872 y Fj(\000)h Fm(pop)1187 2887 y Fk(o)1225
2872 y Fs(\),)38 b(where)g Fm(pop)1759 2887 y Fk(o)1834
2872 y Fs(and)f Fm(peek)2218 2887 y Fk(o)2293 2872 y
Fs(are)g(the)h(p)s(op)f(and)g(p)s(eek)h(rates)f(of)g(the)150
3053 y(original)e(\014lter,)i(and)e Fm(pop)1106 3068
y Fk(n)1189 3053 y Fs(and)g Fm(peek)1571 3068 y Fk(n)1654
3053 y Fs(are)g(the)h(p)s(op)f(and)h(p)s(eek)g(rates)g(of)f(the)h
(replaced)g(\014lter.)150 3233 y(The)48 b(compiler)h(c)m(hoses)g
Fm(N)57 b Fs(suc)m(h)49 b(that)e(\()p Fm(peek)1911 3248
y Fk(n)1990 3233 y Fj(\000)33 b Fm(pop)2245 3248 y Fk(n)2292
3233 y Fs(\))52 b Fj(\024)i Fm(pop)2658 3248 y Fk(n)2704
3233 y Fm(=)p Fs(4)47 b(\(the)h(original)f(\014lter)g(is)150
3414 y(executed)35 b Fm(N)43 b Fs(times)33 b(suc)m(h)h(that)f(the)g
(new)g(\014lter)g(consumes)i(at)d(least)h(4)p Fj(\002)g
Fs(as)g(man)m(y)g(items)h(than)150 3594 y(are)i(copied)g(o)m(v)m(er)h
(to)f(the)g(start)g(of)f(bu\013er)h(after)g(ev)m(ery)h(iteration)f(of)f
(the)i(new)f(\014lter\).)54 b(As)36 b(our)150 3775 y(exp)s(erimen)m
(tal)27 b(ev)-5 b(aluation)26 b(will)g(sho)m(w)g(this)g(transformation)
f(allo)m(ws)h(cop)m(y-shift)g(to)f(outp)s(erform)150
3955 y(mo)s(dulation)37 b(for)g(our)g(syn)m(thetic)i(b)s(enc)m(hmark.)
60 b(Ho)m(w)m(ev)m(er,)40 b(this)e(transformation)f(can)h(lead)f(to)150
4136 y(signi\014can)m(t)f(p)s(erformance)f(reduction)h(for)e(some)h(of)
g(our)f(application)h(b)s(enc)m(hmarks,)i(since)g(the)150
4317 y(lo)s(op)23 b(that)g(is)h(in)m(tro)s(duced)h(b)m(y)f(the)g(p)s
(eek-scaling)g(will)g(b)s(e)g(unrolled)g(to)f(allo)m(w)h(scalar)g
(replacemen)m(t)150 4497 y(leading)g(to)e(an)i(increase)g(in)g(the)f
(instruction)i(fo)s(otprin)m(t.)40 b(Also)23 b(the)h(lo)s(ops)f
(enclosing)i(other)e(fused)150 4678 y(actors)f(will)h(ha)m(v)m(e)h
(larger)e(iteration)g(coun)m(ts)i(to)d(matc)m(h)i(the)g(new)g
(consumption/pro)s(duction)h(rate)150 4858 y(of)37 b(the)h(replaced)h
(\014lter;)i(this)d(leads)g(to)g(increased)h(co)s(de)f(size)h(due)f(to)
f(unrolling.)59 b(Lastly)-8 b(,)40 b(the)150 5039 y(sum)e(of)f(input)g
(and)h(output)f(data)g(consumed)i(during)e(a)g(steady)h(state)g(for)e
(some)i(actor)f(after)150 5219 y(the)j(p)s(eek-scaling)i
(transformation)e(migh)m(t)g(exceed)i(the)f(size)g(of)e(the)i(data)f
(cac)m(he)h(leading)f(to)150 5400 y(bad)33 b(data)f(cac)m(he)i(p)s
(erformance.)1901 5649 y(43)p eop
%%Page: 44 44
44 43 bop 150 100 a Fp(Cut-P)m(eek)37 b(Implemen)m(tation)150
345 y Fs(Another)j(approac)m(h)g(that)f(allo)m(ws)h(us)g(to)f(decrease)
i(the)f(frequency)i(at)d(whic)m(h)i(liv)m(e)f(items)h(are)150
525 y(copied)26 b(to)f(the)h(start)f(of)g(the)h(bu\013er)f(is)h(to)f
(mo)s(dify)h(our)f(cac)m(he)h(a)m(w)m(are)h(fusion)e(algorithm)g(to)g
(nev)m(er)150 706 y(fuse)e(a)f(pro)s(ducer)h(consumer)h(pair)e(if)h
(the)f(consumer)i(p)s(erforms)f(an)m(y)g(p)s(eeking)g(\(i.e.,)i
Fm(peek)32 b(>)27 b(pop)p Fs(\).)150 886 y(This)33 b(ensures)g(that)e
(after)h(w)m(e)g(p)s(erform)g(execution)h(scaling)f(w)m(e)h(can)f(cop)m
(y)g(the)g(liv)m(e)h(items)f(only)150 1067 y(once)42
b(p)s(er)g(execution)h(of)e(the)h(scaled)h(consumer)g(\(whic)m(h)f
(migh)m(t)g(b)s(e)g(fused)h(with)f(\014lters)g(that)150
1247 y(consume)e(its)f(output\).)61 b(The)39 b(cut-p)s(eek)h(implemen)m
(tation)g(presen)m(ts)h(a)d(uni\014ed)h(optimization)150
1428 y(framew)m(ork)47 b(for)f(reducing)i(cac)m(he)f(miss)h(rates)f
(and)f(ac)m(hieving)i(go)s(o)s(d)d(p)s(erformance)i(for)f(our)150
1609 y(cop)m(y-shift)34 b(bu\013er)f(implemen)m(tation.)1901
5649 y(44)p eop
%%Page: 45 45
45 44 bop 150 894 a Fq(Chapter)78 b(5)150 1439 y(Exp)6
b(erimen)-6 b(tal)76 b(Ev)-13 b(aluation)150 1958 y Fs(In)42
b(this)h(c)m(hapter)f(w)m(e)h(ev)-5 b(aluate)42 b(the)h(merits)f(of)g
(the)g(prop)s(osed)g(memory)h(optimizations)g(and)150
2138 y(bu\013er)26 b(managemen)m(t)g(strategies.)42 b(W)-8
b(e)25 b(use)h(three)g(di\013eren)m(t)h(arc)m(hitectures:)41
b(a)25 b(137)g(MHz)g(Stron-)150 2319 y(gARM)g(1110,)g(a)f(600)g(MHz)i
(P)m(en)m(tium)g(3)f(and)f(a)h(1.3)f(GHz)g(Itanium)i(2.)40
b(The)26 b(StrongARM)f(results)150 2499 y(re\015ect)35
b(p)s(erformance)f(for)f(an)h(em)m(b)s(edded)h(target;)f(it)g(has)g(a)f
(16)g(Kb)h(L1)f(instruction)i(cac)m(he,)g(an)150 2680
y(8)c(Kb)h(L1)f(data)g(cac)m(he,)i(and)f(no)f(L2)g(cac)m(he.)45
b(The)32 b(StrongARM)g(also)f(has)h(a)g(separate)g(512-b)m(yte)150
2861 y(minicac)m(he)h(\(not)e(targeted)g(b)m(y)h(our)f
(optimizations\).)44 b(The)32 b(P)m(en)m(tium)h(3)e(and)g(Itanium)h(2)f
(re\015ect)150 3041 y(desktop)j(p)s(erformance;)f(they)g(ha)m(v)m(e)g
(a)f(16)g(Kb)g(L1)g(instruction)h(cac)m(he,)h(16)e(Kb)g(L1)g(data)g
(cac)m(he,)150 3222 y(and)h(256)f(Kb)g(shared)i(L2)e(cac)m(he.)296
3408 y(Our)37 b(b)s(enc)m(hmark)h(suite)f(\(see)h(T)-8
b(able)37 b(5.1\))f(consists)i(of)e(11)g(StreamIt)h(applications.)56
b(They)150 3589 y(are)27 b(compiled)h(with)g(the)f(StreamIt)g(compiler)
h(whic)m(h)h(applies)f(the)f(optimizations)h(describ)s(ed)h(in)150
3769 y(this)g(thesis,)i(as)d(w)m(ell)i(as)e(aggressiv)m(e)j(lo)s(op)c
(unrolling)i(\(b)m(y)g(a)f(factor)g(of)g(128)g(for)g(all)g(b)s(enc)m
(hmarks\))150 3950 y(to)41 b(facilitate)g(scalar)h(replacemen)m(t)h
(\(see)f(Chapter)g(4\).)69 b(The)42 b(StreamIt)f(compiler)h(outputs)g
(a)150 4130 y(functionally)49 b(equiv)-5 b(alen)m(t)50
b(C)f(program)f(that)f(is)i(compiled)h(with)e Fn(gcc)h
Fs(\(v3.4,)k(-O3\))47 b(for)h(the)150 4311 y(StrongARM)27
b(and)h(for)f(the)h(P)m(en)m(tium)h(3,)f(and)g(with)g
Fn(ecc)g Fs(\(v7.0,)g(-O3\))f(for)g(the)g(Itanium)i(2.)41
b(Eac)m(h)150 4491 y(b)s(enc)m(hmark)34 b(is)f(then)h(run)e(\014v)m(e)i
(times,)g(and)f(the)g(median)g(user)h(time)f(is)g(recorded.)296
4678 y(As)39 b(the)g(StrongARM)f(do)s(es)h(not)f(ha)m(v)m(e)h(a)f
(\015oating)g(p)s(oin)m(t)h(unit,)h(w)m(e)f(con)m(v)m(erted)h(all)e(of)
g(our)150 4858 y(\015oating)33 b(p)s(oin)m(t)h(applications)g(\(i.e.,)h
(ev)m(ery)g(application)f(except)h(for)e Fn(bitonic)p
Fs(\))i(to)f(op)s(erate)f(on)150 5039 y(in)m(tegers)46
b(rather)f(than)g(\015oats.)80 b(In)45 b(practice,)k(a)c(detailed)h
(precision)g(analysis)g(is)f(needed)i(in)150 5219 y(con)m(v)m(erting)30
b(suc)m(h)g(applications)f(to)f(\014xed-p)s(oin)m(t.)43
b(Ho)m(w)m(ev)m(er,)31 b(as)d(the)h(con)m(trol)g(\015o)m(w)g(within)g
(these)150 5400 y(applications)39 b(is)g(v)m(ery)g(static,)h(w)m(e)f
(are)f(able)h(to)e(preserv)m(e)k(the)d(computation)h(pattern)f(for)g
(the)1901 5649 y(45)p eop
%%Page: 46 46
46 45 bop 194 53 3512 4 v 192 174 4 121 v 228 137 a Fp(Benc)m(hmark)p
840 174 V 93 w(Description)p 3056 174 V 1653 w(#)37 b(of)h(Actors)p
3704 174 V 194 177 3512 4 v 194 193 V 192 314 4 121 v
228 278 a Fn(bitonic)p 840 314 V 290 w Fs(bitonic)33
b(sort)f(of)h(64)f(in)m(tegers)p 3056 314 V 1345 w(972)p
3704 314 V 194 317 3512 4 v 192 438 4 121 v 228 401 a
Fn(fir)p 840 438 V 494 w Fs(\014nite)h(impulse)h(resp)s(onse)g(\(128)e
(taps\))p 3056 438 V 999 w(132)p 3704 438 V 194 441 3512
4 v 192 561 4 121 v 228 525 a Fn(fft-fine)p 840 561 V
239 w Fs(\014ne)h(grained)g(64-w)m(a)m(y)g(FFT)p 3056
561 V 1377 w(267)p 3704 561 V 194 565 3512 4 v 192 685
4 121 v 228 649 a Fn(fft-coarse)p 840 685 V 137 w Fs(coarse)g(grained)g
(64-w)m(a)m(y)g(FFT)p 3056 685 V 1292 w(26)p 3704 685
V 194 688 3512 4 v 192 809 4 121 v 228 773 a Fn(3gpp)p
840 809 V 443 w Fs(3GPP)f(Radio)g(Access)j(Proto)s(col)p
3056 809 V 1186 w(105)p 3704 809 V 194 812 3512 4 v 192
932 4 121 v 228 896 a Fn(beamformer)p 840 932 V 137 w
Fs(b)s(eamformer)e(with)g(64)f(c)m(hannels)i(and)f(1)f(b)s(eam)p
3056 932 V 646 w(197)p 3704 932 V 194 936 3512 4 v 192
1056 4 121 v 228 1020 a Fn(matmult)p 840 1056 V 290 w
Fs(matrix)h(m)m(ultiplication)p 3056 1056 V 1549 w(48)p
3704 1056 V 194 1059 3512 4 v 192 1180 4 121 v 228 1144
a Fn(fmradio)p 840 1180 V 290 w Fs(FM)f(Radio)g(with)i(10-w)m(a)m(y)e
(equalizer)p 3056 1180 V 1065 w(49)p 3704 1180 V 194
1183 3512 4 v 192 1303 4 121 v 228 1267 a Fn(filterbank)p
840 1303 V 137 w Fs(\014lterbank)h(program)f(\(8)h(bands,)g(32)f(taps)h
(/)f(\014lter\))p 3056 1303 V 537 w(53)p 3704 1303 V
194 1307 3512 4 v 192 1427 4 121 v 228 1391 a Fn(filterbank2)p
840 1427 V 86 w Fs(indep)s(enden)m(t)i(\014lterbank)g(\(3)e(bands,)i
(100)e(taps)g(/)h(\014lter\))p 3056 1427 V 325 w(37)p
3704 1427 V 194 1430 3512 4 v 192 1551 4 121 v 228 1515
a Fn(ofdm)p 840 1551 V 443 w Fs(Orthogonal)e(F)-8 b(requency)35
b(Division)e(Multiplexor)h([26])p 3056 1551 V 412 w(16)p
3704 1551 V 194 1554 3512 4 v 1108 1715 a(T)-8 b(able)33
b(5.1:)43 b(Ev)-5 b(aluation)33 b(b)s(enc)m(hmark)h(suite.)150
2030 y(sak)m(e)k(of)e(b)s(enc)m(hmarking)j(b)m(y)e(simply)i(replacing)e
(ev)m(ery)h(\015oating)f(p)s(oin)m(t)g(t)m(yp)s(e)g(with)g(an)g(in)m
(teger)150 2211 y(t)m(yp)s(e.)296 2391 y(W)-8 b(e)43
b(also)g(made)g(an)g(additional)g(mo)s(di\014cation)g(in)f(compiling)i
(to)e(the)h(StrongARM:)g(our)150 2572 y(execution)33
b(scaling)g(heuristic)g(scales)g(actors)f(un)m(til)g(their)g(output)g
(\014lls)g(4/3)f(of)g(the)h(data)g(cac)m(he,)150 2752
y(rather)24 b(than)h(2/3)e(used)j(for)e(the)g(P)m(en)m(tium)j(3)d(and)g
(the)h(Itanium)g(2.)40 b(This)26 b(mo)s(di\014cation)f(accoun)m(ts)150
2933 y(for)c(the)i(32-w)m(a)m(y)f(set-asso)s(ciativ)m(e)i(L1)e(data)f
(cac)m(he)j(in)e(the)g(StrongARM.)h(Due)f(to)f(the)i(high)f(degree)150
3114 y(of)30 b(asso)s(ciativit)m(y)-8 b(,)33 b(there)f(is)f(a)f
(smaller)i(c)m(hance)g(that)f(the)g(actor)g(outputs)g(will)h(rep)s
(eatedly)g(evict)150 3294 y(the)h(state)f(v)-5 b(ariables)33
b(of)f(the)h(actor,)f(thereb)m(y)i(making)e(it)h(w)m(orth)m(while)h(to)
e(further)g(\014ll)h(the)f(data)150 3475 y(cac)m(he.)88
b(Note,)51 b(that,)f(since)f(4/3)d Fm(>)h Fs(1,)j(w)m(e)e(exp)s(ect)g
(the)g(data)e(pro)s(duced)i(b)m(y)g(the)g(actor)e(to)150
3655 y(o)m(v)m(erwrite)33 b(the)e(data)f(consumed)j(without)e(evicting)
h(the)f(state.)44 b(Using)31 b(4/3)f(instead)i(of)e(2/3)g(on)150
3836 y(StrongARM)j(yields)h(up)f(to)f(30\045)g(impro)m(v)m(emen)m(t)k
(on)c(some)i(b)s(enc)m(hmarks.)1901 5649 y(46)p eop
%%Page: 47 47
47 46 bop 900 1437 a @beginspecial 72 @llx 54 @lly 756
@urx 522 @ury 2520 @rwi @setspecial
%%BeginDocument: caf.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (caf.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050505204048-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 54 756 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 54 moveto 756 54 lineto 756 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 54 684 468 rectclip
[ 0 -1 1 0 18 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font FJDEHM+Arial,Bold
11 dict begin
/FontName /FJDEHM+Arial,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/parenleft 
<10bf31704d42f1352d5273addc7843b77bf144b304a7fd77e3f1cd5aa3d2
5843290f89d4b92d62022c6e20ff3fc16e851d04be964eb564d3148aa849
38f1853bb671322ebdad12328d10df755ca667b8d3> ND 
/parenright 
<10bf31705e9d53b165f4c2bf4ff0b54a54d2b121b1fb0b0443541ece65a0
a8176044e9807e70fc6500f41e661a6236bf6ceec5b6290ebcabc6b4ed73
20f89e31526599e6da59fa9728238cab6dffd27a90873c1ab1c84fdd> ND 
/I 
<10bf31703d39827325e422c7051b9c34531bb76f5b30bcfd5d> ND 
/S 
<10bf31705d65c0900ab6f1dec202feebed63a391e8923b6171e4bd9a9891
3483f7e18f03f81efeea9ec6e499086f29e069b330e0714349bdbde86411
119421305eb3ccf831a419f2b1b383ae283eef31cd6ab17d35e046224edf
8d334c91b8f3410ce0b754cf25ffc38b1c45008fedcc6fb476440d278757
5aef3183071e560db2a44ec14079a58ceb82879a9f1a9b4e9fcabb16df58
24675d0a68f72691cd9980f0d6d9adcd3e204eaf9c302558bc548ec6583d
8e097a247d483ed52d9f91d7ca0feb01513c1c9a868c4cf1c92a6751c828
3f7c6f8c290f25> ND 
/a 
<10bf31705d64e193f644676913533d4f242b6181368ed1350652c8cb7a6f
e958f60841a88d1088c20f893090b458ae087d16aa8691f1ae44882b0528
d32f3e9827d4294992e18a57652ae7d531994f09c8f3899ddffaad39408b
1529cb6c6e94b8c5c36f6038811d22f304b6662d870ece2886bb4e9f799a
c37faedbf994154341e467f29126a4c489a05c6fef9ee5143f581ea41499
e4aecea25c0711d5cc7b9f01a37e7c0b7e59d5ee83c610a480921138ec2c
f957d766614f6ccaa7ceb4e20fd6f9ac362e8c090b1abb9485ee8c51fdeb
7fc72063a72ab3373c0c6872cf9ba20b3513a2189f8a98cd5a1ee87742> ND 
/c 
<10bf317047276c49998622737f5c0fdd43bdb1b35b15caae7eb2c80264ad
f0005e1c6be7a1a08efb8ae0111a7ff9c16d6d1d6fe6a62b9718659cdf71
ec1fec12732e715c04b3f3a8feb95e8d0f9e002393845281717573027f79
ad8c8ea5dce4faf3243344c83485cc434093ad2e51e73ce85594056ff3cf
8de95991fd7222c7dec9d4bc6113b2> ND 
/d 
<10bf317046e845f3cc81de7a4b8a8a1b3fe3a86a2a74eb0ce101ae9ff9ea
ca0b0d6152bab57b5a1a20451eca1d8bce22d8934498cbe1f50790f6dd2f
9d5a0cab606ce69313bb3e4094a370b8d3856d24b15d355e84c7c481bc80
d07358154d4cee4bac791720fabdb39630005823af359d78acbc47e52e70
c34626a827ae2272bde1c4ecc0359b7e45162ac0> ND 
/e 
<10bf3170599a82aebce2d0d9cd696e2d2232ae83b1d98ff884add96e0282
26fcd2cbd306888649029fbc75f18f771bf21f4d5f53f71cd70d56907fb2
0780ae57f65359db4c49ca929cb86ae96dd2f43742f720ffcefc0d1d3194
c72a55a6bfcf26d975c031741b09b969ea0410af02ae1e13b6c1d337a6b3
96eba6c714d73f9b5d2c2499a66a60f107d1dad4da56ef> ND 
/g 
<10bf317046e845f3c38d9f70ba4464ac4e8fae8096f95866e14c9cfc76d4
2c91caccc55306d31fd922e308e96ee980323125643f9a86a8ffc2b52c12
c5bb9a13190b6aced9365e9c0da3f6e0016fa2ab359e2b06b32a173590b2
6f2094e4e558e81d1aad3b8794a704066a5c48c5835d67bbce791b1965a9
3fbd5fb55f1203033af92c703c31533cbcf30051576e5b8b57eedca25286
866fdee3b16f9555216746cd0cc4065676d353776467694c68063ac58586
fb4e91cf6077ef9d35ed3bc9160721b2f3dee4f8c47777dc722d34059624
2ed759> ND 
/i 
<10bf317021cc67b2bc312fc6a7ad37016808b8c74342617d801906e8ad23
4c7210637a5c2e2ea339f24d0c> ND 
/l 
<10bf317021cc67b2bc31c11814793bc69b430b318ded78131a> ND 
/m 
<10bf31703bc84f280bc926798acdec2516269e7061028d385a31d255844f
a27fc6b4cdd6f6ba3dfabbbaadef207eca864f3bc97abd9a4f1b978df039
4779a47e3088a94b9cee6d3b276eef4d4950e88ef4a61f93e0b6cde961dc
7ec12956bd3a56a59704c6c5b5a401c3674bc856b6c34f276e7f1bc3056d
89b4805ca25b43894c427bc43b36554ede70476f7ee25d1a6c03ed9f5e40
5c72135defa96ede67a5a8ef5fea114c19a857db71952cb83f4d11> ND 
/n 
<10bf31702094fda2efce4110428b7f86f5f2073cab682ca78d0dc97da563
e3301b964801f725812f64cb67abc1e242f6d8dcd921f1fbf9e05fee92c3
cf16b5bf6083337a59bf026de7fa548a247b8bde12c672aa0ba0501ccc35
fcca587d7573f11dfc32a2ac31516847d39fb276060c6171da> ND 
/o 
<10bf317041f0d680f4930f6b0672f7536ce2eb70a2366463cc9006c590f6
6bbb22b4a706eff4a93c95880cecbbf82d6e623efa721926a49ba75b71ef
97d0e3d8c35761734c54d6d734cb61cf4c4d7050d90fa115600d26f47050
dfb8739452ed0059ffdca41c137f0b71425a690a4da83dcf8abcf17c206e
c5eff5dd0d7b85b999c37123dfb769cd075b5a162cb33d72426c> ND 
/p 
<10bf31703d364b58d236360a3109f388a509dc9806d07d5bc445174ad942
7c9600246e60ea62f48529a60136f844b413bd7834b903aeb5ec3a65352a
708c943d46c286b502a39b69aec9bc15c2a1798b51edb224db01e94ff1eb
dbf1e97f7f79a2c4ac7f7ccc29f5a1c29ed2d05ed3e5ff111a8b097f8d17
72a84cce0bcd066f78e2de698d38b96a99a99313e7a6639d82> ND 
/r 
<10bf31703f93f6c49808fdd8544fecb184adc28a087f99360dbfdf8b0375
9b819135c930698375e13c34125773b22d251f861dc05246608ab0d559df
442670f87f9615eabcaf25ab4b613b44e059b394bfb9> ND 
/t 
<10bf3170688ce4cb1d2f5bf487137bec8ecb87b4485146ce17824d997ac5
95ab4afb2e80a065a802ee3f010bb37eac91d0f6ed42677aa9dde7e1ad01
769b95b971dec6d1669588801bb2fb04109e79e9771f019783524f2f268e
35dce126a03e55d028a6951cc9b40e649071f577> ND 
/u 
<10bf317022f1ca2cc2a22c3ff97c1232bc55839582d9c5ff7e86bfa4508d
4c6c2a32b8a91c23bc7417819a6d61bb6c4ffa588f9ea417cfc189ff4ca4
86806cfbdc09b2f0ef54b54c53e50d4afcfcb2df030b19aa33138b0a422d
d58054461b41c9166e86f2fb1f6b43052b68dc3202c1cc> ND 
/v 
<10bf3170625c727453162c8fc1a6c3317db0654c8d1cf399154810b2ea75
644b7bf3ca097b70d6244faa15faeaddcd0f234039d4b32fccf18d> ND 
/x 
<10bf3170638bf24b9ac01ae6f3f5ae817231c94093d6b928339de9a1f6d7
c03f6b6f7762b561ab36e6e40fc21093f89e72e352dadf27c949562edd95
94> ND 
/z 
<10bf31706ea98d84f3c625a1c3450f57f0cb972d7b4342feb5483a382b8c
546af3200ec3102c63cd8ee85ce02beb2b2e7a35b4d49541c8670b9156e1
3f2683e61a914abf9dc96f> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/FJDEHM+Arial,Bold findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 73 /I put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 122 /z put
dup 160 /space put
pop
%%EndResource
[/N15/FJDEHM+Arial,Bold 1 TZ
%%BeginResource: font FJDEHK+Arial
11 dict begin
/FontName /FJDEHK+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/plus 
<10bf317031d9337ef184b43be498749534943b6b82dfb721a4f1e6478fee
6c1f4763fef70c3e4be97d7fac720dea7a> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d898870164
1dba6c5defb41d909040a164fdb0a088fefa45fff299b57b0e194251a4a8
b9cf3bc1815fd2c5ba06e651f9d7799098b4541de9c35043282b335f2de1
7def94eec0695fa30f7aaa5574cd9d280a8b4d225396feeeafb4b20c3fcc
9f12e751228b7464328a957a71c1d6fc11ef53a8f692024ab80f5e0d7623
62b42a462a2bf96d5a0db86097e421e5cb8c7d7a0900e6cfd70978f26b60
122332f14359637710d630381bc4f9c629fd5be208af03ab6a69f0ba40b9
a2> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac54cb2fa3a278c1c5e8b8e0184d
7cbeaa35d4ddaa02f35f83f589e53f609414a1e8dd86a2916a5d28875546
282a3c313b2605b04804> ND 
/C 
<10bf31704fab892742fc2c6be78329c0825c84c392f40122153ca9a91165
96e2ea405597ca7f292098a14c92b8766b957d29536d6a74922bce6efa67
d7fa67d47a8ae997e897ea42f1e923c09a3ad5b1aa2186622859ef03a213
f7c26727c45c24d289e1bf8fa6a719352242839e565e8af9cb5c48758232
20530e01b09cb28b590a86024fb341940ed5d19a7e036981d38ceef64334
a577636f4f149330a371e1> ND 
/F 
<10bf31702f7c4b31b7f92f61f70a9032d1addef58c81f5b8fed9651d8c00
81acb06eda84b504e7> ND 
/I 
<10bf31701a61e6f9a78e08bbc896e02c88ca268e19a5> ND 
/M 
<10bf317027e82ad35cdddc2b5c741dc6db294c8b4a0d6704b3828695c903
74c6f490906b329d29d44205638a69fbd75880845cec3cf05cb08dd78863
8da26e9aec39bfd95b1a> ND 
/P 
<10bf31702a85d5ccd794b0f82fad1df586d5fbd89610cffce961ef0c01e8
0dd41794780f980f6fae77f9030913b26e9faf7c4997be350b070860e734
b58d1af4e1f6fdede1ce393d1a10ecb0df5eb5d5689fc4b0c8ea8e8ea551
86c9a594f8c2368e99f819874a733380254b54725709f6d7ae5e> ND 
/R 
<10bf31702819c97bfff21764697e50774ba74072e0daf25a84b5ab81ce67
f36424a8f4f31afdf4de9e5912f7a5ba0ce90948b990647285d2500d6d57
ef6e940fb321e739e33f71f0994fb0b96bf3e18815066ca201f1578cce2a
71a0a57bc87021521bfe1b691fde6e9063a575e47bf725cfd1c0afa40b0c
a839a6c28bfd0b7f0f7469b4cf16ee3c7a54706ea2da49ba1db858f3c370
3042b60d2181c6c1afb0bef5eb> ND 
/S 
<10bf31704ab370a8a6c235279ed6c2ccfc716fa1295d141c34dd24f95c73
82e11c724a74e86021432ff58ab0f9585559c2cc7a3fe0720eadda5eee3e
cb055c76e8d7f22cfddbcfbe4ee1a562282b307d86efef90d9a8c71c96ab
9543712fa6240508ea1f38536804c47dfcc21f777c873fc11b7e20f7a228
b35e8d75f100a7da6082feb065d087853344b8bf00df7291cc74173d8c17
2964ca635a4e981f1604dc10d454f452e70073d386bcbe3ed4c09e72aa02
e7eb1e382ccb2fe70e1e9e3084e7824b4261723bffe42f4fc72d36ddcdd9
e884d10e18a55004b6149a9b0c7ead4b42afa8906a80deea322a930f4d91
ac35a6e6186e5d082f09> ND 
/a 
<10bf31705d64e193f685fe465eb14b2f9aa41e82540f554b50893fe63efd
4692fb4fc721a117ec78b6e9515c29fcb60e3aee68a6df1c3946e2cf738d
cda3e29fd055085b4d27d1a9d3bf0581a4eb2a1ee52161275aad552d9745
cae2527ba314929e16b3adcf63fbfe5b600507b479eb6bac8dbf57f9ea61
cf0c38792d951ff40006e32bfab335adbde18dd700c5843625ec18424a1a
470a3d82d751a36d8b4a69f1f5fb08cfc2b94ed2658b49c9985bc490581e
62f221617e1b4bb61c6dcc9e8e61b29e5f74c69c328c213bfddbc217436d
81d1dfe6a13e1cac30c3fa16cb4e265d8db4217e880afbaeb0227e92e214
5534c463a18baaf155fa6678668091a696c5190fde> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987
c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e
6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e
7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df
3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3
e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b
5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3483c7b936ed6e6cf91cffcbd
a815b8df60ae150c20432c17a46c0682480f6226770a8905e960aec3fe5e
934f4cc994b08abf0fc9d432168086e4> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/FJDEHK+Arial findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 43 /plus put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
dup 65 /A put
dup 67 /C put
dup 70 /F put
dup 73 /I put
dup 77 /M put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 160 /space put
pop
%%EndResource
[/N13/FJDEHK+Arial 1 TZ
q
n
413.4 173.04 0.119995 560.04 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
false setSA
n
413.4 173.04 m
413.4 733.08 l
0 0 0 setrgbcolor
S
Q
q
n
332.76 173.04 0.119995 560.04 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
false setSA
n
332.76 173.04 m
332.76 733.08 l
0 0 0 setrgbcolor
S
Q
q
n
252.12 173.04 0.119995 560.04 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
false setSA
n
252.12 173.04 m
252.12 733.08 l
0 0 0 setrgbcolor
S
Q
q
n
171.48 173.04 0.119995 560.04 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
false setSA
n
171.48 173.04 m
171.48 733.08 l
0 0 0 setrgbcolor
S
Q
q
n
90.84 173.04 0.119995 560.04 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
false setSA
n
90.84 173.04 m
90.84 733.08 l
0 0 0 setrgbcolor
S
Q
q
n
72 54 467.04 683.04 re
108.96 206.64 27.96 501 re
eoclip
n
1 J
0 j
0.960007 w
10 M
[] 0 d
false setSA
n
90.84 173.04 403.2 560.04 re
0.501999 0.501999 0.501999 setrgbcolor
S
Q
1 J
0 j
0.960007 w
10 M
[] 0 d
false setSA
n
231.24 204.12 262.8 41.4 re
q
0.753006 0.753006 0.753006 setrgbcolor
eofill
Q
0 0 0 setrgbcolor
S
n
246.36 390.84 247.68 41.4 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
275.76 577.44 218.28 41.4 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
365.52 245.64 128.52 41.4 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
303.24 432.36 190.8 41.28 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
312 618.96 182.04 41.4 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
378.72 287.16 115.32 41.4 re
q
eofill
Q
S
n
330.36 473.76 163.68 41.4 re
q
eofill
Q
S
n
328.8 660.48 165.24 41.4 re
q
eofill
Q
S
0.119995 w
n
90.84 173.04 m
494.04 173.04 l
494.04 167.4 m
494.04 173.04 l
413.4 167.4 m
413.4 173.04 l
332.76 167.4 m
332.76 173.04 l
252.12 167.4 m
252.12 173.04 l
171.48 167.4 m
171.48 173.04 l
90.84 167.4 m
90.84 173.04 l
494.04 173.04 m
494.04 733.08 l
499.68 173.04 m
494.04 173.04 l
499.68 359.76 m
494.04 359.76 l
499.68 546.36 m
494.04 546.36 l
499.68 733.08 m
494.04 733.08 l
S
500.04 148.92 m
/N13 [0 18.24 -18.24 0 0 0] Tf
(0) show
419.399 133.681 m
(0.2) show
338.758 133.681 m
(0.4) show
258.117 133.681 m
(0.6) show
177.477 133.681 m
(0.8) show
96.8357 148.92 m
(1) show
526.196 219.241 m
(StrongAR) show
(M)
[113.641 ] pdfys
(Pentium ) show
(3)
[118.217 ] pdfys
(Itanium 2) show
402.72 87.48 m
/N15 -20.04 Tf
(average execution time)
[-11.1542 -11.1542 -11.1542 -7.80733 -11.1542 -12.2562 -11.1542 -5.5228 -11.1542 -11.1542 -11.1542 
-11.1542 -12.2562 -6.68509 -5.58304 -12.2562 -12.2562 -5.5228 -6.68509 -5.58304 -17.8273 -11.1542 
] pdfxs
468.479 111.841 m
(\() show
(no)
[-12.2464 -12.2464 ] pdfxs
(rma) show
(li)
[-5.57326 -5.57326 ] pdfxs
(ze) show
(d )
[-12.2464 -5.52311 ] pdfxs
(t) show
(o unop)
[-12.2464 -5.52311 -12.2464 -12.2464 -12.2464 -12.2464 ] pdfxs
(t) show
270.24 111.841 m
(i)
[-5.57723 ] pdfxs
(m) show
(iz)
[-5.57723 -10.0261 ] pdfxs
(e) show
(d St)
[-12.2504 -5.52311 -13.3726 -6.67928 ] pdfxs
(ream) show
(It\))
[-5.57723 -6.67928 -6.67928 ] pdfxs
n
109.08 707.52 27.84 -500.76 re
1 1 1  setrgbcolor
f
n
108.96 206.64 27.96 500.88 re
0 0 0  setrgbcolor
S
0.960007 w
n
117.84 231.6 12.24 12.24 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
130.56 248.64 m
/N13 [0 20.04 -20.04 0 0 0] Tf
(CAF) show
n
117.84 335.88 12.24 12.24 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
130.56 352.92 m
(CAF+scaling) show
n
117.84 514.44 12.24 12.24 re
q
eofill
Q
S
130.56 531.48 m
(CAF+scaling+SR) show
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 432 1599 a Fs(Figure)32 b(5-1:)43 b(Impact)33
b(on)f(a)m(v)m(erage)i(execution)g(time)f(for)f(our)h(b)s(enc)m(hmark)h
(suite.)150 1908 y Fw(5.1)161 b(Ev)-9 b(aluation)35 b(of)h(Cac)l(he)e
(Aw)l(are)h(F)-13 b(usion,)38 b(Scaling)d(and)518 2182
y(Scalar)53 b(Replacemen)l(t)150 2486 y Fs(In)34 b(this)h(section)g(w)m
(e)h(ev)-5 b(aluate)34 b(the)h(p)s(erformance)g(impact)f(of)g(cac)m(he)
h(a)m(w)m(are)g(fusion,)g(execution)150 2667 y(scaling)43
b(and)g(scalar)f(replacemen)m(t)j(on)d(an)g(em)m(b)s(edded)j(pro)s
(cessor,)g(a)d(sup)s(erscalar)i(pro)s(cessor)150 2847
y(and)33 b(a)f(VLIW)h(pro)s(cessor.)45 b(Instead)34 b(of)e(ev)-5
b(aluating)33 b(eac)m(h)g(optimization)g(individually)i(w)m(e)e
(\014rst)150 3028 y(ev)-5 b(aluate)28 b(the)g(p)s(erformance)g(impact)g
(of)f(applying)i(just)f(cac)m(he)g(a)m(w)m(are)h(fusion)f(\(CAF\),)f
(then)i(the)150 3209 y(impact)35 b(of)f(cac)m(he)h(a)m(w)m(are)h
(fusion)e(in)h(com)m(bination)g(with)g(execution)h(scaling)f
(\(CAF+scaling\),)150 3389 y(and)41 b(lastly)h(the)g(impact)g(of)e(cac)
m(he)j(a)m(w)m(are)f(fusion)f(in)h(com)m(bination)g(with)f(execution)i
(scaling)150 3570 y(and)33 b(scalar)g(replacemen)m(t)h(within)g(the)f
(gran)m(ularit)m(y)g(adjusted)h(actors)e(\(CAF+scaling+SR\).)296
3763 y(Instead)42 b(of)e(calculating)h(a)f(sp)s(eedup)i(of)e(an)g
(optimization)h(plan)g(using)g(geometric)g(mean)150 3943
y(of)g(the)h(execution)h(times)g(of)e(individual)i(b)s(enc)m(hmarks)h
(w)m(e)f(use)f(a)m(v)m(erage)h(execution)g(time)f(to)150
4124 y(calculate)37 b(sp)s(eedups.)57 b(W)-8 b(e)37 b(b)s(eliev)m(e)h
(that)e(using)h(an)f(a)m(v)m(erage)h(execution)h(time)f(is)g
(appropriate)150 4304 y(instead)44 b(of)e(using)h(a)f(geometric)h(mean)
g(since)h(an)f(a)m(v)m(erage)g(execution)i(time)e(giv)m(es)h(an)e
(equal)150 4485 y(w)m(eigh)m(t)g(to)e(the)i(execution)g(time)f(of)g
(all)f(elev)m(en)j(b)s(enc)m(hmarks.)70 b(Using)42 b(the)f(geometric)g
(mean)150 4665 y(w)m(ould)34 b(actually)f(mak)m(e)g(all)g(of)f(our)g
(sp)s(eedups)j(o)m(v)m(er)f(unoptimized)g(StreamIt)f(larger.)296
4858 y(Figure)j(5-1)f(sho)m(ws)i(the)g(impact)f(of)f(our)h
(optimizations)h(on)f(the)g(a)m(v)m(erage)h(execution)g(time)150
5039 y(for)24 b(our)g(b)s(enc)m(hmark)i(suite)g(on)e(all)g(three)h(arc)
m(hitectures.)43 b(Cac)m(he)26 b(a)m(w)m(are)f(fusion)g(alone)g(deliv)m
(ers)h(a)150 5219 y(sp)s(eedup)g(of)d(53\045)h(on)g(StrongARM,)g(a)f
(sp)s(eedup)j(of)d(63\045)h(on)g(P)m(en)m(tium)i(3)d(and)h(a)g(sp)s
(eedup)i(of)d(85\045)150 5400 y(on)33 b(Itanium)g(2)f(o)m(v)m(er)i
(unoptimized)g(StreamIt.)44 b(Cac)m(he)34 b(a)m(w)m(are)g(fusion)f
(with)g(execution)h(scaling)1901 5649 y(47)p eop
%%Page: 48 48
48 47 bop 150 100 a Fs(deliv)m(ers)37 b(a)d(sp)s(eedup)i(of)e(214\045)g
(on)h(StrongARM,)g(a)f(sp)s(eedup)i(of)e(111\045)g(on)h(P)m(en)m(tium)h
(3)f(and)f(a)150 280 y(sp)s(eedup)h(of)e(122\045)f(on)h(Itanium)h(2)f
(o)m(v)m(er)h(unoptimized)h(StreamIt.)46 b(Cac)m(he)35
b(a)m(w)m(are)f(fusion)f(with)150 461 y(execution)25
b(scaling)f(and)g(scalar)f(replacemen)m(t)j(deliv)m(ers)f(a)f(sp)s
(eedup)h(of)d(250\045)h(on)h(StrongARM,)f(a)150 641 y(sp)s(eedup)28
b(of)d(146\045)h(on)g(P)m(en)m(tium)i(3)d(and)h(a)g(sp)s(eedup)i(of)d
(144\045)h(on)g(Itanium)h(2)e(o)m(v)m(er)i(unoptimized)150
822 y(StreamIt.)296 1002 y(Figure)37 b(5-2,)h(Figure)f(5-3)f(and)i
(Figure)f(5-4)f(sho)m(w)i(the)g(p)s(erformance)g(impact)f(of)g
(applying)150 1183 y(optimizations)e(CAF,)g(CAF+scaling)g(and)g
(CAF+scaling+SR)g(for)f(individual)i(b)s(enc)m(hmarks)150
1364 y(on)d(all)g(three)h(arc)m(hitectures.)47 b(A)m(t)33
b(the)h(righ)m(t-hand)f(side)h(of)f(eac)m(h)h(\014gure)f(w)m(e)h(sho)m
(w)g(the)g(a)m(v)m(erage)150 1544 y(and)f(geometric)g(mean)g(of)f(the)h
(normalized)h(execution)g(time.)296 1725 y(In)25 b(general)f(w)m(e)h
(observ)m(e)h(that)d(adding)i(execution)g(scaling)g(to)e(cac)m(he)j(a)m
(w)m(are)e(fusion)h(impro)m(v)m(es)150 1905 y(p)s(erformance)46
b(for)f(all)h(b)s(enc)m(hmarks)i(on)d(all)h(platforms.)82
b(The)47 b(only)f(exception)h(is)f Fn(3gpp)h Fs(on)150
2086 y(StrongARM.)32 b(This)h(is)f(p)s(ossibly)i(due)e(to)f(items)i(in)
f(\015igh)m(t)h(b)s(et)m(w)m(een)h(the)e(gran)m(ularit)m(y-adjusted)150
2267 y(actors)23 b(o)m(v)m(erwriting)i(the)f(state)g(of)f(an)g
(executing)i(actor)e(in)g(the)h(data)f(cac)m(he.)41 b(Since)25
b(StrongARM)150 2447 y(has)i(no)g(L2)f(cac)m(he)i(then)f(suc)m(h)h
(eviction)g(can)f(b)s(e)g(quite)g(exp)s(ensiv)m(e.)45
b(It)27 b(could)g(also)g(b)s(e)f(due)i(to)e(our)150 2628
y(scaling)j(algorithm)e(allo)m(wing)i(input)f(and)g(output)h(to)e(o)s
(ccup)m(y)i(up)g(to)e(4/3)g(of)h(the)g(data)g(cac)m(he)h(on)150
2808 y(StrongARM.)e(Ho)m(w)m(ev)m(er,)j(all)d(other)g(b)s(enc)m(hmarks)
i(on)e(StrongARM)g(ha)m(v)m(e)h(b)s(etter)f(p)s(erformance)150
2989 y(when)g(w)m(e)g(allo)m(w)f(actors)g(to)f(\014ll)h(4/3)f(of)g(the)
h(data)g(cac)m(he)g(instead)h(of)e(3/3)g(or)h(2/3.)40
b(Also)26 b(note)g(that)150 3169 y(execution)39 b(scaling)g(has)e(the)h
(most)g(impact)h(on)e(StrongARM)h(arc)m(hitecture,)i(this)e(is)g(p)s
(ossibly)150 3350 y(due)31 b(to)f(its)h(lac)m(k)g(of)f(an)g(L2)h(cac)m
(he)g(that)f(mak)m(es)i(cac)m(he-misses)i(m)m(uc)m(h)e(more)e(exp)s
(ensiv)m(e)k(than)c(on)150 3531 y(P)m(en)m(tium)35 b(or)d(Itanium)h
(whic)m(h)h(b)s(oth)e(ha)m(v)m(e)i(a)f(substan)m(tial)h(L2)e(cac)m(he.)
296 3711 y(W)-8 b(e)32 b(also)g(observ)m(e)h(that)f(adding)g(scalar)g
(replacemen)m(t)h(to)f(cac)m(he)g(a)m(w)m(are)h(fusion)f(and)g(execu-)
150 3892 y(tion)37 b(scaling)h(impro)m(v)m(es)h(p)s(erformance)f(for)e
(almost)i(all)f(b)s(enc)m(hmarks)i(on)e(all)g(platforms.)57
b(The)150 4072 y(only)36 b(exceptions)i(are)e Fn(fft-fine)h
Fs(and)f Fn(filterbank2)j Fs(on)c(a)h(StrongARM)f(whic)m(h)j(exp)s
(erience)150 4253 y(a)h(mo)s(dest)h(15\045)g(and)f(8\045)h(slo)m(wdo)m
(wn;)45 b(also)39 b(matrix)h(m)m(ultiply)h(exp)s(eriences)h(a)d
(negligible)i(1\045)150 4433 y(slo)m(wdo)m(wn)35 b(on)d(a)g(P)m(en)m
(tium)j(3.)1901 5649 y(48)p eop
%%Page: 49 49
49 48 bop 840 1546 a @beginspecial 72 @llx 63 @lly 737
@urx 522 @ury 2664 @rwi @setspecial
%%BeginDocument: arm-g1.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (FinalResults.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050612173128-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 63 737 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 63 moveto 737 63 lineto 737 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: file Pscript_CFF PSVER
userdict/ct_CffDict 6 dict put ct_CffDict begin/F0Subr{systemdict/internaldict
known{1183615869 systemdict/internaldict get exec/FlxProc known{save true}{
false}ifelse}{userdict/internaldict known not{userdict/internaldict{count 0 eq
{/internaldict errordict/invalidaccess get exec}if dup type/integertype ne{
/internaldict errordict/invalidaccess get exec}if dup 1183615869 eq{pop 0}{
/internaldict errordict/invalidaccess get exec}ifelse}dup 14 get 1 25 dict put
bind executeonly put}if 1183615869 userdict/internaldict get exec/FlxProc
known{save true}{false}ifelse}ifelse[systemdict/internaldict known not{100
dict/begin cvx/mtx matrix/def cvx}if systemdict/currentpacking known{
currentpacking true setpacking}if{systemdict/internaldict known{1183615869
systemdict/internaldict get exec dup/$FlxDict known not{dup dup length exch
maxlength eq{pop userdict dup/$FlxDict known not{100 dict begin/mtx matrix def
dup/$FlxDict currentdict put end}if}{100 dict begin/mtx matrix def dup
/$FlxDict currentdict put end}ifelse}if/$FlxDict get begin}if grestore/exdef{
exch def}def/dmin exch abs 100 div def/epX exdef/epY exdef/c4y2 exdef/c4x2
exdef/c4y1 exdef/c4x1 exdef/c4y0 exdef/c4x0 exdef/c3y2 exdef/c3x2 exdef/c3y1
exdef/c3x1 exdef/c3y0 exdef/c3x0 exdef/c1y2 exdef/c1x2 exdef/c2x2 c4x2 def
/c2y2 c4y2 def/yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def/PickCoords{{
c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2}{c3x0 c3y0 c3x1
c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2}ifelse/y5 exdef/x5 exdef/y4 exdef
/x4 exdef/y3 exdef/x3 exdef/y2 exdef/x2 exdef/y1 exdef/x1 exdef/y0 exdef/x0
exdef}def mtx currentmatrix pop mtx 0 get abs 1e-05 lt mtx 3 get abs 1e-05 lt
or{/flipXY -1 def}{mtx 1 get abs 1e-05 lt mtx 2 get abs 1e-05 lt or{/flipXY 1
def}{/flipXY 0 def}ifelse}ifelse/erosion 1 def systemdict/internaldict known{
1183615869 systemdict/internaldict get exec dup/erosion known{/erosion get
/erosion exch def}{pop}ifelse}if yflag{flipXY 0 eq c3y2 c4y2 eq or{false
PickCoords}{/shrink c3y2 c4y2 eq{0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs}ifelse
def/yshrink{c4y2 sub shrink mul c4y2 add}def/c1y0 c3y0 yshrink def/c1y1 c3y1
yshrink def/c2y0 c4y0 yshrink def/c2y1 c4y1 yshrink def/c1x0 c3x0 def/c1x1
c3x1 def/c2x0 c4x0 def/c2x1 c4x1 def/dY 0 c3y2 c1y2 sub round dtransform
flipXY 1 eq{exch}if pop abs def dY dmin lt PickCoords y2 c1y2 sub abs .001 gt{
c1x2 c1y2 transform flipXY 1 eq{exch}if/cx exch def/cy exch def/dY 0 y2 c1y2
sub round dtransform flipXY 1 eq{exch}if pop def dY round dup 0 ne{/dY exdef}{
pop dY 0 lt{-1}{1}ifelse/dY exdef}ifelse/erode PaintType 2 ne erosion .5 ge
and def erode{/cy cy .5 sub def}if/ey cy dY add def/ey ey ceiling ey sub ey
floor add def erode{/ey ey .5 add def}if ey cx flipXY 1 eq{exch}if itransform
exch pop y2 sub/eShift exch def/y1 y1 eShift add def/y2 y2 eShift add def/y3
y3 eShift add def}if}ifelse}{flipXY 0 eq c3x2 c4x2 eq or{false PickCoords}{
/shrink c3x2 c4x2 eq{0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs}ifelse def/xshrink
{c4x2 sub shrink mul c4x2 add}def/c1x0 c3x0 xshrink def/c1x1 c3x1 xshrink def
/c2x0 c4x0 xshrink def/c2x1 c4x1 xshrink def/c1y0 c3y0 def/c1y1 c3y1 def/c2y0
c4y0 def/c2y1 c4y1 def/dX c3x2 c1x2 sub round 0 dtransform flipXY -1 eq{exch}
if pop abs def dX dmin lt PickCoords x2 c1x2 sub abs .001 gt{c1x2 c1y2
transform flipXY -1 eq{exch}if/cy exch def/cx exch def/dX x2 c1x2 sub round 0
dtransform flipXY -1 eq{exch}if pop def dX round dup 0 ne{/dX exdef}{pop dX 0
lt{-1}{1}ifelse/dX exdef}ifelse/erode PaintType 2 ne erosion .5 ge and def
erode{/cx cx .5 sub def}if/ex cx dX add def/ex ex ceiling ex sub ex floor add
def erode{/ex ex .5 add def}if ex cy flipXY -1 eq{exch}if itransform pop x2
sub/eShift exch def/x1 x1 eShift add def/x2 x2 eShift add def/x3 x3 eShift add
def}if}ifelse}ifelse x2 x5 eq y2 y5 eq or{x5 y5 lineto}{x0 y0 x1 y1 x2 y2
curveto x3 y3 x4 y4 x5 y5 curveto}ifelse epY epX}systemdict/currentpacking
known{exch setpacking}if/exec cvx/end cvx]cvx executeonly exch{pop true exch
restore}{systemdict/internaldict known not{1183615869 userdict/internaldict
get exec exch/FlxProc exch put true}{1183615869 systemdict/internaldict get
exec dup length exch maxlength eq{false}{1183615869 systemdict/internaldict
get exec exch/FlxProc exch put true}ifelse}ifelse}ifelse{systemdict
/internaldict known{1183615869 systemdict/internaldict get exec/FlxProc get
exec}{1183615869 userdict/internaldict get exec/FlxProc get exec}ifelse}if}
executeonly def/F1Subr{gsave currentpoint newpath moveto}bind def/F2Subr{
currentpoint grestore gsave currentpoint newpath moveto}bind def/HSSubr{
systemdict/internaldict known not{pop 3}{1183615869 systemdict/internaldict
get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck
get exec}{pop 3}ifelse}ifelse}ifelse}bind def end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource ArialMT
[/N28/ArialMT 1 TZ
%%IncludeResource Arial,Bold
[/N26/Arial,Bold 1 TZ
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 63 665 459 rectclip
[ 0 -1 1 0 8.64 594 ] concat
%%BeginResource: font CNGPFK+Arial
11 dict begin
/FontName /CNGPFK+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/parenleft 
<10bf31703a9458c05db7ba7a58bcd7a2c9e91ffe666d66d67924090fad2e
914020d503aadf9240d9b1c6a63953b30ccff5415597f5a6c26fdee68dec
bc331692c1b3543bfce7c82b9d704f4fab4f> ND 
/parenright 
<10bf31703a9458c05d79d3ca9c0e25cc2a0b35ceb7dd46fb51adbfd88390
4d8bf636baa28a31c262d1a3078da5849c1c2b98c958c72994f2c3f78ea4
d099458941ceee627e3f06f9f9a16a1d0c> ND 
/plus 
<10bf317031d9337ef184b43be498749534943b6b82dfb721a4f1e6478fee
6c1f4763fef70c3e4be97d7fac720dea7a> ND 
/hyphen 
<10bf31705995db6ed81c8e93e5d1d568f767c41aee4b2647d0> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d898870164
1dba6c5defb41d909040a164fdb0a088fefa45fff299b57b0e194251a4a8
b9cf3bc1815fd2c5ba06e651f9d7799098b4541de9c35043282b335f2de1
7def94eec0695fa30f7aaa5574cd9d280a8b4d225396feeeafb4b20c3fcc
9f12e751228b7464328a957a71c1d6fc11ef53a8f692024ab80f5e0d7623
62b42a462a2bf96d5a0db86097e421e5cb8c7d7a0900e6cfd70978f26b60
122332f14359637710d630381bc4f9c629fd5be208af03ab6a69f0ba40b9
a2> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac54cb2fa3a278c1c5e8b8e0184d
7cbeaa35d4ddaa02f35f83f589e53f609414a1e8dd86a2916a5d28875546
282a3c313b2605b04804> ND 
/C 
<10bf31704fab892742fc2c6be78329c0825c84c392f40122153ca9a91165
96e2ea405597ca7f292098a14c92b8766b957d29536d6a74922bce6efa67
d7fa67d47a8ae997e897ea42f1e923c09a3ad5b1aa2186622859ef03a213
f7c26727c45c24d289e1bf8fa6a719352242839e565e8af9cb5c48758232
20530e01b09cb28b590a86024fb341940ed5d19a7e036981d38ceef64334
a577636f4f149330a371e1> ND 
/F 
<10bf31702f7c4b31b7f92f61f70a9032d1addef58c81f5b8fed9651d8c00
81acb06eda84b504e7> ND 
/I 
<10bf31701a61e6f9a78e08bbc896e02c88ca268e19a5> ND 
/R 
<10bf31702819c97bfff21764697e50774ba74072e0daf25a84b5ab81ce67
f36424a8f4f31afdf4de9e5912f7a5ba0ce90948b990647285d2500d6d57
ef6e940fb321e739e33f71f0994fb0b96bf3e18815066ca201f1578cce2a
71a0a57bc87021521bfe1b691fde6e9063a575e47bf725cfd1c0afa40b0c
a839a6c28bfd0b7f0f7469b4cf16ee3c7a54706ea2da49ba1db858f3c370
3042b60d2181c6c1afb0bef5eb> ND 
/S 
<10bf31704ab370a8a6c235279ed6c2ccfc716fa1295d141c34dd24f95c73
82e11c724a74e86021432ff58ab0f9585559c2cc7a3fe0720eadda5eee3e
cb055c76e8d7f22cfddbcfbe4ee1a562282b307d86efef90d9a8c71c96ab
9543712fa6240508ea1f38536804c47dfcc21f777c873fc11b7e20f7a228
b35e8d75f100a7da6082feb065d087853344b8bf00df7291cc74173d8c17
2964ca635a4e981f1604dc10d454f452e70073d386bcbe3ed4c09e72aa02
e7eb1e382ccb2fe70e1e9e3084e7824b4261723bffe42f4fc72d36ddcdd9
e884d10e18a55004b6149a9b0c7ead4b42afa8906a80deea322a930f4d91
ac35a6e6186e5d082f09> ND 
/a 
<10bf31705d64e193f685fe465eb14b2f9aa41e82540f554b50893fe63efd
4692fb4fc721a117ec78b6e9515c29fcb60e3aee68a6df1c3946e2cf738d
cda3e29fd055085b4d27d1a9d3bf0581a4eb2a1ee52161275aad552d9745
cae2527ba314929e16b3adcf63fbfe5b600507b479eb6bac8dbf57f9ea61
cf0c38792d951ff40006e32bfab335adbde18dd700c5843625ec18424a1a
470a3d82d751a36d8b4a69f1f5fb08cfc2b94ed2658b49c9985bc490581e
62f221617e1b4bb61c6dcc9e8e61b29e5f74c69c328c213bfddbc217436d
81d1dfe6a13e1cac30c3fa16cb4e265d8db4217e880afbaeb0227e92e214
5534c463a18baaf155fa6678668091a696c5190fde> ND 
/b 
<10bf31703e65fd7e1217c9f29c64bb1b9e17851bf25dd0466fa484e27564
2ef62da05fc0e561425aa7c0cf759f2df2fed9f5cab4e563d9d485ca6e49
6a23023cc7d5336a38ed163f6d25eac0416c891913363ad8aab5312feed7
de0b0bbcc0db8b66958d96174480f5040af2cfb1590a9410022fc6398cb1
d4435f6325a11aad4c77347983eb4748b4ada02263a3> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f67877e80be643ef8
5a01cff57f62859595ad9c2a1ef16f4c22144c6fc4d200f23642de52d57f
47e47c78a8b6713f5cb6dcd4a475047f70e7386f0baddd9f1c37f1598f60
1bc5b6005acf2115ed4aa52ed6ed621e5045f115e6c8ed146247e81ce086
3c881ef71e6e234403d5f37c528c6ebb0616bbdc05a29ca9d830ed27448f
> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/f 
<10bf31706629561882b73d5b02cebd16b0942e445fbe6e3232b3823cbdb2
63dcf8e5b5846268df4eba2210bb667f400c46f76ed43d4b268aed98cf98
689dff659a93d69b1917cc1e5f49aadef7d4b3b6109675927aeb98089c> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987
c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e
6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e
7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df
3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3
e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b
5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/k 
<10bf31703f936777fb99983a11586419ce72aadc44a2aa69d19b91e9f126
e6f5aabcb4381bf8bfee294b80bae1d888f1314da01fbe02> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79e55a006319a903b4934e0296676
bb7a5df970714192f29a85860f4cb191aa4b83ebc5b58328ecf58ed9d6ff
d0d3a63dd21733d64450e3abce2a149390b0894b2fb0fce1ee78d045f446
04c31c787e13fdae7e79785a1956f734ed54b976e123646b63ce5bee0b68
59b26a26c2ad993325ab7bd77cdd1be893a8ccd1451854fed772889a0d7d
7791ac97d81ac7> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3483c7b936ed6e6cf91cffcbd
a815b8df60ae150c20432c17a46c0682480f6226770a8905e960aec3fe5e
934f4cc994b08abf0fc9d432168086e4> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
/v 
<10bf31706ae07dd17dfbac8a1ae33180eda67f1c12c0170124c5b65d6008
42ef910f621d12aef7aac075b848d0659b626414ef71a4> ND 
/x 
<10bf317060ff640a97f40d52fc73b98a64469b3f084ceb61cbde39a670a8
6bdd66d38d792d8bbe1de58b050ff75d7a6d9ab8ab83f71f1130ffc9a46b
7d934ffb8ab93375fd62539cb08006> ND 
/z 
<10bf31706d7bdb7f5f74128c9bb1cf0445a721a78dcf191b2f1eaa106619
49aba2663707d493160b8371e546cec091e3d6d364aa753531debc6523f3
> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/CNGPFK+Arial findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
dup 65 /A put
dup 67 /C put
dup 70 /F put
dup 73 /I put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 122 /z put
dup 160 /space put
dup 173 /hyphen put
pop
%%EndResource
[/N13/CNGPFK+Arial 1 TZ
/N10 [/DeviceRGB] /ColorSpace defineRes pop

false setSA
n
90.48 725.1 357.18 -591.78 re
1 1 1 setrgbcolor
f
q
n
388.14 133.32 0.0599976 591.78 re
W
n
0.0599976 w
10 M
1 j
1 J
[] 0 d
n
388.14 133.32 m
388.14 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
328.62 133.32 0.0599976 591.78 re
W
n
0.0599976 w
10 M
1 j
1 J
[] 0 d
n
328.62 133.32 m
328.62 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
269.1 133.32 0.0599976 591.78 re
W
n
0.0599976 w
10 M
1 j
1 J
[] 0 d
n
269.1 133.32 m
269.1 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
209.52 133.32 0.0599976 591.78 re
W
n
0.0599976 w
10 M
1 j
1 J
[] 0 d
n
209.52 133.32 m
209.52 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
150 133.32 0.0599976 591.78 re
W
n
0.0599976 w
10 M
1 j
1 J
[] 0 d
n
150 133.32 m
150 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
90.48 133.32 0.0599976 591.78 re
W
n
0.0599976 w
10 M
1 j
1 J
[] 0 d
n
90.48 133.32 m
90.48 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
72 54 467.04 683.04 re
90.72 134.64 22.98 318 re
eoclip
n
0.960007 w
10 M
0 j
1 J
[] 0 d
n
90.48 133.32 357.18 591.78 re
0.501999 0.501999 0.501999  setrgbcolor
S
Q
0.960007 w
10 M
0 j
1 J
[] 0 d
n
377.64 140.88 70.02 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
0 0 0  setrgbcolor
S
n
441.54 186.42 6.12 10.02 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
277.44 231.9 170.22 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
q
n
171.42 272.04 276.24 20.94 re
W
n
n
176.82 277.44 270.84 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
Q
n
429 322.98 18.66 10.02 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
q
n
164.34 363.06 283.32 20.94 re
W
n
n
169.74 368.46 277.92 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
Q
n
259.8 414 187.86 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
215.82 459.54 231.84 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
121.86 505.08 325.8 10.02 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
q
n
165.66 545.16 282 20.94 re
W
n
n
171.06 550.56 276.6 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
Q
q
n
144.6 590.7 303.06 20.94 re
W
n
n
150 596.1 297.66 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
Q
n
253.68 641.64 193.98 10.02 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
317.7 687.12 129.96 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
429.84 151.02 17.82 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
442.86 196.5 4.79999 10.08 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
390 242.04 57.66 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
331.56 287.58 116.1 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
420.84 333.06 26.82 10.08 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
302.22 378.6 145.44 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
280.68 424.14 166.98 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
418.2 469.68 29.46 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
352.86 515.16 94.8 10.08 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
361.14 560.7 86.52 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
q
n
144.6 600.84 303.06 20.88 re
W
n
n
150 606.24 297.66 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
Q
n
352.74 651.72 94.92 10.08 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
386.88 697.26 60.78 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
436.68 161.1 10.98 10.08 re
q
eofill
Q
S
n
444.3 206.64 3.35999 10.02 re
q
eofill
Q
S
n
381.6 252.12 66.06 10.08 re
q
eofill
Q
S
n
349.44 297.66 98.22 10.08 re
q
eofill
Q
S
n
434.28 343.2 13.38 10.02 re
q
eofill
Q
S
n
340.98 388.68 106.68 10.08 re
q
eofill
Q
S
n
301.26 434.22 146.4 10.08 re
q
eofill
Q
S
n
417.42 479.76 30.24 10.08 re
q
eofill
Q
S
n
378 525.3 69.66 10.02 re
q
eofill
Q
S
n
354.12 570.78 93.54 10.08 re
q
eofill
Q
S
q
n
144.6 610.92 303.06 20.94 re
W
n
n
150 616.32 297.66 10.08 re
q
eofill
Q
S
Q
n
362.58 661.86 85.08 10.02 re
q
eofill
Q
S
n
397.62 707.34 50.04 10.08 re
q
eofill
Q
S
0.0599976 w
n
90.48 133.32 m
447.66 133.32 l
447.66 129 m
447.66 133.32 l
388.14 129 m
388.14 133.32 l
328.62 129 m
328.62 133.32 l
269.1 129 m
269.1 133.32 l
209.52 129 m
209.52 133.32 l
150 129 m
150 133.32 l
90.48 129 m
90.48 133.32 l
447.66 133.32 m
447.66 725.1 l
451.98 133.32 m
447.66 133.32 l
451.98 178.86 m
447.66 178.86 l
451.98 224.34 m
447.66 224.34 l
451.98 269.88 m
447.66 269.88 l
451.98 315.42 m
447.66 315.42 l
451.98 360.9 m
447.66 360.9 l
451.98 406.44 m
447.66 406.44 l
451.98 451.98 m
447.66 451.98 l
451.98 497.52 m
447.66 497.52 l
451.98 543 m
447.66 543 l
451.98 588.54 m
447.66 588.54 l
451.98 634.08 m
447.66 634.08 l
451.98 679.56 m
447.66 679.56 l
451.98 725.1 m
447.66 725.1 l
S
452.22 114.9 m
/N13 [0 13.98 -13.98 0 0 0] Tf
(0) show
392.7 103.2 m
(0.2) show
333.18 103.2 m
(0.4) show
273.66 103.2 m
(0.6) show
214.08 103.2 m
(0.8) show
154.56 114.9 m
(1) show
95.0405 103.2 m
(1.2) show
499.08 123.48 m
/N13 [-9.88519 9.88519 -9.88519 -9.88519 0 0] Tf
(b) show
493.619 129 m
(it)
[-2.21804 2.21804 -2.77176 2.77176 ] pdfxys
488.64 133.92 m
(o) show
483.18 139.44 m
(ni)
[-5.51894 5.51894 -2.21714 2.21714 ] pdfxys
475.44 147.12 m
(c) show
478.68 189.419 m
(f) show
475.979 192.179 m
(ir)
[-2.21804 2.21804 -3.31538 3.31538 ] pdfxys
498 215.639 m
(f) show
495.299 218.399 m
(ft-f)
[-2.76 2.76 -2.76 2.76 -3.30361 3.30361 -2.76 2.76 ] pdfxys
483.719 229.919 m
(i) show
481.56 232.138 m
(ne)
[-5.51894 5.51894 -5.51894 5.51894 ] pdfxys
511.799 247.319 m
(f) show
509.099 250.079 m
(ft-coars)
[-2.75502 2.75502 -2.75502 2.75502 -3.29863 3.29863 -4.94953 4.94953 -5.5031 5.5031 -5.45368 5.45368 -3.29863 3.29863 -4.94953 4.94953 ] pdfxys
476.099 283.019 m
(e) show
492.479 312.178 m
(3) show
487.018 317.698 m
(gp)
[-5.51894 5.51894 -5.51894 5.51894 ] pdfxys
475.979 328.679 m
(p) show
523.798 326.398 m
(b) show
518.338 331.918 m
(ea)
[-5.51894 5.51894 -5.51894 5.51894 ] pdfxys
507.298 342.899 m
(mf) show
(o) show
490.858 359.398 m
(rmer)
[-3.30165 3.30165 -8.24425 8.24425 -5.50612 5.50612 -3.30165 3.30165 ] pdfxys
505.617 390.118 m
(m) show
497.397 398.398 m
(a) show
491.877 403.859 m
(t) show
489.176 406.619 m
(m) show
480.897 414.839 m
(u) show
475.436 420.359 m
(l) show
473.217 422.519 m
(t) show
503.457 437.759 m
(f) show
500.756 440.519 m
(m) show
492.476 448.74 m
(ra)
[-3.29954 3.29954 -5.50401 5.50401 ] pdfxys
483.716 457.559 m
(d) show
478.196 463.02 m
(i) show
476.036 465.239 m
(o) show
510.656 476.099 m
(f) show
507.955 478.859 m
(il)
[-2.21804 2.21804 -2.21804 2.21804 ] pdfxys
503.516 483.239 m
(t) show
500.815 485.999 m
(erb)
[-5.512 5.512 -3.30753 3.30753 -5.512 5.512 ] pdfxys
486.476 500.279 m
(a) show
481.015 505.799 m
(n) show
475.495 511.26 m
(k) show
516.175 516.119 m
(f) show
513.474 518.879 m
(il)
[-2.21804 2.21804 -2.21804 2.21804 ] pdfxys
509.035 523.26 m
(t) show
506.334 526.02 m
(erb)
[-5.512 5.512 -3.30753 3.30753 -5.512 5.512 ] pdfxys
491.995 540.3 m
(a) show
486.534 545.82 m
(n) show
481.014 551.28 m
(k) show
476.093 556.26 m
(2) show
492.414 585.36 m
(o) show
486.953 590.88 m
(fd)
[-2.76196 2.76196 -5.51004 5.51004 ] pdfxys
478.673 599.101 m
(m) show
506.273 617.04 m
/N26 [-11.3136 11.3136 -11.3136 -11.3136 0 0] Tf
(a) show
499.914 623.399 m
(v) show
493.694 629.619 m
(e) show
487.335 635.978 m
(r) show
482.927 640.386 m
(a) show
476.659 646.654 m
(g) show
469.678 653.635 m
(e) show
511.732 657.12 m
/N26 [-11.3135 11.3136 -11.3135 -11.3135 0 0] Tf
(g) show
504.751 664.101 m
(e) show
498.438 670.414 m
(o) show
491.507 677.345 m
(m) show
481.464 687.388 m
(e) show
475.149 693.703 m
(an)
[-6.31308 6.31314 -6.93524 6.93531 ] pdfxys
314.28 73.92 m
/N13 -13.98 Tf
(execution time)
[-7.79101 -7.00813 -7.79101 -7.00813 -7.79101 -3.90457 -3.12148 -7.79101 -7.79101 -3.9018 -3.90457 
-3.12148 -11.6634 -7.79101 ] pdfxs
384 90.9001 m
(\(normalized to unoptimized StreamIt\))
[-4.67337 -7.79101 -7.79101 -4.67337 -11.6634 -7.79101 -3.12148 -3.12148 -7.00813 -7.79101 -7.79101 
-3.9018 -3.90457 -7.79101 -3.9018 -7.79101 -7.79101 -7.79101 -7.79101 -3.90457 -3.12148 -11.6634 
-3.12148 -7.00813 -7.79101 -7.79101 -3.9018 -9.34268 -3.90457 -4.67337 -7.79101 -7.79101 -11.6634 
-3.90457 -3.90457 -4.67337 ] pdfxs
n
90.78 452.58 22.92 -317.88 re
1 1 1  setrgbcolor
f
n
90.72 134.64 22.98 317.94 re
0 0 0  setrgbcolor
S
0.960007 w
n
98.4 146.82 8.58 8.58 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
107.46 158.7 m
/N13 [0 13.98 -13.98 0 0 0] Tf
(CAF) show
n
98.4 209.1 8.58 8.58 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
107.46 220.98 m
(CAF+scaling) show
n
98.4 323.22 8.58 8.57999 re
q
eofill
Q
S
107.46 335.1 m
(CAF+scaling+SR) show
2.5 w
1 j
0 J
n
150.06 135 m
150.36 725.1 l
0.0039978 0.0039978 0.0039978  setrgbcolor
S
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%DocumentNeededResources:
%%+ font ArialMT
%%+ font Arial,Bold
%%EOF

%%EndDocument
 @endspecial 812 1708 a Fs(Figure)33 b(5-2:)42 b(P)m(erformance)34
b(results)g(for)e(StrongARM)h(1110)840 3376 y @beginspecial
72 @llx 63 @lly 737 @urx 522 @ury 2664 @rwi @setspecial
%%BeginDocument: p3-g1.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (FinalResults.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050612173333-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 63 737 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 63 moveto 737 63 lineto 737 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: file Pscript_CFF PSVER
userdict/ct_CffDict 6 dict put ct_CffDict begin/F0Subr{systemdict/internaldict
known{1183615869 systemdict/internaldict get exec/FlxProc known{save true}{
false}ifelse}{userdict/internaldict known not{userdict/internaldict{count 0 eq
{/internaldict errordict/invalidaccess get exec}if dup type/integertype ne{
/internaldict errordict/invalidaccess get exec}if dup 1183615869 eq{pop 0}{
/internaldict errordict/invalidaccess get exec}ifelse}dup 14 get 1 25 dict put
bind executeonly put}if 1183615869 userdict/internaldict get exec/FlxProc
known{save true}{false}ifelse}ifelse[systemdict/internaldict known not{100
dict/begin cvx/mtx matrix/def cvx}if systemdict/currentpacking known{
currentpacking true setpacking}if{systemdict/internaldict known{1183615869
systemdict/internaldict get exec dup/$FlxDict known not{dup dup length exch
maxlength eq{pop userdict dup/$FlxDict known not{100 dict begin/mtx matrix def
dup/$FlxDict currentdict put end}if}{100 dict begin/mtx matrix def dup
/$FlxDict currentdict put end}ifelse}if/$FlxDict get begin}if grestore/exdef{
exch def}def/dmin exch abs 100 div def/epX exdef/epY exdef/c4y2 exdef/c4x2
exdef/c4y1 exdef/c4x1 exdef/c4y0 exdef/c4x0 exdef/c3y2 exdef/c3x2 exdef/c3y1
exdef/c3x1 exdef/c3y0 exdef/c3x0 exdef/c1y2 exdef/c1x2 exdef/c2x2 c4x2 def
/c2y2 c4y2 def/yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def/PickCoords{{
c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2}{c3x0 c3y0 c3x1
c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2}ifelse/y5 exdef/x5 exdef/y4 exdef
/x4 exdef/y3 exdef/x3 exdef/y2 exdef/x2 exdef/y1 exdef/x1 exdef/y0 exdef/x0
exdef}def mtx currentmatrix pop mtx 0 get abs 1e-05 lt mtx 3 get abs 1e-05 lt
or{/flipXY -1 def}{mtx 1 get abs 1e-05 lt mtx 2 get abs 1e-05 lt or{/flipXY 1
def}{/flipXY 0 def}ifelse}ifelse/erosion 1 def systemdict/internaldict known{
1183615869 systemdict/internaldict get exec dup/erosion known{/erosion get
/erosion exch def}{pop}ifelse}if yflag{flipXY 0 eq c3y2 c4y2 eq or{false
PickCoords}{/shrink c3y2 c4y2 eq{0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs}ifelse
def/yshrink{c4y2 sub shrink mul c4y2 add}def/c1y0 c3y0 yshrink def/c1y1 c3y1
yshrink def/c2y0 c4y0 yshrink def/c2y1 c4y1 yshrink def/c1x0 c3x0 def/c1x1
c3x1 def/c2x0 c4x0 def/c2x1 c4x1 def/dY 0 c3y2 c1y2 sub round dtransform
flipXY 1 eq{exch}if pop abs def dY dmin lt PickCoords y2 c1y2 sub abs .001 gt{
c1x2 c1y2 transform flipXY 1 eq{exch}if/cx exch def/cy exch def/dY 0 y2 c1y2
sub round dtransform flipXY 1 eq{exch}if pop def dY round dup 0 ne{/dY exdef}{
pop dY 0 lt{-1}{1}ifelse/dY exdef}ifelse/erode PaintType 2 ne erosion .5 ge
and def erode{/cy cy .5 sub def}if/ey cy dY add def/ey ey ceiling ey sub ey
floor add def erode{/ey ey .5 add def}if ey cx flipXY 1 eq{exch}if itransform
exch pop y2 sub/eShift exch def/y1 y1 eShift add def/y2 y2 eShift add def/y3
y3 eShift add def}if}ifelse}{flipXY 0 eq c3x2 c4x2 eq or{false PickCoords}{
/shrink c3x2 c4x2 eq{0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs}ifelse def/xshrink
{c4x2 sub shrink mul c4x2 add}def/c1x0 c3x0 xshrink def/c1x1 c3x1 xshrink def
/c2x0 c4x0 xshrink def/c2x1 c4x1 xshrink def/c1y0 c3y0 def/c1y1 c3y1 def/c2y0
c4y0 def/c2y1 c4y1 def/dX c3x2 c1x2 sub round 0 dtransform flipXY -1 eq{exch}
if pop abs def dX dmin lt PickCoords x2 c1x2 sub abs .001 gt{c1x2 c1y2
transform flipXY -1 eq{exch}if/cy exch def/cx exch def/dX x2 c1x2 sub round 0
dtransform flipXY -1 eq{exch}if pop def dX round dup 0 ne{/dX exdef}{pop dX 0
lt{-1}{1}ifelse/dX exdef}ifelse/erode PaintType 2 ne erosion .5 ge and def
erode{/cx cx .5 sub def}if/ex cx dX add def/ex ex ceiling ex sub ex floor add
def erode{/ex ex .5 add def}if ex cy flipXY -1 eq{exch}if itransform pop x2
sub/eShift exch def/x1 x1 eShift add def/x2 x2 eShift add def/x3 x3 eShift add
def}if}ifelse}ifelse x2 x5 eq y2 y5 eq or{x5 y5 lineto}{x0 y0 x1 y1 x2 y2
curveto x3 y3 x4 y4 x5 y5 curveto}ifelse epY epX}systemdict/currentpacking
known{exch setpacking}if/exec cvx/end cvx]cvx executeonly exch{pop true exch
restore}{systemdict/internaldict known not{1183615869 userdict/internaldict
get exec exch/FlxProc exch put true}{1183615869 systemdict/internaldict get
exec dup length exch maxlength eq{false}{1183615869 systemdict/internaldict
get exec exch/FlxProc exch put true}ifelse}ifelse}ifelse{systemdict
/internaldict known{1183615869 systemdict/internaldict get exec/FlxProc get
exec}{1183615869 userdict/internaldict get exec/FlxProc get exec}ifelse}if}
executeonly def/F1Subr{gsave currentpoint newpath moveto}bind def/F2Subr{
currentpoint grestore gsave currentpoint newpath moveto}bind def/HSSubr{
systemdict/internaldict known not{pop 3}{1183615869 systemdict/internaldict
get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck
get exec}{pop 3}ifelse}ifelse}ifelse}bind def end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Arial,Bold
[/N23/Arial,Bold 1 TZ
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 63 665 459 rectclip
[ 0 -1 1 0 8.64 594 ] concat
%%BeginResource: font CPFJEK+Arial
11 dict begin
/FontName /CPFJEK+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/parenleft 
<10bf31703a9458c05db7ba7a58bcd7a2c9e91ffe666d66d67924090fad2e
914020d503aadf9240d9b1c6a63953b30ccff5415597f5a6c26fdee68dec
bc331692c1b3543bfce7c82b9d704f4fab4f> ND 
/parenright 
<10bf31703a9458c05d79d3ca9c0e25cc2a0b35ceb7dd46fb51adbfd88390
4d8bf636baa28a31c262d1a3078da5849c1c2b98c958c72994f2c3f78ea4
d099458941ceee627e3f06f9f9a16a1d0c> ND 
/plus 
<10bf317031d9337ef184b43be498749534943b6b82dfb721a4f1e6478fee
6c1f4763fef70c3e4be97d7fac720dea7a> ND 
/hyphen 
<10bf31705995db6ed81c8e93e5d1d568f767c41aee4b2647d0> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d898870164
1dba6c5defb41d909040a164fdb0a088fefa45fff299b57b0e194251a4a8
b9cf3bc1815fd2c5ba06e651f9d7799098b4541de9c35043282b335f2de1
7def94eec0695fa30f7aaa5574cd9d280a8b4d225396feeeafb4b20c3fcc
9f12e751228b7464328a957a71c1d6fc11ef53a8f692024ab80f5e0d7623
62b42a462a2bf96d5a0db86097e421e5cb8c7d7a0900e6cfd70978f26b60
122332f14359637710d630381bc4f9c629fd5be208af03ab6a69f0ba40b9
a2> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac54cb2fa3a278c1c5e8b8e0184d
7cbeaa35d4ddaa02f35f83f589e53f609414a1e8dd86a2916a5d28875546
282a3c313b2605b04804> ND 
/C 
<10bf31704fab892742fc2c6be78329c0825c84c392f40122153ca9a91165
96e2ea405597ca7f292098a14c92b8766b957d29536d6a74922bce6efa67
d7fa67d47a8ae997e897ea42f1e923c09a3ad5b1aa2186622859ef03a213
f7c26727c45c24d289e1bf8fa6a719352242839e565e8af9cb5c48758232
20530e01b09cb28b590a86024fb341940ed5d19a7e036981d38ceef64334
a577636f4f149330a371e1> ND 
/F 
<10bf31702f7c4b31b7f92f61f70a9032d1addef58c81f5b8fed9651d8c00
81acb06eda84b504e7> ND 
/I 
<10bf31701a61e6f9a78e08bbc896e02c88ca268e19a5> ND 
/R 
<10bf31702819c97bfff21764697e50774ba74072e0daf25a84b5ab81ce67
f36424a8f4f31afdf4de9e5912f7a5ba0ce90948b990647285d2500d6d57
ef6e940fb321e739e33f71f0994fb0b96bf3e18815066ca201f1578cce2a
71a0a57bc87021521bfe1b691fde6e9063a575e47bf725cfd1c0afa40b0c
a839a6c28bfd0b7f0f7469b4cf16ee3c7a54706ea2da49ba1db858f3c370
3042b60d2181c6c1afb0bef5eb> ND 
/S 
<10bf31704ab370a8a6c235279ed6c2ccfc716fa1295d141c34dd24f95c73
82e11c724a74e86021432ff58ab0f9585559c2cc7a3fe0720eadda5eee3e
cb055c76e8d7f22cfddbcfbe4ee1a562282b307d86efef90d9a8c71c96ab
9543712fa6240508ea1f38536804c47dfcc21f777c873fc11b7e20f7a228
b35e8d75f100a7da6082feb065d087853344b8bf00df7291cc74173d8c17
2964ca635a4e981f1604dc10d454f452e70073d386bcbe3ed4c09e72aa02
e7eb1e382ccb2fe70e1e9e3084e7824b4261723bffe42f4fc72d36ddcdd9
e884d10e18a55004b6149a9b0c7ead4b42afa8906a80deea322a930f4d91
ac35a6e6186e5d082f09> ND 
/a 
<10bf31705d64e193f685fe465eb14b2f9aa41e82540f554b50893fe63efd
4692fb4fc721a117ec78b6e9515c29fcb60e3aee68a6df1c3946e2cf738d
cda3e29fd055085b4d27d1a9d3bf0581a4eb2a1ee52161275aad552d9745
cae2527ba314929e16b3adcf63fbfe5b600507b479eb6bac8dbf57f9ea61
cf0c38792d951ff40006e32bfab335adbde18dd700c5843625ec18424a1a
470a3d82d751a36d8b4a69f1f5fb08cfc2b94ed2658b49c9985bc490581e
62f221617e1b4bb61c6dcc9e8e61b29e5f74c69c328c213bfddbc217436d
81d1dfe6a13e1cac30c3fa16cb4e265d8db4217e880afbaeb0227e92e214
5534c463a18baaf155fa6678668091a696c5190fde> ND 
/b 
<10bf31703e65fd7e1217c9f29c64bb1b9e17851bf25dd0466fa484e27564
2ef62da05fc0e561425aa7c0cf759f2df2fed9f5cab4e563d9d485ca6e49
6a23023cc7d5336a38ed163f6d25eac0416c891913363ad8aab5312feed7
de0b0bbcc0db8b66958d96174480f5040af2cfb1590a9410022fc6398cb1
d4435f6325a11aad4c77347983eb4748b4ada02263a3> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f67877e80be643ef8
5a01cff57f62859595ad9c2a1ef16f4c22144c6fc4d200f23642de52d57f
47e47c78a8b6713f5cb6dcd4a475047f70e7386f0baddd9f1c37f1598f60
1bc5b6005acf2115ed4aa52ed6ed621e5045f115e6c8ed146247e81ce086
3c881ef71e6e234403d5f37c528c6ebb0616bbdc05a29ca9d830ed27448f
> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/f 
<10bf31706629561882b73d5b02cebd16b0942e445fbe6e3232b3823cbdb2
63dcf8e5b5846268df4eba2210bb667f400c46f76ed43d4b268aed98cf98
689dff659a93d69b1917cc1e5f49aadef7d4b3b6109675927aeb98089c> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987
c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e
6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e
7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df
3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3
e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b
5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/k 
<10bf31703f936777fb99983a11586419ce72aadc44a2aa69d19b91e9f126
e6f5aabcb4381bf8bfee294b80bae1d888f1314da01fbe02> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79e55a006319a903b4934e0296676
bb7a5df970714192f29a85860f4cb191aa4b83ebc5b58328ecf58ed9d6ff
d0d3a63dd21733d64450e3abce2a149390b0894b2fb0fce1ee78d045f446
04c31c787e13fdae7e79785a1956f734ed54b976e123646b63ce5bee0b68
59b26a26c2ad993325ab7bd77cdd1be893a8ccd1451854fed772889a0d7d
7791ac97d81ac7> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3483c7b936ed6e6cf91cffcbd
a815b8df60ae150c20432c17a46c0682480f6226770a8905e960aec3fe5e
934f4cc994b08abf0fc9d432168086e4> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
/v 
<10bf31706ae07dd17dfbac8a1ae33180eda67f1c12c0170124c5b65d6008
42ef910f621d12aef7aac075b848d0659b626414ef71a4> ND 
/x 
<10bf317060ff640a97f40d52fc73b98a64469b3f084ceb61cbde39a670a8
6bdd66d38d792d8bbe1de58b050ff75d7a6d9ab8ab83f71f1130ffc9a46b
7d934ffb8ab93375fd62539cb08006> ND 
/z 
<10bf31706d7bdb7f5f74128c9bb1cf0445a721a78dcf191b2f1eaa106619
49aba2663707d493160b8371e546cec091e3d6d364aa753531debc6523f3
> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/CPFJEK+Arial findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
dup 65 /A put
dup 67 /C put
dup 70 /F put
dup 73 /I put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 122 /z put
dup 160 /space put
dup 173 /hyphen put
pop
%%EndResource
[/N13/CPFJEK+Arial 1 TZ
/N10 [/DeviceRGB] /ColorSpace defineRes pop

false setSA
n
90.48 725.1 357.18 -591.78 re
1 1 1 setrgbcolor
f
q
n
388.14 133.32 0.0599976 591.78 re
W
n
0.0599976 w
10 M
1 j
1 J
[] 0 d
n
388.14 133.32 m
388.14 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
328.62 133.32 0.0599976 591.78 re
W
n
0.0599976 w
10 M
1 j
1 J
[] 0 d
n
328.62 133.32 m
328.62 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
269.1 133.32 0.0599976 591.78 re
W
n
0.0599976 w
10 M
1 j
1 J
[] 0 d
n
269.1 133.32 m
269.1 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
209.52 133.32 0.0599976 591.78 re
W
n
0.0599976 w
10 M
1 j
1 J
[] 0 d
n
209.52 133.32 m
209.52 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
150 133.32 0.0599976 591.78 re
W
n
0.0599976 w
10 M
1 j
1 J
[] 0 d
n
150 133.32 m
150 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
90.48 133.32 0.0599976 591.78 re
W
n
0.0599976 w
10 M
1 j
1 J
[] 0 d
n
90.48 133.32 m
90.48 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
72 54 467.04 683.04 re
90.72 134.64 22.98 318 re
eoclip
n
0.960007 w
10 M
0 j
1 J
[] 0 d
n
90.48 133.32 357.18 591.78 re
0.501999 0.501999 0.501999  setrgbcolor
S
Q
0.960007 w
10 M
0 j
1 J
[] 0 d
n
433.56 140.88 14.1 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
0 0 0  setrgbcolor
S
n
415.8 186.42 31.86 10.02 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
344.82 231.9 102.84 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
238.38 277.44 209.28 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
348.72 322.98 98.94 10.02 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
q
n
163.74 363.06 283.92 20.94 re
W
n
n
169.14 368.46 278.52 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
Q
n
231.84 414 215.82 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
231.72 459.54 215.94 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
120.78 505.08 326.88 10.02 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
221.22 550.56 226.44 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
q
n
151.26 590.7 296.4 20.94 re
W
n
n
156.66 596.1 291 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
Q
n
264.78 641.64 182.88 10.02 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
309.42 687.12 138.24 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
441.36 151.02 6.29999 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
427.2 196.5 20.46 10.08 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
383.28 242.04 64.38 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
280.26 287.58 167.4 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
360.18 333.06 87.48 10.08 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
298.86 378.6 148.8 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
243.9 424.14 203.76 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
348.96 469.68 98.7 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
210 515.16 237.66 10.08 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
221.22 560.7 226.44 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
q
n
154.38 600.84 293.28 20.88 re
W
n
n
159.78 606.24 287.88 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
Q
n
306.84 651.72 140.82 10.08 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
349.56 697.26 98.1 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
442.56 161.1 5.10001 10.08 re
q
eofill
Q
S
n
436.02 206.64 11.64 10.02 re
q
eofill
Q
S
n
389.76 252.12 57.9 10.08 re
q
eofill
Q
S
n
308.16 297.66 139.5 10.08 re
q
eofill
Q
S
n
382.5 343.2 65.16 10.02 re
q
eofill
Q
S
n
341.34 388.68 106.32 10.08 re
q
eofill
Q
S
n
241.5 434.22 206.16 10.08 re
q
eofill
Q
S
n
351.6 479.76 96.06 10.08 re
q
eofill
Q
S
n
305.64 525.3 142.02 10.02 re
q
eofill
Q
S
n
228.9 570.78 218.76 10.08 re
q
eofill
Q
S
q
n
161.52 610.92 286.14 20.94 re
W
n
n
166.92 616.32 280.74 10.08 re
q
eofill
Q
S
Q
n
326.82 661.86 120.84 10.02 re
q
eofill
Q
S
n
367.56 707.34 80.1 10.08 re
q
eofill
Q
S
0.0599976 w
n
90.48 133.32 m
447.66 133.32 l
447.66 129 m
447.66 133.32 l
388.14 129 m
388.14 133.32 l
328.62 129 m
328.62 133.32 l
269.1 129 m
269.1 133.32 l
209.52 129 m
209.52 133.32 l
150 129 m
150 133.32 l
90.48 129 m
90.48 133.32 l
447.66 133.32 m
447.66 725.1 l
451.98 133.32 m
447.66 133.32 l
451.98 178.86 m
447.66 178.86 l
451.98 224.34 m
447.66 224.34 l
451.98 269.88 m
447.66 269.88 l
451.98 315.42 m
447.66 315.42 l
451.98 360.9 m
447.66 360.9 l
451.98 406.44 m
447.66 406.44 l
451.98 451.98 m
447.66 451.98 l
451.98 497.52 m
447.66 497.52 l
451.98 543 m
447.66 543 l
451.98 588.54 m
447.66 588.54 l
451.98 634.08 m
447.66 634.08 l
451.98 679.56 m
447.66 679.56 l
451.98 725.1 m
447.66 725.1 l
S
452.22 114.9 m
/N13 [0 13.98 -13.98 0 0 0] Tf
(0) show
392.7 103.2 m
(0.2) show
333.18 103.2 m
(0.4) show
273.66 103.2 m
(0.6) show
214.08 103.2 m
(0.8) show
154.56 114.9 m
(1) show
95.0405 103.2 m
(1.2) show
499.08 123.48 m
/N13 [-9.88519 9.88519 -9.88519 -9.88519 0 0] Tf
(b) show
493.619 129 m
(it)
[-2.21804 2.21804 -2.77176 2.77176 ] pdfxys
488.64 133.92 m
(o) show
483.18 139.44 m
(ni)
[-5.51894 5.51894 -2.21714 2.21714 ] pdfxys
475.44 147.12 m
(c) show
478.68 189.419 m
(f) show
475.979 192.179 m
(ir)
[-2.21804 2.21804 -3.31538 3.31538 ] pdfxys
498 215.639 m
(f) show
495.299 218.399 m
(ft-f)
[-2.76 2.76 -2.76 2.76 -3.30361 3.30361 -2.76 2.76 ] pdfxys
483.719 229.919 m
(i) show
481.56 232.138 m
(ne)
[-5.51894 5.51894 -5.51894 5.51894 ] pdfxys
511.799 247.319 m
(f) show
509.099 250.079 m
(ft-coars)
[-2.75502 2.75502 -2.75502 2.75502 -3.29863 3.29863 -4.94953 4.94953 -5.5031 5.5031 -5.45368 5.45368 -3.29863 3.29863 -4.94953 4.94953 ] pdfxys
476.099 283.019 m
(e) show
492.479 312.178 m
(3) show
487.018 317.698 m
(gp)
[-5.51894 5.51894 -5.51894 5.51894 ] pdfxys
475.979 328.679 m
(p) show
523.798 326.398 m
(b) show
518.338 331.918 m
(ea)
[-5.51894 5.51894 -5.51894 5.51894 ] pdfxys
507.298 342.899 m
(mf) show
(o) show
490.858 359.398 m
(rmer)
[-3.30165 3.30165 -8.24425 8.24425 -5.50612 5.50612 -3.30165 3.30165 ] pdfxys
505.617 390.118 m
(m) show
497.397 398.398 m
(a) show
491.877 403.859 m
(t) show
489.176 406.619 m
(m) show
480.897 414.839 m
(u) show
475.436 420.359 m
(l) show
473.217 422.519 m
(t) show
503.457 437.759 m
(f) show
500.756 440.519 m
(m) show
492.476 448.74 m
(ra)
[-3.29954 3.29954 -5.50401 5.50401 ] pdfxys
483.716 457.559 m
(d) show
478.196 463.02 m
(i) show
476.036 465.239 m
(o) show
510.656 476.099 m
(f) show
507.955 478.859 m
(il)
[-2.21804 2.21804 -2.21804 2.21804 ] pdfxys
503.516 483.239 m
(t) show
500.815 485.999 m
(erb)
[-5.512 5.512 -3.30753 3.30753 -5.512 5.512 ] pdfxys
486.476 500.279 m
(a) show
481.015 505.799 m
(n) show
475.495 511.26 m
(k) show
516.175 516.119 m
(f) show
513.474 518.879 m
(il)
[-2.21804 2.21804 -2.21804 2.21804 ] pdfxys
509.035 523.26 m
(t) show
506.334 526.02 m
(erb)
[-5.512 5.512 -3.30753 3.30753 -5.512 5.512 ] pdfxys
491.995 540.3 m
(a) show
486.534 545.82 m
(n) show
481.014 551.28 m
(k) show
476.093 556.26 m
(2) show
492.414 585.36 m
(o) show
486.953 590.88 m
(fd)
[-2.76196 2.76196 -5.51004 5.51004 ] pdfxys
478.673 599.101 m
(m) show
506.273 617.04 m
/N23 [-11.3136 11.3136 -11.3136 -11.3136 0 0] Tf
(a) show
499.958 623.356 m
(v) show
493.693 629.62 m
(e) show
487.378 635.935 m
(r) show
482.969 640.344 m
(a) show
476.683 646.631 m
(g) show
469.745 653.568 m
(e) show
511.732 657.12 m
(g) show
504.795 664.057 m
(e) show
498.482 670.37 m
(o) show
491.548 677.305 m
(m) show
481.505 687.347 m
(e) show
475.214 693.638 m
(an)
[-6.31314 6.31314 -6.93531 6.93531 ] pdfxys
314.28 73.92 m
/N13 -13.98 Tf
(execution time)
[-7.79101 -7.00813 -7.79101 -7.00813 -7.79101 -3.90457 -3.12148 -7.79101 -7.79101 -3.9018 -3.90457 
-3.12148 -11.6634 -7.79101 ] pdfxs
384 90.9001 m
(\(normalized to unoptimized StreamIt\))
[-4.67337 -7.79101 -7.79101 -4.67337 -11.6634 -7.79101 -3.12148 -3.12148 -7.00813 -7.79101 -7.79101 
-3.9018 -3.90457 -7.79101 -3.9018 -7.79101 -7.79101 -7.79101 -7.79101 -3.90457 -3.12148 -11.6634 
-3.12148 -7.00813 -7.79101 -7.79101 -3.9018 -9.34268 -3.90457 -4.67337 -7.79101 -7.79101 -11.6634 
-3.90457 -3.90457 -4.67337 ] pdfxs
n
90.78 452.58 22.92 -317.88 re
1 1 1  setrgbcolor
f
n
90.72 134.64 22.98 317.94 re
0 0 0  setrgbcolor
S
0.960007 w
n
98.4 146.82 8.58 8.58 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
107.46 158.7 m
/N13 [0 13.98 -13.98 0 0 0] Tf
(CAF) show
n
98.4 209.1 8.58 8.58 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
107.46 220.98 m
(CAF+scaling) show
n
98.4 323.22 8.58 8.57999 re
q
eofill
Q
S
107.46 335.1 m
(CAF+scaling+SR) show
2.5 w
1 j
0 J
n
150.06 135 m
150.36 725.1 l
0.0039978 0.0039978 0.0039978  setrgbcolor
S
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%DocumentNeededResources:
%%+ font Arial,Bold
%%EOF

%%EndDocument
 @endspecial 964 3537 a(Figure)f(5-3:)43 b(P)m(erformance)34
b(results)g(for)e(P)m(en)m(tium)i(3)840 5205 y @beginspecial
72 @llx 63 @lly 737 @urx 522 @ury 2664 @rwi @setspecial
%%BeginDocument: i2-g1.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (FinalResults.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050612173428-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 63 737 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 63 moveto 737 63 lineto 737 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: file Pscript_CFF PSVER
userdict/ct_CffDict 6 dict put ct_CffDict begin/F0Subr{systemdict/internaldict
known{1183615869 systemdict/internaldict get exec/FlxProc known{save true}{
false}ifelse}{userdict/internaldict known not{userdict/internaldict{count 0 eq
{/internaldict errordict/invalidaccess get exec}if dup type/integertype ne{
/internaldict errordict/invalidaccess get exec}if dup 1183615869 eq{pop 0}{
/internaldict errordict/invalidaccess get exec}ifelse}dup 14 get 1 25 dict put
bind executeonly put}if 1183615869 userdict/internaldict get exec/FlxProc
known{save true}{false}ifelse}ifelse[systemdict/internaldict known not{100
dict/begin cvx/mtx matrix/def cvx}if systemdict/currentpacking known{
currentpacking true setpacking}if{systemdict/internaldict known{1183615869
systemdict/internaldict get exec dup/$FlxDict known not{dup dup length exch
maxlength eq{pop userdict dup/$FlxDict known not{100 dict begin/mtx matrix def
dup/$FlxDict currentdict put end}if}{100 dict begin/mtx matrix def dup
/$FlxDict currentdict put end}ifelse}if/$FlxDict get begin}if grestore/exdef{
exch def}def/dmin exch abs 100 div def/epX exdef/epY exdef/c4y2 exdef/c4x2
exdef/c4y1 exdef/c4x1 exdef/c4y0 exdef/c4x0 exdef/c3y2 exdef/c3x2 exdef/c3y1
exdef/c3x1 exdef/c3y0 exdef/c3x0 exdef/c1y2 exdef/c1x2 exdef/c2x2 c4x2 def
/c2y2 c4y2 def/yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def/PickCoords{{
c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2}{c3x0 c3y0 c3x1
c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2}ifelse/y5 exdef/x5 exdef/y4 exdef
/x4 exdef/y3 exdef/x3 exdef/y2 exdef/x2 exdef/y1 exdef/x1 exdef/y0 exdef/x0
exdef}def mtx currentmatrix pop mtx 0 get abs 1e-05 lt mtx 3 get abs 1e-05 lt
or{/flipXY -1 def}{mtx 1 get abs 1e-05 lt mtx 2 get abs 1e-05 lt or{/flipXY 1
def}{/flipXY 0 def}ifelse}ifelse/erosion 1 def systemdict/internaldict known{
1183615869 systemdict/internaldict get exec dup/erosion known{/erosion get
/erosion exch def}{pop}ifelse}if yflag{flipXY 0 eq c3y2 c4y2 eq or{false
PickCoords}{/shrink c3y2 c4y2 eq{0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs}ifelse
def/yshrink{c4y2 sub shrink mul c4y2 add}def/c1y0 c3y0 yshrink def/c1y1 c3y1
yshrink def/c2y0 c4y0 yshrink def/c2y1 c4y1 yshrink def/c1x0 c3x0 def/c1x1
c3x1 def/c2x0 c4x0 def/c2x1 c4x1 def/dY 0 c3y2 c1y2 sub round dtransform
flipXY 1 eq{exch}if pop abs def dY dmin lt PickCoords y2 c1y2 sub abs .001 gt{
c1x2 c1y2 transform flipXY 1 eq{exch}if/cx exch def/cy exch def/dY 0 y2 c1y2
sub round dtransform flipXY 1 eq{exch}if pop def dY round dup 0 ne{/dY exdef}{
pop dY 0 lt{-1}{1}ifelse/dY exdef}ifelse/erode PaintType 2 ne erosion .5 ge
and def erode{/cy cy .5 sub def}if/ey cy dY add def/ey ey ceiling ey sub ey
floor add def erode{/ey ey .5 add def}if ey cx flipXY 1 eq{exch}if itransform
exch pop y2 sub/eShift exch def/y1 y1 eShift add def/y2 y2 eShift add def/y3
y3 eShift add def}if}ifelse}{flipXY 0 eq c3x2 c4x2 eq or{false PickCoords}{
/shrink c3x2 c4x2 eq{0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs}ifelse def/xshrink
{c4x2 sub shrink mul c4x2 add}def/c1x0 c3x0 xshrink def/c1x1 c3x1 xshrink def
/c2x0 c4x0 xshrink def/c2x1 c4x1 xshrink def/c1y0 c3y0 def/c1y1 c3y1 def/c2y0
c4y0 def/c2y1 c4y1 def/dX c3x2 c1x2 sub round 0 dtransform flipXY -1 eq{exch}
if pop abs def dX dmin lt PickCoords x2 c1x2 sub abs .001 gt{c1x2 c1y2
transform flipXY -1 eq{exch}if/cy exch def/cx exch def/dX x2 c1x2 sub round 0
dtransform flipXY -1 eq{exch}if pop def dX round dup 0 ne{/dX exdef}{pop dX 0
lt{-1}{1}ifelse/dX exdef}ifelse/erode PaintType 2 ne erosion .5 ge and def
erode{/cx cx .5 sub def}if/ex cx dX add def/ex ex ceiling ex sub ex floor add
def erode{/ex ex .5 add def}if ex cy flipXY -1 eq{exch}if itransform pop x2
sub/eShift exch def/x1 x1 eShift add def/x2 x2 eShift add def/x3 x3 eShift add
def}if}ifelse}ifelse x2 x5 eq y2 y5 eq or{x5 y5 lineto}{x0 y0 x1 y1 x2 y2
curveto x3 y3 x4 y4 x5 y5 curveto}ifelse epY epX}systemdict/currentpacking
known{exch setpacking}if/exec cvx/end cvx]cvx executeonly exch{pop true exch
restore}{systemdict/internaldict known not{1183615869 userdict/internaldict
get exec exch/FlxProc exch put true}{1183615869 systemdict/internaldict get
exec dup length exch maxlength eq{false}{1183615869 systemdict/internaldict
get exec exch/FlxProc exch put true}ifelse}ifelse}ifelse{systemdict
/internaldict known{1183615869 systemdict/internaldict get exec/FlxProc get
exec}{1183615869 userdict/internaldict get exec/FlxProc get exec}ifelse}if}
executeonly def/F1Subr{gsave currentpoint newpath moveto}bind def/F2Subr{
currentpoint grestore gsave currentpoint newpath moveto}bind def/HSSubr{
systemdict/internaldict known not{pop 3}{1183615869 systemdict/internaldict
get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck
get exec}{pop 3}ifelse}ifelse}ifelse}bind def end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Arial,Bold
[/N23/Arial,Bold 1 TZ
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 63 665 459 rectclip
[ 0 -1 1 0 8.64 594 ] concat
%%BeginResource: font DACMHK+Arial
11 dict begin
/FontName /DACMHK+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/parenleft 
<10bf31703a9458c05db7ba7a58bcd7a2c9e91ffe666d66d67924090fad2e
914020d503aadf9240d9b1c6a63953b30ccff5415597f5a6c26fdee68dec
bc331692c1b3543bfce7c82b9d704f4fab4f> ND 
/parenright 
<10bf31703a9458c05d79d3ca9c0e25cc2a0b35ceb7dd46fb51adbfd88390
4d8bf636baa28a31c262d1a3078da5849c1c2b98c958c72994f2c3f78ea4
d099458941ceee627e3f06f9f9a16a1d0c> ND 
/plus 
<10bf317031d9337ef184b43be498749534943b6b82dfb721a4f1e6478fee
6c1f4763fef70c3e4be97d7fac720dea7a> ND 
/hyphen 
<10bf31705995db6ed81c8e93e5d1d568f767c41aee4b2647d0> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d898870164
1dba6c5defb41d909040a164fdb0a088fefa45fff299b57b0e194251a4a8
b9cf3bc1815fd2c5ba06e651f9d7799098b4541de9c35043282b335f2de1
7def94eec0695fa30f7aaa5574cd9d280a8b4d225396feeeafb4b20c3fcc
9f12e751228b7464328a957a71c1d6fc11ef53a8f692024ab80f5e0d7623
62b42a462a2bf96d5a0db86097e421e5cb8c7d7a0900e6cfd70978f26b60
122332f14359637710d630381bc4f9c629fd5be208af03ab6a69f0ba40b9
a2> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac54cb2fa3a278c1c5e8b8e0184d
7cbeaa35d4ddaa02f35f83f589e53f609414a1e8dd86a2916a5d28875546
282a3c313b2605b04804> ND 
/C 
<10bf31704fab892742fc2c6be78329c0825c84c392f40122153ca9a91165
96e2ea405597ca7f292098a14c92b8766b957d29536d6a74922bce6efa67
d7fa67d47a8ae997e897ea42f1e923c09a3ad5b1aa2186622859ef03a213
f7c26727c45c24d289e1bf8fa6a719352242839e565e8af9cb5c48758232
20530e01b09cb28b590a86024fb341940ed5d19a7e036981d38ceef64334
a577636f4f149330a371e1> ND 
/F 
<10bf31702f7c4b31b7f92f61f70a9032d1addef58c81f5b8fed9651d8c00
81acb06eda84b504e7> ND 
/I 
<10bf31701a61e6f9a78e08bbc896e02c88ca268e19a5> ND 
/R 
<10bf31702819c97bfff21764697e50774ba74072e0daf25a84b5ab81ce67
f36424a8f4f31afdf4de9e5912f7a5ba0ce90948b990647285d2500d6d57
ef6e940fb321e739e33f71f0994fb0b96bf3e18815066ca201f1578cce2a
71a0a57bc87021521bfe1b691fde6e9063a575e47bf725cfd1c0afa40b0c
a839a6c28bfd0b7f0f7469b4cf16ee3c7a54706ea2da49ba1db858f3c370
3042b60d2181c6c1afb0bef5eb> ND 
/S 
<10bf31704ab370a8a6c235279ed6c2ccfc716fa1295d141c34dd24f95c73
82e11c724a74e86021432ff58ab0f9585559c2cc7a3fe0720eadda5eee3e
cb055c76e8d7f22cfddbcfbe4ee1a562282b307d86efef90d9a8c71c96ab
9543712fa6240508ea1f38536804c47dfcc21f777c873fc11b7e20f7a228
b35e8d75f100a7da6082feb065d087853344b8bf00df7291cc74173d8c17
2964ca635a4e981f1604dc10d454f452e70073d386bcbe3ed4c09e72aa02
e7eb1e382ccb2fe70e1e9e3084e7824b4261723bffe42f4fc72d36ddcdd9
e884d10e18a55004b6149a9b0c7ead4b42afa8906a80deea322a930f4d91
ac35a6e6186e5d082f09> ND 
/a 
<10bf31705d64e193f685fe465eb14b2f9aa41e82540f554b50893fe63efd
4692fb4fc721a117ec78b6e9515c29fcb60e3aee68a6df1c3946e2cf738d
cda3e29fd055085b4d27d1a9d3bf0581a4eb2a1ee52161275aad552d9745
cae2527ba314929e16b3adcf63fbfe5b600507b479eb6bac8dbf57f9ea61
cf0c38792d951ff40006e32bfab335adbde18dd700c5843625ec18424a1a
470a3d82d751a36d8b4a69f1f5fb08cfc2b94ed2658b49c9985bc490581e
62f221617e1b4bb61c6dcc9e8e61b29e5f74c69c328c213bfddbc217436d
81d1dfe6a13e1cac30c3fa16cb4e265d8db4217e880afbaeb0227e92e214
5534c463a18baaf155fa6678668091a696c5190fde> ND 
/b 
<10bf31703e65fd7e1217c9f29c64bb1b9e17851bf25dd0466fa484e27564
2ef62da05fc0e561425aa7c0cf759f2df2fed9f5cab4e563d9d485ca6e49
6a23023cc7d5336a38ed163f6d25eac0416c891913363ad8aab5312feed7
de0b0bbcc0db8b66958d96174480f5040af2cfb1590a9410022fc6398cb1
d4435f6325a11aad4c77347983eb4748b4ada02263a3> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f67877e80be643ef8
5a01cff57f62859595ad9c2a1ef16f4c22144c6fc4d200f23642de52d57f
47e47c78a8b6713f5cb6dcd4a475047f70e7386f0baddd9f1c37f1598f60
1bc5b6005acf2115ed4aa52ed6ed621e5045f115e6c8ed146247e81ce086
3c881ef71e6e234403d5f37c528c6ebb0616bbdc05a29ca9d830ed27448f
> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/f 
<10bf31706629561882b73d5b02cebd16b0942e445fbe6e3232b3823cbdb2
63dcf8e5b5846268df4eba2210bb667f400c46f76ed43d4b268aed98cf98
689dff659a93d69b1917cc1e5f49aadef7d4b3b6109675927aeb98089c> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987
c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e
6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e
7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df
3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3
e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b
5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/k 
<10bf31703f936777fb99983a11586419ce72aadc44a2aa69d19b91e9f126
e6f5aabcb4381bf8bfee294b80bae1d888f1314da01fbe02> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79e55a006319a903b4934e0296676
bb7a5df970714192f29a85860f4cb191aa4b83ebc5b58328ecf58ed9d6ff
d0d3a63dd21733d64450e3abce2a149390b0894b2fb0fce1ee78d045f446
04c31c787e13fdae7e79785a1956f734ed54b976e123646b63ce5bee0b68
59b26a26c2ad993325ab7bd77cdd1be893a8ccd1451854fed772889a0d7d
7791ac97d81ac7> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3483c7b936ed6e6cf91cffcbd
a815b8df60ae150c20432c17a46c0682480f6226770a8905e960aec3fe5e
934f4cc994b08abf0fc9d432168086e4> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
/v 
<10bf31706ae07dd17dfbac8a1ae33180eda67f1c12c0170124c5b65d6008
42ef910f621d12aef7aac075b848d0659b626414ef71a4> ND 
/x 
<10bf317060ff640a97f40d52fc73b98a64469b3f084ceb61cbde39a670a8
6bdd66d38d792d8bbe1de58b050ff75d7a6d9ab8ab83f71f1130ffc9a46b
7d934ffb8ab93375fd62539cb08006> ND 
/z 
<10bf31706d7bdb7f5f74128c9bb1cf0445a721a78dcf191b2f1eaa106619
49aba2663707d493160b8371e546cec091e3d6d364aa753531debc6523f3
> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/DACMHK+Arial findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
dup 65 /A put
dup 67 /C put
dup 70 /F put
dup 73 /I put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 122 /z put
dup 160 /space put
dup 173 /hyphen put
pop
%%EndResource
[/N13/DACMHK+Arial 1 TZ
/N10 [/DeviceRGB] /ColorSpace defineRes pop

false setSA
n
90.48 725.1 357.18 -591.78 re
1 1 1 setrgbcolor
f
q
n
388.14 133.32 0.0599976 591.78 re
W
n
0.0599976 w
10 M
1 j
1 J
[] 0 d
n
388.14 133.32 m
388.14 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
328.62 133.32 0.0599976 591.78 re
W
n
0.0599976 w
10 M
1 j
1 J
[] 0 d
n
328.62 133.32 m
328.62 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
269.1 133.32 0.0599976 591.78 re
W
n
0.0599976 w
10 M
1 j
1 J
[] 0 d
n
269.1 133.32 m
269.1 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
209.52 133.32 0.0599976 591.78 re
W
n
0.0599976 w
10 M
1 j
1 J
[] 0 d
n
209.52 133.32 m
209.52 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
150 133.32 0.0599976 591.78 re
W
n
0.0599976 w
10 M
1 j
1 J
[] 0 d
n
150 133.32 m
150 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
90.48 133.32 0.0599976 591.78 re
W
n
0.0599976 w
10 M
1 j
1 J
[] 0 d
n
90.48 133.32 m
90.48 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
72 54 467.04 683.04 re
90.72 134.64 22.98 318 re
eoclip
n
0.960007 w
10 M
0 j
1 J
[] 0 d
n
90.48 133.32 357.18 591.78 re
0.501999 0.501999 0.501999  setrgbcolor
S
Q
0.960007 w
10 M
0 j
1 J
[] 0 d
n
434.76 140.88 12.9 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
0 0 0  setrgbcolor
S
n
358.8 186.42 88.86 10.02 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
335.22 231.9 112.44 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
330.06 277.44 117.6 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
369.96 322.98 77.7 10.02 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
230.88 368.46 216.78 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
218.88 414 228.78 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
255.24 459.54 192.42 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
262.02 505.08 185.64 10.02 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
q
n
197.34 545.16 250.32 20.94 re
W
n
n
202.74 550.56 244.92 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
Q
q
n
147.72 590.7 299.94 20.94 re
W
n
n
153.12 596.1 294.54 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
Q
n
286.5 641.64 161.16 10.02 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
319.74 687.12 127.92 10.08 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
434.76 151.02 12.9 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
406.32 196.5 41.34 10.08 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
335.22 242.04 112.44 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
338.58 287.58 109.08 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
375.96 333.06 71.7 10.08 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
306.9 378.6 140.76 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
236.4 424.14 211.26 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
358.56 469.68 89.1 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
299.16 515.16 148.5 10.08 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
q
n
197.34 555.3 250.32 20.88 re
W
n
n
202.74 560.7 244.92 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
Q
q
n
146.16 600.84 301.5 20.88 re
W
n
n
151.56 606.24 296.1 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
Q
n
313.32 651.72 134.34 10.08 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
345 697.26 102.66 10.02 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
441.54 161.1 6.12 10.08 re
q
eofill
Q
S
n
405.3 206.64 42.36 10.02 re
q
eofill
Q
S
n
373.26 252.12 74.4 10.08 re
q
eofill
Q
S
n
368.16 297.66 79.5 10.08 re
q
eofill
Q
S
n
383.1 343.2 64.56 10.02 re
q
eofill
Q
S
n
306.9 388.68 140.76 10.08 re
q
eofill
Q
S
n
280.74 434.22 166.92 10.08 re
q
eofill
Q
S
n
358.8 479.76 88.86 10.08 re
q
eofill
Q
S
n
307.14 525.3 140.52 10.02 re
q
eofill
Q
S
q
n
198.6 565.38 249.06 20.94 re
W
n
n
204 570.78 243.66 10.08 re
q
eofill
Q
S
Q
q
n
147.72 610.92 299.94 20.94 re
W
n
n
153.12 616.32 294.54 10.08 re
q
eofill
Q
S
Q
n
325.62 661.86 122.04 10.02 re
q
eofill
Q
S
n
360.96 707.34 86.7 10.08 re
q
eofill
Q
S
0.0599976 w
n
90.48 133.32 m
447.66 133.32 l
447.66 129 m
447.66 133.32 l
388.14 129 m
388.14 133.32 l
328.62 129 m
328.62 133.32 l
269.1 129 m
269.1 133.32 l
209.52 129 m
209.52 133.32 l
150 129 m
150 133.32 l
90.48 129 m
90.48 133.32 l
447.66 133.32 m
447.66 725.1 l
451.98 133.32 m
447.66 133.32 l
451.98 178.86 m
447.66 178.86 l
451.98 224.34 m
447.66 224.34 l
451.98 269.88 m
447.66 269.88 l
451.98 315.42 m
447.66 315.42 l
451.98 360.9 m
447.66 360.9 l
451.98 406.44 m
447.66 406.44 l
451.98 451.98 m
447.66 451.98 l
451.98 497.52 m
447.66 497.52 l
451.98 543 m
447.66 543 l
451.98 588.54 m
447.66 588.54 l
451.98 634.08 m
447.66 634.08 l
451.98 679.56 m
447.66 679.56 l
451.98 725.1 m
447.66 725.1 l
S
452.22 114.9 m
/N13 [0 13.98 -13.98 0 0 0] Tf
(0) show
392.7 103.2 m
(0.2) show
333.18 103.2 m
(0.4) show
273.66 103.2 m
(0.6) show
214.08 103.2 m
(0.8) show
154.56 114.9 m
(1) show
95.0405 103.2 m
(1.2) show
499.08 123.48 m
/N13 [-9.88519 9.88519 -9.88519 -9.88519 0 0] Tf
(b) show
493.619 129 m
(it)
[-2.21804 2.21804 -2.77176 2.77176 ] pdfxys
488.64 133.92 m
(o) show
483.18 139.44 m
(ni)
[-5.51894 5.51894 -2.21714 2.21714 ] pdfxys
475.44 147.12 m
(c) show
478.68 189.419 m
(f) show
475.979 192.179 m
(ir)
[-2.21804 2.21804 -3.31538 3.31538 ] pdfxys
498 215.639 m
(f) show
495.299 218.399 m
(ft-f)
[-2.76 2.76 -2.76 2.76 -3.30361 3.30361 -2.76 2.76 ] pdfxys
483.719 229.919 m
(i) show
481.56 232.138 m
(ne)
[-5.51894 5.51894 -5.51894 5.51894 ] pdfxys
511.799 247.319 m
(f) show
509.099 250.079 m
(ft-coars)
[-2.75502 2.75502 -2.75502 2.75502 -3.29863 3.29863 -4.94953 4.94953 -5.5031 5.5031 -5.45368 5.45368 -3.29863 3.29863 -4.94953 4.94953 ] pdfxys
476.099 283.019 m
(e) show
492.479 312.178 m
(3) show
487.018 317.698 m
(gp)
[-5.51894 5.51894 -5.51894 5.51894 ] pdfxys
475.979 328.679 m
(p) show
523.798 326.398 m
(b) show
518.338 331.918 m
(ea)
[-5.51894 5.51894 -5.51894 5.51894 ] pdfxys
507.298 342.899 m
(mf) show
(o) show
490.858 359.398 m
(rmer)
[-3.30165 3.30165 -8.24425 8.24425 -5.50612 5.50612 -3.30165 3.30165 ] pdfxys
505.617 390.118 m
(m) show
497.397 398.398 m
(a) show
491.877 403.859 m
(t) show
489.176 406.619 m
(m) show
480.897 414.839 m
(u) show
475.436 420.359 m
(l) show
473.217 422.519 m
(t) show
503.457 437.759 m
(f) show
500.756 440.519 m
(m) show
492.476 448.74 m
(ra)
[-3.29954 3.29954 -5.50401 5.50401 ] pdfxys
483.716 457.559 m
(d) show
478.196 463.02 m
(i) show
476.036 465.239 m
(o) show
510.656 476.099 m
(f) show
507.955 478.859 m
(il)
[-2.21804 2.21804 -2.21804 2.21804 ] pdfxys
503.516 483.239 m
(t) show
500.815 485.999 m
(erb)
[-5.512 5.512 -3.30753 3.30753 -5.512 5.512 ] pdfxys
486.476 500.279 m
(a) show
481.015 505.799 m
(n) show
475.495 511.26 m
(k) show
516.175 516.119 m
(f) show
513.474 518.879 m
(il)
[-2.21804 2.21804 -2.21804 2.21804 ] pdfxys
509.035 523.26 m
(t) show
506.334 526.02 m
(erb)
[-5.512 5.512 -3.30753 3.30753 -5.512 5.512 ] pdfxys
491.995 540.3 m
(a) show
486.534 545.82 m
(n) show
481.014 551.28 m
(k) show
476.093 556.26 m
(2) show
492.414 585.36 m
(o) show
486.953 590.88 m
(fd)
[-2.76196 2.76196 -5.51004 5.51004 ] pdfxys
478.673 599.101 m
(m) show
506.273 617.04 m
/N23 [-11.3136 11.3136 -11.3136 -11.3136 0 0] Tf
(a) show
499.958 623.356 m
(v) show
493.693 629.62 m
(e) show
487.378 635.935 m
(r) show
482.969 640.344 m
(a) show
476.683 646.631 m
(g) show
469.745 653.568 m
(e) show
511.732 657.12 m
(g) show
504.795 664.057 m
(e) show
498.482 670.37 m
(o) show
491.548 677.305 m
(m) show
481.505 687.347 m
(e) show
475.214 693.638 m
(an)
[-6.31314 6.31314 -6.93531 6.93531 ] pdfxys
314.28 73.92 m
/N13 -13.98 Tf
(execution time)
[-7.79101 -7.00813 -7.79101 -7.00813 -7.79101 -3.90457 -3.12148 -7.79101 -7.79101 -3.9018 -3.90457 
-3.12148 -11.6634 -7.79101 ] pdfxs
384 90.9001 m
(\(normalized to unoptimized StreamIt\))
[-4.67337 -7.79101 -7.79101 -4.67337 -11.6634 -7.79101 -3.12148 -3.12148 -7.00813 -7.79101 -7.79101 
-3.9018 -3.90457 -7.79101 -3.9018 -7.79101 -7.79101 -7.79101 -7.79101 -3.90457 -3.12148 -11.6634 
-3.12148 -7.00813 -7.79101 -7.79101 -3.9018 -9.34268 -3.90457 -4.67337 -7.79101 -7.79101 -11.6634 
-3.90457 -3.90457 -4.67337 ] pdfxs
n
90.78 452.58 22.92 -317.88 re
1 1 1  setrgbcolor
f
n
90.72 134.64 22.98 317.94 re
0 0 0  setrgbcolor
S
0.960007 w
n
98.4 146.82 8.58 8.58 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
107.46 158.7 m
/N13 [0 13.98 -13.98 0 0 0] Tf
(CAF) show
n
98.4 209.1 8.58 8.58 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
107.46 220.98 m
(CAF+scaling) show
n
98.4 323.22 8.58 8.57999 re
q
eofill
Q
S
107.46 335.1 m
(CAF+scaling+SR) show
2.5 w
1 j
0 J
n
150.06 135 m
150.36 725.1 l
0.0039978 0.0039978 0.0039978  setrgbcolor
S
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%DocumentNeededResources:
%%+ font Arial,Bold
%%EOF

%%EndDocument
 @endspecial 974 5367 a(Figure)f(5-4:)42 b(P)m(erformance)34
b(results)g(for)e(Itanium)h(2)1901 5649 y(49)p eop
%%Page: 50 50
50 49 bop 150 100 a Fw(5.2)161 b(Ev)-9 b(aluation)53
b(of)h(Cop)l(y-Shift)d(and)j(Mo)t(dulation)150 379 y
Fs(T)-8 b(o)32 b(compare)g(the)g(e\016ciency)i(of)d(di\013eren)m(t)i
(bu\013er)f(managemen)m(t)h(tec)m(hniques)i(w)m(e)d(use)h(a)e(simple)
150 559 y(syn)m(thetic)45 b(StreamIt)f(b)s(enc)m(hmark)h(sho)m(wn)g(in)
e(Figure)g(5-5.)75 b(Using)44 b(a)e(sp)s(ecialized)k(syn)m(thetic)150
740 y(b)s(enc)m(hmark)33 b(allo)m(ws)f(us)g(to)f(highligh)m(t)h(the)g
(p)s(erformance)g(of)f(sp)s(eci\014c)i(bu\013er)f(managemen)m(t)g(im-)
150 921 y(plemen)m(tation)39 b(tec)m(hniques.)63 b(W)-8
b(e)38 b(compile)h(the)f(b)s(enc)m(hmark)i(with)f(\014lter)f
Fn(FIR)h Fs(ha)m(ving)f(a)g(p)s(eek)150 1101 y(rate)33
b(set)h(equal)g(to)f(0,)g(8,)g(16,)f(32)h(...128)g(\(b)m(y)h(v)-5
b(arying)33 b(the)h Fn(PEEK)g Fs(v)-5 b(ariable\).)45
b(V)-8 b(arying)33 b(the)h(p)s(eek)150 1282 y(rate)d(of)f(the)h
Fn(FIR)g Fs(\014lter)g(allo)m(ws)h(us)f(to)f(see)i(ho)m(w)f(the)g
(strategies)h(p)s(erform)e(as)h(w)m(e)h(v)-5 b(ary)30
b(the)i(n)m(um-)150 1462 y(b)s(er)j(of)e(liv)m(e)j(items)g(that)e(m)m
(ust)h(b)s(e)g(retained)g(in)g(the)g(bu\013er.)49 b(W)-8
b(e)35 b(ran)f(the)h(b)s(enc)m(hmark)h(on)f(the)150 1643
y(StrongARM)k(1110,)h(P)m(en)m(tium)g(3)f(and)g(Itanium)g(2.)63
b(The)39 b(results)i(are)e(sho)m(wn)h(in)f(Figure)g(5-6,)150
1823 y(Figure)h(5-7)f(and)h(Figure)g(5-8.)65 b(The)41
b Fn(copy-shift)i Fs(represen)m(ts)f(an)e(unoptimized)i(implemen-)150
2004 y(tation)e(of)g(cop)m(y-shift,)k(where)d(the)g(liv)m(e)h(items)f
(are)g(copied)g(to)f(the)h(b)s(eginning)g(of)f(the)g(bu\013er)150
2185 y(after)26 b(ev)m(ery)i(execution)g(of)d(the)i(\014lter)g(FIR.)f
(The)h Fn(modulation)h Fs(represen)m(ts)h(an)d(implemen)m(tation)150
2365 y(where)32 b(the)f(bu\013er)f(is)h(implemen)m(ted)i(as)e(a)f
(wrap-around)h(bu\013er.)43 b(The)31 b Fn(copy-shift+scaling)150
2546 y Fs(represen)m(ts)i(p)s(eek-scaling)e(where)h(the)e
Fn(FIR)h Fs(\014lter)g(is)g(replaced)g(with)g(a)f(\014lter)h(that)f
(executes)j(the)150 2726 y(original)39 b Fn(FIR)i Fs(\014lter)f
Fm(N)51 b Fs(times.)66 b(The)40 b Fm(N)51 b Fs(is)40
b(c)m(hosen)h(suc)m(h)h(that)d(the)h(new)h(\014lter)f(consumes)i(at)150
2907 y(least)27 b(4)p Fj(\002)g Fs(as)f(man)m(y)i(items)g(than)e(are)h
(copied)g(o)m(v)m(er)h(to)e(the)h(start)f(of)g(bu\013er)h(after)g(ev)m
(ery)h(iteration)150 3087 y(of)k(the)h(scaled)h(\014lter.)296
3268 y(As)23 b(exp)s(ected,)j(mo)s(dulation)d(outp)s(erforms)f
(unoptimized)i(cop)m(y-shift,)h(b)s(ecause)f(mo)s(dulation)150
3449 y(do)s(es)36 b(not)f(require)h(the)g(items)g(in)f(the)h(bu\013er)f
(to)g(b)s(e)h(copied)g(to)e(the)i(start)f(of)g(the)g(bu\013er.)52
b(The)150 3629 y(somewhat)36 b(surprising)g(result)f(is)g(that)g
(optimized)g(cop)m(y-shift)h(\(where)g(liv)m(e)g(items)f(are)g(copied)
150 3810 y(to)e(the)g(start)h(of)e(the)i(bu\013er)f(infrequen)m(tly\))j
(o\013ers)d(a)g(substan)m(tial)i(sp)s(eedup)g(o)m(v)m(er)f(mo)s
(dulation.)150 3990 y(The)44 b(optimized)f(cop)m(y-shift)h(in)f
(comparison)g(to)g(mo)s(dulation)f(deliv)m(ers)j(a)d(51\045)h(sp)s
(eedup)h(on)150 4171 y(StrongARM,)d(a)f(48\045)g(sp)s(eedup)j(on)d(P)m
(en)m(tium)j(3,)f(and)f(a)f(5\045)h(sp)s(eedup)h(on)f(Itanium)g(2)f
(for)g(a)150 4351 y(p)s(eek)23 b(rate)g(of)f(128.)39
b(The)23 b(mo)s(dest)g(sp)s(eedup)h(of)e(using)h(optimized)h(cop)m
(y-shift)f(v)m(ersus)i(mo)s(dulation)150 4532 y(on)39
b(Itanium)g(2)f(can)h(b)s(e)g(explained)h(b)m(y)g(the)f(VLIW)g(nature)g
(of)g(the)g(arc)m(hitecture,)j(where)e(the)150 4713 y(bit)m(wise-and)46
b(op)s(erations)f(can)g(b)s(e)g(sc)m(heduled)j(b)m(y)d(the)g(C)h
(compiler)f(in)g(parallel)g(with)h(other)150 4893 y(instructions,)d(th)
m(us)e(reducing)g(the)g(cost)f(of)g(bit)m(wise-and)h(op)s(eration)f
(relativ)m(e)h(to)e(its)i(cost)f(on)150 5074 y(StrongARM)33
b(and)f(P)m(en)m(tium)j(3.)1901 5649 y(50)p eop
%%Page: 51 51
51 50 bop 406 1486 3089 4 v 406 3761 4 2275 v 434 3736
a @beginspecial 81 @llx 462 @lly 441 @urx 729 @ury 3600
@rwi @setspecial
%%BeginDocument: code6.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Microsoft Word - code-fig.doc)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050610162645-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 81 462 441 729
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
81 462 moveto 441 462 lineto 441 729 lineto 81 729 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: file Pscript_CFF PSVER
userdict/ct_CffDict 6 dict put ct_CffDict begin/F0Subr{systemdict/internaldict
known{1183615869 systemdict/internaldict get exec/FlxProc known{save true}{
false}ifelse}{userdict/internaldict known not{userdict/internaldict{count 0 eq
{/internaldict errordict/invalidaccess get exec}if dup type/integertype ne{
/internaldict errordict/invalidaccess get exec}if dup 1183615869 eq{pop 0}{
/internaldict errordict/invalidaccess get exec}ifelse}dup 14 get 1 25 dict put
bind executeonly put}if 1183615869 userdict/internaldict get exec/FlxProc
known{save true}{false}ifelse}ifelse[systemdict/internaldict known not{100
dict/begin cvx/mtx matrix/def cvx}if systemdict/currentpacking known{
currentpacking true setpacking}if{systemdict/internaldict known{1183615869
systemdict/internaldict get exec dup/$FlxDict known not{dup dup length exch
maxlength eq{pop userdict dup/$FlxDict known not{100 dict begin/mtx matrix def
dup/$FlxDict currentdict put end}if}{100 dict begin/mtx matrix def dup
/$FlxDict currentdict put end}ifelse}if/$FlxDict get begin}if grestore/exdef{
exch def}def/dmin exch abs 100 div def/epX exdef/epY exdef/c4y2 exdef/c4x2
exdef/c4y1 exdef/c4x1 exdef/c4y0 exdef/c4x0 exdef/c3y2 exdef/c3x2 exdef/c3y1
exdef/c3x1 exdef/c3y0 exdef/c3x0 exdef/c1y2 exdef/c1x2 exdef/c2x2 c4x2 def
/c2y2 c4y2 def/yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def/PickCoords{{
c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2}{c3x0 c3y0 c3x1
c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2}ifelse/y5 exdef/x5 exdef/y4 exdef
/x4 exdef/y3 exdef/x3 exdef/y2 exdef/x2 exdef/y1 exdef/x1 exdef/y0 exdef/x0
exdef}def mtx currentmatrix pop mtx 0 get abs 1e-05 lt mtx 3 get abs 1e-05 lt
or{/flipXY -1 def}{mtx 1 get abs 1e-05 lt mtx 2 get abs 1e-05 lt or{/flipXY 1
def}{/flipXY 0 def}ifelse}ifelse/erosion 1 def systemdict/internaldict known{
1183615869 systemdict/internaldict get exec dup/erosion known{/erosion get
/erosion exch def}{pop}ifelse}if yflag{flipXY 0 eq c3y2 c4y2 eq or{false
PickCoords}{/shrink c3y2 c4y2 eq{0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs}ifelse
def/yshrink{c4y2 sub shrink mul c4y2 add}def/c1y0 c3y0 yshrink def/c1y1 c3y1
yshrink def/c2y0 c4y0 yshrink def/c2y1 c4y1 yshrink def/c1x0 c3x0 def/c1x1
c3x1 def/c2x0 c4x0 def/c2x1 c4x1 def/dY 0 c3y2 c1y2 sub round dtransform
flipXY 1 eq{exch}if pop abs def dY dmin lt PickCoords y2 c1y2 sub abs .001 gt{
c1x2 c1y2 transform flipXY 1 eq{exch}if/cx exch def/cy exch def/dY 0 y2 c1y2
sub round dtransform flipXY 1 eq{exch}if pop def dY round dup 0 ne{/dY exdef}{
pop dY 0 lt{-1}{1}ifelse/dY exdef}ifelse/erode PaintType 2 ne erosion .5 ge
and def erode{/cy cy .5 sub def}if/ey cy dY add def/ey ey ceiling ey sub ey
floor add def erode{/ey ey .5 add def}if ey cx flipXY 1 eq{exch}if itransform
exch pop y2 sub/eShift exch def/y1 y1 eShift add def/y2 y2 eShift add def/y3
y3 eShift add def}if}ifelse}{flipXY 0 eq c3x2 c4x2 eq or{false PickCoords}{
/shrink c3x2 c4x2 eq{0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs}ifelse def/xshrink
{c4x2 sub shrink mul c4x2 add}def/c1x0 c3x0 xshrink def/c1x1 c3x1 xshrink def
/c2x0 c4x0 xshrink def/c2x1 c4x1 xshrink def/c1y0 c3y0 def/c1y1 c3y1 def/c2y0
c4y0 def/c2y1 c4y1 def/dX c3x2 c1x2 sub round 0 dtransform flipXY -1 eq{exch}
if pop abs def dX dmin lt PickCoords x2 c1x2 sub abs .001 gt{c1x2 c1y2
transform flipXY -1 eq{exch}if/cy exch def/cx exch def/dX x2 c1x2 sub round 0
dtransform flipXY -1 eq{exch}if pop def dX round dup 0 ne{/dX exdef}{pop dX 0
lt{-1}{1}ifelse/dX exdef}ifelse/erode PaintType 2 ne erosion .5 ge and def
erode{/cx cx .5 sub def}if/ex cx dX add def/ex ex ceiling ex sub ex floor add
def erode{/ex ex .5 add def}if ex cy flipXY -1 eq{exch}if itransform pop x2
sub/eShift exch def/x1 x1 eShift add def/x2 x2 eShift add def/x3 x3 eShift add
def}if}ifelse}ifelse x2 x5 eq y2 y5 eq or{x5 y5 lineto}{x0 y0 x1 y1 x2 y2
curveto x3 y3 x4 y4 x5 y5 curveto}ifelse epY epX}systemdict/currentpacking
known{exch setpacking}if/exec cvx/end cvx]cvx executeonly exch{pop true exch
restore}{systemdict/internaldict known not{1183615869 userdict/internaldict
get exec exch/FlxProc exch put true}{1183615869 systemdict/internaldict get
exec dup length exch maxlength eq{false}{1183615869 systemdict/internaldict
get exec exch/FlxProc exch put true}ifelse}ifelse}ifelse{systemdict
/internaldict known{1183615869 systemdict/internaldict get exec/FlxProc get
exec}{1183615869 userdict/internaldict get exec/FlxProc get exec}ifelse}if}
executeonly def/F1Subr{gsave currentpoint newpath moveto}bind def/F2Subr{
currentpoint grestore gsave currentpoint newpath moveto}bind def/HSSubr{
systemdict/internaldict known not{pop 3}{1183615869 systemdict/internaldict
get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck
get exec}{pop 3}ifelse}ifelse}ifelse}bind def end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Courier-Bold
[/N11/Courier-Bold 1 TZ
%%IncludeResource Courier
[/N10/Courier 1 TZ
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
81 462 359 266 rectclip
/N12 [/DeviceRGB] /ColorSpace defineRes pop

false setSA
0 0 0 setrgbcolor
90 711.72 m
/N10 10.02 Tf
(void->void pipeline )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
210 711.72 m
/N11 10.02 Tf
(BufferTest)
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
269.999 711.72 m
/N10 10.02 Tf
( { )
[5.99983 5.99983 5.99983 ] pdfxs
89.9991 700.38 m
(  add )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
125.999 700.38 m
/N11 10.02 Tf
(Source)
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
161.999 700.38 m
/N10 10.02 Tf
(\(\);)
[5.99983 5.99983 5.99983 ] pdfxs
89.9992 689.041 m
(  add )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
125.999 689.041 m
/N11 10.02 Tf
(FIR)
[5.99983 5.99983 5.99983 ] pdfxs
143.999 689.041 m
/N10 10.02 Tf
(\(\);)
[5.99983 5.99983 5.99983 ] pdfxs
89.9993 677.521 m
(}) show
89.9993 655.081 m
(void->float filter )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
203.999 655.081 m
/N11 10.02 Tf
(Source)
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
239.999 655.081 m
/N10 10.02 Tf
( { )
[5.99983 5.99983 5.99983 ] pdfxs
89.9983 643.501 m
(  work push 1 { )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
89.9983 632.161 m
(    push\( ... \); )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
89.9983 620.881 m
(  } )
[5.99983 5.99983 5.99983 5.99983 ] pdfxs
89.9983 609.541 m
(}) show
89.9983 587.101 m
(float->void filter )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
203.998 587.101 m
/N11 10.02 Tf
(FIR)
[5.99983 5.99983 5.99983 ] pdfxs
221.998 587.101 m
/N10 10.02 Tf
( { )
[5.99983 5.99983 5.99983 ] pdfxs
89.9973 575.521 m
(  int PEEK = 4; )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
89.9973 564.241 m
(  work pop 1 peek PEEK { )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 ] pdfxs
89.9973 552.901 m
(    float result = 0; )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
] pdfxs
89.9973 541.562 m
(    for \(int i = 1; i < PEEK; i++\) { )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 ] pdfxs
89.9973 530.222 m
(      result += i * peek\(i\); )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
89.9973 518.882 m
(    } )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
89.9973 507.603 m
(    pop\(\); )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
] pdfxs
89.9973 496.263 m
(    print\(result\); )
[5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 
5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 5.99983 ] pdfxs
89.9973 484.924 m
(  } )
[5.99983 5.99983 5.99983 5.99983 ] pdfxs
89.9973 473.584 m
(}) show
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%DocumentNeededResources:
%%+ font Courier
%%+ font Courier-Bold
%%EOF

%%EndDocument
 @endspecial 3491 3761 V 406 3764 3089 4 v 799 3898 a
Fs(Figure)32 b(5-5:)43 b(Original)32 b(StreamIt)h(co)s(de)g(for)f(the)h
(bu\013er)g(test.)1901 5649 y(51)p eop
%%Page: 52 52
52 51 bop 824 1532 a @beginspecial 72 @llx 63 @lly 737
@urx 522 @ury 2664 @rwi @setspecial
%%BeginDocument: arm-buf.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Copy of Buftest-Final.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050609190922-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 63 737 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 63 moveto 737 63 lineto 737 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 63 665 459 rectclip
[ 0 -1 1 0 8.64 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font BDPMII+Arial
11 dict begin
/FontName /BDPMII+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/parenleft 
<10bf31703a9458c05db7ba7a58bcd7a2c9e91ffe666d66d67924090fad2e
914020d503aadf9240d9b1c6a63953b30ccff5415597f5a6c26fdee68dec
bc331692c1b3543bfce7c82b9d704f4fab4f> ND 
/parenright 
<10bf31703a9458c05d79d3ca9c0e25cc2a0b35ceb7dd46fb51adbfd88390
4d8bf636baa28a31c262d1a3078da5849c1c2b98c958c72994f2c3f78ea4
d099458941ceee627e3f06f9f9a16a1d0c> ND 
/plus 
<10bf317031d9337ef184b43be498749534943b6b82dfb721a4f1e6478fee
6c1f4763fef70c3e4be97d7fac720dea7a> ND 
/hyphen 
<10bf31705995db6ed81c8e93e5d1d568f767c41aee4b2647d0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d898870164
1dba6c5defb41d909040a164fdb0a088fefa45fff299b57b0e194251a4a8
b9cf3bc1815fd2c5ba06e651f9d7799098b4541de9c35043282b335f2de1
7def94eec0695fa30f7aaa5574cd9d280a8b4d225396feeeafb4b20c3fcc
9f12e751228b7464328a957a71c1d6fc11ef53a8f692024ab80f5e0d7623
62b42a462a2bf96d5a0db86097e421e5cb8c7d7a0900e6cfd70978f26b60
122332f14359637710d630381bc4f9c629fd5be208af03ab6a69f0ba40b9
a2> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f733e1cd354b07630
213f625adb3ae8b5aa6a51c1055a59d5f55e13f6cd6e1d9a82c372ef809e
0ee864af865bf5dd5f7dae9a46388470afbd9e2e8c39b7ea4fc9ab800d6e
8ab2edc1e3d36e194904842b1236ff6f70f88f5551621a9fa448c516e732
df410d140d211e3fe0becb6d0a54202b80a6977f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/nine 
<10bf317047276c49b9c0f950eed45ca9abbead4f9a337d9778d52804f095
e0959c13860a3969943ef1a12c3ee6c45422162d204a6f0d8cdc2d4e75b5
67f1b01796340d6df61e18c819464639606becbe4894a8ef149ed72054cf
28ee583aeb880d27fff9e2fa582b760e67cbad4f844afdb68b34f85c1a95
a0e8285de8ad462405443a57e05fe3bbb3d2281adc779f19070fa98342c5
c2c2ec79e83ff4803e54082ff002fd18e3d25566d6e2d40f56cc659c4866
84f0030ca9d50085195745fdce82f2f52a9ae7ae7227879d15b08026dcde
5aab87db399da6bb3c6e8f68808a93> ND 
/E 
<10bf317028198094ce8cd275e305c79a7a258ddd928bd9dc896c51a549b4
869242612fc9caa06c2483d03d9996ef> ND 
/P 
<10bf31702a85d5ccd794b0f82fad1df586d5fbd89610cffce961ef0c01e8
0dd41794780f980f6fae77f9030913b26e9faf7c4997be350b070860e734
b58d1af4e1f6fdede1ce393d1a10ecb0df5eb5d5689fc4b0c8ea8e8ea551
86c9a594f8c2368e99f819874a733380254b54725709f6d7ae5e> ND 
/a 
<10bf31705d64e193f685fe465eb14b2f9aa41e82540f554b50893fe63efd
4692fb4fc721a117ec78b6e9515c29fcb60e3aee68a6df1c3946e2cf738d
cda3e29fd055085b4d27d1a9d3bf0581a4eb2a1ee52161275aad552d9745
cae2527ba314929e16b3adcf63fbfe5b600507b479eb6bac8dbf57f9ea61
cf0c38792d951ff40006e32bfab335adbde18dd700c5843625ec18424a1a
470a3d82d751a36d8b4a69f1f5fb08cfc2b94ed2658b49c9985bc490581e
62f221617e1b4bb61c6dcc9e8e61b29e5f74c69c328c213bfddbc217436d
81d1dfe6a13e1cac30c3fa16cb4e265d8db4217e880afbaeb0227e92e214
5534c463a18baaf155fa6678668091a696c5190fde> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f67877e80be643ef8
5a01cff57f62859595ad9c2a1ef16f4c22144c6fc4d200f23642de52d57f
47e47c78a8b6713f5cb6dcd4a475047f70e7386f0baddd9f1c37f1598f60
1bc5b6005acf2115ed4aa52ed6ed621e5045f115e6c8ed146247e81ce086
3c881ef71e6e234403d5f37c528c6ebb0616bbdc05a29ca9d830ed27448f
> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/f 
<10bf31706629561882b73d5b02cebd16b0942e445fbe6e3232b3823cbdb2
63dcf8e5b5846268df4eba2210bb667f400c46f76ed43d4b268aed98cf98
689dff659a93d69b1917cc1e5f49aadef7d4b3b6109675927aeb98089c> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987
c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e
6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e
7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df
3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3
e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b
5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 
/h 
<10bf31703f932f5ecb68c849e33d1fed17c766a03dcb89fd4259247501b2
92adfc2297be69c7091e34ced000096d0ca29850717d0ee8abe567011317
96a4072dab7df40090735d5712990fb13b0847093cc929cc1cd64c87dd80
565b94c081eb> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/k 
<10bf31703f936777fb99983a11586419ce72aadc44a2aa69d19b91e9f126
e6f5aabcb4381bf8bfee294b80bae1d888f1314da01fbe02> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79e55a006319a903b4934e0296676
bb7a5df970714192f29a85860f4cb191aa4b83ebc5b58328ecf58ed9d6ff
d0d3a63dd21733d64450e3abce2a149390b0894b2fb0fce1ee78d045f446
04c31c787e13fdae7e79785a1956f734ed54b976e123646b63ce5bee0b68
59b26a26c2ad993325ab7bd77cdd1be893a8ccd1451854fed772889a0d7d
7791ac97d81ac7> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
/x 
<10bf317060ff640a97f40d52fc73b98a64469b3f084ceb61cbde39a670a8
6bdd66d38d792d8bbe1de58b050ff75d7a6d9ab8ab83f71f1130ffc9a46b
7d934ffb8ab93375fd62539cb08006> ND 
/y 
<10bf317069b1fd7143194d5a8e15b6f90ac84d61c2210d0a37e4b79b318e
a37e94e1eafeb299771b049b5875b1faaabb3f4a1c610b363bb1cc81f3dc
2321559cc23d3a2ce6164f6c1accc00d3218419aedc30e344ac526b1b865
4cc98fc6c8753aea96a41d15ebdbd9a87b663f4abccf42a0073c7de0> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/BDPMII+Arial findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 56 /eight put
dup 57 /nine put
dup 69 /E put
dup 80 /P put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 121 /y put
dup 160 /space put
dup 173 /hyphen put
pop
%%EndResource
[/N13/BDPMII+Arial 1 TZ
q
n
396.3 137.34 0.0599976 575.58 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
396.3 137.34 m
396.3 712.92 l
0 0 0 setrgbcolor
S
Q
q
n
335.46 137.34 0.0599976 575.58 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
335.46 137.34 m
335.46 712.92 l
0 0 0 setrgbcolor
S
Q
q
n
91.98 137.34 365.34 575.58 re
106.68 149.46 187.98 223.98 re
eoclip
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
274.68 137.34 m
274.68 712.92 l
213.84 137.34 m
213.84 712.92 l
153.06 137.34 m
153.06 712.92 l
0 0 0 setrgbcolor
S
Q
q
n
92.22 137.34 0.0599976 575.58 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
92.22 137.34 m
92.22 712.92 l
0 0 0 setrgbcolor
S
Q
q
n
72 54 467.04 683.04 re
106.68 149.46 187.98 223.98 re
eoclip
n
1 J
0 j
0.960007 w
10 M
[] 0 d
false setSA
n
92.22 137.34 364.86 575.58 re
0.501999 0.501999 0.501999 setrgbcolor
S
Q
1 J
0 j
0.0599976 w
10 M
[] 0 d
false setSA
n
92.22 137.34 m
457.08 137.34 l
457.08 131.1 m
457.08 137.34 l
396.3 131.1 m
396.3 137.34 l
335.46 131.1 m
335.46 137.34 l
274.68 131.1 m
274.68 137.34 l
213.84 131.1 m
213.84 137.34 l
153.06 131.1 m
153.06 137.34 l
92.22 131.1 m
92.22 137.34 l
457.08 137.34 m
457.08 712.92 l
463.32 137.34 m
457.08 137.34 l
463.32 173.34 m
457.08 173.34 l
463.32 209.28 m
457.08 209.28 l
463.32 245.28 m
457.08 245.28 l
463.32 281.22 m
457.08 281.22 l
463.32 317.22 m
457.08 317.22 l
463.32 353.16 m
457.08 353.16 l
463.32 389.16 m
457.08 389.16 l
463.32 425.16 m
457.08 425.16 l
463.32 461.1 m
457.08 461.1 l
463.32 497.1 m
457.08 497.1 l
463.32 533.04 m
457.08 533.04 l
463.32 569.04 m
457.08 569.04 l
463.32 604.98 m
457.08 604.98 l
463.32 640.98 m
457.08 640.98 l
463.32 676.92 m
457.08 676.92 l
463.32 712.92 m
457.08 712.92 l
0 0 0 setrgbcolor
S
1 j
0.960007 w
n
455.28 137.34 m
439.38 173.34 l
420.18 209.28 l
400.68 245.28 l
380.76 281.22 l
361.2 317.22 l
339.96 353.16 l
318.96 389.16 l
298.92 425.16 l
278.94 461.1 l
257.64 497.1 l
235.56 533.04 l
213.72 569.04 l
192.42 604.98 l
170.16 640.98 l
148.44 676.92 l
128.7 712.92 l
455.28 137.34 m
442.14 173.34 l
428.16 209.28 l
415.5 245.28 l
401.82 281.22 l
388.68 317.22 l
374.46 353.16 l
360.66 389.16 l
347.58 425.16 l
334.8 461.1 l
320.46 497.1 l
305.7 533.04 l
291 569.04 l
276.54 604.98 l
261.36 640.98 l
246.18 676.92 l
234.18 712.92 l
455.34 137.34 m
449.04 173.34 l
441.84 209.28 l
432.72 245.28 l
423.84 281.22 l
412.44 317.22 l
404.16 353.16 l
395.04 389.16 l
387.9 425.16 l
377.7 461.1 l
369.72 497.1 l
358.92 533.04 l
349.26 569.04 l
338.22 604.98 l
327.66 640.98 l
318.36 676.92 l
309.84 712.92 l
S
0 j
n
450.78 132.84 8.94 8.94 re
q
eofill
Q
S
n
434.88 168.84 8.94 8.94 re
q
eofill
Q
S
n
415.68 204.78 8.94 8.94 re
q
eofill
Q
S
n
396.18 240.78 8.94 8.94 re
q
eofill
Q
S
n
376.26 276.72 8.94 8.94 re
q
eofill
Q
S
n
356.7 312.72 8.94 8.94 re
q
eofill
Q
S
n
335.46 348.66 8.94 8.94 re
q
eofill
Q
S
n
314.46 384.66 8.94 8.94 re
q
eofill
Q
S
n
294.42 420.66 8.94 8.94 re
q
eofill
Q
S
n
274.44 456.6 8.94 8.94 re
q
eofill
Q
S
n
253.14 492.6 8.94002 8.94 re
q
eofill
Q
S
n
231.06 528.54 8.94 8.94 re
q
eofill
Q
S
n
209.22 564.54 8.94 8.94 re
q
eofill
Q
S
n
187.92 600.48 8.94 8.94 re
q
eofill
Q
S
n
165.66 636.48 8.94 8.94 re
q
eofill
Q
S
n
143.94 672.42 8.94 8.94 re
q
eofill
Q
S
n
124.2 708.42 8.94 8.94 re
q
eofill
Q
S
1 j
n
450.3 137.34 m
455.28 142.32 l
460.26 137.34 l
455.28 132.36 l
450.3 137.34 l
h
q
eofill
Q
S
n
437.16 173.34 m
442.14 178.32 l
447.12 173.34 l
442.14 168.36 l
437.16 173.34 l
h
q
eofill
Q
S
n
423.18 209.28 m
428.16 214.26 l
433.14 209.28 l
428.16 204.3 l
423.18 209.28 l
h
q
eofill
Q
S
n
410.52 245.28 m
415.5 250.26 l
420.48 245.28 l
415.5 240.3 l
410.52 245.28 l
h
q
eofill
Q
S
n
396.84 281.22 m
401.82 286.2 l
406.8 281.22 l
401.82 276.24 l
396.84 281.22 l
h
q
eofill
Q
S
n
383.7 317.22 m
388.68 322.2 l
393.66 317.22 l
388.68 312.24 l
383.7 317.22 l
h
q
eofill
Q
S
n
369.48 353.16 m
374.46 358.14 l
379.44 353.16 l
374.46 348.18 l
369.48 353.16 l
h
q
eofill
Q
S
n
355.68 389.16 m
360.66 394.14 l
365.64 389.16 l
360.66 384.18 l
355.68 389.16 l
h
q
eofill
Q
S
n
342.6 425.16 m
347.58 430.14 l
352.56 425.16 l
347.58 420.18 l
342.6 425.16 l
h
q
eofill
Q
S
n
329.82 461.1 m
334.8 466.08 l
339.78 461.1 l
334.8 456.12 l
329.82 461.1 l
h
q
eofill
Q
S
n
315.48 497.1 m
320.46 502.08 l
325.44 497.1 l
320.46 492.12 l
315.48 497.1 l
h
q
eofill
Q
S
n
300.72 533.04 m
305.7 538.02 l
310.68 533.04 l
305.7 528.06 l
300.72 533.04 l
h
q
eofill
Q
S
n
286.02 569.04 m
291 574.02 l
295.98 569.04 l
291 564.06 l
286.02 569.04 l
h
q
eofill
Q
S
n
271.56 604.98 m
276.54 609.96 l
281.52 604.98 l
276.54 600 l
271.56 604.98 l
h
q
eofill
Q
S
n
256.38 640.98 m
261.36 645.96 l
266.34 640.98 l
261.36 636 l
256.38 640.98 l
h
q
eofill
Q
S
n
241.2 676.92 m
246.18 681.9 l
251.16 676.92 l
246.18 671.94 l
241.2 676.92 l
h
q
eofill
Q
S
n
229.2 712.92 m
234.18 717.9 l
239.16 712.92 l
234.18 707.94 l
229.2 712.92 l
h
q
eofill
Q
S
q
n
449.82 132.36 11.1 10.56 re
W
n
n
450.36 137.34 m
455.34 142.32 l
460.32 137.34 l
455.34 132.36 l
450.36 137.34 l
h
S
Q
n
444.06 173.34 m
449.04 178.32 l
454.02 173.34 l
449.04 168.36 l
444.06 173.34 l
h
436.86 209.28 m
441.84 214.26 l
446.82 209.28 l
441.84 204.3 l
436.86 209.28 l
h
427.74 245.28 m
432.72 250.26 l
437.7 245.28 l
432.72 240.3 l
427.74 245.28 l
h
418.86 281.22 m
423.84 286.2 l
428.82 281.22 l
423.84 276.24 l
418.86 281.22 l
h
407.46 317.22 m
412.44 322.2 l
417.42 317.22 l
412.44 312.24 l
407.46 317.22 l
h
399.18 353.16 m
404.16 358.14 l
409.14 353.16 l
404.16 348.18 l
399.18 353.16 l
h
390.06 389.16 m
395.04 394.14 l
400.02 389.16 l
395.04 384.18 l
390.06 389.16 l
h
382.92 425.16 m
387.9 430.14 l
392.88 425.16 l
387.9 420.18 l
382.92 425.16 l
h
372.72 461.1 m
377.7 466.08 l
382.68 461.1 l
377.7 456.12 l
372.72 461.1 l
h
364.74 497.1 m
369.72 502.08 l
374.7 497.1 l
369.72 492.12 l
364.74 497.1 l
h
353.94 533.04 m
358.92 538.02 l
363.9 533.04 l
358.92 528.06 l
353.94 533.04 l
h
344.28 569.04 m
349.26 574.02 l
354.24 569.04 l
349.26 564.06 l
344.28 569.04 l
h
333.24 604.98 m
338.22 609.96 l
343.2 604.98 l
338.22 600 l
333.24 604.98 l
h
322.68 640.98 m
327.66 645.96 l
332.64 640.98 l
327.66 636 l
322.68 640.98 l
h
313.38 676.92 m
318.36 681.9 l
323.34 676.92 l
318.36 671.94 l
313.38 676.92 l
h
S
q
n
304.32 707.4 11.1 10.56 re
W
n
n
304.86 712.92 m
309.84 717.9 l
314.82 712.92 l
309.84 707.94 l
304.86 712.92 l
h
S
Q
463.86 110.94 m
/N13 [0 19.98 -19.98 0 0 0] Tf
(0) show
403.081 99.8391 m
(10) show
342.242 99.8391 m
(20) show
281.462 99.8391 m
(30) show
220.623 99.8391 m
(40) show
159.844 99.8391 m
(50) show
99.0049 99.8391 m
(60) show
486.305 131.819 m
(0)
[66.3577 ] pdfys
(1) show
(6)
[60.8372 ] pdfys
(3) show
(2)
[60.8372 ] pdfys
(4) show
(8)
[60.8372 ] pdfys
(6) show
(4)
[60.8372 ] pdfys
(8) show
(0)
[60.8372 ] pdfys
(9) show
(6)
[55.3048 ] pdfys
(11) show
(2)
[49.7124 ] pdfys
(12) show
(8) show
514.984 425.939 m
(Peek) show
386.88 87.24 m
/N13 -19.98 Tf
(Execu) show
(t)
[-5.5584 ] pdfxs
(ion) show
( t)
[-5.58248 -5.5584 ] pdfxs
(ime) show
( )
[-5.58248 ] pdfxs
(\(seconds\)) show
n
106.74 373.38 187.92 -223.86 re
1 1 1  setrgbcolor
f
0.0599976 w
n
106.68 149.46 187.98 223.92 re
0 0 0  setrgbcolor
S
0.960007 w
n
139.14 162.72 m
139.14 187.74 l
S
0 j
n
134.64 170.7 8.94 8.94 re
q
eofill
Q
S
145.8 192.42 m
/N13 [0 19.98 -19.98 0 0 0] Tf
(copy-shift) show
1 j
n
201.78 162.72 m
201.78 187.74 l
S
n
196.8 175.2 m
201.78 180.18 l
206.76 175.2 l
201.78 170.22 l
196.8 175.2 l
h
q
eofill
Q
S
208.44 192.42 m
(modulation) show
n
264.36 162.72 m
264.36 187.74 l
259.38 175.2 m
264.36 180.18 l
269.34 175.2 l
264.36 170.22 l
259.38 175.2 l
h
S
271.02 192.42 m
(copy-shift + scaling) show
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 235 1636 a Fs(Figure)32 b(5-6:)43 b(P)m(erformance)34
b(of)e(bu\013er)h(managemen)m(t)h(strategies)g(on)e(a)g(StrongARM)h
(1110)824 3395 y @beginspecial 72 @llx 63 @lly 737 @urx
522 @ury 2664 @rwi @setspecial
%%BeginDocument: p3-buf.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Copy of Buftest-Final.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050609191019-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 63 737 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 63 moveto 737 63 lineto 737 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 63 665 459 rectclip
[ 0 -1 1 0 8.64 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font BENMDM+Arial
11 dict begin
/FontName /BENMDM+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/parenleft 
<10bf31703a9458c05db7ba7a58bcd7a2c9e91ffe666d66d67924090fad2e
914020d503aadf9240d9b1c6a63953b30ccff5415597f5a6c26fdee68dec
bc331692c1b3543bfce7c82b9d704f4fab4f> ND 
/parenright 
<10bf31703a9458c05d79d3ca9c0e25cc2a0b35ceb7dd46fb51adbfd88390
4d8bf636baa28a31c262d1a3078da5849c1c2b98c958c72994f2c3f78ea4
d099458941ceee627e3f06f9f9a16a1d0c> ND 
/plus 
<10bf317031d9337ef184b43be498749534943b6b82dfb721a4f1e6478fee
6c1f4763fef70c3e4be97d7fac720dea7a> ND 
/hyphen 
<10bf31705995db6ed81c8e93e5d1d568f767c41aee4b2647d0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d898870164
1dba6c5defb41d909040a164fdb0a088fefa45fff299b57b0e194251a4a8
b9cf3bc1815fd2c5ba06e651f9d7799098b4541de9c35043282b335f2de1
7def94eec0695fa30f7aaa5574cd9d280a8b4d225396feeeafb4b20c3fcc
9f12e751228b7464328a957a71c1d6fc11ef53a8f692024ab80f5e0d7623
62b42a462a2bf96d5a0db86097e421e5cb8c7d7a0900e6cfd70978f26b60
122332f14359637710d630381bc4f9c629fd5be208af03ab6a69f0ba40b9
a2> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/nine 
<10bf317047276c49b9c0f950eed45ca9abbead4f9a337d9778d52804f095
e0959c13860a3969943ef1a12c3ee6c45422162d204a6f0d8cdc2d4e75b5
67f1b01796340d6df61e18c819464639606becbe4894a8ef149ed72054cf
28ee583aeb880d27fff9e2fa582b760e67cbad4f844afdb68b34f85c1a95
a0e8285de8ad462405443a57e05fe3bbb3d2281adc779f19070fa98342c5
c2c2ec79e83ff4803e54082ff002fd18e3d25566d6e2d40f56cc659c4866
84f0030ca9d50085195745fdce82f2f52a9ae7ae7227879d15b08026dcde
5aab87db399da6bb3c6e8f68808a93> ND 
/E 
<10bf317028198094ce8cd275e305c79a7a258ddd928bd9dc896c51a549b4
869242612fc9caa06c2483d03d9996ef> ND 
/P 
<10bf31702a85d5ccd794b0f82fad1df586d5fbd89610cffce961ef0c01e8
0dd41794780f980f6fae77f9030913b26e9faf7c4997be350b070860e734
b58d1af4e1f6fdede1ce393d1a10ecb0df5eb5d5689fc4b0c8ea8e8ea551
86c9a594f8c2368e99f819874a733380254b54725709f6d7ae5e> ND 
/a 
<10bf31705d64e193f685fe465eb14b2f9aa41e82540f554b50893fe63efd
4692fb4fc721a117ec78b6e9515c29fcb60e3aee68a6df1c3946e2cf738d
cda3e29fd055085b4d27d1a9d3bf0581a4eb2a1ee52161275aad552d9745
cae2527ba314929e16b3adcf63fbfe5b600507b479eb6bac8dbf57f9ea61
cf0c38792d951ff40006e32bfab335adbde18dd700c5843625ec18424a1a
470a3d82d751a36d8b4a69f1f5fb08cfc2b94ed2658b49c9985bc490581e
62f221617e1b4bb61c6dcc9e8e61b29e5f74c69c328c213bfddbc217436d
81d1dfe6a13e1cac30c3fa16cb4e265d8db4217e880afbaeb0227e92e214
5534c463a18baaf155fa6678668091a696c5190fde> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f67877e80be643ef8
5a01cff57f62859595ad9c2a1ef16f4c22144c6fc4d200f23642de52d57f
47e47c78a8b6713f5cb6dcd4a475047f70e7386f0baddd9f1c37f1598f60
1bc5b6005acf2115ed4aa52ed6ed621e5045f115e6c8ed146247e81ce086
3c881ef71e6e234403d5f37c528c6ebb0616bbdc05a29ca9d830ed27448f
> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/f 
<10bf31706629561882b73d5b02cebd16b0942e445fbe6e3232b3823cbdb2
63dcf8e5b5846268df4eba2210bb667f400c46f76ed43d4b268aed98cf98
689dff659a93d69b1917cc1e5f49aadef7d4b3b6109675927aeb98089c> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987
c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e
6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e
7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df
3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3
e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b
5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 
/h 
<10bf31703f932f5ecb68c849e33d1fed17c766a03dcb89fd4259247501b2
92adfc2297be69c7091e34ced000096d0ca29850717d0ee8abe567011317
96a4072dab7df40090735d5712990fb13b0847093cc929cc1cd64c87dd80
565b94c081eb> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/k 
<10bf31703f936777fb99983a11586419ce72aadc44a2aa69d19b91e9f126
e6f5aabcb4381bf8bfee294b80bae1d888f1314da01fbe02> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79e55a006319a903b4934e0296676
bb7a5df970714192f29a85860f4cb191aa4b83ebc5b58328ecf58ed9d6ff
d0d3a63dd21733d64450e3abce2a149390b0894b2fb0fce1ee78d045f446
04c31c787e13fdae7e79785a1956f734ed54b976e123646b63ce5bee0b68
59b26a26c2ad993325ab7bd77cdd1be893a8ccd1451854fed772889a0d7d
7791ac97d81ac7> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
/x 
<10bf317060ff640a97f40d52fc73b98a64469b3f084ceb61cbde39a670a8
6bdd66d38d792d8bbe1de58b050ff75d7a6d9ab8ab83f71f1130ffc9a46b
7d934ffb8ab93375fd62539cb08006> ND 
/y 
<10bf317069b1fd7143194d5a8e15b6f90ac84d61c2210d0a37e4b79b318e
a37e94e1eafeb299771b049b5875b1faaabb3f4a1c610b363bb1cc81f3dc
2321559cc23d3a2ce6164f6c1accc00d3218419aedc30e344ac526b1b865
4cc98fc6c8753aea96a41d15ebdbd9a87b663f4abccf42a0073c7de0> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/BENMDM+Arial findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
dup 57 /nine put
dup 69 /E put
dup 80 /P put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 121 /y put
dup 160 /space put
dup 173 /hyphen put
pop
%%EndResource
[/N13/BENMDM+Arial 1 TZ
q
n
413.76 134.88 0.119995 577.92 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
false setSA
n
413.76 134.88 m
413.76 712.8 l
0 0 0 setrgbcolor
S
Q
q
n
367.8 134.88 0.119995 577.92 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
false setSA
n
367.8 134.88 m
367.8 712.8 l
0 0 0 setrgbcolor
S
Q
q
n
321.96 134.88 0.119995 577.92 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
false setSA
n
321.96 134.88 m
321.96 712.8 l
0 0 0 setrgbcolor
S
Q
q
n
91.92 134.88 368.16 577.92 re
107.4 146.76 188.04 224.04 re
eoclip
n
1 J
1 j
0.119995 w
10 M
[] 0 d
false setSA
n
276 134.88 m
276 712.8 l
230.16 134.88 m
230.16 712.8 l
184.2 134.88 m
184.2 712.8 l
138.36 134.88 m
138.36 712.8 l
0 0 0 setrgbcolor
S
Q
q
n
92.4 134.88 0.119995 577.92 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
false setSA
n
92.4 134.88 m
92.4 712.8 l
0 0 0 setrgbcolor
S
Q
q
n
72 54 467.04 683.04 re
107.4 146.76 188.04 224.04 re
eoclip
n
1 J
0 j
0.960007 w
10 M
[] 0 d
false setSA
n
92.4 134.88 367.2 577.92 re
0.501999 0.501999 0.501999 setrgbcolor
S
Q
1 J
0 j
0.119995 w
10 M
[] 0 d
false setSA
n
92.4 134.88 m
459.6 134.88 l
459.6 128.76 m
459.6 134.88 l
413.76 128.76 m
413.76 134.88 l
367.8 128.76 m
367.8 134.88 l
321.96 128.76 m
321.96 134.88 l
276 128.76 m
276 134.88 l
230.16 128.76 m
230.16 134.88 l
184.2 128.76 m
184.2 134.88 l
138.36 128.76 m
138.36 134.88 l
92.4 128.76 m
92.4 134.88 l
459.6 134.88 m
459.6 712.8 l
465.72 134.88 m
459.6 134.88 l
465.72 171 m
459.6 171 l
465.72 207.12 m
459.6 207.12 l
465.72 243.24 m
459.6 243.24 l
465.72 279.36 m
459.6 279.36 l
465.72 315.48 m
459.6 315.48 l
465.72 351.6 m
459.6 351.6 l
465.72 387.72 m
459.6 387.72 l
465.72 423.84 m
459.6 423.84 l
465.72 459.96 m
459.6 459.96 l
465.72 496.08 m
459.6 496.08 l
465.72 532.2 m
459.6 532.2 l
465.72 568.32 m
459.6 568.32 l
465.72 604.44 m
459.6 604.44 l
465.72 640.56 m
459.6 640.56 l
465.72 676.68 m
459.6 676.68 l
465.72 712.8 m
459.6 712.8 l
0 0 0 setrgbcolor
S
1 j
0.960007 w
n
458.4 134.88 m
446.52 171 l
426.12 207.12 l
407.04 243.24 l
386.64 279.36 l
369 315.48 l
342.12 351.6 l
324.84 387.72 l
299.64 423.84 l
272.76 459.96 l
263.16 496.08 l
228.48 532.2 l
211.92 568.32 l
203.28 604.44 l
166.8 640.56 l
150.96 676.68 l
125.64 712.8 l
458.4 134.88 m
448.32 171 l
439.92 207.12 l
431.16 243.24 l
420.6 279.36 l
410.28 315.48 l
400.2 351.6 l
388.92 387.72 l
377.4 423.84 l
366.48 459.96 l
357 496.08 l
346.44 532.2 l
337.08 568.32 l
326.28 604.44 l
316.8 640.56 l
307.2 676.68 l
297.36 712.8 l
458.4 134.88 m
454.32 171 l
449.76 207.12 l
444 243.24 l
436.68 279.36 l
430.92 315.48 l
414.36 387.72 l
407.28 423.84 l
400.56 459.96 l
393.24 496.08 l
385.68 532.2 l
371.52 604.44 l
364.08 640.56 l
357.72 676.68 l
350.16 712.8 l
S
0 j
n
453.84 130.32 9 9 re
q
eofill
Q
S
n
441.96 166.44 9 9 re
q
eofill
Q
S
n
421.56 202.56 9 9 re
q
eofill
Q
S
n
402.48 238.68 9 9 re
q
eofill
Q
S
n
382.08 274.8 9 9 re
q
eofill
Q
S
n
364.44 310.92 9 9 re
q
eofill
Q
S
n
337.56 347.04 9 9 re
q
eofill
Q
S
n
320.28 383.16 9 9 re
q
eofill
Q
S
n
295.08 419.28 9 9 re
q
eofill
Q
S
n
268.2 455.4 9 9 re
q
eofill
Q
S
n
258.6 491.52 9 9 re
q
eofill
Q
S
n
223.92 527.64 9 9 re
q
eofill
Q
S
n
207.36 563.76 9 9 re
q
eofill
Q
S
n
198.72 599.88 9 9 re
q
eofill
Q
S
n
162.24 636 9 9 re
q
eofill
Q
S
n
146.4 672.12 9 9 re
q
eofill
Q
S
n
121.08 708.24 9 9 re
q
eofill
Q
S
1 j
n
453.36 134.88 m
458.4 139.92 l
463.44 134.88 l
458.4 129.84 l
453.36 134.88 l
h
q
eofill
Q
S
n
443.28 171 m
448.32 176.04 l
453.36 171 l
448.32 165.96 l
443.28 171 l
h
q
eofill
Q
S
n
434.88 207.12 m
439.92 212.16 l
444.96 207.12 l
439.92 202.08 l
434.88 207.12 l
h
q
eofill
Q
S
n
426.12 243.24 m
431.16 248.28 l
436.2 243.24 l
431.16 238.2 l
426.12 243.24 l
h
q
eofill
Q
S
n
415.56 279.36 m
420.6 284.4 l
425.64 279.36 l
420.6 274.32 l
415.56 279.36 l
h
q
eofill
Q
S
n
405.24 315.48 m
410.28 320.52 l
415.32 315.48 l
410.28 310.44 l
405.24 315.48 l
h
q
eofill
Q
S
n
395.16 351.6 m
400.2 356.64 l
405.24 351.6 l
400.2 346.56 l
395.16 351.6 l
h
q
eofill
Q
S
n
383.88 387.72 m
388.92 392.76 l
393.96 387.72 l
388.92 382.68 l
383.88 387.72 l
h
q
eofill
Q
S
n
372.36 423.84 m
377.4 428.88 l
382.44 423.84 l
377.4 418.8 l
372.36 423.84 l
h
q
eofill
Q
S
n
361.44 459.96 m
366.48 465 l
371.52 459.96 l
366.48 454.92 l
361.44 459.96 l
h
q
eofill
Q
S
n
351.96 496.08 m
357 501.12 l
362.04 496.08 l
357 491.04 l
351.96 496.08 l
h
q
eofill
Q
S
n
341.4 532.2 m
346.44 537.24 l
351.48 532.2 l
346.44 527.16 l
341.4 532.2 l
h
q
eofill
Q
S
n
332.04 568.32 m
337.08 573.36 l
342.12 568.32 l
337.08 563.28 l
332.04 568.32 l
h
q
eofill
Q
S
n
321.24 604.44 m
326.28 609.48 l
331.32 604.44 l
326.28 599.4 l
321.24 604.44 l
h
q
eofill
Q
S
n
311.76 640.56 m
316.8 645.6 l
321.84 640.56 l
316.8 635.52 l
311.76 640.56 l
h
q
eofill
Q
S
n
302.16 676.68 m
307.2 681.72 l
312.24 676.68 l
307.2 671.64 l
302.16 676.68 l
h
q
eofill
Q
S
n
292.32 712.8 m
297.36 717.84 l
302.4 712.8 l
297.36 707.76 l
292.32 712.8 l
h
q
eofill
Q
S
q
n
452.76 129.84 11.4 10.8 re
W
n
n
453.36 134.88 m
458.4 139.92 l
463.44 134.88 l
458.4 129.84 l
453.36 134.88 l
h
S
Q
n
449.28 171 m
454.32 176.04 l
459.36 171 l
454.32 165.96 l
449.28 171 l
h
444.72 207.12 m
449.76 212.16 l
454.8 207.12 l
449.76 202.08 l
444.72 207.12 l
h
438.96 243.24 m
444 248.28 l
449.04 243.24 l
444 238.2 l
438.96 243.24 l
h
431.64 279.36 m
436.68 284.4 l
441.72 279.36 l
436.68 274.32 l
431.64 279.36 l
h
425.88 315.48 m
430.92 320.52 l
435.96 315.48 l
430.92 310.44 l
425.88 315.48 l
h
417.6 351.6 m
422.64 356.64 l
427.68 351.6 l
422.64 346.56 l
417.6 351.6 l
h
409.32 387.72 m
414.36 392.76 l
419.4 387.72 l
414.36 382.68 l
409.32 387.72 l
h
402.24 423.84 m
407.28 428.88 l
412.32 423.84 l
407.28 418.8 l
402.24 423.84 l
h
395.52 459.96 m
400.56 465 l
405.6 459.96 l
400.56 454.92 l
395.52 459.96 l
h
388.2 496.08 m
393.24 501.12 l
398.28 496.08 l
393.24 491.04 l
388.2 496.08 l
h
380.64 532.2 m
385.68 537.24 l
390.72 532.2 l
385.68 527.16 l
380.64 532.2 l
h
373.56 568.32 m
378.6 573.36 l
383.64 568.32 l
378.6 563.28 l
373.56 568.32 l
h
366.48 604.44 m
371.52 609.48 l
376.56 604.44 l
371.52 599.4 l
366.48 604.44 l
h
359.04 640.56 m
364.08 645.6 l
369.12 640.56 l
364.08 635.52 l
359.04 640.56 l
h
352.68 676.68 m
357.72 681.72 l
362.76 676.68 l
357.72 671.64 l
352.68 676.68 l
h
S
q
n
344.52 707.16 11.4 10.8 re
W
n
n
345.12 712.8 m
350.16 717.84 l
355.2 712.8 l
350.16 707.76 l
345.12 712.8 l
h
S
Q
466.2 108.6 m
/N13 [0 20.04 -20.04 0 0 0] Tf
(0) show
420.361 108.6 m
(2) show
374.401 108.6 m
(4) show
328.561 108.6 m
(6) show
282.602 108.6 m
(8) show
236.762 97.4397 m
(10) show
190.803 97.4397 m
(12) show
144.963 97.4397 m
(14) show
99.0036 97.4397 m
(16) show
488.763 129.36 m
(0)
[66.5968 ] pdfys
(1) show
(6)
[61.0918 ] pdfys
(3) show
(2)
[61.0918 ] pdfys
(4) show
(8)
[61.0918 ] pdfys
(6) show
(4)
[61.0918 ] pdfys
(8) show
(0)
[61.0918 ] pdfys
(9) show
(6)
[55.5707 ] pdfys
(11) show
(2)
[49.9455 ] pdfys
(12) show
(8) show
517.803 424.679 m
(Peek) show
388.56 84.6 m
/N13 -20.04 Tf
(Execution time \(seconds\))
[-13.3784 -10.0319 -11.1542 -10.0319 -11.1542 -5.58304 -4.4605 -11.1542 -11.1542 -5.5228 -5.58304 
-4.4605 -16.7051 -11.1542 -5.5228 -6.68509 -10.0319 -11.1542 -10.0319 -11.1542 -11.1542 -11.1542 
-10.0319 -6.68509 ] pdfxs
n
107.52 370.68 187.92 -223.8 re
1 1 1  setrgbcolor
f
0.119995 w
n
107.4 146.76 188.04 223.92 re
0 0 0  setrgbcolor
S
0.960007 w
n
139.8 159.72 m
139.8 184.68 l
S
0 j
n
135.24 167.64 9 9 re
q
eofill
Q
S
146.4 189.36 m
/N13 [0 20.04 -20.04 0 0 0] Tf
(copy-shift) show
1 j
n
202.44 159.72 m
202.44 184.68 l
S
n
197.4 172.2 m
202.44 177.24 l
207.48 172.2 l
202.44 167.16 l
197.4 172.2 l
h
q
eofill
Q
S
209.04 189.36 m
(modulation) show
n
264.96 159.72 m
264.96 184.68 l
259.92 172.2 m
264.96 177.24 l
270 172.2 l
264.96 167.16 l
259.92 172.2 l
h
S
271.56 189.36 m
(copy-shift + scaling) show
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 387 3499 a(Figure)f(5-7:)43 b(P)m(erformance)34
b(of)e(bu\013er)h(managemen)m(t)h(strategies)f(on)g(a)f(P)m(en)m(tium)j
(3)824 5258 y @beginspecial 72 @llx 63 @lly 737 @urx
522 @ury 2664 @rwi @setspecial
%%BeginDocument: i2-buf.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Copy of Buftest-Final.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050609191051-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 63 737 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 63 moveto 737 63 lineto 737 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 63 665 459 rectclip
[ 0 -1 1 0 8.64 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font BFFHJI+Arial
11 dict begin
/FontName /BFFHJI+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/parenleft 
<10bf31703a9458c05db7ba7a58bcd7a2c9e91ffe666d66d67924090fad2e
914020d503aadf9240d9b1c6a63953b30ccff5415597f5a6c26fdee68dec
bc331692c1b3543bfce7c82b9d704f4fab4f> ND 
/parenright 
<10bf31703a9458c05d79d3ca9c0e25cc2a0b35ceb7dd46fb51adbfd88390
4d8bf636baa28a31c262d1a3078da5849c1c2b98c958c72994f2c3f78ea4
d099458941ceee627e3f06f9f9a16a1d0c> ND 
/plus 
<10bf317031d9337ef184b43be498749534943b6b82dfb721a4f1e6478fee
6c1f4763fef70c3e4be97d7fac720dea7a> ND 
/hyphen 
<10bf31705995db6ed81c8e93e5d1d568f767c41aee4b2647d0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d898870164
1dba6c5defb41d909040a164fdb0a088fefa45fff299b57b0e194251a4a8
b9cf3bc1815fd2c5ba06e651f9d7799098b4541de9c35043282b335f2de1
7def94eec0695fa30f7aaa5574cd9d280a8b4d225396feeeafb4b20c3fcc
9f12e751228b7464328a957a71c1d6fc11ef53a8f692024ab80f5e0d7623
62b42a462a2bf96d5a0db86097e421e5cb8c7d7a0900e6cfd70978f26b60
122332f14359637710d630381bc4f9c629fd5be208af03ab6a69f0ba40b9
a2> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f733e1cd354b07630
213f625adb3ae8b5aa6a51c1055a59d5f55e13f6cd6e1d9a82c372ef809e
0ee864af865bf5dd5f7dae9a46388470afbd9e2e8c39b7ea4fc9ab800d6e
8ab2edc1e3d36e194904842b1236ff6f70f88f5551621a9fa448c516e732
df410d140d211e3fe0becb6d0a54202b80a6977f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/nine 
<10bf317047276c49b9c0f950eed45ca9abbead4f9a337d9778d52804f095
e0959c13860a3969943ef1a12c3ee6c45422162d204a6f0d8cdc2d4e75b5
67f1b01796340d6df61e18c819464639606becbe4894a8ef149ed72054cf
28ee583aeb880d27fff9e2fa582b760e67cbad4f844afdb68b34f85c1a95
a0e8285de8ad462405443a57e05fe3bbb3d2281adc779f19070fa98342c5
c2c2ec79e83ff4803e54082ff002fd18e3d25566d6e2d40f56cc659c4866
84f0030ca9d50085195745fdce82f2f52a9ae7ae7227879d15b08026dcde
5aab87db399da6bb3c6e8f68808a93> ND 
/E 
<10bf317028198094ce8cd275e305c79a7a258ddd928bd9dc896c51a549b4
869242612fc9caa06c2483d03d9996ef> ND 
/P 
<10bf31702a85d5ccd794b0f82fad1df586d5fbd89610cffce961ef0c01e8
0dd41794780f980f6fae77f9030913b26e9faf7c4997be350b070860e734
b58d1af4e1f6fdede1ce393d1a10ecb0df5eb5d5689fc4b0c8ea8e8ea551
86c9a594f8c2368e99f819874a733380254b54725709f6d7ae5e> ND 
/a 
<10bf31705d64e193f685fe465eb14b2f9aa41e82540f554b50893fe63efd
4692fb4fc721a117ec78b6e9515c29fcb60e3aee68a6df1c3946e2cf738d
cda3e29fd055085b4d27d1a9d3bf0581a4eb2a1ee52161275aad552d9745
cae2527ba314929e16b3adcf63fbfe5b600507b479eb6bac8dbf57f9ea61
cf0c38792d951ff40006e32bfab335adbde18dd700c5843625ec18424a1a
470a3d82d751a36d8b4a69f1f5fb08cfc2b94ed2658b49c9985bc490581e
62f221617e1b4bb61c6dcc9e8e61b29e5f74c69c328c213bfddbc217436d
81d1dfe6a13e1cac30c3fa16cb4e265d8db4217e880afbaeb0227e92e214
5534c463a18baaf155fa6678668091a696c5190fde> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f67877e80be643ef8
5a01cff57f62859595ad9c2a1ef16f4c22144c6fc4d200f23642de52d57f
47e47c78a8b6713f5cb6dcd4a475047f70e7386f0baddd9f1c37f1598f60
1bc5b6005acf2115ed4aa52ed6ed621e5045f115e6c8ed146247e81ce086
3c881ef71e6e234403d5f37c528c6ebb0616bbdc05a29ca9d830ed27448f
> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/f 
<10bf31706629561882b73d5b02cebd16b0942e445fbe6e3232b3823cbdb2
63dcf8e5b5846268df4eba2210bb667f400c46f76ed43d4b268aed98cf98
689dff659a93d69b1917cc1e5f49aadef7d4b3b6109675927aeb98089c> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987
c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e
6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e
7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df
3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3
e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b
5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 
/h 
<10bf31703f932f5ecb68c849e33d1fed17c766a03dcb89fd4259247501b2
92adfc2297be69c7091e34ced000096d0ca29850717d0ee8abe567011317
96a4072dab7df40090735d5712990fb13b0847093cc929cc1cd64c87dd80
565b94c081eb> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/k 
<10bf31703f936777fb99983a11586419ce72aadc44a2aa69d19b91e9f126
e6f5aabcb4381bf8bfee294b80bae1d888f1314da01fbe02> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79e55a006319a903b4934e0296676
bb7a5df970714192f29a85860f4cb191aa4b83ebc5b58328ecf58ed9d6ff
d0d3a63dd21733d64450e3abce2a149390b0894b2fb0fce1ee78d045f446
04c31c787e13fdae7e79785a1956f734ed54b976e123646b63ce5bee0b68
59b26a26c2ad993325ab7bd77cdd1be893a8ccd1451854fed772889a0d7d
7791ac97d81ac7> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
/x 
<10bf317060ff640a97f40d52fc73b98a64469b3f084ceb61cbde39a670a8
6bdd66d38d792d8bbe1de58b050ff75d7a6d9ab8ab83f71f1130ffc9a46b
7d934ffb8ab93375fd62539cb08006> ND 
/y 
<10bf317069b1fd7143194d5a8e15b6f90ac84d61c2210d0a37e4b79b318e
a37e94e1eafeb299771b049b5875b1faaabb3f4a1c610b363bb1cc81f3dc
2321559cc23d3a2ce6164f6c1accc00d3218419aedc30e344ac526b1b865
4cc98fc6c8753aea96a41d15ebdbd9a87b663f4abccf42a0073c7de0> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/BFFHJI+Arial findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 56 /eight put
dup 57 /nine put
dup 69 /E put
dup 80 /P put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 121 /y put
dup 160 /space put
dup 173 /hyphen put
pop
%%EndResource
[/N13/BFFHJI+Arial 1 TZ
q
n
396.3 126.24 0.0599976 586.68 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
396.3 126.24 m
396.3 712.92 l
0 0 0 setrgbcolor
S
Q
q
n
335.46 126.24 0.0599976 586.68 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
335.46 126.24 m
335.46 712.92 l
0 0 0 setrgbcolor
S
Q
q
n
91.98 126.24 365.34 586.68 re
106.68 140.88 187.98 223.98 re
eoclip
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
274.68 126.24 m
274.68 712.92 l
213.84 126.24 m
213.84 712.92 l
153.06 126.24 m
153.06 712.92 l
0 0 0 setrgbcolor
S
Q
q
n
92.22 126.24 0.0599976 586.68 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
92.22 126.24 m
92.22 712.92 l
0 0 0 setrgbcolor
S
Q
q
n
72 54 467.04 683.04 re
106.68 140.88 187.98 223.98 re
eoclip
n
1 J
0 j
0.960007 w
10 M
[] 0 d
false setSA
n
92.22 126.24 364.86 586.68 re
0.501999 0.501999 0.501999 setrgbcolor
S
Q
1 J
0 j
0.0599976 w
10 M
[] 0 d
false setSA
n
92.22 126.24 m
457.08 126.24 l
457.08 120 m
457.08 126.24 l
396.3 120 m
396.3 126.24 l
335.46 120 m
335.46 126.24 l
274.68 120 m
274.68 126.24 l
213.84 120 m
213.84 126.24 l
153.06 120 m
153.06 126.24 l
92.22 120 m
92.22 126.24 l
457.08 126.24 m
457.08 712.92 l
463.32 126.24 m
457.08 126.24 l
463.32 162.9 m
457.08 162.9 l
463.32 199.56 m
457.08 199.56 l
463.32 236.22 m
457.08 236.22 l
463.32 272.94 m
457.08 272.94 l
463.32 309.6 m
457.08 309.6 l
463.32 346.26 m
457.08 346.26 l
463.32 382.92 m
457.08 382.92 l
463.32 419.58 m
457.08 419.58 l
463.32 456.24 m
457.08 456.24 l
463.32 492.9 m
457.08 492.9 l
463.32 529.56 m
457.08 529.56 l
463.32 566.28 m
457.08 566.28 l
463.32 602.94 m
457.08 602.94 l
463.32 639.6 m
457.08 639.6 l
463.32 676.26 m
457.08 676.26 l
463.32 712.92 m
457.08 712.92 l
0 0 0 setrgbcolor
S
1 j
0.960007 w
n
455.88 126.24 m
447.36 162.9 l
429.12 199.56 l
417.54 236.22 l
414.54 272.94 l
404.16 309.6 l
385.92 346.26 l
371.34 382.92 l
339.12 419.58 l
326.34 456.24 l
309.3 492.9 l
295.32 529.56 l
272.22 566.28 l
255.18 602.94 l
223.56 639.6 l
198 676.26 l
163.38 712.92 l
455.88 126.24 m
449.76 162.9 l
444.9 199.56 l
438.84 236.22 l
433.98 272.94 l
430.32 309.6 l
424.86 346.26 l
416.94 382.92 l
413.28 419.58 l
408.42 456.24 l
400.5 492.9 l
396.3 529.56 l
388.38 566.28 l
378.66 602.94 l
375 639.6 l
369.54 676.26 l
363.42 712.92 l
455.88 126.24 m
452.22 162.9 l
447.96 199.56 l
444.9 236.22 l
438.24 272.94 l
435.18 309.6 l
424.26 382.92 l
418.14 419.58 l
413.28 456.24 l
401.16 529.56 l
393.24 566.28 l
385.92 602.94 l
378 639.6 l
373.14 676.26 l
367.68 712.92 l
S
0 j
n
451.38 121.74 8.94 8.94 re
q
eofill
Q
S
n
442.86 158.4 8.94 8.94 re
q
eofill
Q
S
n
424.62 195.06 8.94 8.94 re
q
eofill
Q
S
n
413.04 231.72 8.94 8.94 re
q
eofill
Q
S
n
410.04 268.44 8.94 8.94 re
q
eofill
Q
S
n
399.66 305.1 8.94 8.94 re
q
eofill
Q
S
n
381.42 341.76 8.94 8.94 re
q
eofill
Q
S
n
366.84 378.42 8.94 8.94 re
q
eofill
Q
S
n
334.62 415.08 8.94 8.94 re
q
eofill
Q
S
n
321.84 451.74 8.94 8.94 re
q
eofill
Q
S
n
304.8 488.4 8.94 8.94 re
q
eofill
Q
S
n
290.82 525.06 8.94 8.94 re
q
eofill
Q
S
n
267.72 561.78 8.94 8.94 re
q
eofill
Q
S
n
250.68 598.44 8.94 8.94 re
q
eofill
Q
S
n
219.06 635.1 8.94 8.94 re
q
eofill
Q
S
n
193.5 671.76 8.94 8.94 re
q
eofill
Q
S
n
158.88 708.42 8.94 8.94 re
q
eofill
Q
S
1 j
n
450.9 126.24 m
455.88 131.22 l
460.86 126.24 l
455.88 121.26 l
450.9 126.24 l
h
q
eofill
Q
S
n
444.78 162.9 m
449.76 167.88 l
454.74 162.9 l
449.76 157.92 l
444.78 162.9 l
h
q
eofill
Q
S
n
439.92 199.56 m
444.9 204.54 l
449.88 199.56 l
444.9 194.58 l
439.92 199.56 l
h
q
eofill
Q
S
n
433.86 236.22 m
438.84 241.2 l
443.82 236.22 l
438.84 231.24 l
433.86 236.22 l
h
q
eofill
Q
S
n
429 272.94 m
433.98 277.92 l
438.96 272.94 l
433.98 267.96 l
429 272.94 l
h
q
eofill
Q
S
n
425.34 309.6 m
430.32 314.58 l
435.3 309.6 l
430.32 304.62 l
425.34 309.6 l
h
q
eofill
Q
S
n
419.88 346.26 m
424.86 351.24 l
429.84 346.26 l
424.86 341.28 l
419.88 346.26 l
h
q
eofill
Q
S
n
411.96 382.92 m
416.94 387.9 l
421.92 382.92 l
416.94 377.94 l
411.96 382.92 l
h
q
eofill
Q
S
n
408.3 419.58 m
413.28 424.56 l
418.26 419.58 l
413.28 414.6 l
408.3 419.58 l
h
q
eofill
Q
S
n
403.44 456.24 m
408.42 461.22 l
413.4 456.24 l
408.42 451.26 l
403.44 456.24 l
h
q
eofill
Q
S
n
395.52 492.9 m
400.5 497.88 l
405.48 492.9 l
400.5 487.92 l
395.52 492.9 l
h
q
eofill
Q
S
n
391.32 529.56 m
396.3 534.54 l
401.28 529.56 l
396.3 524.58 l
391.32 529.56 l
h
q
eofill
Q
S
n
383.4 566.28 m
388.38 571.26 l
393.36 566.28 l
388.38 561.3 l
383.4 566.28 l
h
q
eofill
Q
S
n
373.68 602.94 m
378.66 607.92 l
383.64 602.94 l
378.66 597.96 l
373.68 602.94 l
h
q
eofill
Q
S
n
370.02 639.6 m
375 644.58 l
379.98 639.6 l
375 634.62 l
370.02 639.6 l
h
q
eofill
Q
S
n
364.56 676.26 m
369.54 681.24 l
374.52 676.26 l
369.54 671.28 l
364.56 676.26 l
h
q
eofill
Q
S
n
358.44 712.92 m
363.42 717.9 l
368.4 712.92 l
363.42 707.94 l
358.44 712.92 l
h
q
eofill
Q
S
q
n
450.36 121.26 11.1 10.56 re
W
n
n
450.9 126.24 m
455.88 131.22 l
460.86 126.24 l
455.88 121.26 l
450.9 126.24 l
h
S
Q
n
447.24 162.9 m
452.22 167.88 l
457.2 162.9 l
452.22 157.92 l
447.24 162.9 l
h
442.98 199.56 m
447.96 204.54 l
452.94 199.56 l
447.96 194.58 l
442.98 199.56 l
h
439.92 236.22 m
444.9 241.2 l
449.88 236.22 l
444.9 231.24 l
439.92 236.22 l
h
433.26 272.94 m
438.24 277.92 l
443.22 272.94 l
438.24 267.96 l
433.26 272.94 l
h
430.2 309.6 m
435.18 314.58 l
440.16 309.6 l
435.18 304.62 l
430.2 309.6 l
h
424.74 346.26 m
429.72 351.24 l
434.7 346.26 l
429.72 341.28 l
424.74 346.26 l
h
419.28 382.92 m
424.26 387.9 l
429.24 382.92 l
424.26 377.94 l
419.28 382.92 l
h
413.16 419.58 m
418.14 424.56 l
423.12 419.58 l
418.14 414.6 l
413.16 419.58 l
h
408.3 456.24 m
413.28 461.22 l
418.26 456.24 l
413.28 451.26 l
408.3 456.24 l
h
402.24 492.9 m
407.22 497.88 l
412.2 492.9 l
407.22 487.92 l
402.24 492.9 l
h
396.18 529.56 m
401.16 534.54 l
406.14 529.56 l
401.16 524.58 l
396.18 529.56 l
h
388.26 566.28 m
393.24 571.26 l
398.22 566.28 l
393.24 561.3 l
388.26 566.28 l
h
380.94 602.94 m
385.92 607.92 l
390.9 602.94 l
385.92 597.96 l
380.94 602.94 l
h
373.02 639.6 m
378 644.58 l
382.98 639.6 l
378 634.62 l
373.02 639.6 l
h
368.16 676.26 m
373.14 681.24 l
378.12 676.26 l
373.14 671.28 l
368.16 676.26 l
h
S
q
n
362.16 707.4 11.1 10.56 re
W
n
n
362.7 712.92 m
367.68 717.9 l
372.66 712.92 l
367.68 707.94 l
362.7 712.92 l
h
S
Q
463.86 99.84 m
/N13 [0 19.98 -19.98 0 0 0] Tf
(0) show
403.081 99.84 m
(1) show
342.242 99.84 m
(2) show
281.462 99.84 m
(3) show
220.623 99.84 m
(4) show
159.844 99.84 m
(5) show
99.0049 99.84 m
(6) show
486.305 120.719 m
(0)
[67.7361 ] pdfys
(1) show
(6)
[62.2296 ] pdfys
(3) show
(2)
[62.2296 ] pdfys
(4) show
(8)
[62.2296 ] pdfys
(6) show
(4)
[62.2296 ] pdfys
(8) show
(0)
[62.2296 ] pdfys
(9) show
(6)
[56.6851 ] pdfys
(11) show
(2)
[51.0927 ] pdfys
(12) show
(8) show
514.984 420.899 m
(Peek) show
386.88 87.24 m
/N13 -19.98 Tf
(Execu) show
(t)
[-5.5584 ] pdfxs
(ion) show
( t)
[-5.58248 -5.5584 ] pdfxs
(ime) show
( )
[-5.58248 ] pdfxs
(\(seconds\)) show
n
106.74 364.8 187.92 -223.86 re
1 1 1  setrgbcolor
f
0.0599976 w
n
106.68 140.88 187.98 223.92 re
0 0 0  setrgbcolor
S
0.960007 w
n
139.14 154.14 m
139.14 179.16 l
S
0 j
n
134.64 162.12 8.94 8.94 re
q
eofill
Q
S
145.8 183.84 m
/N13 [0 19.98 -19.98 0 0 0] Tf
(copy-shift) show
1 j
n
201.78 154.14 m
201.78 179.16 l
S
n
196.8 166.62 m
201.78 171.6 l
206.76 166.62 l
201.78 161.64 l
196.8 166.62 l
h
q
eofill
Q
S
208.44 183.84 m
(modulation) show
n
264.36 154.14 m
264.36 179.16 l
259.38 166.62 m
264.36 171.6 l
269.34 166.62 l
264.36 161.64 l
259.38 166.62 l
h
S
271.02 183.84 m
(copy-shift + scaling) show
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 370 5362 a(Figure)d(5-8:)43 b(P)m(erformance)34
b(of)e(bu\013er)h(managemen)m(t)h(strategies)f(on)g(an)f(Itanium)h(2)
1901 5649 y(52)p eop
%%Page: 53 53
53 52 bop 150 152 a Fs(T)-8 b(able)40 b(5.2:)56 b(The)40
b(b)s(est)g(p)s(erforming)f(bu\013er)h(managemen)m(t)h(strategies)f
(for)f(eac)m(h)h(b)s(enc)m(hmark-)150 273 y(arc)m(hitecture)34
b(pair)f([along)f(with)h(sp)s(eedup)h(o)m(v)m(er)g(CAF+scaling+SR])p
153 417 3595 4 v 151 537 4 121 v 203 501 a Fp(Benc)m(hmark)p
806 537 V 100 w(StrongARM)j(1110)p 1767 537 V 100 w(P)m(en)m(tium)g(3)p
2545 537 V 271 w(Itanium)h(2)p 3745 537 V 153 541 3595
4 v 153 557 V 151 678 4 121 v 186 642 a Fn(fmradio)p
806 678 V 298 w Fs(p)s(eek-scaling)c(5\045)p 1767 678
V 300 w(p)s(eek-scaling)g(3\045)p 2545 678 V 100 w(p)s(eek-scaling,)g
(cut-p)s(eek)f(0\045)p 3745 678 V 153 681 3595 4 v 151
801 4 121 v 186 765 a Fn(filterbank)p 806 801 V 145 w
Fs(default)p 1767 801 V 683 w(default)p 2545 801 V 483
w(default)p 3745 801 V 153 805 3595 4 v 151 925 4 121
v 186 889 a Fn(filterbank2)p 806 925 V 94 w Fs(cut-p)s(eek)g(45\045)p
1767 925 V 404 w(cut-p)s(eek)h(38\045)p 2545 925 V 203
w(cut-p)s(eek)f(36\045)p 3745 925 V 153 928 3595 4 v
151 1049 4 121 v 186 1013 a Fn(ofdm)p 806 1049 V 451
w Fs(p)s(eek-scaling)h(7\045)p 1767 1049 V 300 w(cut-p)s(eek)g(3\045)p
2545 1049 V 252 w(cut-p)s(eek)f(0\045)p 3745 1049 V 153
1052 3595 4 v 150 1453 a Fw(5.3)161 b(Ev)-9 b(aluation)53
b(of)h(P)l(eek-Scaling)d(and)j(Cut-P)l(eek)150 1761 y
Fs(The)47 b(previous)g(section)g(suggests)g(that)e(the)h(b)s(est)h
(implemen)m(tation)g(for)e(a)h(bu\013er)g(that)g(has)150
1941 y(to)41 b(retain)h(liv)m(e)h(items)g(is)g(a)e(cop)m(y-shift)i
(that)f(copies)h(the)f(liv)m(e)h(items)g(to)e(the)h(start)g(of)f
(bu\013er)150 2122 y(infrequen)m(tly)-8 b(.)45 b(Ho)m(w)m(ev)m(er,)32
b(the)e(bu\013er)h(managemen)m(t)f(strategy)h(for)e(the)h(p)s
(erformance)g(n)m(um)m(b)s(ers)150 2303 y(w)m(e)23 b(presen)m(ted)h(in)
f(previous)g(sections)h(is)e(unoptimized)i(cop)m(y-shift.)41
b(In)22 b(this)h(section)g(w)m(e)g(ev)-5 b(aluate)150
2483 y(t)m(w)m(o)28 b(transformations)g(of)f(a)g(stream)h(program)f
(that)g(allo)m(w)h(us)g(to)f(use)i(optimized)g(cop)m(y-shift)f(b)m(y)
150 2664 y(applying)37 b(a)f(simple)i(transformation)e(to)g(the)h
(stream)f(program.)55 b(The)37 b(t)m(w)m(o)g(alternativ)m(es)h(are:)150
2844 y(p)s(eek-scaling)k(and)f(cut-p)s(eek)h(\(see)g(Chapter)f(4)g(for)
f(details\).)69 b(F)-8 b(rom)40 b(elev)m(en)j(b)s(enc)m(hmarks)g(in)150
3025 y(our)33 b(b)s(enc)m(hmark)j(suite,)f(only)f(four)f(b)s(enc)m
(hmarks)j(ha)m(v)m(e)f(\014lters)f(that)g(p)s(eek)g(\(i.e.,)h
Fm(peek)e(>)c(pop)p Fs(\).)150 3205 y(They)34 b(are)f
Fn(fmradio)p Fs(,)h Fn(filterbank)p Fs(,)h Fn(filterbank2)h
Fs(and)c Fn(ofdm)p Fs(.)296 3400 y(T)-8 b(able)31 b(5.2)e(sho)m(ws)j
(the)e(b)s(est)h(bu\013er)f(implemen)m(tation)i(for)d(eac)m(h)i(b)s
(enc)m(hmark)g(and)f(arc)m(hitec-)150 3580 y(ture)35
b(pair)f(along)f(with)i(a)f(sp)s(eedup)i(o)m(v)m(er)f(CAF+scaling+SR)g
(with)g(unoptimized)h(cop)m(y-shift.)150 3761 y(Although)28
b(for)g(some)h(b)s(enc)m(hmarks)h(on)e(some)h(arc)m(hitectures)h(the)f
(p)s(eek-scaling)g(is)g(the)f(b)s(est)h(im-)150 3942
y(plemen)m(tation)k(there)f(are)f(certain)g(risks)i(asso)s(ciated)f
(with)g(the)f(p)s(eek-scaling)i(transformation.)150 4122
y(Replacing)42 b(a)g(\014lter)g(with)g(a)g(scaled)h(v)m(ersion)g
(causes)g(man)m(y)g(lo)s(ops)f(that)f(are)h(placed)h(around)150
4303 y(\014lters)d(b)m(y)h(the)e(fusion)h(\(in)g(order)f(to)g(matc)m(h)
i(rates\))e(to)g(ha)m(v)m(e)i(larger)e(iteration)h(coun)m(ts.)65
b(Due)150 4483 y(to)38 b(our)g(aggressiv)m(e)i(unrolling)f(\(to)f(allo)
m(w)h(scalar)g(replacemen)m(t\))h(total)e(co)s(de)h(size)g(after)f(p)s
(eek-)150 4664 y(scaling)26 b(can)g(b)s(e)g(substan)m(tially)i(larger.)
41 b(Also)26 b(p)s(eek-scaling)h(is)f(cac)m(he)h(una)m(w)m(are)g(in)e
(that)h(it)f(could)150 4844 y(o)m(v)m(erscale)37 b(some)e(actor)f(suc)m
(h)i(that)e(its)h(total)f(input)h(and)g(output)g(pro)s(cessed)h(during)
f(a)f(steady)150 5025 y(state)f(greatly)g(exceed)h(the)f(data)g(cac)m
(he)h(size,)f(th)m(us)h(causing)f(a)g(signi\014can)m(t)h(slo)m(wdo)m
(wn.)296 5219 y(Figure)i(5-9,)f(Figure)h(5-10)e(and)i(Figure)g(5-11)e
(sho)m(w)j(the)f(p)s(erformance)g(impact)h(of)e(adding)150
5400 y(p)s(eek-scaling)g(or)e(cut-p)s(eek)i(to)f(cac)m(he)h(a)m(w)m
(are)f(fusion,)h(execution)g(scaling)g(and)e(scalar)h(replace-)1901
5649 y(53)p eop
%%Page: 54 54
54 53 bop 150 100 a Fs(men)m(t.)69 b(Note)41 b(the)g(signi\014can)m(t)i
(slo)m(wdo)m(wns)g(for)d(some)i(b)s(enc)m(hmarks)h(due)e(to)g(applying)
g(p)s(eek-)150 280 y(scaling.)84 b(The)47 b(exp)s(erimen)m(tal)g(ev)-5
b(aluation)46 b(suggests)i(that)d(cut-p)s(eek)i(is)f(b)s(etter)h(than)e
(p)s(eek-)150 461 y(scaling)37 b(as)g(an)g(optimized)h(bu\013er)f
(implemen)m(tation.)57 b(While)38 b(cut-p)s(eek)f(ma)m(y)h(result)f(in)
g(up)g(to)150 641 y(a)c(17\045)g(slo)m(wdo)m(wn)j(\(for)d
Fn(filterbank)j Fs(on)d(P)m(en)m(tium)i(3\))f(it)f(do)s(es)h(deliv)m
(er)h(signi\014can)m(t)g(sp)s(eedups)150 822 y(for)d(b)s(enc)m(hmarks)j
(that)e(ha)m(v)m(e)h(\014lters)g(with)f(large)g Fm(peek)j
Fs(-)d Fm(pop)f Fs(rate)h(di\013erence)h(\(i.e.,)g(man)m(y)g(liv)m(e)
150 1002 y(items)45 b(need)h(to)e(b)s(e)g(retained)h(in)g(the)f(FIF)m
(O)g(bu\013er\).)79 b(The)46 b(b)s(est)e(sp)s(eedups)j(that)d(cut-p)s
(eek)150 1183 y(deliv)m(ers)38 b(o)m(v)m(er)f(unoptimized)h(cop)m
(y-shift)f(are)f(for)g(the)g Fn(filterbank2)j Fs(b)s(enc)m(hmark)f
(whic)m(h)g(has)150 1364 y(\014lters)43 b(where)h Fm(peek)i
Fs(-)c Fm(pop)g Fs(=)g(99)g(\(a)g(45\045)h(sp)s(eedup)h(on)e
(StrongARM,)h(a)f(38\045)g(sp)s(eedup)i(on)150 1544 y(P)m(en)m(tium)35
b(3)d(and)h(36\045)f(sp)s(eedup)i(on)f(Itanium)g(2\).)296
1725 y(A)39 b(com)m(bination)h(of)f(cac)m(he)h(a)m(w)m(are)g(fusion,)h
(execution)g(scaling,)g(scalar)f(replacemen)m(t)h(and)150
1905 y(cut-p)s(eek)49 b(bu\013er)g(managemen)m(t)h(yields)f(a)f
(257\045)g(sp)s(eedup)i(on)e(the)h(StrongARM,)f(a)g(154\045)150
2086 y(sp)s(eedup)38 b(on)e(the)g(P)m(en)m(tium)i(3,)f(and)f(a)g
(152\045)g(sp)s(eedup)i(on)e(Itanium)h(2)e(compared)i(to)f(unopti-)150
2267 y(mized)e(StreamIt.)1901 5649 y(54)p eop
%%Page: 55 55
55 54 bop 824 1519 a @beginspecial 72 @llx 54 @lly 756
@urx 522 @ury 2664 @rwi @setspecial
%%BeginDocument: arm-peek.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (FinalResults.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050406134212-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 54 756 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 54 moveto 756 54 lineto 756 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 54 684 468 rectclip
[ 0 -1 1 0 18 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font LDILGN+Arial,Bold
11 dict begin
/FontName /LDILGN+Arial,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/parenleft 
<10bf31704d42f1352d5273addc7843b77bf144b304a7fd77e3f1cd5aa3d2
5843290f89d4b92d62022c6e20ff3fc16e851d04be964eb564d3148aa849
38f1853bb671322ebdad12328d10df755ca667b8d3> ND 
/parenright 
<10bf31705e9d53b165f4c2bf4ff0b54a54d2b121b1fb0b0443541ece65a0
a8176044e9807e70fc6500f41e661a6236bf6ceec5b6290ebcabc6b4ed73
20f89e31526599e6da59fa9728238cab6dffd27a90873c1ab1c84fdd> ND 
/I 
<10bf31703d39827325e422c7051b9c34531bb76f5b30bcfd5d> ND 
/S 
<10bf31705d65c0900ab6f1dec202feebed63a391e8923b6171e4bd9a9891
3483f7e18f03f81efeea9ec6e499086f29e069b330e0714349bdbde86411
119421305eb3ccf831a419f2b1b383ae283eef31cd6ab17d35e046224edf
8d334c91b8f3410ce0b754cf25ffc38b1c45008fedcc6fb476440d278757
5aef3183071e560db2a44ec14079a58ceb82879a9f1a9b4e9fcabb16df58
24675d0a68f72691cd9980f0d6d9adcd3e204eaf9c302558bc548ec6583d
8e097a247d483ed52d9f91d7ca0feb01513c1c9a868c4cf1c92a6751c828
3f7c6f8c290f25> ND 
/a 
<10bf31705d64e193f644676913533d4f242b6181368ed1350652c8cb7a6f
e958f60841a88d1088c20f893090b458ae087d16aa8691f1ae44882b0528
d32f3e9827d4294992e18a57652ae7d531994f09c8f3899ddffaad39408b
1529cb6c6e94b8c5c36f6038811d22f304b6662d870ece2886bb4e9f799a
c37faedbf994154341e467f29126a4c489a05c6fef9ee5143f581ea41499
e4aecea25c0711d5cc7b9f01a37e7c0b7e59d5ee83c610a480921138ec2c
f957d766614f6ccaa7ceb4e20fd6f9ac362e8c090b1abb9485ee8c51fdeb
7fc72063a72ab3373c0c6872cf9ba20b3513a2189f8a98cd5a1ee87742> ND 
/c 
<10bf317047276c49998622737f5c0fdd43bdb1b35b15caae7eb2c80264ad
f0005e1c6be7a1a08efb8ae0111a7ff9c16d6d1d6fe6a62b9718659cdf71
ec1fec12732e715c04b3f3a8feb95e8d0f9e002393845281717573027f79
ad8c8ea5dce4faf3243344c83485cc434093ad2e51e73ce85594056ff3cf
8de95991fd7222c7dec9d4bc6113b2> ND 
/d 
<10bf317046e845f3cc81de7a4b8a8a1b3fe3a86a2a74eb0ce101ae9ff9ea
ca0b0d6152bab57b5a1a20451eca1d8bce22d8934498cbe1f50790f6dd2f
9d5a0cab606ce69313bb3e4094a370b8d3856d24b15d355e84c7c481bc80
d07358154d4cee4bac791720fabdb39630005823af359d78acbc47e52e70
c34626a827ae2272bde1c4ecc0359b7e45162ac0> ND 
/e 
<10bf3170599a82aebce2d0d9cd696e2d2232ae83b1d98ff884add96e0282
26fcd2cbd306888649029fbc75f18f771bf21f4d5f53f71cd70d56907fb2
0780ae57f65359db4c49ca929cb86ae96dd2f43742f720ffcefc0d1d3194
c72a55a6bfcf26d975c031741b09b969ea0410af02ae1e13b6c1d337a6b3
96eba6c714d73f9b5d2c2499a66a60f107d1dad4da56ef> ND 
/i 
<10bf317021cc67b2bc312fc6a7ad37016808b8c74342617d801906e8ad23
4c7210637a5c2e2ea339f24d0c> ND 
/l 
<10bf317021cc67b2bc31c11814793bc69b430b318ded78131a> ND 
/m 
<10bf31703bc84f280bc926798acdec2516269e7061028d385a31d255844f
a27fc6b4cdd6f6ba3dfabbbaadef207eca864f3bc97abd9a4f1b978df039
4779a47e3088a94b9cee6d3b276eef4d4950e88ef4a61f93e0b6cde961dc
7ec12956bd3a56a59704c6c5b5a401c3674bc856b6c34f276e7f1bc3056d
89b4805ca25b43894c427bc43b36554ede70476f7ee25d1a6c03ed9f5e40
5c72135defa96ede67a5a8ef5fea114c19a857db71952cb83f4d11> ND 
/n 
<10bf31702094fda2efce4110428b7f86f5f2073cab682ca78d0dc97da563
e3301b964801f725812f64cb67abc1e242f6d8dcd921f1fbf9e05fee92c3
cf16b5bf6083337a59bf026de7fa548a247b8bde12c672aa0ba0501ccc35
fcca587d7573f11dfc32a2ac31516847d39fb276060c6171da> ND 
/o 
<10bf317041f0d680f4930f6b0672f7536ce2eb70a2366463cc9006c590f6
6bbb22b4a706eff4a93c95880cecbbf82d6e623efa721926a49ba75b71ef
97d0e3d8c35761734c54d6d734cb61cf4c4d7050d90fa115600d26f47050
dfb8739452ed0059ffdca41c137f0b71425a690a4da83dcf8abcf17c206e
c5eff5dd0d7b85b999c37123dfb769cd075b5a162cb33d72426c> ND 
/p 
<10bf31703d364b58d236360a3109f388a509dc9806d07d5bc445174ad942
7c9600246e60ea62f48529a60136f844b413bd7834b903aeb5ec3a65352a
708c943d46c286b502a39b69aec9bc15c2a1798b51edb224db01e94ff1eb
dbf1e97f7f79a2c4ac7f7ccc29f5a1c29ed2d05ed3e5ff111a8b097f8d17
72a84cce0bcd066f78e2de698d38b96a99a99313e7a6639d82> ND 
/r 
<10bf31703f93f6c49808fdd8544fecb184adc28a087f99360dbfdf8b0375
9b819135c930698375e13c34125773b22d251f861dc05246608ab0d559df
442670f87f9615eabcaf25ab4b613b44e059b394bfb9> ND 
/t 
<10bf3170688ce4cb1d2f5bf487137bec8ecb87b4485146ce17824d997ac5
95ab4afb2e80a065a802ee3f010bb37eac91d0f6ed42677aa9dde7e1ad01
769b95b971dec6d1669588801bb2fb04109e79e9771f019783524f2f268e
35dce126a03e55d028a6951cc9b40e649071f577> ND 
/u 
<10bf317022f1ca2cc2a22c3ff97c1232bc55839582d9c5ff7e86bfa4508d
4c6c2a32b8a91c23bc7417819a6d61bb6c4ffa588f9ea417cfc189ff4ca4
86806cfbdc09b2f0ef54b54c53e50d4afcfcb2df030b19aa33138b0a422d
d58054461b41c9166e86f2fb1f6b43052b68dc3202c1cc> ND 
/x 
<10bf3170638bf24b9ac01ae6f3f5ae817231c94093d6b928339de9a1f6d7
c03f6b6f7762b561ab36e6e40fc21093f89e72e352dadf27c949562edd95
94> ND 
/z 
<10bf31706ea98d84f3c625a1c3450f57f0cb972d7b4342feb5483a382b8c
546af3200ec3102c63cd8ee85ce02beb2b2e7a35b4d49541c8670b9156e1
3f2683e61a914abf9dc96f> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/LDILGN+Arial,Bold findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 73 /I put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 122 /z put
dup 160 /space put
pop
%%EndResource
[/N15/LDILGN+Arial,Bold 1 TZ
%%BeginResource: font LDILFL+Arial
11 dict begin
/FontName /LDILFL+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/plus 
<10bf317031d9337ef184b43be498749534943b6b82dfb721a4f1e6478fee
6c1f4763fef70c3e4be97d7fac720dea7a> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac54cb2fa3a278c1c5e8b8e0184d
7cbeaa35d4ddaa02f35f83f589e53f609414a1e8dd86a2916a5d28875546
282a3c313b2605b04804> ND 
/C 
<10bf31704fab892742fc2c6be78329c0825c84c392f40122153ca9a91165
96e2ea405597ca7f292098a14c92b8766b957d29536d6a74922bce6efa67
d7fa67d47a8ae997e897ea42f1e923c09a3ad5b1aa2186622859ef03a213
f7c26727c45c24d289e1bf8fa6a719352242839e565e8af9cb5c48758232
20530e01b09cb28b590a86024fb341940ed5d19a7e036981d38ceef64334
a577636f4f149330a371e1> ND 
/F 
<10bf31702f7c4b31b7f92f61f70a9032d1addef58c81f5b8fed9651d8c00
81acb06eda84b504e7> ND 
/R 
<10bf31702819c97bfff21764697e50774ba74072e0daf25a84b5ab81ce67
f36424a8f4f31afdf4de9e5912f7a5ba0ce90948b990647285d2500d6d57
ef6e940fb321e739e33f71f0994fb0b96bf3e18815066ca201f1578cce2a
71a0a57bc87021521bfe1b691fde6e9063a575e47bf725cfd1c0afa40b0c
a839a6c28bfd0b7f0f7469b4cf16ee3c7a54706ea2da49ba1db858f3c370
3042b60d2181c6c1afb0bef5eb> ND 
/S 
<10bf31704ab370a8a6c235279ed6c2ccfc716fa1295d141c34dd24f95c73
82e11c724a74e86021432ff58ab0f9585559c2cc7a3fe0720eadda5eee3e
cb055c76e8d7f22cfddbcfbe4ee1a562282b307d86efef90d9a8c71c96ab
9543712fa6240508ea1f38536804c47dfcc21f777c873fc11b7e20f7a228
b35e8d75f100a7da6082feb065d087853344b8bf00df7291cc74173d8c17
2964ca635a4e981f1604dc10d454f452e70073d386bcbe3ed4c09e72aa02
e7eb1e382ccb2fe70e1e9e3084e7824b4261723bffe42f4fc72d36ddcdd9
e884d10e18a55004b6149a9b0c7ead4b42afa8906a80deea322a930f4d91
ac35a6e6186e5d082f09> ND 
/a 
<10bf31705d64e193f685fe465eb14b2f9aa41e82540f554b50893fe63efd
4692fb4fc721a117ec78b6e9515c29fcb60e3aee68a6df1c3946e2cf738d
cda3e29fd055085b4d27d1a9d3bf0581a4eb2a1ee52161275aad552d9745
cae2527ba314929e16b3adcf63fbfe5b600507b479eb6bac8dbf57f9ea61
cf0c38792d951ff40006e32bfab335adbde18dd700c5843625ec18424a1a
470a3d82d751a36d8b4a69f1f5fb08cfc2b94ed2658b49c9985bc490581e
62f221617e1b4bb61c6dcc9e8e61b29e5f74c69c328c213bfddbc217436d
81d1dfe6a13e1cac30c3fa16cb4e265d8db4217e880afbaeb0227e92e214
5534c463a18baaf155fa6678668091a696c5190fde> ND 
/b 
<10bf31703e65fd7e1217c9f29c64bb1b9e17851bf25dd0466fa484e27564
2ef62da05fc0e561425aa7c0cf759f2df2fed9f5cab4e563d9d485ca6e49
6a23023cc7d5336a38ed163f6d25eac0416c891913363ad8aab5312feed7
de0b0bbcc0db8b66958d96174480f5040af2cfb1590a9410022fc6398cb1
d4435f6325a11aad4c77347983eb4748b4ada02263a3> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f67877e80be643ef8
5a01cff57f62859595ad9c2a1ef16f4c22144c6fc4d200f23642de52d57f
47e47c78a8b6713f5cb6dcd4a475047f70e7386f0baddd9f1c37f1598f60
1bc5b6005acf2115ed4aa52ed6ed621e5045f115e6c8ed146247e81ce086
3c881ef71e6e234403d5f37c528c6ebb0616bbdc05a29ca9d830ed27448f
> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/f 
<10bf31706629561882b73d5b02cebd16b0942e445fbe6e3232b3823cbdb2
63dcf8e5b5846268df4eba2210bb667f400c46f76ed43d4b268aed98cf98
689dff659a93d69b1917cc1e5f49aadef7d4b3b6109675927aeb98089c> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987
c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e
6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e
7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df
3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3
e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b
5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/k 
<10bf31703f936777fb99983a11586419ce72aadc44a2aa69d19b91e9f126
e6f5aabcb4381bf8bfee294b80bae1d888f1314da01fbe02> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79e55a006319a903b4934e0296676
bb7a5df970714192f29a85860f4cb191aa4b83ebc5b58328ecf58ed9d6ff
d0d3a63dd21733d64450e3abce2a149390b0894b2fb0fce1ee78d045f446
04c31c787e13fdae7e79785a1956f734ed54b976e123646b63ce5bee0b68
59b26a26c2ad993325ab7bd77cdd1be893a8ccd1451854fed772889a0d7d
7791ac97d81ac7> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3483c7b936ed6e6cf91cffcbd
a815b8df60ae150c20432c17a46c0682480f6226770a8905e960aec3fe5e
934f4cc994b08abf0fc9d432168086e4> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/LDILFL+Arial findfont /Encoding get
dup 0 /.notdef put
dup 43 /plus put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
dup 65 /A put
dup 67 /C put
dup 70 /F put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
pop
%%EndResource
[/N13/LDILFL+Arial 1 TZ
q
n
413.64 150.3 0.0599976 582.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
413.64 150.3 m
413.64 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
332.88 150.3 0.0599976 582.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
332.88 150.3 m
332.88 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
252.18 150.3 0.0599976 582.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
252.18 150.3 m
252.18 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
90.48 150.3 404.1 582.72 re
109.86 174.12 127.02 283.02 re
eoclip
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
171.42 150.3 m
171.42 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
90.72 150.3 0.0599976 582.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
90.72 150.3 m
90.72 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
72 54 467.04 683.04 re
109.86 174.12 127.02 283.02 re
eoclip
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
90.72 150.3 403.62 582.72 re
0 0 0 setrgbcolor
S
Q
1 J
0 j
0.960007 w
10 M
[] 0 d
false setSA
n
453.3 174.54 41.04 32.34 re
q
0.753006 0.753006 0.753006 setrgbcolor
eofill
Q
0 0 0 setrgbcolor
S
n
399.9 320.22 94.44 32.34 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
367.44 465.9 126.9 32.34 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
90.72 611.58 403.62 32.34 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
455.1 206.94 39.24 32.28 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
389.64 352.62 104.7 32.28 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
391.26 498.3 103.08 32.28 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
118.14 643.98 376.2 32.28 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
452.22 239.28 42.12 32.34 re
q
eofill
Q
S
n
390.06 384.96 104.28 32.34 re
q
eofill
Q
S
n
407.1 530.64 87.24 32.34 re
q
eofill
Q
S
n
90.72 676.32 403.62 32.34 re
q
eofill
Q
S
0.0599976 w
n
90.72 150.3 m
494.34 150.3 l
494.34 144.66 m
494.34 150.3 l
413.64 144.66 m
413.64 150.3 l
332.88 144.66 m
332.88 150.3 l
252.18 144.66 m
252.18 150.3 l
171.42 144.66 m
171.42 150.3 l
90.72 144.66 m
90.72 150.3 l
494.34 150.3 m
494.34 733.02 l
499.98 150.3 m
494.34 150.3 l
499.98 295.98 m
494.34 295.98 l
499.98 441.66 m
494.34 441.66 l
499.98 587.34 m
494.34 587.34 l
499.98 733.02 m
494.34 733.02 l
S
500.4 126.48 m
/N13 [0 18 -18 0 0 0] Tf
(0) show
419.7 111.481 m
(0.2) show
338.94 111.481 m
(0.4) show
258.24 111.481 m
(0.6) show
177.48 111.481 m
(0.8) show
96.7804 126.48 m
(1) show
526.381 193.139 m
(fmradi) show
(o)
[89.127 ] pdfys
(filterban) show
(k)
[76.6638 ] pdfys
(filterbank) show
(2)
[94.1796 ] pdfys
(ofdm) show
346.98 75.96 m
/N15 -15.78 Tf
(execution)
[-8.77994 -8.77994 -8.77994 -8.77994 -9.64772 -5.26088 -4.3931 -9.64772 -9.64772 ] pdfxs
( ) show
(time)
[-5.26088 -4.3931 -14.0346 -8.77994 ] pdfxs
430.8 95.0997 m
(\(normalized)
[-5.26088 -9.64772 -9.64772 -6.14456 -14.0346 -8.77994 -4.3931 -4.3931 -7.89626 -8.77994 -9.64772 
] pdfxs
( ) show
(to)
[-5.26088 -9.64772 ] pdfxs
( ) show
(unoptimized)
[-9.64772 -9.64772 -9.64772 -9.64772 -5.26088 -4.3931 -14.0346 -4.3931 -7.89626 -8.77994 -9.64772 
] pdfxs
( ) show
(StreamIt\))
[-10.5314 -5.26088 -6.14456 -8.77994 -8.77994 -14.0346 -4.3931 -5.26088 -5.26088 ] pdfxs
n
109.92 457.08 126.96 -282.9 re
1 1 1  setrgbcolor
f
n
109.86 174.12 127.02 282.96 re
0 0 0  setrgbcolor
S
0.960007 w
n
126.36 194.28 11.22 11.22 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
138.06 209.82 m
/N13 [0 18 -18 0 0 0] Tf
(CAF+scaling+SR) show
n
168.66 194.28 11.22 11.22 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
180.36 209.82 m
(CAF+scaling+SR+peekscale) show
n
210.96 194.28 11.22 11.22 re
q
eofill
Q
S
222.66 209.82 m
(CAF+scaling+SR+cutpeek) show
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 311 1623 a Fs(Figure)33 b(5-9:)42 b(P)m(erformance)34
b(of)e(p)s(eek-scaling)i(and)f(cut-p)s(eek)g(on)g(a)f(StrongARM)h(1110)
824 3369 y @beginspecial 72 @llx 54 @lly 756 @urx 522
@ury 2664 @rwi @setspecial
%%BeginDocument: p3-peek.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (FinalResults.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050406134241-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 54 756 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 54 moveto 756 54 lineto 756 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 54 684 468 rectclip
[ 0 -1 1 0 18 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font LDPNDG+Arial,Bold
11 dict begin
/FontName /LDPNDG+Arial,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/parenleft 
<10bf31704d42f1352d5273addc7843b77bf144b304a7fd77e3f1cd5aa3d2
5843290f89d4b92d62022c6e20ff3fc16e851d04be964eb564d3148aa849
38f1853bb671322ebdad12328d10df755ca667b8d3> ND 
/parenright 
<10bf31705e9d53b165f4c2bf4ff0b54a54d2b121b1fb0b0443541ece65a0
a8176044e9807e70fc6500f41e661a6236bf6ceec5b6290ebcabc6b4ed73
20f89e31526599e6da59fa9728238cab6dffd27a90873c1ab1c84fdd> ND 
/I 
<10bf31703d39827325e422c7051b9c34531bb76f5b30bcfd5d> ND 
/S 
<10bf31705d65c0900ab6f1dec202feebed63a391e8923b6171e4bd9a9891
3483f7e18f03f81efeea9ec6e499086f29e069b330e0714349bdbde86411
119421305eb3ccf831a419f2b1b383ae283eef31cd6ab17d35e046224edf
8d334c91b8f3410ce0b754cf25ffc38b1c45008fedcc6fb476440d278757
5aef3183071e560db2a44ec14079a58ceb82879a9f1a9b4e9fcabb16df58
24675d0a68f72691cd9980f0d6d9adcd3e204eaf9c302558bc548ec6583d
8e097a247d483ed52d9f91d7ca0feb01513c1c9a868c4cf1c92a6751c828
3f7c6f8c290f25> ND 
/a 
<10bf31705d64e193f644676913533d4f242b6181368ed1350652c8cb7a6f
e958f60841a88d1088c20f893090b458ae087d16aa8691f1ae44882b0528
d32f3e9827d4294992e18a57652ae7d531994f09c8f3899ddffaad39408b
1529cb6c6e94b8c5c36f6038811d22f304b6662d870ece2886bb4e9f799a
c37faedbf994154341e467f29126a4c489a05c6fef9ee5143f581ea41499
e4aecea25c0711d5cc7b9f01a37e7c0b7e59d5ee83c610a480921138ec2c
f957d766614f6ccaa7ceb4e20fd6f9ac362e8c090b1abb9485ee8c51fdeb
7fc72063a72ab3373c0c6872cf9ba20b3513a2189f8a98cd5a1ee87742> ND 
/c 
<10bf317047276c49998622737f5c0fdd43bdb1b35b15caae7eb2c80264ad
f0005e1c6be7a1a08efb8ae0111a7ff9c16d6d1d6fe6a62b9718659cdf71
ec1fec12732e715c04b3f3a8feb95e8d0f9e002393845281717573027f79
ad8c8ea5dce4faf3243344c83485cc434093ad2e51e73ce85594056ff3cf
8de95991fd7222c7dec9d4bc6113b2> ND 
/d 
<10bf317046e845f3cc81de7a4b8a8a1b3fe3a86a2a74eb0ce101ae9ff9ea
ca0b0d6152bab57b5a1a20451eca1d8bce22d8934498cbe1f50790f6dd2f
9d5a0cab606ce69313bb3e4094a370b8d3856d24b15d355e84c7c481bc80
d07358154d4cee4bac791720fabdb39630005823af359d78acbc47e52e70
c34626a827ae2272bde1c4ecc0359b7e45162ac0> ND 
/e 
<10bf3170599a82aebce2d0d9cd696e2d2232ae83b1d98ff884add96e0282
26fcd2cbd306888649029fbc75f18f771bf21f4d5f53f71cd70d56907fb2
0780ae57f65359db4c49ca929cb86ae96dd2f43742f720ffcefc0d1d3194
c72a55a6bfcf26d975c031741b09b969ea0410af02ae1e13b6c1d337a6b3
96eba6c714d73f9b5d2c2499a66a60f107d1dad4da56ef> ND 
/i 
<10bf317021cc67b2bc312fc6a7ad37016808b8c74342617d801906e8ad23
4c7210637a5c2e2ea339f24d0c> ND 
/l 
<10bf317021cc67b2bc31c11814793bc69b430b318ded78131a> ND 
/m 
<10bf31703bc84f280bc926798acdec2516269e7061028d385a31d255844f
a27fc6b4cdd6f6ba3dfabbbaadef207eca864f3bc97abd9a4f1b978df039
4779a47e3088a94b9cee6d3b276eef4d4950e88ef4a61f93e0b6cde961dc
7ec12956bd3a56a59704c6c5b5a401c3674bc856b6c34f276e7f1bc3056d
89b4805ca25b43894c427bc43b36554ede70476f7ee25d1a6c03ed9f5e40
5c72135defa96ede67a5a8ef5fea114c19a857db71952cb83f4d11> ND 
/n 
<10bf31702094fda2efce4110428b7f86f5f2073cab682ca78d0dc97da563
e3301b964801f725812f64cb67abc1e242f6d8dcd921f1fbf9e05fee92c3
cf16b5bf6083337a59bf026de7fa548a247b8bde12c672aa0ba0501ccc35
fcca587d7573f11dfc32a2ac31516847d39fb276060c6171da> ND 
/o 
<10bf317041f0d680f4930f6b0672f7536ce2eb70a2366463cc9006c590f6
6bbb22b4a706eff4a93c95880cecbbf82d6e623efa721926a49ba75b71ef
97d0e3d8c35761734c54d6d734cb61cf4c4d7050d90fa115600d26f47050
dfb8739452ed0059ffdca41c137f0b71425a690a4da83dcf8abcf17c206e
c5eff5dd0d7b85b999c37123dfb769cd075b5a162cb33d72426c> ND 
/p 
<10bf31703d364b58d236360a3109f388a509dc9806d07d5bc445174ad942
7c9600246e60ea62f48529a60136f844b413bd7834b903aeb5ec3a65352a
708c943d46c286b502a39b69aec9bc15c2a1798b51edb224db01e94ff1eb
dbf1e97f7f79a2c4ac7f7ccc29f5a1c29ed2d05ed3e5ff111a8b097f8d17
72a84cce0bcd066f78e2de698d38b96a99a99313e7a6639d82> ND 
/r 
<10bf31703f93f6c49808fdd8544fecb184adc28a087f99360dbfdf8b0375
9b819135c930698375e13c34125773b22d251f861dc05246608ab0d559df
442670f87f9615eabcaf25ab4b613b44e059b394bfb9> ND 
/t 
<10bf3170688ce4cb1d2f5bf487137bec8ecb87b4485146ce17824d997ac5
95ab4afb2e80a065a802ee3f010bb37eac91d0f6ed42677aa9dde7e1ad01
769b95b971dec6d1669588801bb2fb04109e79e9771f019783524f2f268e
35dce126a03e55d028a6951cc9b40e649071f577> ND 
/u 
<10bf317022f1ca2cc2a22c3ff97c1232bc55839582d9c5ff7e86bfa4508d
4c6c2a32b8a91c23bc7417819a6d61bb6c4ffa588f9ea417cfc189ff4ca4
86806cfbdc09b2f0ef54b54c53e50d4afcfcb2df030b19aa33138b0a422d
d58054461b41c9166e86f2fb1f6b43052b68dc3202c1cc> ND 
/x 
<10bf3170638bf24b9ac01ae6f3f5ae817231c94093d6b928339de9a1f6d7
c03f6b6f7762b561ab36e6e40fc21093f89e72e352dadf27c949562edd95
94> ND 
/z 
<10bf31706ea98d84f3c625a1c3450f57f0cb972d7b4342feb5483a382b8c
546af3200ec3102c63cd8ee85ce02beb2b2e7a35b4d49541c8670b9156e1
3f2683e61a914abf9dc96f> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/LDPNDG+Arial,Bold findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 73 /I put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 122 /z put
dup 160 /space put
pop
%%EndResource
[/N15/LDPNDG+Arial,Bold 1 TZ
%%BeginResource: font LDPNCE+Arial
11 dict begin
/FontName /LDPNCE+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/plus 
<10bf317031d9337ef184b43be498749534943b6b82dfb721a4f1e6478fee
6c1f4763fef70c3e4be97d7fac720dea7a> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac54cb2fa3a278c1c5e8b8e0184d
7cbeaa35d4ddaa02f35f83f589e53f609414a1e8dd86a2916a5d28875546
282a3c313b2605b04804> ND 
/C 
<10bf31704fab892742fc2c6be78329c0825c84c392f40122153ca9a91165
96e2ea405597ca7f292098a14c92b8766b957d29536d6a74922bce6efa67
d7fa67d47a8ae997e897ea42f1e923c09a3ad5b1aa2186622859ef03a213
f7c26727c45c24d289e1bf8fa6a719352242839e565e8af9cb5c48758232
20530e01b09cb28b590a86024fb341940ed5d19a7e036981d38ceef64334
a577636f4f149330a371e1> ND 
/F 
<10bf31702f7c4b31b7f92f61f70a9032d1addef58c81f5b8fed9651d8c00
81acb06eda84b504e7> ND 
/R 
<10bf31702819c97bfff21764697e50774ba74072e0daf25a84b5ab81ce67
f36424a8f4f31afdf4de9e5912f7a5ba0ce90948b990647285d2500d6d57
ef6e940fb321e739e33f71f0994fb0b96bf3e18815066ca201f1578cce2a
71a0a57bc87021521bfe1b691fde6e9063a575e47bf725cfd1c0afa40b0c
a839a6c28bfd0b7f0f7469b4cf16ee3c7a54706ea2da49ba1db858f3c370
3042b60d2181c6c1afb0bef5eb> ND 
/S 
<10bf31704ab370a8a6c235279ed6c2ccfc716fa1295d141c34dd24f95c73
82e11c724a74e86021432ff58ab0f9585559c2cc7a3fe0720eadda5eee3e
cb055c76e8d7f22cfddbcfbe4ee1a562282b307d86efef90d9a8c71c96ab
9543712fa6240508ea1f38536804c47dfcc21f777c873fc11b7e20f7a228
b35e8d75f100a7da6082feb065d087853344b8bf00df7291cc74173d8c17
2964ca635a4e981f1604dc10d454f452e70073d386bcbe3ed4c09e72aa02
e7eb1e382ccb2fe70e1e9e3084e7824b4261723bffe42f4fc72d36ddcdd9
e884d10e18a55004b6149a9b0c7ead4b42afa8906a80deea322a930f4d91
ac35a6e6186e5d082f09> ND 
/a 
<10bf31705d64e193f685fe465eb14b2f9aa41e82540f554b50893fe63efd
4692fb4fc721a117ec78b6e9515c29fcb60e3aee68a6df1c3946e2cf738d
cda3e29fd055085b4d27d1a9d3bf0581a4eb2a1ee52161275aad552d9745
cae2527ba314929e16b3adcf63fbfe5b600507b479eb6bac8dbf57f9ea61
cf0c38792d951ff40006e32bfab335adbde18dd700c5843625ec18424a1a
470a3d82d751a36d8b4a69f1f5fb08cfc2b94ed2658b49c9985bc490581e
62f221617e1b4bb61c6dcc9e8e61b29e5f74c69c328c213bfddbc217436d
81d1dfe6a13e1cac30c3fa16cb4e265d8db4217e880afbaeb0227e92e214
5534c463a18baaf155fa6678668091a696c5190fde> ND 
/b 
<10bf31703e65fd7e1217c9f29c64bb1b9e17851bf25dd0466fa484e27564
2ef62da05fc0e561425aa7c0cf759f2df2fed9f5cab4e563d9d485ca6e49
6a23023cc7d5336a38ed163f6d25eac0416c891913363ad8aab5312feed7
de0b0bbcc0db8b66958d96174480f5040af2cfb1590a9410022fc6398cb1
d4435f6325a11aad4c77347983eb4748b4ada02263a3> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f67877e80be643ef8
5a01cff57f62859595ad9c2a1ef16f4c22144c6fc4d200f23642de52d57f
47e47c78a8b6713f5cb6dcd4a475047f70e7386f0baddd9f1c37f1598f60
1bc5b6005acf2115ed4aa52ed6ed621e5045f115e6c8ed146247e81ce086
3c881ef71e6e234403d5f37c528c6ebb0616bbdc05a29ca9d830ed27448f
> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/f 
<10bf31706629561882b73d5b02cebd16b0942e445fbe6e3232b3823cbdb2
63dcf8e5b5846268df4eba2210bb667f400c46f76ed43d4b268aed98cf98
689dff659a93d69b1917cc1e5f49aadef7d4b3b6109675927aeb98089c> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987
c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e
6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e
7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df
3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3
e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b
5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/k 
<10bf31703f936777fb99983a11586419ce72aadc44a2aa69d19b91e9f126
e6f5aabcb4381bf8bfee294b80bae1d888f1314da01fbe02> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79e55a006319a903b4934e0296676
bb7a5df970714192f29a85860f4cb191aa4b83ebc5b58328ecf58ed9d6ff
d0d3a63dd21733d64450e3abce2a149390b0894b2fb0fce1ee78d045f446
04c31c787e13fdae7e79785a1956f734ed54b976e123646b63ce5bee0b68
59b26a26c2ad993325ab7bd77cdd1be893a8ccd1451854fed772889a0d7d
7791ac97d81ac7> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3483c7b936ed6e6cf91cffcbd
a815b8df60ae150c20432c17a46c0682480f6226770a8905e960aec3fe5e
934f4cc994b08abf0fc9d432168086e4> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/LDPNCE+Arial findfont /Encoding get
dup 0 /.notdef put
dup 43 /plus put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
dup 65 /A put
dup 67 /C put
dup 70 /F put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
pop
%%EndResource
[/N13/LDPNCE+Arial 1 TZ
q
n
449.52 150.3 0.0599976 582.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
449.52 150.3 m
449.52 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
404.64 150.3 0.0599976 582.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
404.64 150.3 m
404.64 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
359.82 150.3 0.0599976 582.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
359.82 150.3 m
359.82 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
314.94 150.3 0.0599976 582.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
314.94 150.3 m
314.94 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
270.12 150.3 0.0599976 582.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
270.12 150.3 m
270.12 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
90.48 150.3 404.1 582.72 re
109.86 174.12 127.02 283.02 re
eoclip
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
225.24 150.3 m
225.24 733.02 l
180.42 150.3 m
180.42 733.02 l
135.54 150.3 m
135.54 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
90.72 150.3 0.0599976 582.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
90.72 150.3 m
90.72 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
72 54 467.04 683.04 re
109.86 174.12 127.02 283.02 re
eoclip
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
90.72 150.3 403.62 582.72 re
0 0 0 setrgbcolor
S
Q
1 J
0 j
0.960007 w
10 M
[] 0 d
false setSA
n
421.98 174.54 72.36 32.34 re
q
0.753006 0.753006 0.753006 setrgbcolor
eofill
Q
0 0 0 setrgbcolor
S
n
387.36 320.22 106.98 32.34 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
329.52 465.9 164.82 32.34 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
282.84 611.58 211.5 32.34 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
424.02 206.94 70.32 32.28 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
314.16 352.62 180.18 32.28 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
358.26 498.3 136.08 32.28 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
124.2 643.98 370.14 32.28 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
423.18 239.28 71.16 32.34 re
q
eofill
Q
S
n
365.94 384.96 128.4 32.34 re
q
eofill
Q
S
n
373.62 530.64 120.72 32.34 re
q
eofill
Q
S
n
289.86 676.32 204.48 32.34 re
q
eofill
Q
S
0.0599976 w
n
90.72 150.3 m
494.34 150.3 l
494.34 144.66 m
494.34 150.3 l
449.52 144.66 m
449.52 150.3 l
404.64 144.66 m
404.64 150.3 l
359.82 144.66 m
359.82 150.3 l
314.94 144.66 m
314.94 150.3 l
270.12 144.66 m
270.12 150.3 l
225.24 144.66 m
225.24 150.3 l
180.42 144.66 m
180.42 150.3 l
135.54 144.66 m
135.54 150.3 l
90.72 144.66 m
90.72 150.3 l
494.34 150.3 m
494.34 733.02 l
499.98 150.3 m
494.34 150.3 l
499.98 295.98 m
494.34 295.98 l
499.98 441.66 m
494.34 441.66 l
499.98 587.34 m
494.34 587.34 l
499.98 733.02 m
494.34 733.02 l
S
500.4 126.48 m
/N13 [0 18 -18 0 0 0] Tf
(0) show
455.58 111.481 m
(0.2) show
410.7 111.481 m
(0.4) show
365.88 111.481 m
(0.6) show
321.001 111.481 m
(0.8) show
276.181 126.48 m
(1) show
231.301 111.481 m
(1.2) show
186.481 111.481 m
(1.4) show
141.602 111.481 m
(1.6) show
96.7818 111.481 m
(1.8) show
526.382 193.141 m
(fmradi) show
(o)
[89.127 ] pdfys
(filterban) show
(k)
[76.6638 ] pdfys
(filterbank) show
(2)
[94.1796 ] pdfys
(ofdm) show
346.98 75.96 m
/N15 -15.78 Tf
(execution)
[-8.77994 -8.77994 -8.77994 -8.77994 -9.64772 -5.26088 -4.3931 -9.64772 -9.64772 ] pdfxs
( ) show
(time)
[-5.26088 -4.3931 -14.0346 -8.77994 ] pdfxs
430.8 95.0997 m
(\(normalized)
[-5.26088 -9.64772 -9.64772 -6.14456 -14.0346 -8.77994 -4.3931 -4.3931 -7.89626 -8.77994 -9.64772 
] pdfxs
( ) show
(to)
[-5.26088 -9.64772 ] pdfxs
( ) show
(unoptimized)
[-9.64772 -9.64772 -9.64772 -9.64772 -5.26088 -4.3931 -14.0346 -4.3931 -7.89626 -8.77994 -9.64772 
] pdfxs
( ) show
(StreamIt\))
[-10.5314 -5.26088 -6.14456 -8.77994 -8.77994 -14.0346 -4.3931 -5.26088 -5.26088 ] pdfxs
n
109.92 457.08 126.96 -282.9 re
1 1 1  setrgbcolor
f
n
109.86 174.12 127.02 282.96 re
0 0 0  setrgbcolor
S
0.960007 w
n
126.36 194.28 11.22 11.22 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
138.06 209.82 m
/N13 [0 18 -18 0 0 0] Tf
(CAF+scaling+SR) show
n
168.66 194.28 11.22 11.22 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
180.36 209.82 m
(CAF+scaling+SR+peekscale) show
n
210.96 194.28 11.22 11.22 re
q
eofill
Q
S
222.66 209.82 m
(CAF+scaling+SR+cutpeek) show
0 J
1 j
2.5 w
n
269.04 150.84 m
269.7 732.84 l
0.0039978 0.0039978 0.0039978  setrgbcolor
S
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 438 3472 a(Figure)g(5-10:)42 b(P)m(erformance)34
b(of)e(p)s(eek-scaling)i(and)f(cut-p)s(eek)h(on)e(a)g(P)m(en)m(tium)j
(3)824 5218 y @beginspecial 72 @llx 54 @lly 756 @urx
522 @ury 2664 @rwi @setspecial
%%BeginDocument: i2-peek.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (FinalResults.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050406134310-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 54 756 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 54 moveto 756 54 lineto 756 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 54 684 468 rectclip
[ 0 -1 1 0 18 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font LEGOFD+Arial,Bold
11 dict begin
/FontName /LEGOFD+Arial,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/parenleft 
<10bf31704d42f1352d5273addc7843b77bf144b304a7fd77e3f1cd5aa3d2
5843290f89d4b92d62022c6e20ff3fc16e851d04be964eb564d3148aa849
38f1853bb671322ebdad12328d10df755ca667b8d3> ND 
/parenright 
<10bf31705e9d53b165f4c2bf4ff0b54a54d2b121b1fb0b0443541ece65a0
a8176044e9807e70fc6500f41e661a6236bf6ceec5b6290ebcabc6b4ed73
20f89e31526599e6da59fa9728238cab6dffd27a90873c1ab1c84fdd> ND 
/I 
<10bf31703d39827325e422c7051b9c34531bb76f5b30bcfd5d> ND 
/S 
<10bf31705d65c0900ab6f1dec202feebed63a391e8923b6171e4bd9a9891
3483f7e18f03f81efeea9ec6e499086f29e069b330e0714349bdbde86411
119421305eb3ccf831a419f2b1b383ae283eef31cd6ab17d35e046224edf
8d334c91b8f3410ce0b754cf25ffc38b1c45008fedcc6fb476440d278757
5aef3183071e560db2a44ec14079a58ceb82879a9f1a9b4e9fcabb16df58
24675d0a68f72691cd9980f0d6d9adcd3e204eaf9c302558bc548ec6583d
8e097a247d483ed52d9f91d7ca0feb01513c1c9a868c4cf1c92a6751c828
3f7c6f8c290f25> ND 
/a 
<10bf31705d64e193f644676913533d4f242b6181368ed1350652c8cb7a6f
e958f60841a88d1088c20f893090b458ae087d16aa8691f1ae44882b0528
d32f3e9827d4294992e18a57652ae7d531994f09c8f3899ddffaad39408b
1529cb6c6e94b8c5c36f6038811d22f304b6662d870ece2886bb4e9f799a
c37faedbf994154341e467f29126a4c489a05c6fef9ee5143f581ea41499
e4aecea25c0711d5cc7b9f01a37e7c0b7e59d5ee83c610a480921138ec2c
f957d766614f6ccaa7ceb4e20fd6f9ac362e8c090b1abb9485ee8c51fdeb
7fc72063a72ab3373c0c6872cf9ba20b3513a2189f8a98cd5a1ee87742> ND 
/c 
<10bf317047276c49998622737f5c0fdd43bdb1b35b15caae7eb2c80264ad
f0005e1c6be7a1a08efb8ae0111a7ff9c16d6d1d6fe6a62b9718659cdf71
ec1fec12732e715c04b3f3a8feb95e8d0f9e002393845281717573027f79
ad8c8ea5dce4faf3243344c83485cc434093ad2e51e73ce85594056ff3cf
8de95991fd7222c7dec9d4bc6113b2> ND 
/d 
<10bf317046e845f3cc81de7a4b8a8a1b3fe3a86a2a74eb0ce101ae9ff9ea
ca0b0d6152bab57b5a1a20451eca1d8bce22d8934498cbe1f50790f6dd2f
9d5a0cab606ce69313bb3e4094a370b8d3856d24b15d355e84c7c481bc80
d07358154d4cee4bac791720fabdb39630005823af359d78acbc47e52e70
c34626a827ae2272bde1c4ecc0359b7e45162ac0> ND 
/e 
<10bf3170599a82aebce2d0d9cd696e2d2232ae83b1d98ff884add96e0282
26fcd2cbd306888649029fbc75f18f771bf21f4d5f53f71cd70d56907fb2
0780ae57f65359db4c49ca929cb86ae96dd2f43742f720ffcefc0d1d3194
c72a55a6bfcf26d975c031741b09b969ea0410af02ae1e13b6c1d337a6b3
96eba6c714d73f9b5d2c2499a66a60f107d1dad4da56ef> ND 
/i 
<10bf317021cc67b2bc312fc6a7ad37016808b8c74342617d801906e8ad23
4c7210637a5c2e2ea339f24d0c> ND 
/l 
<10bf317021cc67b2bc31c11814793bc69b430b318ded78131a> ND 
/m 
<10bf31703bc84f280bc926798acdec2516269e7061028d385a31d255844f
a27fc6b4cdd6f6ba3dfabbbaadef207eca864f3bc97abd9a4f1b978df039
4779a47e3088a94b9cee6d3b276eef4d4950e88ef4a61f93e0b6cde961dc
7ec12956bd3a56a59704c6c5b5a401c3674bc856b6c34f276e7f1bc3056d
89b4805ca25b43894c427bc43b36554ede70476f7ee25d1a6c03ed9f5e40
5c72135defa96ede67a5a8ef5fea114c19a857db71952cb83f4d11> ND 
/n 
<10bf31702094fda2efce4110428b7f86f5f2073cab682ca78d0dc97da563
e3301b964801f725812f64cb67abc1e242f6d8dcd921f1fbf9e05fee92c3
cf16b5bf6083337a59bf026de7fa548a247b8bde12c672aa0ba0501ccc35
fcca587d7573f11dfc32a2ac31516847d39fb276060c6171da> ND 
/o 
<10bf317041f0d680f4930f6b0672f7536ce2eb70a2366463cc9006c590f6
6bbb22b4a706eff4a93c95880cecbbf82d6e623efa721926a49ba75b71ef
97d0e3d8c35761734c54d6d734cb61cf4c4d7050d90fa115600d26f47050
dfb8739452ed0059ffdca41c137f0b71425a690a4da83dcf8abcf17c206e
c5eff5dd0d7b85b999c37123dfb769cd075b5a162cb33d72426c> ND 
/p 
<10bf31703d364b58d236360a3109f388a509dc9806d07d5bc445174ad942
7c9600246e60ea62f48529a60136f844b413bd7834b903aeb5ec3a65352a
708c943d46c286b502a39b69aec9bc15c2a1798b51edb224db01e94ff1eb
dbf1e97f7f79a2c4ac7f7ccc29f5a1c29ed2d05ed3e5ff111a8b097f8d17
72a84cce0bcd066f78e2de698d38b96a99a99313e7a6639d82> ND 
/r 
<10bf31703f93f6c49808fdd8544fecb184adc28a087f99360dbfdf8b0375
9b819135c930698375e13c34125773b22d251f861dc05246608ab0d559df
442670f87f9615eabcaf25ab4b613b44e059b394bfb9> ND 
/t 
<10bf3170688ce4cb1d2f5bf487137bec8ecb87b4485146ce17824d997ac5
95ab4afb2e80a065a802ee3f010bb37eac91d0f6ed42677aa9dde7e1ad01
769b95b971dec6d1669588801bb2fb04109e79e9771f019783524f2f268e
35dce126a03e55d028a6951cc9b40e649071f577> ND 
/u 
<10bf317022f1ca2cc2a22c3ff97c1232bc55839582d9c5ff7e86bfa4508d
4c6c2a32b8a91c23bc7417819a6d61bb6c4ffa588f9ea417cfc189ff4ca4
86806cfbdc09b2f0ef54b54c53e50d4afcfcb2df030b19aa33138b0a422d
d58054461b41c9166e86f2fb1f6b43052b68dc3202c1cc> ND 
/x 
<10bf3170638bf24b9ac01ae6f3f5ae817231c94093d6b928339de9a1f6d7
c03f6b6f7762b561ab36e6e40fc21093f89e72e352dadf27c949562edd95
94> ND 
/z 
<10bf31706ea98d84f3c625a1c3450f57f0cb972d7b4342feb5483a382b8c
546af3200ec3102c63cd8ee85ce02beb2b2e7a35b4d49541c8670b9156e1
3f2683e61a914abf9dc96f> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/LEGOFD+Arial,Bold findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 73 /I put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 122 /z put
dup 160 /space put
pop
%%EndResource
[/N15/LEGOFD+Arial,Bold 1 TZ
%%BeginResource: font LEGOFB+Arial
11 dict begin
/FontName /LEGOFB+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/plus 
<10bf317031d9337ef184b43be498749534943b6b82dfb721a4f1e6478fee
6c1f4763fef70c3e4be97d7fac720dea7a> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac54cb2fa3a278c1c5e8b8e0184d
7cbeaa35d4ddaa02f35f83f589e53f609414a1e8dd86a2916a5d28875546
282a3c313b2605b04804> ND 
/C 
<10bf31704fab892742fc2c6be78329c0825c84c392f40122153ca9a91165
96e2ea405597ca7f292098a14c92b8766b957d29536d6a74922bce6efa67
d7fa67d47a8ae997e897ea42f1e923c09a3ad5b1aa2186622859ef03a213
f7c26727c45c24d289e1bf8fa6a719352242839e565e8af9cb5c48758232
20530e01b09cb28b590a86024fb341940ed5d19a7e036981d38ceef64334
a577636f4f149330a371e1> ND 
/F 
<10bf31702f7c4b31b7f92f61f70a9032d1addef58c81f5b8fed9651d8c00
81acb06eda84b504e7> ND 
/R 
<10bf31702819c97bfff21764697e50774ba74072e0daf25a84b5ab81ce67
f36424a8f4f31afdf4de9e5912f7a5ba0ce90948b990647285d2500d6d57
ef6e940fb321e739e33f71f0994fb0b96bf3e18815066ca201f1578cce2a
71a0a57bc87021521bfe1b691fde6e9063a575e47bf725cfd1c0afa40b0c
a839a6c28bfd0b7f0f7469b4cf16ee3c7a54706ea2da49ba1db858f3c370
3042b60d2181c6c1afb0bef5eb> ND 
/S 
<10bf31704ab370a8a6c235279ed6c2ccfc716fa1295d141c34dd24f95c73
82e11c724a74e86021432ff58ab0f9585559c2cc7a3fe0720eadda5eee3e
cb055c76e8d7f22cfddbcfbe4ee1a562282b307d86efef90d9a8c71c96ab
9543712fa6240508ea1f38536804c47dfcc21f777c873fc11b7e20f7a228
b35e8d75f100a7da6082feb065d087853344b8bf00df7291cc74173d8c17
2964ca635a4e981f1604dc10d454f452e70073d386bcbe3ed4c09e72aa02
e7eb1e382ccb2fe70e1e9e3084e7824b4261723bffe42f4fc72d36ddcdd9
e884d10e18a55004b6149a9b0c7ead4b42afa8906a80deea322a930f4d91
ac35a6e6186e5d082f09> ND 
/a 
<10bf31705d64e193f685fe465eb14b2f9aa41e82540f554b50893fe63efd
4692fb4fc721a117ec78b6e9515c29fcb60e3aee68a6df1c3946e2cf738d
cda3e29fd055085b4d27d1a9d3bf0581a4eb2a1ee52161275aad552d9745
cae2527ba314929e16b3adcf63fbfe5b600507b479eb6bac8dbf57f9ea61
cf0c38792d951ff40006e32bfab335adbde18dd700c5843625ec18424a1a
470a3d82d751a36d8b4a69f1f5fb08cfc2b94ed2658b49c9985bc490581e
62f221617e1b4bb61c6dcc9e8e61b29e5f74c69c328c213bfddbc217436d
81d1dfe6a13e1cac30c3fa16cb4e265d8db4217e880afbaeb0227e92e214
5534c463a18baaf155fa6678668091a696c5190fde> ND 
/b 
<10bf31703e65fd7e1217c9f29c64bb1b9e17851bf25dd0466fa484e27564
2ef62da05fc0e561425aa7c0cf759f2df2fed9f5cab4e563d9d485ca6e49
6a23023cc7d5336a38ed163f6d25eac0416c891913363ad8aab5312feed7
de0b0bbcc0db8b66958d96174480f5040af2cfb1590a9410022fc6398cb1
d4435f6325a11aad4c77347983eb4748b4ada02263a3> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f67877e80be643ef8
5a01cff57f62859595ad9c2a1ef16f4c22144c6fc4d200f23642de52d57f
47e47c78a8b6713f5cb6dcd4a475047f70e7386f0baddd9f1c37f1598f60
1bc5b6005acf2115ed4aa52ed6ed621e5045f115e6c8ed146247e81ce086
3c881ef71e6e234403d5f37c528c6ebb0616bbdc05a29ca9d830ed27448f
> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/f 
<10bf31706629561882b73d5b02cebd16b0942e445fbe6e3232b3823cbdb2
63dcf8e5b5846268df4eba2210bb667f400c46f76ed43d4b268aed98cf98
689dff659a93d69b1917cc1e5f49aadef7d4b3b6109675927aeb98089c> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987
c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e
6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e
7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df
3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3
e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b
5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/k 
<10bf31703f936777fb99983a11586419ce72aadc44a2aa69d19b91e9f126
e6f5aabcb4381bf8bfee294b80bae1d888f1314da01fbe02> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79e55a006319a903b4934e0296676
bb7a5df970714192f29a85860f4cb191aa4b83ebc5b58328ecf58ed9d6ff
d0d3a63dd21733d64450e3abce2a149390b0894b2fb0fce1ee78d045f446
04c31c787e13fdae7e79785a1956f734ed54b976e123646b63ce5bee0b68
59b26a26c2ad993325ab7bd77cdd1be893a8ccd1451854fed772889a0d7d
7791ac97d81ac7> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3483c7b936ed6e6cf91cffcbd
a815b8df60ae150c20432c17a46c0682480f6226770a8905e960aec3fe5e
934f4cc994b08abf0fc9d432168086e4> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/LEGOFB+Arial findfont /Encoding get
dup 0 /.notdef put
dup 43 /plus put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
dup 65 /A put
dup 67 /C put
dup 70 /F put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
pop
%%EndResource
[/N13/LEGOFB+Arial 1 TZ
q
n
427.08 150.3 0.0599976 582.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
427.08 150.3 m
427.08 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
359.82 150.3 0.0599976 582.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
359.82 150.3 m
359.82 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
292.56 150.3 0.0599976 582.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
292.56 150.3 m
292.56 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
90.48 150.3 404.1 582.72 re
109.86 174.12 127.02 283.02 re
eoclip
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
225.24 150.3 m
225.24 733.02 l
157.98 150.3 m
157.98 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
90.72 150.3 0.0599976 582.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
90.72 150.3 m
90.72 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
72 54 467.04 683.04 re
109.86 174.12 127.02 283.02 re
eoclip
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
90.72 150.3 403.62 582.72 re
0 0 0 setrgbcolor
S
Q
1 J
0 j
0.960007 w
10 M
[] 0 d
false setSA
n
393.96 174.54 100.38 32.34 re
q
0.753006 0.753006 0.753006 setrgbcolor
eofill
Q
0 0 0 setrgbcolor
S
n
335.52 320.22 158.82 32.34 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
219 465.9 275.34 32.34 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
161.52 611.58 332.82 32.34 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
393.96 206.94 100.38 32.28 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
250.86 352.62 243.48 32.28 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
261.6 498.3 232.74 32.28 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
126.12 643.98 368.22 32.28 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
393.96 239.28 100.38 32.34 re
q
eofill
Q
S
n
316.08 384.96 178.26 32.34 re
q
eofill
Q
S
n
291.42 530.64 202.92 32.34 re
q
eofill
Q
S
n
157.98 676.32 336.36 32.34 re
q
eofill
Q
S
0.0599976 w
n
90.72 150.3 m
494.34 150.3 l
494.34 144.66 m
494.34 150.3 l
427.08 144.66 m
427.08 150.3 l
359.82 144.66 m
359.82 150.3 l
292.56 144.66 m
292.56 150.3 l
225.24 144.66 m
225.24 150.3 l
157.98 144.66 m
157.98 150.3 l
90.72 144.66 m
90.72 150.3 l
494.34 150.3 m
494.34 733.02 l
499.98 150.3 m
494.34 150.3 l
499.98 295.98 m
494.34 295.98 l
499.98 441.66 m
494.34 441.66 l
499.98 587.34 m
494.34 587.34 l
499.98 733.02 m
494.34 733.02 l
S
500.4 126.48 m
/N13 [0 18 -18 0 0 0] Tf
(0) show
433.139 111.481 m
(0.2) show
365.879 111.481 m
(0.4) show
298.618 111.481 m
(0.6) show
231.298 111.481 m
(0.8) show
164.038 126.48 m
(1) show
96.7774 111.481 m
(1.2) show
526.378 193.141 m
(fmradi) show
(o)
[89.127 ] pdfys
(filterban) show
(k)
[76.6638 ] pdfys
(filterbank) show
(2)
[94.1796 ] pdfys
(ofdm) show
347.7 76.2 m
/N15 -16.02 Tf
(exec) show
(u)
[-9.79128 ] pdfxs
(t) show
(ion )
[-4.45674 -9.79128 -9.79128 -4.44231 ] pdfxs
(t) show
(i)
[-4.45674 ] pdfxs
(me) show
432.661 95.6403 m
(\(normalized) show
( )
[-4.44231 ] pdfxs
(to) show
( )
[-4.44231 ] pdfxs
(unoptimized) show
( )
[-4.44231 ] pdfxs
(StreamIt\)) show
n
109.92 457.08 126.96 -282.9 re
1 1 1  setrgbcolor
f
n
109.86 174.12 127.02 282.96 re
0 0 0  setrgbcolor
S
0.960007 w
n
126.36 194.28 11.22 11.22 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
138.06 209.82 m
/N13 [0 18 -18 0 0 0] Tf
(CAF+scaling+SR) show
n
168.66 194.28 11.22 11.22 re
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
180.36 209.82 m
(CAF+scaling+SR+peekscale) show
n
210.96 194.28 11.22 11.22 re
q
eofill
Q
S
222.66 209.82 m
(CAF+scaling+SR+cutpeek) show
0 J
1 j
2.5 w
n
158.4 455.1 m
158.88 733.02 l
158.64 152.34 m
158.64 174.12 l
0.0039978 0.0039978 0.0039978  setrgbcolor
S
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 421 5322 a(Figure)e(5-11:)42 b(P)m(erformance)34
b(of)e(p)s(eek-scaling)i(and)f(cut-p)s(eek)h(on)e(an)h(Itanium)g(2)1901
5649 y(55)p eop
%%Page: 56 56
56 55 bop 150 100 a Fw(5.4)161 b(Comparison)52 b(to)h(Cac)l(he)g(Una)l
(w)l(are)f(F)-13 b(ull)53 b(F)-13 b(usion)150 379 y Fs(An)39
b(alternativ)m(e)h(to)e(the)h(optimizations)g(presen)m(ted)i(in)e(this)
g(thesis)h(that)f(allo)m(ws)g(elimination)150 559 y(of)f(metho)s(d)i
(calls)f(and)g(optimizations)h(across)f(actor)g(b)s(oundaries)h(is)f
(to)f(fuse)i(all)f(actors)g(in)m(to)150 740 y(a)44 b(single)h(actor.)78
b(After)44 b(com)m(bining)h(all)f(actors)h(w)m(e)g(can)f(apply)h
(scalar)g(replacemen)m(t)h(to)e(al-)150 921 y(lo)m(w)38
b(in)m(termediate)h(v)-5 b(alues)39 b(to)e(b)s(e)g(register)i(allo)s
(cated.)58 b(Ho)m(w)m(ev)m(er,)41 b(full)d(fusion)g(is)g(una)m(w)m(are)
g(to)150 1101 y(instruction)j(and)e(data)h(lo)s(calit)m(y)-8
b(,)41 b(since)g(if)f(w)m(e)g(p)s(erform)g(aggressiv)m(e)h(unrolling)f
(then)g(there)g(is)150 1282 y(almost)f(no)f(co)s(de)h(reuse,)j(and)d
(data)f(lo)s(calit)m(y)h(is)g(enhanced)h(only)f(b)m(y)h(executing)g
(some)g(actors)150 1462 y(m)m(ultiple)34 b(times)g(to)e(matc)m(h)h
(data)g(pro)s(duction)f(and)h(consumption)h(rates.)296
1643 y(On)47 b(the)h(StrongARM)f(1110,)i(our)e(cac)m(he)h
(optimizations)g(o\013er)f(a)g(162\045)f(sp)s(eedup)j(o)m(v)m(er)150
1823 y(full)34 b(fusion)g(with)h(scalar)f(replacemen)m(t)i(\(108\045)d
(sp)s(eedup)j(if)d(w)m(e)i(use)g(geometric)g(mean)f(instead)150
2004 y(of)45 b(a)m(v)m(erage,)k(see)e(Figure)e(5-12\).)81
b(Cac)m(he)47 b(optimizations)f(p)s(erform)f(b)s(etter)h(that)f(full)g
(fusion)150 2185 y(with)34 b(scalar)g(replacemen)m(t)i(for)d(all)h(b)s
(enc)m(hmarks)i(except)f(for)e Fn(3gpp)p Fs(,)i(where)g(they)g(yield)g
(a)e(45\045)150 2365 y(slo)m(wdo)m(wn.)57 b(This)37 b(slo)m(wdo)m(wn)h
(is)f(due)g(to)f(conserv)-5 b(ativ)m(e)38 b(co)s(de)f(size)g
(estimation:)52 b(the)37 b(compiler)150 2546 y(predicts)31
b(that)f(the)g(fused)h(v)m(ersion)g(of)36 b Fn(3gpp)31
b Fs(will)f(not)g(\014t)g(in)m(to)g(the)g(instruction)h(cac)m(he,)g
(thereb)m(y)150 2726 y(prev)m(en)m(ting)d(fusion.)42
b(Ho)m(w)m(ev)m(er,)29 b(due)e(to)f(optimizations)h(b)m(y)f
Fn(gcc)p Fs(,)j(the)d(\014nal)g(co)s(de)g(size)i(is)e(smaller)150
2907 y(than)38 b(exp)s(ected)i(and)d(do)s(es)i(\014t)f(within)g(the)h
(cac)m(he.)60 b(While)39 b(suc)m(h)g(inaccuracies)h(could)e(b)s(e)g
(im-)150 3087 y(pro)m(v)m(ed)33 b(b)m(y)g(adding)e(feedbac)m(k)j(b)s
(et)m(w)m(een)g(the)e(output)f(of)h Fn(gcc)g Fs(and)g(our)f(co)s(de)h
(estimation,)h(eac)m(h)150 3268 y(fusion)25 b(p)s(ossibilit)m(y)i(w)m
(ould)e(need)h(to)f(b)s(e)f(ev)-5 b(aluated)26 b(separately)g(as)f(the)
g(fusion)g(b)s(oundary)g(a\013ects)150 3449 y(the)33
b(impact)g(of)f(lo)m(w-lev)m(el)j(optimizations)e(\(and)g(th)m(us)g
(the)g(\014nal)g(co)s(de)g(size\).)296 3629 y(The)i(sp)s(eedups)h
(o\013ered)f(b)m(y)g(cac)m(he)g(optimizations)g(o)m(v)m(er)g(a)f(full)g
(fusion)h(strategy)g(are)f(more)150 3810 y(mo)s(dest)49
b(for)e(the)h(desktop)i(pro)s(cessors:)75 b(34\045)48
b(sp)s(eedup)i(on)d(P)m(en)m(tium)j(3)e(\(17\045)g(sp)s(eedup)h(if)150
3990 y(w)m(e)43 b(use)h(geometric)f(mean,)j(see)d(Figure)f(5-13\))g
(and)g(essen)m(tially)j(zero)e(sp)s(eedup)h(\(6\045)e(b)m(y)i(the)150
4171 y(arithmetic)28 b(mean,)h(-8\045)e(b)m(y)i(the)f(geometric)g
(mean\))g(on)f(Itanium)h(2)f(\(Figure)h(5-14\).)40 b(Out)28
b(of)f(the)150 4351 y(11)i(b)s(enc)m(hmarks,)k(our)d(cac)m(he)h
(optimizations)f(p)s(erform)g(as)g(w)m(ell)h(or)e(b)s(etter)i(than)e
(full)h(fusion)g(for)150 4532 y(7)i(b)s(enc)m(hmarks)j(on)e(the)g(P)m
(en)m(tium)h(3)e(and)h(5)f(b)s(enc)m(hmarks)j(on)e(the)g(Itanium)g(2.)
1901 5649 y(56)p eop
%%Page: 57 57
57 56 bop 840 1546 a @beginspecial 72 @llx 63 @lly 737
@urx 522 @ury 2664 @rwi @setspecial
%%BeginDocument: arm-g2.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (FinalResults.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050612173613-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 63 737 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 63 moveto 737 63 lineto 737 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: file Pscript_CFF PSVER
userdict/ct_CffDict 6 dict put ct_CffDict begin/F0Subr{systemdict/internaldict
known{1183615869 systemdict/internaldict get exec/FlxProc known{save true}{
false}ifelse}{userdict/internaldict known not{userdict/internaldict{count 0 eq
{/internaldict errordict/invalidaccess get exec}if dup type/integertype ne{
/internaldict errordict/invalidaccess get exec}if dup 1183615869 eq{pop 0}{
/internaldict errordict/invalidaccess get exec}ifelse}dup 14 get 1 25 dict put
bind executeonly put}if 1183615869 userdict/internaldict get exec/FlxProc
known{save true}{false}ifelse}ifelse[systemdict/internaldict known not{100
dict/begin cvx/mtx matrix/def cvx}if systemdict/currentpacking known{
currentpacking true setpacking}if{systemdict/internaldict known{1183615869
systemdict/internaldict get exec dup/$FlxDict known not{dup dup length exch
maxlength eq{pop userdict dup/$FlxDict known not{100 dict begin/mtx matrix def
dup/$FlxDict currentdict put end}if}{100 dict begin/mtx matrix def dup
/$FlxDict currentdict put end}ifelse}if/$FlxDict get begin}if grestore/exdef{
exch def}def/dmin exch abs 100 div def/epX exdef/epY exdef/c4y2 exdef/c4x2
exdef/c4y1 exdef/c4x1 exdef/c4y0 exdef/c4x0 exdef/c3y2 exdef/c3x2 exdef/c3y1
exdef/c3x1 exdef/c3y0 exdef/c3x0 exdef/c1y2 exdef/c1x2 exdef/c2x2 c4x2 def
/c2y2 c4y2 def/yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def/PickCoords{{
c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2}{c3x0 c3y0 c3x1
c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2}ifelse/y5 exdef/x5 exdef/y4 exdef
/x4 exdef/y3 exdef/x3 exdef/y2 exdef/x2 exdef/y1 exdef/x1 exdef/y0 exdef/x0
exdef}def mtx currentmatrix pop mtx 0 get abs 1e-05 lt mtx 3 get abs 1e-05 lt
or{/flipXY -1 def}{mtx 1 get abs 1e-05 lt mtx 2 get abs 1e-05 lt or{/flipXY 1
def}{/flipXY 0 def}ifelse}ifelse/erosion 1 def systemdict/internaldict known{
1183615869 systemdict/internaldict get exec dup/erosion known{/erosion get
/erosion exch def}{pop}ifelse}if yflag{flipXY 0 eq c3y2 c4y2 eq or{false
PickCoords}{/shrink c3y2 c4y2 eq{0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs}ifelse
def/yshrink{c4y2 sub shrink mul c4y2 add}def/c1y0 c3y0 yshrink def/c1y1 c3y1
yshrink def/c2y0 c4y0 yshrink def/c2y1 c4y1 yshrink def/c1x0 c3x0 def/c1x1
c3x1 def/c2x0 c4x0 def/c2x1 c4x1 def/dY 0 c3y2 c1y2 sub round dtransform
flipXY 1 eq{exch}if pop abs def dY dmin lt PickCoords y2 c1y2 sub abs .001 gt{
c1x2 c1y2 transform flipXY 1 eq{exch}if/cx exch def/cy exch def/dY 0 y2 c1y2
sub round dtransform flipXY 1 eq{exch}if pop def dY round dup 0 ne{/dY exdef}{
pop dY 0 lt{-1}{1}ifelse/dY exdef}ifelse/erode PaintType 2 ne erosion .5 ge
and def erode{/cy cy .5 sub def}if/ey cy dY add def/ey ey ceiling ey sub ey
floor add def erode{/ey ey .5 add def}if ey cx flipXY 1 eq{exch}if itransform
exch pop y2 sub/eShift exch def/y1 y1 eShift add def/y2 y2 eShift add def/y3
y3 eShift add def}if}ifelse}{flipXY 0 eq c3x2 c4x2 eq or{false PickCoords}{
/shrink c3x2 c4x2 eq{0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs}ifelse def/xshrink
{c4x2 sub shrink mul c4x2 add}def/c1x0 c3x0 xshrink def/c1x1 c3x1 xshrink def
/c2x0 c4x0 xshrink def/c2x1 c4x1 xshrink def/c1y0 c3y0 def/c1y1 c3y1 def/c2y0
c4y0 def/c2y1 c4y1 def/dX c3x2 c1x2 sub round 0 dtransform flipXY -1 eq{exch}
if pop abs def dX dmin lt PickCoords x2 c1x2 sub abs .001 gt{c1x2 c1y2
transform flipXY -1 eq{exch}if/cy exch def/cx exch def/dX x2 c1x2 sub round 0
dtransform flipXY -1 eq{exch}if pop def dX round dup 0 ne{/dX exdef}{pop dX 0
lt{-1}{1}ifelse/dX exdef}ifelse/erode PaintType 2 ne erosion .5 ge and def
erode{/cx cx .5 sub def}if/ex cx dX add def/ex ex ceiling ex sub ex floor add
def erode{/ex ex .5 add def}if ex cy flipXY -1 eq{exch}if itransform pop x2
sub/eShift exch def/x1 x1 eShift add def/x2 x2 eShift add def/x3 x3 eShift add
def}if}ifelse}ifelse x2 x5 eq y2 y5 eq or{x5 y5 lineto}{x0 y0 x1 y1 x2 y2
curveto x3 y3 x4 y4 x5 y5 curveto}ifelse epY epX}systemdict/currentpacking
known{exch setpacking}if/exec cvx/end cvx]cvx executeonly exch{pop true exch
restore}{systemdict/internaldict known not{1183615869 userdict/internaldict
get exec exch/FlxProc exch put true}{1183615869 systemdict/internaldict get
exec dup length exch maxlength eq{false}{1183615869 systemdict/internaldict
get exec exch/FlxProc exch put true}ifelse}ifelse}ifelse{systemdict
/internaldict known{1183615869 systemdict/internaldict get exec/FlxProc get
exec}{1183615869 userdict/internaldict get exec/FlxProc get exec}ifelse}if}
executeonly def/F1Subr{gsave currentpoint newpath moveto}bind def/F2Subr{
currentpoint grestore gsave currentpoint newpath moveto}bind def/HSSubr{
systemdict/internaldict known not{pop 3}{1183615869 systemdict/internaldict
get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck
get exec}{pop 3}ifelse}ifelse}ifelse}bind def end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Arial,Bold
[/N23/Arial,Bold 1 TZ
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 63 665 459 rectclip
[ 0 -1 1 0 8.64 594 ] concat
%%BeginResource: font DBMHGA+Arial
11 dict begin
/FontName /DBMHGA+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/parenleft 
<10bf31703a9458c05db7ba7a58bcd7a2c9e91ffe666d66d67924090fad2e
914020d503aadf9240d9b1c6a63953b30ccff5415597f5a6c26fdee68dec
bc331692c1b3543bfce7c82b9d704f4fab4f> ND 
/parenright 
<10bf31703a9458c05d79d3ca9c0e25cc2a0b35ceb7dd46fb51adbfd88390
4d8bf636baa28a31c262d1a3078da5849c1c2b98c958c72994f2c3f78ea4
d099458941ceee627e3f06f9f9a16a1d0c> ND 
/plus 
<10bf317031d9337ef184b43be498749534943b6b82dfb721a4f1e6478fee
6c1f4763fef70c3e4be97d7fac720dea7a> ND 
/hyphen 
<10bf31705995db6ed81c8e93e5d1d568f767c41aee4b2647d0> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d898870164
1dba6c5defb41d909040a164fdb0a088fefa45fff299b57b0e194251a4a8
b9cf3bc1815fd2c5ba06e651f9d7799098b4541de9c35043282b335f2de1
7def94eec0695fa30f7aaa5574cd9d280a8b4d225396feeeafb4b20c3fcc
9f12e751228b7464328a957a71c1d6fc11ef53a8f692024ab80f5e0d7623
62b42a462a2bf96d5a0db86097e421e5cb8c7d7a0900e6cfd70978f26b60
122332f14359637710d630381bc4f9c629fd5be208af03ab6a69f0ba40b9
a2> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/seven 
<10bf317048559e9c292b4762aa54ba120b5bb6d9743398f6558de0cda9ce
72c94d95b651df1bda9b63361a928dc3b98c779dfd157220ceb78b8ebeab
638d0f6753cf0f10ef> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac54cb2fa3a278c1c5e8b8e0184d
7cbeaa35d4ddaa02f35f83f589e53f609414a1e8dd86a2916a5d28875546
282a3c313b2605b04804> ND 
/C 
<10bf31704fab892742fc2c6be78329c0825c84c392f40122153ca9a91165
96e2ea405597ca7f292098a14c92b8766b957d29536d6a74922bce6efa67
d7fa67d47a8ae997e897ea42f1e923c09a3ad5b1aa2186622859ef03a213
f7c26727c45c24d289e1bf8fa6a719352242839e565e8af9cb5c48758232
20530e01b09cb28b590a86024fb341940ed5d19a7e036981d38ceef64334
a577636f4f149330a371e1> ND 
/F 
<10bf31702f7c4b31b7f92f61f70a9032d1addef58c81f5b8fed9651d8c00
81acb06eda84b504e7> ND 
/I 
<10bf31701a61e6f9a78e08bbc896e02c88ca268e19a5> ND 
/R 
<10bf31702819c97bfff21764697e50774ba74072e0daf25a84b5ab81ce67
f36424a8f4f31afdf4de9e5912f7a5ba0ce90948b990647285d2500d6d57
ef6e940fb321e739e33f71f0994fb0b96bf3e18815066ca201f1578cce2a
71a0a57bc87021521bfe1b691fde6e9063a575e47bf725cfd1c0afa40b0c
a839a6c28bfd0b7f0f7469b4cf16ee3c7a54706ea2da49ba1db858f3c370
3042b60d2181c6c1afb0bef5eb> ND 
/S 
<10bf31704ab370a8a6c235279ed6c2ccfc716fa1295d141c34dd24f95c73
82e11c724a74e86021432ff58ab0f9585559c2cc7a3fe0720eadda5eee3e
cb055c76e8d7f22cfddbcfbe4ee1a562282b307d86efef90d9a8c71c96ab
9543712fa6240508ea1f38536804c47dfcc21f777c873fc11b7e20f7a228
b35e8d75f100a7da6082feb065d087853344b8bf00df7291cc74173d8c17
2964ca635a4e981f1604dc10d454f452e70073d386bcbe3ed4c09e72aa02
e7eb1e382ccb2fe70e1e9e3084e7824b4261723bffe42f4fc72d36ddcdd9
e884d10e18a55004b6149a9b0c7ead4b42afa8906a80deea322a930f4d91
ac35a6e6186e5d082f09> ND 
/a 
<10bf31705d64e193f685fe465eb14b2f9aa41e82540f554b50893fe63efd
4692fb4fc721a117ec78b6e9515c29fcb60e3aee68a6df1c3946e2cf738d
cda3e29fd055085b4d27d1a9d3bf0581a4eb2a1ee52161275aad552d9745
cae2527ba314929e16b3adcf63fbfe5b600507b479eb6bac8dbf57f9ea61
cf0c38792d951ff40006e32bfab335adbde18dd700c5843625ec18424a1a
470a3d82d751a36d8b4a69f1f5fb08cfc2b94ed2658b49c9985bc490581e
62f221617e1b4bb61c6dcc9e8e61b29e5f74c69c328c213bfddbc217436d
81d1dfe6a13e1cac30c3fa16cb4e265d8db4217e880afbaeb0227e92e214
5534c463a18baaf155fa6678668091a696c5190fde> ND 
/b 
<10bf31703e65fd7e1217c9f29c64bb1b9e17851bf25dd0466fa484e27564
2ef62da05fc0e561425aa7c0cf759f2df2fed9f5cab4e563d9d485ca6e49
6a23023cc7d5336a38ed163f6d25eac0416c891913363ad8aab5312feed7
de0b0bbcc0db8b66958d96174480f5040af2cfb1590a9410022fc6398cb1
d4435f6325a11aad4c77347983eb4748b4ada02263a3> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f67877e80be643ef8
5a01cff57f62859595ad9c2a1ef16f4c22144c6fc4d200f23642de52d57f
47e47c78a8b6713f5cb6dcd4a475047f70e7386f0baddd9f1c37f1598f60
1bc5b6005acf2115ed4aa52ed6ed621e5045f115e6c8ed146247e81ce086
3c881ef71e6e234403d5f37c528c6ebb0616bbdc05a29ca9d830ed27448f
> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/f 
<10bf31706629561882b73d5b02cebd16b0942e445fbe6e3232b3823cbdb2
63dcf8e5b5846268df4eba2210bb667f400c46f76ed43d4b268aed98cf98
689dff659a93d69b1917cc1e5f49aadef7d4b3b6109675927aeb98089c> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987
c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e
6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e
7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df
3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3
e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b
5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/k 
<10bf31703f936777fb99983a11586419ce72aadc44a2aa69d19b91e9f126
e6f5aabcb4381bf8bfee294b80bae1d888f1314da01fbe02> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79e55a006319a903b4934e0296676
bb7a5df970714192f29a85860f4cb191aa4b83ebc5b58328ecf58ed9d6ff
d0d3a63dd21733d64450e3abce2a149390b0894b2fb0fce1ee78d045f446
04c31c787e13fdae7e79785a1956f734ed54b976e123646b63ce5bee0b68
59b26a26c2ad993325ab7bd77cdd1be893a8ccd1451854fed772889a0d7d
7791ac97d81ac7> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3483c7b936ed6e6cf91cffcbd
a815b8df60ae150c20432c17a46c0682480f6226770a8905e960aec3fe5e
934f4cc994b08abf0fc9d432168086e4> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
/v 
<10bf31706ae07dd17dfbac8a1ae33180eda67f1c12c0170124c5b65d6008
42ef910f621d12aef7aac075b848d0659b626414ef71a4> ND 
/x 
<10bf317060ff640a97f40d52fc73b98a64469b3f084ceb61cbde39a670a8
6bdd66d38d792d8bbe1de58b050ff75d7a6d9ab8ab83f71f1130ffc9a46b
7d934ffb8ab93375fd62539cb08006> ND 
/z 
<10bf31706d7bdb7f5f74128c9bb1cf0445a721a78dcf191b2f1eaa106619
49aba2663707d493160b8371e546cec091e3d6d364aa753531debc6523f3
> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/DBMHGA+Arial findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 65 /A put
dup 67 /C put
dup 70 /F put
dup 73 /I put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 122 /z put
dup 160 /space put
dup 173 /hyphen put
pop
%%EndResource
[/N13/DBMHGA+Arial 1 TZ
/N10 [/DeviceRGB] /ColorSpace defineRes pop

false setSA
n
92.16 725.16 355.2 -591.72 re
1 1 1 setrgbcolor
f
q
n
388.2 133.44 0.119995 591.72 re
W
n
0.119995 w
10 M
1 j
1 J
[] 0 d
n
388.2 133.44 m
388.2 725.16 l
0 0 0  setrgbcolor
S
Q
q
n
328.92 133.44 0.119995 591.72 re
W
n
0.119995 w
10 M
1 j
1 J
[] 0 d
n
328.92 133.44 m
328.92 725.16 l
0 0 0  setrgbcolor
S
Q
q
n
269.76 133.44 0.119995 591.72 re
W
n
0.119995 w
10 M
1 j
1 J
[] 0 d
n
269.76 133.44 m
269.76 725.16 l
0 0 0  setrgbcolor
S
Q
q
n
210.6 133.44 0.119995 591.72 re
W
n
0.119995 w
10 M
1 j
1 J
[] 0 d
n
210.6 133.44 m
210.6 725.16 l
0 0 0  setrgbcolor
S
Q
q
n
151.32 133.44 0.119995 591.72 re
W
n
0.119995 w
10 M
1 j
1 J
[] 0 d
n
151.32 133.44 m
151.32 725.16 l
0 0 0  setrgbcolor
S
Q
q
n
92.16 133.44 0.119995 591.72 re
W
n
0.119995 w
10 M
1 j
1 J
[] 0 d
n
92.16 133.44 m
92.16 725.16 l
0 0 0  setrgbcolor
S
Q
q
n
72 54 467.04 683.04 re
92.64 134.28 32.04 270.96 re
eoclip
n
0.960007 w
10 M
0 j
1 J
[] 0 d
n
92.16 133.44 355.2 591.72 re
0.501999 0.501999 0.501999  setrgbcolor
S
Q
0.960007 w
10 M
0 j
1 J
[] 0 d
n
432.84 143.16 14.52 12.96 re
q
0 0 0  setrgbcolor
eofill
Q
0 0 0  setrgbcolor
S
n
443.88 188.64 3.47998 12.96 re
q
eofill
Q
S
n
365.04 234.24 82.32 12.96 re
q
eofill
Q
S
n
328.92 279.72 118.44 12.96 re
q
eofill
Q
S
n
439.8 325.2 7.56 12.96 re
q
eofill
Q
S
n
209.52 370.8 237.84 12.96 re
q
eofill
Q
S
n
114.48 416.28 332.88 12.96 re
q
eofill
Q
S
q
n
189.6 455.76 257.76 25.08 re
W
n
n
195.6 461.76 251.76 12.96 re
q
eofill
Q
S
Q
q
n
148.92 501.24 298.44 25.08 re
W
n
n
154.92 507.24 292.44 12.96 re
q
eofill
Q
S
Q
q
n
90.24 546.84 357.12 25.08 re
W
n
n
-358.68 552.84 806.04 12.96 re
q
eofill
Q
S
Q
q
n
145.32 592.32 302.04 25.08 re
W
n
n
151.32 598.32 296.04 12.96 re
q
eofill
Q
S
Q
n
225.24 643.8 222.12 12.96 re
q
eofill
Q
S
n
346.32 689.4 101.04 12.96 re
q
eofill
Q
S
n
436.44 156.24 10.92 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
444 201.72 3.35999 12.96 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
381.72 247.32 65.64 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
349.68 292.8 97.68 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
434.04 338.28 13.32 12.96 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
341.28 383.88 106.08 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
301.8 429.36 145.56 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
416.52 474.84 30.84 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
370.92 520.32 76.44 12.96 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
383.4 565.92 63.96 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
q
n
145.32 605.4 302.04 24.96 re
W
n
n
151.32 611.4 296.04 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
Q
n
364.68 656.88 82.68 12.96 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
398.64 702.48 48.72 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
0.119995 w
n
92.16 133.44 m
447.36 133.44 l
447.36 129.12 m
447.36 133.44 l
388.2 129.12 m
388.2 133.44 l
328.92 129.12 m
328.92 133.44 l
269.76 129.12 m
269.76 133.44 l
210.6 129.12 m
210.6 133.44 l
151.32 129.12 m
151.32 133.44 l
92.16 129.12 m
92.16 133.44 l
447.36 133.44 m
447.36 725.16 l
451.68 133.44 m
447.36 133.44 l
451.68 178.92 m
447.36 178.92 l
451.68 224.52 m
447.36 224.52 l
451.68 270 m
447.36 270 l
451.68 315.48 m
447.36 315.48 l
451.68 361.08 m
447.36 361.08 l
451.68 406.56 m
447.36 406.56 l
451.68 452.04 m
447.36 452.04 l
451.68 497.52 m
447.36 497.52 l
451.68 543.12 m
447.36 543.12 l
451.68 588.6 m
447.36 588.6 l
451.68 634.08 m
447.36 634.08 l
451.68 679.68 m
447.36 679.68 l
451.68 725.16 m
447.36 725.16 l
S
451.92 114.96 m
/N13 [0 14.04 -14.04 0 0 0] Tf
(0) show
392.76 103.2 m
(0.2) show
333.48 103.2 m
(0.4) show
274.32 103.2 m
(0.6) show
215.159 103.2 m
(0.8) show
155.88 114.96 m
(1) show
96.7195 103.2 m
(1.2) show
499.08 123.48 m
/N13 [-9.9276 9.9276 -9.9276 -9.9276 0 0] Tf
(bitonic)
[-5.51186 5.51186 -2.1959 2.1959 -2.75199 2.75199 -5.51186 5.51186 -5.51186 5.51186 -2.27532 2.27532 -4.95592 4.95592 ] pdfxys
478.561 189.48 m
(fir)
[-2.73806 2.73806 -2.18196 2.18196 -3.284 3.284 ] pdfxys
498.001 215.52 m
(fft)
[-2.76184 2.76184 -2.76184 2.76184 -2.76184 2.76184 ] pdfxys
(-) show
486.362 227.04 m
(f)
[-2.76184 2.76184 ] pdfxys
(i) show
481.442 232.079 m
(ne)
[-5.51868 5.51868 -5.51868 5.51868 ] pdfxys
511.922 247.199 m
(fft)
[-2.76184 2.76184 -2.76184 2.76184 -2.76184 2.76184 ] pdfxys
(-) show
500.283 258.719 m
(c) show
495.362 263.758 m
(oa)
[-5.51868 5.51868 -5.51868 5.51868 ] pdfxys
(r) show
480.962 278.039 m
(s) show
476.042 283.078 m
(e) show
492.362 312.238 m
(3gpp)
[-5.51868 5.51868 -5.51868 5.51868 -5.51868 5.51868 -5.51868 5.51868 ] pdfxys
523.802 326.279 m
(beam) show
(f)
[-2.76093 2.76093 ] pdfxys
(or) show
487.322 362.64 m
(mer)
[-8.27461 8.27461 -5.52474 5.52474 -3.31081 3.31081 ] pdfxys
505.562 390.12 m
(m)
[-8.27264 8.27264 ] pdfxys
(a) show
(tm)
[-2.7629 2.7629 -8.27264 8.27264 ] pdfxys
(u) show
(lt)
[-2.15717 2.15717 -2.7629 2.7629 ] pdfxys
503.402 437.761 m
(fmr)
[-2.76578 2.76578 -8.27552 8.27552 -3.31172 3.31172 ] pdfxys
489.002 452.042 m
(adi)
[-5.51868 5.51868 -5.51868 5.51868 -2.20272 2.20272 ] pdfxys
475.801 465.362 m
(o) show
510.722 475.922 m
(filterbank)
[-2.75396 2.75396 -2.19787 2.19787 -2.27729 2.27729 -2.76389 2.76389 -5.51383 5.51383 -3.24034 3.24034 -5.51383 5.51383 -5.51383 5.51383 -5.51383 5.51383 -4.95789 4.95789 ] pdfxys
516.241 515.882 m
(filterbank2)
[-2.75396 2.75396 -2.19787 2.19787 -2.27729 2.27729 -2.76389 2.76389 -5.51383 5.51383 -3.24034 3.24034 -5.51383 5.51383 -5.51383 5.51383 -5.51383 5.51383 -5.03731 5.03731 -5.51383 5.51383 
] pdfxys
492.362 585.362 m
(ofdm) show
506.042 617.162 m
/N23 [-11.3135 11.3135 -11.3135 -11.3135 0 0] Tf
(ave)
[-6.28334 6.28334 -6.28334 6.28334 -6.28334 6.28334 ] pdfxys
487.192 636.012 m
(r) show
482.841 640.363 m
(age)
[-6.28334 6.28334 -6.9055 6.9055 -6.28334 6.28334 ] pdfxys
511.562 657.122 m
(geomean)
[-6.91353 6.91353 -6.29137 6.29137 -6.91353 6.91353 -10.0587 10.0587 -6.29137 6.29137 -6.29137 6.29137 -6.91353 6.91353 ] pdfxys
315 74.04 m
/N13 -14.04 Tf
(execution time)
[-7.8118 -7.02557 -7.8118 -7.02557 -7.8118 -3.90869 -3.12224 -7.8118 -7.8118 -3.96203 -3.90869 
-3.12224 -11.7008 -7.8118 ] pdfxs
385.081 91.1997 m
(\(normalized to unoptimized StreamIt\))
[-4.68228 -7.8133 -7.8133 -4.68228 -11.7023 -7.8133 -3.12374 -3.12374 -7.02707 -7.8133 -7.8133 
-3.96203 -3.91019 -7.8133 -3.96203 -7.8133 -7.8133 -7.8133 -7.8133 -3.91019 -3.12374 -11.7023 
-3.12374 -7.02707 -7.8133 -7.8133 -3.96203 -9.37164 -3.91019 -4.68228 -7.8133 -7.8133 -11.7023 
-3.91019 -3.91019 -4.68228 ] pdfxs
n
92.76 405.12 31.92 -270.72 re
1 1 1  setrgbcolor
f
n
92.64 134.28 32.04 270.84 re
0 0 0  setrgbcolor
S
0.960007 w
n
104.88 143.16 8.52 8.52 re
q
eofill
Q
S
113.88 155.04 m
/N13 [0 14.04 -14.04 0 0 0] Tf
(Fuse All) show
n
104.88 221.52 8.52 8.52 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
113.88 233.4 m
(CAF+scaling+SR+cutpeek) show
2.5 w
1 j
0 J
n
151.68 134.88 m
151.68 725.16 l
0.0039978 0.0039978 0.0039978  setrgbcolor
S
0 0 0  setrgbcolor
89.04 548.64 m
(2.7) show
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%DocumentNeededResources:
%%+ font Arial,Bold
%%EOF

%%EndDocument
 @endspecial 633 1708 a Fs(Figure)32 b(5-12:)42 b(Comparison)34
b(to)e(full)h(fusion)g(on)f(a)h(StrongARM)f(1110)840
3376 y @beginspecial 72 @llx 63 @lly 737 @urx 522 @ury
2664 @rwi @setspecial
%%BeginDocument: p3-g2.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (FinalResults.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050612173709-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 63 737 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 63 moveto 737 63 lineto 737 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: file Pscript_CFF PSVER
userdict/ct_CffDict 6 dict put ct_CffDict begin/F0Subr{systemdict/internaldict
known{1183615869 systemdict/internaldict get exec/FlxProc known{save true}{
false}ifelse}{userdict/internaldict known not{userdict/internaldict{count 0 eq
{/internaldict errordict/invalidaccess get exec}if dup type/integertype ne{
/internaldict errordict/invalidaccess get exec}if dup 1183615869 eq{pop 0}{
/internaldict errordict/invalidaccess get exec}ifelse}dup 14 get 1 25 dict put
bind executeonly put}if 1183615869 userdict/internaldict get exec/FlxProc
known{save true}{false}ifelse}ifelse[systemdict/internaldict known not{100
dict/begin cvx/mtx matrix/def cvx}if systemdict/currentpacking known{
currentpacking true setpacking}if{systemdict/internaldict known{1183615869
systemdict/internaldict get exec dup/$FlxDict known not{dup dup length exch
maxlength eq{pop userdict dup/$FlxDict known not{100 dict begin/mtx matrix def
dup/$FlxDict currentdict put end}if}{100 dict begin/mtx matrix def dup
/$FlxDict currentdict put end}ifelse}if/$FlxDict get begin}if grestore/exdef{
exch def}def/dmin exch abs 100 div def/epX exdef/epY exdef/c4y2 exdef/c4x2
exdef/c4y1 exdef/c4x1 exdef/c4y0 exdef/c4x0 exdef/c3y2 exdef/c3x2 exdef/c3y1
exdef/c3x1 exdef/c3y0 exdef/c3x0 exdef/c1y2 exdef/c1x2 exdef/c2x2 c4x2 def
/c2y2 c4y2 def/yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def/PickCoords{{
c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2}{c3x0 c3y0 c3x1
c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2}ifelse/y5 exdef/x5 exdef/y4 exdef
/x4 exdef/y3 exdef/x3 exdef/y2 exdef/x2 exdef/y1 exdef/x1 exdef/y0 exdef/x0
exdef}def mtx currentmatrix pop mtx 0 get abs 1e-05 lt mtx 3 get abs 1e-05 lt
or{/flipXY -1 def}{mtx 1 get abs 1e-05 lt mtx 2 get abs 1e-05 lt or{/flipXY 1
def}{/flipXY 0 def}ifelse}ifelse/erosion 1 def systemdict/internaldict known{
1183615869 systemdict/internaldict get exec dup/erosion known{/erosion get
/erosion exch def}{pop}ifelse}if yflag{flipXY 0 eq c3y2 c4y2 eq or{false
PickCoords}{/shrink c3y2 c4y2 eq{0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs}ifelse
def/yshrink{c4y2 sub shrink mul c4y2 add}def/c1y0 c3y0 yshrink def/c1y1 c3y1
yshrink def/c2y0 c4y0 yshrink def/c2y1 c4y1 yshrink def/c1x0 c3x0 def/c1x1
c3x1 def/c2x0 c4x0 def/c2x1 c4x1 def/dY 0 c3y2 c1y2 sub round dtransform
flipXY 1 eq{exch}if pop abs def dY dmin lt PickCoords y2 c1y2 sub abs .001 gt{
c1x2 c1y2 transform flipXY 1 eq{exch}if/cx exch def/cy exch def/dY 0 y2 c1y2
sub round dtransform flipXY 1 eq{exch}if pop def dY round dup 0 ne{/dY exdef}{
pop dY 0 lt{-1}{1}ifelse/dY exdef}ifelse/erode PaintType 2 ne erosion .5 ge
and def erode{/cy cy .5 sub def}if/ey cy dY add def/ey ey ceiling ey sub ey
floor add def erode{/ey ey .5 add def}if ey cx flipXY 1 eq{exch}if itransform
exch pop y2 sub/eShift exch def/y1 y1 eShift add def/y2 y2 eShift add def/y3
y3 eShift add def}if}ifelse}{flipXY 0 eq c3x2 c4x2 eq or{false PickCoords}{
/shrink c3x2 c4x2 eq{0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs}ifelse def/xshrink
{c4x2 sub shrink mul c4x2 add}def/c1x0 c3x0 xshrink def/c1x1 c3x1 xshrink def
/c2x0 c4x0 xshrink def/c2x1 c4x1 xshrink def/c1y0 c3y0 def/c1y1 c3y1 def/c2y0
c4y0 def/c2y1 c4y1 def/dX c3x2 c1x2 sub round 0 dtransform flipXY -1 eq{exch}
if pop abs def dX dmin lt PickCoords x2 c1x2 sub abs .001 gt{c1x2 c1y2
transform flipXY -1 eq{exch}if/cy exch def/cx exch def/dX x2 c1x2 sub round 0
dtransform flipXY -1 eq{exch}if pop def dX round dup 0 ne{/dX exdef}{pop dX 0
lt{-1}{1}ifelse/dX exdef}ifelse/erode PaintType 2 ne erosion .5 ge and def
erode{/cx cx .5 sub def}if/ex cx dX add def/ex ex ceiling ex sub ex floor add
def erode{/ex ex .5 add def}if ex cy flipXY -1 eq{exch}if itransform pop x2
sub/eShift exch def/x1 x1 eShift add def/x2 x2 eShift add def/x3 x3 eShift add
def}if}ifelse}ifelse x2 x5 eq y2 y5 eq or{x5 y5 lineto}{x0 y0 x1 y1 x2 y2
curveto x3 y3 x4 y4 x5 y5 curveto}ifelse epY epX}systemdict/currentpacking
known{exch setpacking}if/exec cvx/end cvx]cvx executeonly exch{pop true exch
restore}{systemdict/internaldict known not{1183615869 userdict/internaldict
get exec exch/FlxProc exch put true}{1183615869 systemdict/internaldict get
exec dup length exch maxlength eq{false}{1183615869 systemdict/internaldict
get exec exch/FlxProc exch put true}ifelse}ifelse}ifelse{systemdict
/internaldict known{1183615869 systemdict/internaldict get exec/FlxProc get
exec}{1183615869 userdict/internaldict get exec/FlxProc get exec}ifelse}if}
executeonly def/F1Subr{gsave currentpoint newpath moveto}bind def/F2Subr{
currentpoint grestore gsave currentpoint newpath moveto}bind def/HSSubr{
systemdict/internaldict known not{pop 3}{1183615869 systemdict/internaldict
get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck
get exec}{pop 3}ifelse}ifelse}ifelse}bind def end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Arial,Bold
[/N27/Arial,Bold 1 TZ
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 63 665 459 rectclip
[ 0 -1 1 0 8.64 594 ] concat
%%BeginResource: font DCKDJJ+Arial
11 dict begin
/FontName /DCKDJJ+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/parenleft 
<10bf31703a9458c05db7ba7a58bcd7a2c9e91ffe666d66d67924090fad2e
914020d503aadf9240d9b1c6a63953b30ccff5415597f5a6c26fdee68dec
bc331692c1b3543bfce7c82b9d704f4fab4f> ND 
/parenright 
<10bf31703a9458c05d79d3ca9c0e25cc2a0b35ceb7dd46fb51adbfd88390
4d8bf636baa28a31c262d1a3078da5849c1c2b98c958c72994f2c3f78ea4
d099458941ceee627e3f06f9f9a16a1d0c> ND 
/plus 
<10bf317031d9337ef184b43be498749534943b6b82dfb721a4f1e6478fee
6c1f4763fef70c3e4be97d7fac720dea7a> ND 
/hyphen 
<10bf31705995db6ed81c8e93e5d1d568f767c41aee4b2647d0> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d898870164
1dba6c5defb41d909040a164fdb0a088fefa45fff299b57b0e194251a4a8
b9cf3bc1815fd2c5ba06e651f9d7799098b4541de9c35043282b335f2de1
7def94eec0695fa30f7aaa5574cd9d280a8b4d225396feeeafb4b20c3fcc
9f12e751228b7464328a957a71c1d6fc11ef53a8f692024ab80f5e0d7623
62b42a462a2bf96d5a0db86097e421e5cb8c7d7a0900e6cfd70978f26b60
122332f14359637710d630381bc4f9c629fd5be208af03ab6a69f0ba40b9
a2> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac54cb2fa3a278c1c5e8b8e0184d
7cbeaa35d4ddaa02f35f83f589e53f609414a1e8dd86a2916a5d28875546
282a3c313b2605b04804> ND 
/C 
<10bf31704fab892742fc2c6be78329c0825c84c392f40122153ca9a91165
96e2ea405597ca7f292098a14c92b8766b957d29536d6a74922bce6efa67
d7fa67d47a8ae997e897ea42f1e923c09a3ad5b1aa2186622859ef03a213
f7c26727c45c24d289e1bf8fa6a719352242839e565e8af9cb5c48758232
20530e01b09cb28b590a86024fb341940ed5d19a7e036981d38ceef64334
a577636f4f149330a371e1> ND 
/F 
<10bf31702f7c4b31b7f92f61f70a9032d1addef58c81f5b8fed9651d8c00
81acb06eda84b504e7> ND 
/I 
<10bf31701a61e6f9a78e08bbc896e02c88ca268e19a5> ND 
/R 
<10bf31702819c97bfff21764697e50774ba74072e0daf25a84b5ab81ce67
f36424a8f4f31afdf4de9e5912f7a5ba0ce90948b990647285d2500d6d57
ef6e940fb321e739e33f71f0994fb0b96bf3e18815066ca201f1578cce2a
71a0a57bc87021521bfe1b691fde6e9063a575e47bf725cfd1c0afa40b0c
a839a6c28bfd0b7f0f7469b4cf16ee3c7a54706ea2da49ba1db858f3c370
3042b60d2181c6c1afb0bef5eb> ND 
/S 
<10bf31704ab370a8a6c235279ed6c2ccfc716fa1295d141c34dd24f95c73
82e11c724a74e86021432ff58ab0f9585559c2cc7a3fe0720eadda5eee3e
cb055c76e8d7f22cfddbcfbe4ee1a562282b307d86efef90d9a8c71c96ab
9543712fa6240508ea1f38536804c47dfcc21f777c873fc11b7e20f7a228
b35e8d75f100a7da6082feb065d087853344b8bf00df7291cc74173d8c17
2964ca635a4e981f1604dc10d454f452e70073d386bcbe3ed4c09e72aa02
e7eb1e382ccb2fe70e1e9e3084e7824b4261723bffe42f4fc72d36ddcdd9
e884d10e18a55004b6149a9b0c7ead4b42afa8906a80deea322a930f4d91
ac35a6e6186e5d082f09> ND 
/a 
<10bf31705d64e193f685fe465eb14b2f9aa41e82540f554b50893fe63efd
4692fb4fc721a117ec78b6e9515c29fcb60e3aee68a6df1c3946e2cf738d
cda3e29fd055085b4d27d1a9d3bf0581a4eb2a1ee52161275aad552d9745
cae2527ba314929e16b3adcf63fbfe5b600507b479eb6bac8dbf57f9ea61
cf0c38792d951ff40006e32bfab335adbde18dd700c5843625ec18424a1a
470a3d82d751a36d8b4a69f1f5fb08cfc2b94ed2658b49c9985bc490581e
62f221617e1b4bb61c6dcc9e8e61b29e5f74c69c328c213bfddbc217436d
81d1dfe6a13e1cac30c3fa16cb4e265d8db4217e880afbaeb0227e92e214
5534c463a18baaf155fa6678668091a696c5190fde> ND 
/b 
<10bf31703e65fd7e1217c9f29c64bb1b9e17851bf25dd0466fa484e27564
2ef62da05fc0e561425aa7c0cf759f2df2fed9f5cab4e563d9d485ca6e49
6a23023cc7d5336a38ed163f6d25eac0416c891913363ad8aab5312feed7
de0b0bbcc0db8b66958d96174480f5040af2cfb1590a9410022fc6398cb1
d4435f6325a11aad4c77347983eb4748b4ada02263a3> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f67877e80be643ef8
5a01cff57f62859595ad9c2a1ef16f4c22144c6fc4d200f23642de52d57f
47e47c78a8b6713f5cb6dcd4a475047f70e7386f0baddd9f1c37f1598f60
1bc5b6005acf2115ed4aa52ed6ed621e5045f115e6c8ed146247e81ce086
3c881ef71e6e234403d5f37c528c6ebb0616bbdc05a29ca9d830ed27448f
> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/f 
<10bf31706629561882b73d5b02cebd16b0942e445fbe6e3232b3823cbdb2
63dcf8e5b5846268df4eba2210bb667f400c46f76ed43d4b268aed98cf98
689dff659a93d69b1917cc1e5f49aadef7d4b3b6109675927aeb98089c> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987
c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e
6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e
7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df
3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3
e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b
5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/k 
<10bf31703f936777fb99983a11586419ce72aadc44a2aa69d19b91e9f126
e6f5aabcb4381bf8bfee294b80bae1d888f1314da01fbe02> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79e55a006319a903b4934e0296676
bb7a5df970714192f29a85860f4cb191aa4b83ebc5b58328ecf58ed9d6ff
d0d3a63dd21733d64450e3abce2a149390b0894b2fb0fce1ee78d045f446
04c31c787e13fdae7e79785a1956f734ed54b976e123646b63ce5bee0b68
59b26a26c2ad993325ab7bd77cdd1be893a8ccd1451854fed772889a0d7d
7791ac97d81ac7> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3483c7b936ed6e6cf91cffcbd
a815b8df60ae150c20432c17a46c0682480f6226770a8905e960aec3fe5e
934f4cc994b08abf0fc9d432168086e4> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
/v 
<10bf31706ae07dd17dfbac8a1ae33180eda67f1c12c0170124c5b65d6008
42ef910f621d12aef7aac075b848d0659b626414ef71a4> ND 
/x 
<10bf317060ff640a97f40d52fc73b98a64469b3f084ceb61cbde39a670a8
6bdd66d38d792d8bbe1de58b050ff75d7a6d9ab8ab83f71f1130ffc9a46b
7d934ffb8ab93375fd62539cb08006> ND 
/z 
<10bf31706d7bdb7f5f74128c9bb1cf0445a721a78dcf191b2f1eaa106619
49aba2663707d493160b8371e546cec091e3d6d364aa753531debc6523f3
> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/DCKDJJ+Arial findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
dup 65 /A put
dup 67 /C put
dup 70 /F put
dup 73 /I put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 122 /z put
dup 160 /space put
dup 173 /hyphen put
pop
%%EndResource
[/N13/DCKDJJ+Arial 1 TZ
/N10 [/DeviceRGB] /ColorSpace defineRes pop

false setSA
n
92.16 725.16 355.2 -591.72 re
1 1 1 setrgbcolor
f
q
n
388.2 133.44 0.119995 591.72 re
W
n
0.119995 w
10 M
1 j
1 J
[] 0 d
n
388.2 133.44 m
388.2 725.16 l
0 0 0  setrgbcolor
S
Q
q
n
328.92 133.44 0.119995 591.72 re
W
n
0.119995 w
10 M
1 j
1 J
[] 0 d
n
328.92 133.44 m
328.92 725.16 l
0 0 0  setrgbcolor
S
Q
q
n
269.76 133.44 0.119995 591.72 re
W
n
0.119995 w
10 M
1 j
1 J
[] 0 d
n
269.76 133.44 m
269.76 725.16 l
0 0 0  setrgbcolor
S
Q
q
n
210.6 133.44 0.119995 591.72 re
W
n
0.119995 w
10 M
1 j
1 J
[] 0 d
n
210.6 133.44 m
210.6 725.16 l
0 0 0  setrgbcolor
S
Q
q
n
151.32 133.44 0.119995 591.72 re
W
n
0.119995 w
10 M
1 j
1 J
[] 0 d
n
151.32 133.44 m
151.32 725.16 l
0 0 0  setrgbcolor
S
Q
q
n
92.16 133.44 0.119995 591.72 re
W
n
0.119995 w
10 M
1 j
1 J
[] 0 d
n
92.16 133.44 m
92.16 725.16 l
0 0 0  setrgbcolor
S
Q
q
n
72 54 467.04 683.04 re
92.52 134.28 32.04 270.96 re
eoclip
n
0.960007 w
10 M
0 j
1 J
[] 0 d
n
92.16 133.44 355.2 591.72 re
0.501999 0.501999 0.501999  setrgbcolor
S
Q
0.960007 w
10 M
0 j
1 J
[] 0 d
n
443.16 143.16 4.19998 12.96 re
q
0 0 0  setrgbcolor
eofill
Q
0 0 0  setrgbcolor
S
n
435.72 188.64 11.64 12.96 re
q
eofill
Q
S
n
401.52 234.24 45.84 12.96 re
q
eofill
Q
S
n
327.12 279.72 120.24 12.96 re
q
eofill
Q
S
n
398.16 325.2 49.2 12.96 re
q
eofill
Q
S
n
269.76 370.8 177.6 12.96 re
q
eofill
Q
S
n
242.28 416.28 205.08 12.96 re
q
eofill
Q
S
n
254.76 461.76 192.6 12.96 re
q
eofill
Q
S
n
242.4 507.24 204.96 12.96 re
q
eofill
Q
S
q
n
90.24 546.84 357.12 25.08 re
W
n
n
37.56 552.84 409.8 12.96 re
q
eofill
Q
S
Q
q
n
145.32 592.32 302.04 25.08 re
W
n
n
151.32 598.32 296.04 12.96 re
q
eofill
Q
S
Q
n
291.24 643.8 156.12 12.96 re
q
eofill
Q
S
n
355.68 689.4 91.68 12.96 re
q
eofill
Q
S
n
442.32 156.24 5.03998 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
435.72 201.72 11.64 12.96 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
389.76 247.32 57.6 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
308.64 292.8 138.72 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
382.56 338.28 64.8 12.96 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
341.64 383.88 105.72 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
242.28 429.36 205.08 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
353.4 474.84 93.96 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
277.8 520.32 169.56 12.96 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
288 565.92 159.36 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
q
n
171.48 605.4 275.88 24.96 re
W
n
n
177.48 611.4 269.88 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
Q
n
330.84 656.88 116.52 12.96 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
369.12 702.48 78.24 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
0.119995 w
n
92.16 133.44 m
447.36 133.44 l
447.36 129.12 m
447.36 133.44 l
388.2 129.12 m
388.2 133.44 l
328.92 129.12 m
328.92 133.44 l
269.76 129.12 m
269.76 133.44 l
210.6 129.12 m
210.6 133.44 l
151.32 129.12 m
151.32 133.44 l
92.16 129.12 m
92.16 133.44 l
447.36 133.44 m
447.36 725.16 l
451.68 133.44 m
447.36 133.44 l
451.68 178.92 m
447.36 178.92 l
451.68 224.52 m
447.36 224.52 l
451.68 270 m
447.36 270 l
451.68 315.48 m
447.36 315.48 l
451.68 361.08 m
447.36 361.08 l
451.68 406.56 m
447.36 406.56 l
451.68 452.04 m
447.36 452.04 l
451.68 497.52 m
447.36 497.52 l
451.68 543.12 m
447.36 543.12 l
451.68 588.6 m
447.36 588.6 l
451.68 634.08 m
447.36 634.08 l
451.68 679.68 m
447.36 679.68 l
451.68 725.16 m
447.36 725.16 l
S
451.92 114.96 m
/N13 [0 14.04 -14.04 0 0 0] Tf
(0) show
392.76 103.2 m
(0.2) show
333.48 103.2 m
(0.4) show
274.32 103.2 m
(0.6) show
215.159 103.2 m
(0.8) show
155.88 114.96 m
(1) show
96.7195 103.2 m
(1.2) show
499.08 123.48 m
/N13 [-9.9276 9.9276 -9.9276 -9.9276 0 0] Tf
(bitonic)
[-5.51186 5.51186 -2.1959 2.1959 -2.75199 2.75199 -5.51186 5.51186 -5.51186 5.51186 -2.27532 2.27532 -4.95592 4.95592 ] pdfxys
478.561 189.48 m
(fir)
[-2.73806 2.73806 -2.18196 2.18196 -3.284 3.284 ] pdfxys
498.001 215.52 m
(fft)
[-2.76184 2.76184 -2.76184 2.76184 -2.76184 2.76184 ] pdfxys
(-) show
486.362 227.04 m
(f)
[-2.76184 2.76184 ] pdfxys
(i) show
481.442 232.079 m
(ne)
[-5.51868 5.51868 -5.51868 5.51868 ] pdfxys
511.922 247.199 m
(fft)
[-2.76184 2.76184 -2.76184 2.76184 -2.76184 2.76184 ] pdfxys
(-) show
500.283 258.719 m
(c) show
495.362 263.758 m
(oa)
[-5.51868 5.51868 -5.51868 5.51868 ] pdfxys
(r) show
480.962 278.039 m
(s) show
476.042 283.078 m
(e) show
492.362 312.238 m
(3gpp)
[-5.51868 5.51868 -5.51868 5.51868 -5.51868 5.51868 -5.51868 5.51868 ] pdfxys
523.802 326.279 m
(beam) show
(f)
[-2.76093 2.76093 ] pdfxys
(or) show
487.322 362.64 m
(mer)
[-8.27461 8.27461 -5.52474 5.52474 -3.31081 3.31081 ] pdfxys
505.562 390.12 m
(m)
[-8.27264 8.27264 ] pdfxys
(a) show
(tm)
[-2.7629 2.7629 -8.27264 8.27264 ] pdfxys
(u) show
(lt)
[-2.15717 2.15717 -2.7629 2.7629 ] pdfxys
503.402 437.761 m
(fmr)
[-2.76578 2.76578 -8.27552 8.27552 -3.31172 3.31172 ] pdfxys
489.002 452.042 m
(adi)
[-5.51868 5.51868 -5.51868 5.51868 -2.20272 2.20272 ] pdfxys
475.801 465.362 m
(o) show
510.722 475.922 m
(filterbank)
[-2.75396 2.75396 -2.19787 2.19787 -2.27729 2.27729 -2.76389 2.76389 -5.51383 5.51383 -3.24034 3.24034 -5.51383 5.51383 -5.51383 5.51383 -5.51383 5.51383 -4.95789 4.95789 ] pdfxys
516.241 515.882 m
(filterbank2)
[-2.75396 2.75396 -2.19787 2.19787 -2.27729 2.27729 -2.76389 2.76389 -5.51383 5.51383 -3.24034 3.24034 -5.51383 5.51383 -5.51383 5.51383 -5.51383 5.51383 -5.03731 5.03731 -5.51383 5.51383 
] pdfxys
492.362 585.362 m
(ofdm) show
506.042 617.162 m
/N27 [-11.3135 11.3135 -11.3135 -11.3135 0 0] Tf
(ave)
[-6.28334 6.28334 -6.28334 6.28334 -6.28334 6.28334 ] pdfxys
487.192 636.012 m
(r) show
482.841 640.363 m
(age)
[-6.28334 6.28334 -6.9055 6.9055 -6.28334 6.28334 ] pdfxys
511.562 657.122 m
(geomean)
[-6.91353 6.91353 -6.29137 6.29137 -6.91353 6.91353 -10.0587 10.0587 -6.29137 6.29137 -6.29137 6.29137 -6.91353 6.91353 ] pdfxys
315 74.04 m
/N13 -14.04 Tf
(execution time)
[-7.8118 -7.02557 -7.8118 -7.02557 -7.8118 -3.90869 -3.12224 -7.8118 -7.8118 -3.96203 -3.90869 
-3.12224 -11.7008 -7.8118 ] pdfxs
385.081 91.1997 m
(\(normalized to unoptimized StreamIt\))
[-4.68228 -7.8133 -7.8133 -4.68228 -11.7023 -7.8133 -3.12374 -3.12374 -7.02707 -7.8133 -7.8133 
-3.96203 -3.91019 -7.8133 -3.96203 -7.8133 -7.8133 -7.8133 -7.8133 -3.91019 -3.12374 -11.7023 
-3.12374 -7.02707 -7.8133 -7.8133 -3.96203 -9.37164 -3.91019 -4.68228 -7.8133 -7.8133 -11.7023 
-3.91019 -3.91019 -4.68228 ] pdfxs
n
92.64 405.12 31.92 -270.72 re
1 1 1  setrgbcolor
f
n
92.52 134.28 32.04 270.84 re
0 0 0  setrgbcolor
S
0.960007 w
n
104.76 143.16 8.52 8.52 re
q
eofill
Q
S
113.76 155.04 m
/N13 [0 14.04 -14.04 0 0 0] Tf
(Fuse All) show
n
104.76 221.52 8.52 8.52 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
113.76 233.4 m
(CAF+scaling+SR+cutpeek) show
2.5 w
1 j
0 J
n
151.68 134.88 m
151.68 725.16 l
0.0039978 0.0039978 0.0039978  setrgbcolor
S
0 0 0  setrgbcolor
89.04 548.4 m
(1.4) show
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%DocumentNeededResources:
%%+ font Arial,Bold
%%EOF

%%EndDocument
 @endspecial 784 3537 a(Figure)h(5-13:)42 b(Comparison)34
b(to)e(full)h(fusion)g(on)f(a)g(P)m(en)m(tium)j(3)840
5205 y @beginspecial 72 @llx 63 @lly 737 @urx 522 @ury
2664 @rwi @setspecial
%%BeginDocument: i2-g2.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (FinalResults.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050612173908-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 63 737 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 63 moveto 737 63 lineto 737 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: file Pscript_CFF PSVER
userdict/ct_CffDict 6 dict put ct_CffDict begin/F0Subr{systemdict/internaldict
known{1183615869 systemdict/internaldict get exec/FlxProc known{save true}{
false}ifelse}{userdict/internaldict known not{userdict/internaldict{count 0 eq
{/internaldict errordict/invalidaccess get exec}if dup type/integertype ne{
/internaldict errordict/invalidaccess get exec}if dup 1183615869 eq{pop 0}{
/internaldict errordict/invalidaccess get exec}ifelse}dup 14 get 1 25 dict put
bind executeonly put}if 1183615869 userdict/internaldict get exec/FlxProc
known{save true}{false}ifelse}ifelse[systemdict/internaldict known not{100
dict/begin cvx/mtx matrix/def cvx}if systemdict/currentpacking known{
currentpacking true setpacking}if{systemdict/internaldict known{1183615869
systemdict/internaldict get exec dup/$FlxDict known not{dup dup length exch
maxlength eq{pop userdict dup/$FlxDict known not{100 dict begin/mtx matrix def
dup/$FlxDict currentdict put end}if}{100 dict begin/mtx matrix def dup
/$FlxDict currentdict put end}ifelse}if/$FlxDict get begin}if grestore/exdef{
exch def}def/dmin exch abs 100 div def/epX exdef/epY exdef/c4y2 exdef/c4x2
exdef/c4y1 exdef/c4x1 exdef/c4y0 exdef/c4x0 exdef/c3y2 exdef/c3x2 exdef/c3y1
exdef/c3x1 exdef/c3y0 exdef/c3x0 exdef/c1y2 exdef/c1x2 exdef/c2x2 c4x2 def
/c2y2 c4y2 def/yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def/PickCoords{{
c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2}{c3x0 c3y0 c3x1
c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2}ifelse/y5 exdef/x5 exdef/y4 exdef
/x4 exdef/y3 exdef/x3 exdef/y2 exdef/x2 exdef/y1 exdef/x1 exdef/y0 exdef/x0
exdef}def mtx currentmatrix pop mtx 0 get abs 1e-05 lt mtx 3 get abs 1e-05 lt
or{/flipXY -1 def}{mtx 1 get abs 1e-05 lt mtx 2 get abs 1e-05 lt or{/flipXY 1
def}{/flipXY 0 def}ifelse}ifelse/erosion 1 def systemdict/internaldict known{
1183615869 systemdict/internaldict get exec dup/erosion known{/erosion get
/erosion exch def}{pop}ifelse}if yflag{flipXY 0 eq c3y2 c4y2 eq or{false
PickCoords}{/shrink c3y2 c4y2 eq{0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs}ifelse
def/yshrink{c4y2 sub shrink mul c4y2 add}def/c1y0 c3y0 yshrink def/c1y1 c3y1
yshrink def/c2y0 c4y0 yshrink def/c2y1 c4y1 yshrink def/c1x0 c3x0 def/c1x1
c3x1 def/c2x0 c4x0 def/c2x1 c4x1 def/dY 0 c3y2 c1y2 sub round dtransform
flipXY 1 eq{exch}if pop abs def dY dmin lt PickCoords y2 c1y2 sub abs .001 gt{
c1x2 c1y2 transform flipXY 1 eq{exch}if/cx exch def/cy exch def/dY 0 y2 c1y2
sub round dtransform flipXY 1 eq{exch}if pop def dY round dup 0 ne{/dY exdef}{
pop dY 0 lt{-1}{1}ifelse/dY exdef}ifelse/erode PaintType 2 ne erosion .5 ge
and def erode{/cy cy .5 sub def}if/ey cy dY add def/ey ey ceiling ey sub ey
floor add def erode{/ey ey .5 add def}if ey cx flipXY 1 eq{exch}if itransform
exch pop y2 sub/eShift exch def/y1 y1 eShift add def/y2 y2 eShift add def/y3
y3 eShift add def}if}ifelse}{flipXY 0 eq c3x2 c4x2 eq or{false PickCoords}{
/shrink c3x2 c4x2 eq{0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs}ifelse def/xshrink
{c4x2 sub shrink mul c4x2 add}def/c1x0 c3x0 xshrink def/c1x1 c3x1 xshrink def
/c2x0 c4x0 xshrink def/c2x1 c4x1 xshrink def/c1y0 c3y0 def/c1y1 c3y1 def/c2y0
c4y0 def/c2y1 c4y1 def/dX c3x2 c1x2 sub round 0 dtransform flipXY -1 eq{exch}
if pop abs def dX dmin lt PickCoords x2 c1x2 sub abs .001 gt{c1x2 c1y2
transform flipXY -1 eq{exch}if/cy exch def/cx exch def/dX x2 c1x2 sub round 0
dtransform flipXY -1 eq{exch}if pop def dX round dup 0 ne{/dX exdef}{pop dX 0
lt{-1}{1}ifelse/dX exdef}ifelse/erode PaintType 2 ne erosion .5 ge and def
erode{/cx cx .5 sub def}if/ex cx dX add def/ex ex ceiling ex sub ex floor add
def erode{/ex ex .5 add def}if ex cy flipXY -1 eq{exch}if itransform pop x2
sub/eShift exch def/x1 x1 eShift add def/x2 x2 eShift add def/x3 x3 eShift add
def}if}ifelse}ifelse x2 x5 eq y2 y5 eq or{x5 y5 lineto}{x0 y0 x1 y1 x2 y2
curveto x3 y3 x4 y4 x5 y5 curveto}ifelse epY epX}systemdict/currentpacking
known{exch setpacking}if/exec cvx/end cvx]cvx executeonly exch{pop true exch
restore}{systemdict/internaldict known not{1183615869 userdict/internaldict
get exec exch/FlxProc exch put true}{1183615869 systemdict/internaldict get
exec dup length exch maxlength eq{false}{1183615869 systemdict/internaldict
get exec exch/FlxProc exch put true}ifelse}ifelse}ifelse{systemdict
/internaldict known{1183615869 systemdict/internaldict get exec/FlxProc get
exec}{1183615869 userdict/internaldict get exec/FlxProc get exec}ifelse}if}
executeonly def/F1Subr{gsave currentpoint newpath moveto}bind def/F2Subr{
currentpoint grestore gsave currentpoint newpath moveto}bind def/HSSubr{
systemdict/internaldict known not{pop 3}{1183615869 systemdict/internaldict
get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck
get exec}{pop 3}ifelse}ifelse}ifelse}bind def end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Arial,Bold
[/N23/Arial,Bold 1 TZ
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 63 665 459 rectclip
[ 0 -1 1 0 8.64 594 ] concat
%%BeginResource: font DEHCMB+Arial
11 dict begin
/FontName /DEHCMB+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/parenleft 
<10bf31703a9458c05db7ba7a58bcd7a2c9e91ffe666d66d67924090fad2e
914020d503aadf9240d9b1c6a63953b30ccff5415597f5a6c26fdee68dec
bc331692c1b3543bfce7c82b9d704f4fab4f> ND 
/parenright 
<10bf31703a9458c05d79d3ca9c0e25cc2a0b35ceb7dd46fb51adbfd88390
4d8bf636baa28a31c262d1a3078da5849c1c2b98c958c72994f2c3f78ea4
d099458941ceee627e3f06f9f9a16a1d0c> ND 
/plus 
<10bf317031d9337ef184b43be498749534943b6b82dfb721a4f1e6478fee
6c1f4763fef70c3e4be97d7fac720dea7a> ND 
/hyphen 
<10bf31705995db6ed81c8e93e5d1d568f767c41aee4b2647d0> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d898870164
1dba6c5defb41d909040a164fdb0a088fefa45fff299b57b0e194251a4a8
b9cf3bc1815fd2c5ba06e651f9d7799098b4541de9c35043282b335f2de1
7def94eec0695fa30f7aaa5574cd9d280a8b4d225396feeeafb4b20c3fcc
9f12e751228b7464328a957a71c1d6fc11ef53a8f692024ab80f5e0d7623
62b42a462a2bf96d5a0db86097e421e5cb8c7d7a0900e6cfd70978f26b60
122332f14359637710d630381bc4f9c629fd5be208af03ab6a69f0ba40b9
a2> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac54cb2fa3a278c1c5e8b8e0184d
7cbeaa35d4ddaa02f35f83f589e53f609414a1e8dd86a2916a5d28875546
282a3c313b2605b04804> ND 
/C 
<10bf31704fab892742fc2c6be78329c0825c84c392f40122153ca9a91165
96e2ea405597ca7f292098a14c92b8766b957d29536d6a74922bce6efa67
d7fa67d47a8ae997e897ea42f1e923c09a3ad5b1aa2186622859ef03a213
f7c26727c45c24d289e1bf8fa6a719352242839e565e8af9cb5c48758232
20530e01b09cb28b590a86024fb341940ed5d19a7e036981d38ceef64334
a577636f4f149330a371e1> ND 
/F 
<10bf31702f7c4b31b7f92f61f70a9032d1addef58c81f5b8fed9651d8c00
81acb06eda84b504e7> ND 
/I 
<10bf31701a61e6f9a78e08bbc896e02c88ca268e19a5> ND 
/R 
<10bf31702819c97bfff21764697e50774ba74072e0daf25a84b5ab81ce67
f36424a8f4f31afdf4de9e5912f7a5ba0ce90948b990647285d2500d6d57
ef6e940fb321e739e33f71f0994fb0b96bf3e18815066ca201f1578cce2a
71a0a57bc87021521bfe1b691fde6e9063a575e47bf725cfd1c0afa40b0c
a839a6c28bfd0b7f0f7469b4cf16ee3c7a54706ea2da49ba1db858f3c370
3042b60d2181c6c1afb0bef5eb> ND 
/S 
<10bf31704ab370a8a6c235279ed6c2ccfc716fa1295d141c34dd24f95c73
82e11c724a74e86021432ff58ab0f9585559c2cc7a3fe0720eadda5eee3e
cb055c76e8d7f22cfddbcfbe4ee1a562282b307d86efef90d9a8c71c96ab
9543712fa6240508ea1f38536804c47dfcc21f777c873fc11b7e20f7a228
b35e8d75f100a7da6082feb065d087853344b8bf00df7291cc74173d8c17
2964ca635a4e981f1604dc10d454f452e70073d386bcbe3ed4c09e72aa02
e7eb1e382ccb2fe70e1e9e3084e7824b4261723bffe42f4fc72d36ddcdd9
e884d10e18a55004b6149a9b0c7ead4b42afa8906a80deea322a930f4d91
ac35a6e6186e5d082f09> ND 
/a 
<10bf31705d64e193f685fe465eb14b2f9aa41e82540f554b50893fe63efd
4692fb4fc721a117ec78b6e9515c29fcb60e3aee68a6df1c3946e2cf738d
cda3e29fd055085b4d27d1a9d3bf0581a4eb2a1ee52161275aad552d9745
cae2527ba314929e16b3adcf63fbfe5b600507b479eb6bac8dbf57f9ea61
cf0c38792d951ff40006e32bfab335adbde18dd700c5843625ec18424a1a
470a3d82d751a36d8b4a69f1f5fb08cfc2b94ed2658b49c9985bc490581e
62f221617e1b4bb61c6dcc9e8e61b29e5f74c69c328c213bfddbc217436d
81d1dfe6a13e1cac30c3fa16cb4e265d8db4217e880afbaeb0227e92e214
5534c463a18baaf155fa6678668091a696c5190fde> ND 
/b 
<10bf31703e65fd7e1217c9f29c64bb1b9e17851bf25dd0466fa484e27564
2ef62da05fc0e561425aa7c0cf759f2df2fed9f5cab4e563d9d485ca6e49
6a23023cc7d5336a38ed163f6d25eac0416c891913363ad8aab5312feed7
de0b0bbcc0db8b66958d96174480f5040af2cfb1590a9410022fc6398cb1
d4435f6325a11aad4c77347983eb4748b4ada02263a3> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f67877e80be643ef8
5a01cff57f62859595ad9c2a1ef16f4c22144c6fc4d200f23642de52d57f
47e47c78a8b6713f5cb6dcd4a475047f70e7386f0baddd9f1c37f1598f60
1bc5b6005acf2115ed4aa52ed6ed621e5045f115e6c8ed146247e81ce086
3c881ef71e6e234403d5f37c528c6ebb0616bbdc05a29ca9d830ed27448f
> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/f 
<10bf31706629561882b73d5b02cebd16b0942e445fbe6e3232b3823cbdb2
63dcf8e5b5846268df4eba2210bb667f400c46f76ed43d4b268aed98cf98
689dff659a93d69b1917cc1e5f49aadef7d4b3b6109675927aeb98089c> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987
c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e
6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e
7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df
3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3
e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b
5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/k 
<10bf31703f936777fb99983a11586419ce72aadc44a2aa69d19b91e9f126
e6f5aabcb4381bf8bfee294b80bae1d888f1314da01fbe02> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79e55a006319a903b4934e0296676
bb7a5df970714192f29a85860f4cb191aa4b83ebc5b58328ecf58ed9d6ff
d0d3a63dd21733d64450e3abce2a149390b0894b2fb0fce1ee78d045f446
04c31c787e13fdae7e79785a1956f734ed54b976e123646b63ce5bee0b68
59b26a26c2ad993325ab7bd77cdd1be893a8ccd1451854fed772889a0d7d
7791ac97d81ac7> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3483c7b936ed6e6cf91cffcbd
a815b8df60ae150c20432c17a46c0682480f6226770a8905e960aec3fe5e
934f4cc994b08abf0fc9d432168086e4> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
/v 
<10bf31706ae07dd17dfbac8a1ae33180eda67f1c12c0170124c5b65d6008
42ef910f621d12aef7aac075b848d0659b626414ef71a4> ND 
/x 
<10bf317060ff640a97f40d52fc73b98a64469b3f084ceb61cbde39a670a8
6bdd66d38d792d8bbe1de58b050ff75d7a6d9ab8ab83f71f1130ffc9a46b
7d934ffb8ab93375fd62539cb08006> ND 
/z 
<10bf31706d7bdb7f5f74128c9bb1cf0445a721a78dcf191b2f1eaa106619
49aba2663707d493160b8371e546cec091e3d6d364aa753531debc6523f3
> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/DEHCMB+Arial findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
dup 65 /A put
dup 67 /C put
dup 70 /F put
dup 73 /I put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 122 /z put
dup 160 /space put
dup 173 /hyphen put
pop
%%EndResource
[/N13/DEHCMB+Arial 1 TZ
/N10 [/DeviceRGB] /ColorSpace defineRes pop

false setSA
n
92.16 725.16 355.2 -591.72 re
1 1 1 setrgbcolor
f
q
n
388.2 133.44 0.119995 591.72 re
W
n
0.119995 w
10 M
1 j
1 J
[] 0 d
n
388.2 133.44 m
388.2 725.16 l
0 0 0  setrgbcolor
S
Q
q
n
328.92 133.44 0.119995 591.72 re
W
n
0.119995 w
10 M
1 j
1 J
[] 0 d
n
328.92 133.44 m
328.92 725.16 l
0 0 0  setrgbcolor
S
Q
q
n
269.76 133.44 0.119995 591.72 re
W
n
0.119995 w
10 M
1 j
1 J
[] 0 d
n
269.76 133.44 m
269.76 725.16 l
0 0 0  setrgbcolor
S
Q
q
n
210.6 133.44 0.119995 591.72 re
W
n
0.119995 w
10 M
1 j
1 J
[] 0 d
n
210.6 133.44 m
210.6 725.16 l
0 0 0  setrgbcolor
S
Q
q
n
151.32 133.44 0.119995 591.72 re
W
n
0.119995 w
10 M
1 j
1 J
[] 0 d
n
151.32 133.44 m
151.32 725.16 l
0 0 0  setrgbcolor
S
Q
q
n
92.16 133.44 0.119995 591.72 re
W
n
0.119995 w
10 M
1 j
1 J
[] 0 d
n
92.16 133.44 m
92.16 725.16 l
0 0 0  setrgbcolor
S
Q
q
n
72 54 467.04 683.04 re
92.52 134.28 32.04 270.96 re
eoclip
n
0.960007 w
10 M
0 j
1 J
[] 0 d
n
92.16 133.44 355.2 591.72 re
0.501999 0.501999 0.501999  setrgbcolor
S
Q
0.960007 w
10 M
0 j
1 J
[] 0 d
n
442.68 143.16 4.67999 12.96 re
q
0 0 0  setrgbcolor
eofill
Q
0 0 0  setrgbcolor
S
n
405.24 188.64 42.12 12.96 re
q
eofill
Q
S
n
412.8 234.24 34.56 12.96 re
q
eofill
Q
S
n
385.92 279.72 61.44 12.96 re
q
eofill
Q
S
n
397.44 325.2 49.92 12.96 re
q
eofill
Q
S
n
236.64 370.8 210.72 12.96 re
q
eofill
Q
S
n
294.12 416.28 153.24 12.96 re
q
eofill
Q
S
n
379.8 461.76 67.56 12.96 re
q
eofill
Q
S
n
239.04 507.24 208.32 12.96 re
q
eofill
Q
S
n
207.6 552.84 239.76 12.96 re
q
eofill
Q
S
q
n
145.32 592.32 302.04 25.08 re
W
n
n
151.32 598.32 296.04 12.96 re
q
eofill
Q
S
Q
n
322.92 643.8 124.44 12.96 re
q
eofill
Q
S
n
369 689.4 78.36 12.96 re
q
eofill
Q
S
n
441.24 156.24 6.12 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
405.24 201.72 42.12 12.96 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
373.32 247.32 74.04 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
368.28 292.8 79.08 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
383.16 338.28 64.2 12.96 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
307.44 383.88 139.92 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
281.4 429.36 165.96 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
359.04 474.84 88.32 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
290.52 520.32 156.84 12.96 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
268.8 565.92 178.56 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
q
n
145.32 605.4 302.04 24.96 re
W
n
n
151.32 611.4 296.04 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
Q
n
330 656.88 117.36 12.96 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
362.52 702.48 84.84 12.84 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
0.119995 w
n
92.16 133.44 m
447.36 133.44 l
447.36 129.12 m
447.36 133.44 l
388.2 129.12 m
388.2 133.44 l
328.92 129.12 m
328.92 133.44 l
269.76 129.12 m
269.76 133.44 l
210.6 129.12 m
210.6 133.44 l
151.32 129.12 m
151.32 133.44 l
92.16 129.12 m
92.16 133.44 l
447.36 133.44 m
447.36 725.16 l
451.68 133.44 m
447.36 133.44 l
451.68 178.92 m
447.36 178.92 l
451.68 224.52 m
447.36 224.52 l
451.68 270 m
447.36 270 l
451.68 315.48 m
447.36 315.48 l
451.68 361.08 m
447.36 361.08 l
451.68 406.56 m
447.36 406.56 l
451.68 452.04 m
447.36 452.04 l
451.68 497.52 m
447.36 497.52 l
451.68 543.12 m
447.36 543.12 l
451.68 588.6 m
447.36 588.6 l
451.68 634.08 m
447.36 634.08 l
451.68 679.68 m
447.36 679.68 l
451.68 725.16 m
447.36 725.16 l
S
451.92 114.96 m
/N13 [0 14.04 -14.04 0 0 0] Tf
(0) show
392.76 103.2 m
(0.2) show
333.48 103.2 m
(0.4) show
274.32 103.2 m
(0.6) show
215.159 103.2 m
(0.8) show
155.88 114.96 m
(1) show
96.7195 103.2 m
(1.2) show
499.08 123.48 m
/N13 [-9.9276 9.9276 -9.9276 -9.9276 0 0] Tf
(bitonic)
[-5.51186 5.51186 -2.1959 2.1959 -2.75199 2.75199 -5.51186 5.51186 -5.51186 5.51186 -2.27532 2.27532 -4.95592 4.95592 ] pdfxys
478.561 189.48 m
(fir)
[-2.73806 2.73806 -2.18196 2.18196 -3.284 3.284 ] pdfxys
498.001 215.52 m
(fft)
[-2.76184 2.76184 -2.76184 2.76184 -2.76184 2.76184 ] pdfxys
(-) show
486.362 227.04 m
(f)
[-2.76184 2.76184 ] pdfxys
(i) show
481.442 232.079 m
(ne)
[-5.51868 5.51868 -5.51868 5.51868 ] pdfxys
511.922 247.199 m
(fft)
[-2.76184 2.76184 -2.76184 2.76184 -2.76184 2.76184 ] pdfxys
(-) show
500.283 258.719 m
(c) show
495.362 263.758 m
(oa)
[-5.51868 5.51868 -5.51868 5.51868 ] pdfxys
(r) show
480.962 278.039 m
(s) show
476.042 283.078 m
(e) show
492.362 312.238 m
(3gpp)
[-5.51868 5.51868 -5.51868 5.51868 -5.51868 5.51868 -5.51868 5.51868 ] pdfxys
523.802 326.279 m
(beam) show
(f)
[-2.76093 2.76093 ] pdfxys
(or) show
487.322 362.64 m
(mer)
[-8.27461 8.27461 -5.52474 5.52474 -3.31081 3.31081 ] pdfxys
505.562 390.12 m
(m)
[-8.27264 8.27264 ] pdfxys
(a) show
(tm)
[-2.7629 2.7629 -8.27264 8.27264 ] pdfxys
(u) show
(lt)
[-2.15717 2.15717 -2.7629 2.7629 ] pdfxys
503.402 437.761 m
(fmr)
[-2.76578 2.76578 -8.27552 8.27552 -3.31172 3.31172 ] pdfxys
489.002 452.042 m
(adi)
[-5.51868 5.51868 -5.51868 5.51868 -2.20272 2.20272 ] pdfxys
475.801 465.362 m
(o) show
510.722 475.922 m
(filterbank)
[-2.75396 2.75396 -2.19787 2.19787 -2.27729 2.27729 -2.76389 2.76389 -5.51383 5.51383 -3.24034 3.24034 -5.51383 5.51383 -5.51383 5.51383 -5.51383 5.51383 -4.95789 4.95789 ] pdfxys
516.241 515.882 m
(filterbank2)
[-2.75396 2.75396 -2.19787 2.19787 -2.27729 2.27729 -2.76389 2.76389 -5.51383 5.51383 -3.24034 3.24034 -5.51383 5.51383 -5.51383 5.51383 -5.51383 5.51383 -5.03731 5.03731 -5.51383 5.51383 
] pdfxys
492.362 585.362 m
(ofdm) show
506.042 617.162 m
/N23 [-11.3135 11.3135 -11.3135 -11.3135 0 0] Tf
(ave)
[-6.28334 6.28334 -6.28334 6.28334 -6.28334 6.28334 ] pdfxys
487.192 636.012 m
(r) show
482.841 640.363 m
(age)
[-6.28334 6.28334 -6.9055 6.9055 -6.28334 6.28334 ] pdfxys
511.562 657.122 m
/N23 [-9.9276 9.9276 -9.9276 -9.9276 0 0] Tf
(geomean)
[-6.06675 6.06675 -5.5208 5.5208 -6.06675 6.06675 -8.82662 8.82662 -5.5208 5.5208 -5.5208 5.5208 -6.06675 6.06675 ] pdfxys
315 74.04 m
/N13 -14.04 Tf
(execution time)
[-7.8118 -7.02557 -7.8118 -7.02557 -7.8118 -3.90869 -3.12224 -7.8118 -7.8118 -3.96203 -3.90869 
-3.12224 -11.7008 -7.8118 ] pdfxs
385.081 91.1997 m
(\(normalized to unoptimized StreamIt\))
[-4.68228 -7.8133 -7.8133 -4.68228 -11.7023 -7.8133 -3.12374 -3.12374 -7.02707 -7.8133 -7.8133 
-3.96203 -3.91019 -7.8133 -3.96203 -7.8133 -7.8133 -7.8133 -7.8133 -3.91019 -3.12374 -11.7023 
-3.12374 -7.02707 -7.8133 -7.8133 -3.96203 -9.37164 -3.91019 -4.68228 -7.8133 -7.8133 -11.7023 
-3.91019 -3.91019 -4.68228 ] pdfxs
n
92.64 405.12 31.92 -270.72 re
1 1 1  setrgbcolor
f
n
92.52 134.28 32.04 270.84 re
0 0 0  setrgbcolor
S
0.960007 w
n
104.76 143.16 8.52 8.52 re
q
eofill
Q
S
113.76 155.04 m
/N13 [0 14.04 -14.04 0 0 0] Tf
(Fuse All) show
n
104.76 221.52 8.52 8.52 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
113.76 233.4 m
(CAF+scaling+SR+cutpeek) show
2.5 w
1 j
0 J
n
151.68 134.88 m
151.68 725.16 l
0.0039978 0.0039978 0.0039978  setrgbcolor
S
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%DocumentNeededResources:
%%+ font Arial,Bold
%%EOF

%%EndDocument
 @endspecial 767 5367 a(Figure)e(5-14:)42 b(Comparison)34
b(to)e(full)h(fusion)g(on)f(an)h(Itanium)g(2)1901 5649
y(57)p eop
%%Page: 58 58
58 57 bop 150 100 a Fw(5.5)161 b(Ev)-9 b(aluation)77
b(of)i(Mo)t(di\014ed)e(Cac)l(he)f(Aw)l(are)h(F)-13 b(usion)518
374 y(for)53 b(P)l(en)l(tium)f(3)i(and)g(Itanium)f(2)150
674 y Fs(F)-8 b(ull)52 b(fusion)h(with)h(scalar)e(replacemen)m(t)j
(outp)s(erforms)e(cac)m(he)h(optimized)f(executables)i(for)150
855 y Fn(bitonic)p Fs(,)32 b Fn(fft-fine)p Fs(,)g Fn(fft-coarse)f
Fs(and)e Fn(3gpp)h Fs(on)f(b)s(oth)g(the)g(P)m(en)m(tium)i(3)e(and)g
(the)h(Itanium)f(2)150 1035 y(pro)s(cessors,)g(and)d(for)g
Fn(matmult)h Fs(and)g Fn(fmradio)g Fs(b)s(enc)m(hmarks)i(on)d(the)g
(Itanium)h(2)f(\(see)h(Figure)f(5-)150 1216 y(13)36 b(and)h(Figure)g
(5-14\).)54 b(Detailed)37 b(in)m(v)m(estigation)h(using)g(a)e(hardw)m
(are)i(p)s(erformance)f(analyzer)150 1396 y(\(VT)-8 b(une\))41
b(on)f(the)h(P)m(en)m(tium)h(3)e(rev)m(ealed)h(that)f(as)h(our)f(cac)m
(he)h(mo)s(del)f(w)m(ould)h(predict)h(a)d(fully)150 1577
y(fused)c(executable)i(for)c Fn(bitonic)p Fs(,)k Fn(fft-coarse)g
Fs(and)e Fn(fft-fine)h Fs(has)f(5)p Fj(\002)f Fs(-)g(10)p
Fj(\002)g Fs(larger)h(n)m(um-)150 1757 y(b)s(er)40 b(of)f(cycles)i
(during)f(whic)m(h)h(instruction)g(fetc)m(h)g(unit)f(has)f(stalled)i
(\(due)f(to)f(an)h(instruction)150 1938 y(cac)m(he)g(miss\).)65
b(Ho)m(w)m(ev)m(er,)43 b(the)d(analyzer)g(also)f(rev)m(ealed)i(that)e
(fully)h(fused)g(executable)h(issues)150 2119 y(up)29
b(to)f(50\045)h(less)g(total)g(data)f(memory)h(references.)45
b(Suc)m(h)29 b(a)g(reduction)g(in)g(the)g(n)m(um)m(b)s(er)h(of)e(data)
150 2299 y(memory)40 b(references)h(m)m(ust)f(b)s(e)f(due)g(to)g(the)g
(optimizations)h(enabled)g(in)f(the)g(C)g(compiler)h(b)m(y)150
2480 y(fusion)33 b(and)g(scalar)g(replacemen)m(t.)296
2671 y(This)k(observ)-5 b(ation)36 b(suggests)g(that)f(on)g(the)h(P)m
(en)m(tium)h(3)e(and)h(the)f(Itanium)h(2,)g(whic)m(h)h(ha)m(v)m(e)150
2851 y(an)k(L2)g(cac)m(he)i(to)e(fall)f(bac)m(k)j(in)e(cases)i(of)e
(instruction)h(fetc)m(h)g(miss,)j(it)c(ma)m(y)h(b)s(e)g(b)s
(ene\014cial)g(to)150 3032 y(increase)d(the)g(instruction)g(size)g
(limit)f(for)g(actors)g(pro)s(duced)g(b)m(y)h(our)f(cac)m(he)h(a)m(w)m
(are)g(fusion)f(to)150 3212 y(allo)m(w)33 b(more)f(in)m(termediate)i(v)
-5 b(alue)33 b(bu\013ers)g(to)f(b)s(e)g(scalar)g(replaced.)45
b(In)33 b(general,)f(if)g(the)h(o)m(v)m(erall)150 3393
y(sp)s(eedup)j(from)f(the)g(reduction)g(in)g(the)g(n)m(um)m(b)s(er)h
(of)f(data)f(memory)i(references)g(is)f(larger)g(than)150
3573 y(the)d(slo)m(wdo)m(wn)i(due)f(to)f(an)g(increase)h(in)g(the)f(n)m
(um)m(b)s(er)i(of)d(instruction)i(fetc)m(h)g(misses,)i(then)d(it)g(is)
150 3754 y(b)s(ene\014cial)i(to)e(create)h(actors)g(that)f(do)h(not)f
(\014t)h(in)m(to)g(L1)f(instruction)i(cac)m(he.)296 3945
y(Figure)45 b(5-15)f(and)h(Figure)g(5-16)f(sho)m(w)i(the)f(p)s
(erformance)h(of)e(our)h(cac)m(he)h(optimizations)150
4126 y(\(CAF+scaling+SR+cutp)s(eek\))31 b(on)e(a)g(P)m(en)m(tium)i(3)e
(and)g(an)g(Itanium)g(2)g(when)h(the)g(instruction)150
4306 y(limit)42 b(for)f(our)g(cac)m(he)h(a)m(w)m(are)h(fusion)e
(algorithm)g(is)h(set)g(to)f(200Kb)g(\(80\045)g(of)g(the)h(L2)f(cac)m
(he\).)150 4487 y(The)c(only)f(b)s(enc)m(hmark)i(that)e(is)g(negativ)m
(ely)i(impacted)f(b)m(y)g(this)f(c)m(hange)h(is)f Fn(ofdm)p
Fs(,)i(where)f(t)m(w)m(o)150 4667 y(large)25 b(actors)g(are)f(fused)i
(despite)g(a)f(v)m(ery)h(lo)m(w)f(comm)m(unication)i(to)d(computation)h
(ratio,)h(thereb)m(y)150 4848 y(lessening)32 b(the)f(impact)g(of)f
(eliminated)i(memory)f(accesses,)i(while)f(nonetheless)h(w)m(orsening)f
(the)150 5028 y(instruction)40 b(lo)s(calit)m(y)g(and)f(increasing)i
(the)e(total)g(instruction)h(size)h(from)e(47)f(Kb)i(to)f(159)f(Kb)150
5209 y(\(due)33 b(to)f(unrolling\).)296 5400 y(The)38
b(negativ)m(e)f(impact)g(of)f(our)g(mo)s(di\014ed)h(cac)m(he)h(a)m(w)m
(are)f(fusion)f(algorithm)h(on)f Fn(ofdm)h Fs(sug-)1901
5649 y(58)p eop
%%Page: 59 59
59 58 bop 824 1519 a @beginspecial 72 @llx 54 @lly 756
@urx 522 @ury 2664 @rwi @setspecial
%%BeginDocument: p3-g4.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (FinalResults-mod.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050505214018-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 54 756 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 54 moveto 756 54 lineto 756 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 54 684 468 rectclip
[ 0 -1 1 0 18 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font IPLBAI+Arial,Bold
11 dict begin
/FontName /IPLBAI+Arial,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/parenleft 
<10bf31704d42f1352d5273addc7843b77bf144b304a7fd77e3f1cd5aa3d2
5843290f89d4b92d62022c6e20ff3fc16e851d04be964eb564d3148aa849
38f1853bb671322ebdad12328d10df755ca667b8d3> ND 
/parenright 
<10bf31705e9d53b165f4c2bf4ff0b54a54d2b121b1fb0b0443541ece65a0
a8176044e9807e70fc6500f41e661a6236bf6ceec5b6290ebcabc6b4ed73
20f89e31526599e6da59fa9728238cab6dffd27a90873c1ab1c84fdd> ND 
/plus 
<10bf3170472770735fe8241577c1c9d31c4108962ebe7e219eba81eb5eae
3e3663a2b2c13be1bbfea81589b0c693361fb817> ND 
/A 
<10bf317079c9131fe82aed0960139938c7dd11f84d3486e157364ddfe73e
c1324c5f0a78446dd85572d81f76d5fdc971afc3b2e06bf4dc47bc679667
2b63> ND 
/C 
<10bf31704854f6e1a1a667b8970893ea3ae573d8f0b00f1e21c4da392880
f74a33a203a5eb2ac37bb1cec36ec2d3f1d6fe17d030e5f817de254d3a97
9bb0a180214fe6c133873897128ef01292c77a32877dc7bc6158a861cfdf
dd0152abc2812d8268588369a7e1e7abfe54f9dec9721a20ff256d00b940
20d33e255c770f4068fca4b2d690126cca> ND 
/F 
<10bf317027e93a6da982a87edd53b1a22870b99b44157cee5f7e1ac9dd0c
13b8ca1eb59184f62bdabd0c5d> ND 
/I 
<10bf31703d39827325e422c7051b9c34531bb76f5b30bcfd5d> ND 
/R 
<10bf317026ba2bbc95a451500e8f7f1d9eea40aa6073cf8d8a53256d5069
7a95f0a69cc27900ab66f73526710c1dd1b314dd64652bf01e66e7f1a039
9f801abc85bdfedaa9c191a89df077e519ba29ac06c308453bc06fc68fe6
b9d02220c09e8991fe4c96b0e59636d8c7b7e6c81d6ab22b6d7790c2f074
6fd6013faa33b96dab58268b6e89ee1d96b97459969f9ef8dca47d5b13c4
b0ca738a9d2aa7f7b1da1ca4> ND 
/S 
<10bf31705d65c0900ab6f1dec202feebed63a391e8923b6171e4bd9a9891
3483f7e18f03f81efeea9ec6e499086f29e069b330e0714349bdbde86411
119421305eb3ccf831a419f2b1b383ae283eef31cd6ab17d35e046224edf
8d334c91b8f3410ce0b754cf25ffc38b1c45008fedcc6fb476440d278757
5aef3183071e560db2a44ec14079a58ceb82879a9f1a9b4e9fcabb16df58
24675d0a68f72691cd9980f0d6d9adcd3e204eaf9c302558bc548ec6583d
8e097a247d483ed52d9f91d7ca0feb01513c1c9a868c4cf1c92a6751c828
3f7c6f8c290f25> ND 
/a 
<10bf31705d64e193f644676913533d4f242b6181368ed1350652c8cb7a6f
e958f60841a88d1088c20f893090b458ae087d16aa8691f1ae44882b0528
d32f3e9827d4294992e18a57652ae7d531994f09c8f3899ddffaad39408b
1529cb6c6e94b8c5c36f6038811d22f304b6662d870ece2886bb4e9f799a
c37faedbf994154341e467f29126a4c489a05c6fef9ee5143f581ea41499
e4aecea25c0711d5cc7b9f01a37e7c0b7e59d5ee83c610a480921138ec2c
f957d766614f6ccaa7ceb4e20fd6f9ac362e8c090b1abb9485ee8c51fdeb
7fc72063a72ab3373c0c6872cf9ba20b3513a2189f8a98cd5a1ee87742> ND 
/c 
<10bf317047276c49998622737f5c0fdd43bdb1b35b15caae7eb2c80264ad
f0005e1c6be7a1a08efb8ae0111a7ff9c16d6d1d6fe6a62b9718659cdf71
ec1fec12732e715c04b3f3a8feb95e8d0f9e002393845281717573027f79
ad8c8ea5dce4faf3243344c83485cc434093ad2e51e73ce85594056ff3cf
8de95991fd7222c7dec9d4bc6113b2> ND 
/d 
<10bf317046e845f3cc81de7a4b8a8a1b3fe3a86a2a74eb0ce101ae9ff9ea
ca0b0d6152bab57b5a1a20451eca1d8bce22d8934498cbe1f50790f6dd2f
9d5a0cab606ce69313bb3e4094a370b8d3856d24b15d355e84c7c481bc80
d07358154d4cee4bac791720fabdb39630005823af359d78acbc47e52e70
c34626a827ae2272bde1c4ecc0359b7e45162ac0> ND 
/e 
<10bf3170599a82aebce2d0d9cd696e2d2232ae83b1d98ff884add96e0282
26fcd2cbd306888649029fbc75f18f771bf21f4d5f53f71cd70d56907fb2
0780ae57f65359db4c49ca929cb86ae96dd2f43742f720ffcefc0d1d3194
c72a55a6bfcf26d975c031741b09b969ea0410af02ae1e13b6c1d337a6b3
96eba6c714d73f9b5d2c2499a66a60f107d1dad4da56ef> ND 
/f 
<10bf317065f8aa629a44bd3be74bbe0cfa1409656d751dcdbb088484a3c9
84e11d0d09aae771e92b3d48596140fc2967fbcf96b4f7694ddca0744e47
fd6ddc298113201938776b254f36f4878baaf6514d0108bde72f2d6fbb4a
d588> ND 
/g 
<10bf317046e845f3c38d9f70ba4464ac4e8fae8096f95866e14c9cfc76d4
2c91caccc55306d31fd922e308e96ee980323125643f9a86a8ffc2b52c12
c5bb9a13190b6aced9365e9c0da3f6e0016fa2ab359e2b06b32a173590b2
6f2094e4e558e81d1aad3b8794a704066a5c48c5835d67bbce791b1965a9
3fbd5fb55f1203033af92c703c31533cbcf30051576e5b8b57eedca25286
866fdee3b16f9555216746cd0cc4065676d353776467694c68063ac58586
fb4e91cf6077ef9d35ed3bc9160721b2f3dee4f8c47777dc722d34059624
2ed759> ND 
/i 
<10bf317021cc67b2bc312fc6a7ad37016808b8c74342617d801906e8ad23
4c7210637a5c2e2ea339f24d0c> ND 
/k 
<10bf31703cf850293dbeacb4825d9b43eba4ffb09ca8073f22015f91e054
b1f7b181ceef1abb9c955a524d127d186a3d6e0ab18596ed70aada> ND 
/l 
<10bf317021cc67b2bc31c11814793bc69b430b318ded78131a> ND 
/m 
<10bf31703bc84f280bc926798acdec2516269e7061028d385a31d255844f
a27fc6b4cdd6f6ba3dfabbbaadef207eca864f3bc97abd9a4f1b978df039
4779a47e3088a94b9cee6d3b276eef4d4950e88ef4a61f93e0b6cde961dc
7ec12956bd3a56a59704c6c5b5a401c3674bc856b6c34f276e7f1bc3056d
89b4805ca25b43894c427bc43b36554ede70476f7ee25d1a6c03ed9f5e40
5c72135defa96ede67a5a8ef5fea114c19a857db71952cb83f4d11> ND 
/n 
<10bf31702094fda2efce4110428b7f86f5f2073cab682ca78d0dc97da563
e3301b964801f725812f64cb67abc1e242f6d8dcd921f1fbf9e05fee92c3
cf16b5bf6083337a59bf026de7fa548a247b8bde12c672aa0ba0501ccc35
fcca587d7573f11dfc32a2ac31516847d39fb276060c6171da> ND 
/o 
<10bf317041f0d680f4930f6b0672f7536ce2eb70a2366463cc9006c590f6
6bbb22b4a706eff4a93c95880cecbbf82d6e623efa721926a49ba75b71ef
97d0e3d8c35761734c54d6d734cb61cf4c4d7050d90fa115600d26f47050
dfb8739452ed0059ffdca41c137f0b71425a690a4da83dcf8abcf17c206e
c5eff5dd0d7b85b999c37123dfb769cd075b5a162cb33d72426c> ND 
/p 
<10bf31703d364b58d236360a3109f388a509dc9806d07d5bc445174ad942
7c9600246e60ea62f48529a60136f844b413bd7834b903aeb5ec3a65352a
708c943d46c286b502a39b69aec9bc15c2a1798b51edb224db01e94ff1eb
dbf1e97f7f79a2c4ac7f7ccc29f5a1c29ed2d05ed3e5ff111a8b097f8d17
72a84cce0bcd066f78e2de698d38b96a99a99313e7a6639d82> ND 
/r 
<10bf31703f93f6c49808fdd8544fecb184adc28a087f99360dbfdf8b0375
9b819135c930698375e13c34125773b22d251f861dc05246608ab0d559df
442670f87f9615eabcaf25ab4b613b44e059b394bfb9> ND 
/s 
<10bf317050d961e87d157c0fe86ec5afecbd608ce0f232c64dcfb1d39b45
2e71b8ca2a92c46173a52c993c8ea0e3a6a97bbca89eebc0e87a68da7dcf
335cb16989a377c8400340e09bb7a3a4fae54003803791fa4d2f5b88afdc
392f17afecc8a037b6118f07b51c97b137676b140e2fba0e4b7ecc574c70
cbfa35d84fd49bc18c067342180503665d383fcdebee907501f8719ff862
5030352810efab946329f109adefea2f39c8182336b9eb95b38d69ca43cf
161d7fb7e8f46433cafa> ND 
/t 
<10bf3170688ce4cb1d2f5bf487137bec8ecb87b4485146ce17824d997ac5
95ab4afb2e80a065a802ee3f010bb37eac91d0f6ed42677aa9dde7e1ad01
769b95b971dec6d1669588801bb2fb04109e79e9771f019783524f2f268e
35dce126a03e55d028a6951cc9b40e649071f577> ND 
/u 
<10bf317022f1ca2cc2a22c3ff97c1232bc55839582d9c5ff7e86bfa4508d
4c6c2a32b8a91c23bc7417819a6d61bb6c4ffa588f9ea417cfc189ff4ca4
86806cfbdc09b2f0ef54b54c53e50d4afcfcb2df030b19aa33138b0a422d
d58054461b41c9166e86f2fb1f6b43052b68dc3202c1cc> ND 
/x 
<10bf3170638bf24b9ac01ae6f3f5ae817231c94093d6b928339de9a1f6d7
c03f6b6f7762b561ab36e6e40fc21093f89e72e352dadf27c949562edd95
94> ND 
/z 
<10bf31706ea98d84f3c625a1c3450f57f0cb972d7b4342feb5483a382b8c
546af3200ec3102c63cd8ee85ce02beb2b2e7a35b4d49541c8670b9156e1
3f2683e61a914abf9dc96f> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/IPLBAI+Arial,Bold findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 65 /A put
dup 67 /C put
dup 70 /F put
dup 73 /I put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 122 /z put
dup 160 /space put
pop
%%EndResource
[/N15/IPLBAI+Arial,Bold 1 TZ
%%BeginResource: font IPLBAG+Arial
11 dict begin
/FontName /IPLBAG+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/hyphen 
<10bf31705995db6ed81c8e93e5d1d568f767c41aee4b2647d0> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d898870164
1dba6c5defb41d909040a164fdb0a088fefa45fff299b57b0e194251a4a8
b9cf3bc1815fd2c5ba06e651f9d7799098b4541de9c35043282b335f2de1
7def94eec0695fa30f7aaa5574cd9d280a8b4d225396feeeafb4b20c3fcc
9f12e751228b7464328a957a71c1d6fc11ef53a8f692024ab80f5e0d7623
62b42a462a2bf96d5a0db86097e421e5cb8c7d7a0900e6cfd70978f26b60
122332f14359637710d630381bc4f9c629fd5be208af03ab6a69f0ba40b9
a2> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/a 
<10bf31705d64e193f685fe465eb14b2f9aa41e82540f554b50893fe63efd
4692fb4fc721a117ec78b6e9515c29fcb60e3aee68a6df1c3946e2cf738d
cda3e29fd055085b4d27d1a9d3bf0581a4eb2a1ee52161275aad552d9745
cae2527ba314929e16b3adcf63fbfe5b600507b479eb6bac8dbf57f9ea61
cf0c38792d951ff40006e32bfab335adbde18dd700c5843625ec18424a1a
470a3d82d751a36d8b4a69f1f5fb08cfc2b94ed2658b49c9985bc490581e
62f221617e1b4bb61c6dcc9e8e61b29e5f74c69c328c213bfddbc217436d
81d1dfe6a13e1cac30c3fa16cb4e265d8db4217e880afbaeb0227e92e214
5534c463a18baaf155fa6678668091a696c5190fde> ND 
/b 
<10bf31703e65fd7e1217c9f29c64bb1b9e17851bf25dd0466fa484e27564
2ef62da05fc0e561425aa7c0cf759f2df2fed9f5cab4e563d9d485ca6e49
6a23023cc7d5336a38ed163f6d25eac0416c891913363ad8aab5312feed7
de0b0bbcc0db8b66958d96174480f5040af2cfb1590a9410022fc6398cb1
d4435f6325a11aad4c77347983eb4748b4ada02263a3> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f67877e80be643ef8
5a01cff57f62859595ad9c2a1ef16f4c22144c6fc4d200f23642de52d57f
47e47c78a8b6713f5cb6dcd4a475047f70e7386f0baddd9f1c37f1598f60
1bc5b6005acf2115ed4aa52ed6ed621e5045f115e6c8ed146247e81ce086
3c881ef71e6e234403d5f37c528c6ebb0616bbdc05a29ca9d830ed27448f
> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/f 
<10bf31706629561882b73d5b02cebd16b0942e445fbe6e3232b3823cbdb2
63dcf8e5b5846268df4eba2210bb667f400c46f76ed43d4b268aed98cf98
689dff659a93d69b1917cc1e5f49aadef7d4b3b6109675927aeb98089c> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987
c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e
6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e
7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df
3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3
e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b
5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/k 
<10bf31703f936777fb99983a11586419ce72aadc44a2aa69d19b91e9f126
e6f5aabcb4381bf8bfee294b80bae1d888f1314da01fbe02> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79e55a006319a903b4934e0296676
bb7a5df970714192f29a85860f4cb191aa4b83ebc5b58328ecf58ed9d6ff
d0d3a63dd21733d64450e3abce2a149390b0894b2fb0fce1ee78d045f446
04c31c787e13fdae7e79785a1956f734ed54b976e123646b63ce5bee0b68
59b26a26c2ad993325ab7bd77cdd1be893a8ccd1451854fed772889a0d7d
7791ac97d81ac7> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3483c7b936ed6e6cf91cffcbd
a815b8df60ae150c20432c17a46c0682480f6226770a8905e960aec3fe5e
934f4cc994b08abf0fc9d432168086e4> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/IPLBAG+Arial findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 160 /space put
dup 173 /hyphen put
pop
%%EndResource
[/N13/IPLBAG+Arial 1 TZ
q
n
408.72 132.48 0.119995 600.6 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
false setSA
n
408.72 132.48 m
408.72 733.08 l
0 0 0 setrgbcolor
S
Q
q
n
362.88 132.48 0.119995 600.6 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
false setSA
n
362.88 132.48 m
362.88 733.08 l
0 0 0 setrgbcolor
S
Q
q
n
316.92 132.48 0.119995 600.6 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
false setSA
n
316.92 132.48 m
316.92 733.08 l
0 0 0 setrgbcolor
S
Q
q
n
271.08 132.48 0.119995 600.6 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
false setSA
n
271.08 132.48 m
271.08 733.08 l
0 0 0 setrgbcolor
S
Q
q
n
225.24 132.48 0.119995 600.6 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
false setSA
n
225.24 132.48 m
225.24 733.08 l
0 0 0 setrgbcolor
S
Q
q
n
179.4 132.48 0.119995 600.6 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
false setSA
n
179.4 132.48 m
179.4 733.08 l
0 0 0 setrgbcolor
S
Q
q
n
133.44 132.48 0.119995 600.6 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
false setSA
n
133.44 132.48 m
133.44 733.08 l
0 0 0 setrgbcolor
S
Q
q
n
87.12 132.48 367.92 600.6 re
87.6 132.84 18 506.04 re
eoclip
n
1 J
1 j
0.119995 w
10 M
[] 0 d
false setSA
n
87.6 132.48 m
87.6 733.08 l
0 0 0 setrgbcolor
S
Q
q
n
72 54 467.04 683.04 re
87.6 132.84 18 506.04 re
eoclip
n
1 J
0 j
0.960007 w
10 M
[] 0 d
false setSA
n
87.6 132.48 366.96 600.6 re
0.501999 0.501999 0.501999 setrgbcolor
S
Q
1 J
0 j
0.960007 w
10 M
[] 0 d
false setSA
n
450.6 144.12 3.95999 15.48 re
q
0.753006 0.753006 0.753006 setrgbcolor
eofill
Q
0 0 0 setrgbcolor
S
n
444.96 198.72 9.60001 15.48 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
409.92 253.32 44.64 15.48 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
347.04 307.92 107.52 15.48 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
402.12 362.52 52.44 15.48 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
373.8 417.12 80.76 15.48 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
293.4 471.72 161.16 15.48 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
383.16 526.32 71.4 15.48 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
322.56 580.92 132 15.48 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
330 635.52 124.56 15.48 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
245.4 690.12 209.16 15.48 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
451.44 159.72 3.12 15.48 re
q
eofill
Q
S
n
444.72 214.32 9.84 15.48 re
q
eofill
Q
S
n
420.24 268.92 34.32 15.48 re
q
eofill
Q
S
n
347.04 323.52 107.52 15.48 re
q
eofill
Q
S
n
413.28 378.12 41.28 15.48 re
q
eofill
Q
S
n
373.8 432.72 80.76 15.48 re
q
eofill
Q
S
n
321.24 487.32 133.32 15.48 re
q
eofill
Q
S
n
383.16 541.92 71.4 15.48 re
q
eofill
Q
S
n
327.48 596.52 127.08 15.48 re
q
eofill
Q
S
n
330 651.12 124.56 15.48 re
q
eofill
Q
S
n
125.88 705.72 328.68 15.48 re
q
eofill
Q
S
0.119995 w
n
87.6 132.48 m
454.56 132.48 l
454.56 128.16 m
454.56 132.48 l
408.72 128.16 m
408.72 132.48 l
362.88 128.16 m
362.88 132.48 l
316.92 128.16 m
316.92 132.48 l
271.08 128.16 m
271.08 132.48 l
225.24 128.16 m
225.24 132.48 l
179.4 128.16 m
179.4 132.48 l
133.44 128.16 m
133.44 132.48 l
87.6 128.16 m
87.6 132.48 l
454.56 132.48 m
454.56 733.08 l
458.88 132.48 m
454.56 132.48 l
458.88 187.08 m
454.56 187.08 l
458.88 241.68 m
454.56 241.68 l
458.88 296.28 m
454.56 296.28 l
458.88 350.88 m
454.56 350.88 l
458.88 405.48 m
454.56 405.48 l
458.88 460.08 m
454.56 460.08 l
458.88 514.68 m
454.56 514.68 l
458.88 569.28 m
454.56 569.28 l
458.88 623.88 m
454.56 623.88 l
458.88 678.48 m
454.56 678.48 l
458.88 733.08 m
454.56 733.08 l
S
459.12 114 m
/N13 [0 14.04 -14.04 0 0 0] Tf
(0) show
413.279 102.24 m
(0.2) show
367.439 102.24 m
(0.4) show
321.479 102.24 m
(0.6) show
275.638 102.24 m
(0.8) show
229.798 114 m
(1) show
183.957 102.24 m
(1.2) show
137.997 102.24 m
(1.4) show
92.1567 102.24 m
(1.6) show
506.28 127.08 m
/N13 [-9.9276 9.9276 -9.9276 -9.9276 0 0] Tf
(bitonic)
[-5.51186 5.51186 -2.1959 2.1959 -2.75199 2.75199 -5.51186 5.51186 -5.51186 5.51186 -2.2783 2.2783 -4.95592 4.95592 ] pdfxys
485.76 202.2 m
(fir)
[-2.73806 2.73806 -2.18196 2.18196 -3.284 3.284 ] pdfxys
505.2 237.36 m
(fft)
[-2.76184 2.76184 -2.76184 2.76184 -2.76184 2.76184 ] pdfxys
(-) show
493.561 248.88 m
(f)
[-2.76184 2.76184 ] pdfxys
(i) show
488.641 253.919 m
(ne)
[-5.51868 5.51868 -5.51868 5.51868 ] pdfxys
519.12 278.039 m
(fft)
[-2.76184 2.76184 -2.76184 2.76184 -2.76184 2.76184 ] pdfxys
(-) show
507.481 289.559 m
(c) show
502.561 294.598 m
(oa)
[-5.51868 5.51868 -5.51868 5.51868 ] pdfxys
(r) show
488.161 308.879 m
(s) show
483.241 313.918 m
(e) show
499.561 352.198 m
(3gpp)
[-5.51868 5.51868 -5.51868 5.51868 -5.51868 5.51868 -5.51868 5.51868 ] pdfxys
531 375.358 m
(beam) show
(f)
[-2.76093 2.76093 ] pdfxys
(or) show
494.521 411.719 m
(mer)
[-8.27461 8.27461 -5.52474 5.52474 -3.31081 3.31081 ] pdfxys
512.76 448.2 m
(m)
[-8.27264 8.27264 ] pdfxys
(a) show
(tm)
[-2.7629 2.7629 -8.27264 8.27264 ] pdfxys
(u) show
(lt)
[-2.15816 2.15816 -2.7629 2.7629 ] pdfxys
510.6 504.96 m
(fmr)
[-2.76578 2.76578 -8.27552 8.27552 -3.31172 3.31172 ] pdfxys
496.2 519.241 m
(adi)
[-5.51868 5.51868 -5.51868 5.51868 -2.20272 2.20272 ] pdfxys
483 532.56 m
(o) show
517.92 552.24 m
(filterbank)
[-2.75396 2.75396 -2.19787 2.19787 -2.27828 2.27828 -2.76191 2.76191 -5.51383 5.51383 -3.24034 3.24034 -5.51383 5.51383 -5.51383 5.51383 -5.51383 5.51383 -4.95789 4.95789 ] pdfxys
523.439 601.32 m
(filterbank2)
[-2.75396 2.75396 -2.19787 2.19787 -2.27828 2.27828 -2.76191 2.76191 -5.51383 5.51383 -3.24034 3.24034 -5.51383 5.51383 -5.51383 5.51383 -5.51383 5.51383 -5.04029 5.04029 -5.51383 5.51383 
] pdfxys
499.559 679.799 m
(ofdm) show
446.64 74.04 m
/N15 -14.04 Tf
(execution time of CAF+scaling+SR+cutpeek)
[-7.80066 -7.80066 -7.80066 -7.80066 -8.57276 -4.66964 -3.89755 -8.57276 -8.57276 -3.96203 -4.66964 
-3.89755 -12.4759 -7.80066 -3.96203 -8.57276 -4.66964 -3.96203 -10.1311 -10.1311 -8.57276 -8.19378 
-7.80066 -7.80066 -7.80066 -3.89755 -3.89755 -8.57276 -8.57276 -8.19378 -9.359 -10.1311 -8.19378 
-7.80066 -8.57276 -4.66964 -8.57276 -7.80066 -7.80066 -7.80066 ] pdfxs
423.84 91.5604 m
(\(normalized to unoptimized StreamIt\))
[-4.64843 -8.55155 -8.55155 -5.51751 -12.4547 -7.77945 -3.96198 -3.96198 -7.08027 -7.77945 -8.55155 
-3.96203 -4.64843 -8.55155 -3.96203 -8.55155 -8.55155 -8.55155 -8.55155 -4.64843 -3.96198 -12.4771 
-3.96198 -7.08027 -7.77945 -8.55155 -3.96203 -9.33779 -4.64843 -5.51751 -7.77945 -7.77945 -12.4547 
-3.96198 -4.67932 -4.64843 ] pdfxs
n
87.72 638.76 17.88 -505.8 re
1 1 1  setrgbcolor
f
n
87.6 132.84 18 505.92 re
0 0 0  setrgbcolor
S
0.960007 w
n
92.76 173.64 8.52 8.52 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
101.76 185.52 m
/N13 [0 14.04 -14.04 0 0 0] Tf
(before modification) show
n
92.76 384 8.52 8.52002 re
q
eofill
Q
S
101.76 395.88 m
(after instruction limit modification) show
0 J
1 j
2.5 w
n
225.24 132.84 m
225.24 733.08 l
0.0039978 0.0039978 0.0039978  setrgbcolor
S
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 150 1623 a Fs(Figure)34 b(5-15:)44 b(P)m(erformance)35
b(of)f(cac)m(he)h(optimizations)f(after)g(instruction)g(limit)h(mo)s
(di\014cation)150 1743 y(on)d(a)h(P)m(en)m(tium)h(3)824
3370 y @beginspecial 72 @llx 54 @lly 756 @urx 522 @ury
2664 @rwi @setspecial
%%BeginDocument: i2-g4.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (FinalResults-mod.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050505214057-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 54 756 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 54 moveto 756 54 lineto 756 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 54 684 468 rectclip
[ 0 -1 1 0 18 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font JAEHIA+Arial,Bold
11 dict begin
/FontName /JAEHIA+Arial,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/parenleft 
<10bf31704d42f1352d5273addc7843b77bf144b304a7fd77e3f1cd5aa3d2
5843290f89d4b92d62022c6e20ff3fc16e851d04be964eb564d3148aa849
38f1853bb671322ebdad12328d10df755ca667b8d3> ND 
/parenright 
<10bf31705e9d53b165f4c2bf4ff0b54a54d2b121b1fb0b0443541ece65a0
a8176044e9807e70fc6500f41e661a6236bf6ceec5b6290ebcabc6b4ed73
20f89e31526599e6da59fa9728238cab6dffd27a90873c1ab1c84fdd> ND 
/plus 
<10bf3170472770735fe8241577c1c9d31c4108962ebe7e219eba81eb5eae
3e3663a2b2c13be1bbfea81589b0c693361fb817> ND 
/A 
<10bf317079c9131fe82aed0960139938c7dd11f84d3486e157364ddfe73e
c1324c5f0a78446dd85572d81f76d5fdc971afc3b2e06bf4dc47bc679667
2b63> ND 
/C 
<10bf31704854f6e1a1a667b8970893ea3ae573d8f0b00f1e21c4da392880
f74a33a203a5eb2ac37bb1cec36ec2d3f1d6fe17d030e5f817de254d3a97
9bb0a180214fe6c133873897128ef01292c77a32877dc7bc6158a861cfdf
dd0152abc2812d8268588369a7e1e7abfe54f9dec9721a20ff256d00b940
20d33e255c770f4068fca4b2d690126cca> ND 
/F 
<10bf317027e93a6da982a87edd53b1a22870b99b44157cee5f7e1ac9dd0c
13b8ca1eb59184f62bdabd0c5d> ND 
/I 
<10bf31703d39827325e422c7051b9c34531bb76f5b30bcfd5d> ND 
/R 
<10bf317026ba2bbc95a451500e8f7f1d9eea40aa6073cf8d8a53256d5069
7a95f0a69cc27900ab66f73526710c1dd1b314dd64652bf01e66e7f1a039
9f801abc85bdfedaa9c191a89df077e519ba29ac06c308453bc06fc68fe6
b9d02220c09e8991fe4c96b0e59636d8c7b7e6c81d6ab22b6d7790c2f074
6fd6013faa33b96dab58268b6e89ee1d96b97459969f9ef8dca47d5b13c4
b0ca738a9d2aa7f7b1da1ca4> ND 
/S 
<10bf31705d65c0900ab6f1dec202feebed63a391e8923b6171e4bd9a9891
3483f7e18f03f81efeea9ec6e499086f29e069b330e0714349bdbde86411
119421305eb3ccf831a419f2b1b383ae283eef31cd6ab17d35e046224edf
8d334c91b8f3410ce0b754cf25ffc38b1c45008fedcc6fb476440d278757
5aef3183071e560db2a44ec14079a58ceb82879a9f1a9b4e9fcabb16df58
24675d0a68f72691cd9980f0d6d9adcd3e204eaf9c302558bc548ec6583d
8e097a247d483ed52d9f91d7ca0feb01513c1c9a868c4cf1c92a6751c828
3f7c6f8c290f25> ND 
/a 
<10bf31705d64e193f644676913533d4f242b6181368ed1350652c8cb7a6f
e958f60841a88d1088c20f893090b458ae087d16aa8691f1ae44882b0528
d32f3e9827d4294992e18a57652ae7d531994f09c8f3899ddffaad39408b
1529cb6c6e94b8c5c36f6038811d22f304b6662d870ece2886bb4e9f799a
c37faedbf994154341e467f29126a4c489a05c6fef9ee5143f581ea41499
e4aecea25c0711d5cc7b9f01a37e7c0b7e59d5ee83c610a480921138ec2c
f957d766614f6ccaa7ceb4e20fd6f9ac362e8c090b1abb9485ee8c51fdeb
7fc72063a72ab3373c0c6872cf9ba20b3513a2189f8a98cd5a1ee87742> ND 
/c 
<10bf317047276c49998622737f5c0fdd43bdb1b35b15caae7eb2c80264ad
f0005e1c6be7a1a08efb8ae0111a7ff9c16d6d1d6fe6a62b9718659cdf71
ec1fec12732e715c04b3f3a8feb95e8d0f9e002393845281717573027f79
ad8c8ea5dce4faf3243344c83485cc434093ad2e51e73ce85594056ff3cf
8de95991fd7222c7dec9d4bc6113b2> ND 
/d 
<10bf317046e845f3cc81de7a4b8a8a1b3fe3a86a2a74eb0ce101ae9ff9ea
ca0b0d6152bab57b5a1a20451eca1d8bce22d8934498cbe1f50790f6dd2f
9d5a0cab606ce69313bb3e4094a370b8d3856d24b15d355e84c7c481bc80
d07358154d4cee4bac791720fabdb39630005823af359d78acbc47e52e70
c34626a827ae2272bde1c4ecc0359b7e45162ac0> ND 
/e 
<10bf3170599a82aebce2d0d9cd696e2d2232ae83b1d98ff884add96e0282
26fcd2cbd306888649029fbc75f18f771bf21f4d5f53f71cd70d56907fb2
0780ae57f65359db4c49ca929cb86ae96dd2f43742f720ffcefc0d1d3194
c72a55a6bfcf26d975c031741b09b969ea0410af02ae1e13b6c1d337a6b3
96eba6c714d73f9b5d2c2499a66a60f107d1dad4da56ef> ND 
/f 
<10bf317065f8aa629a44bd3be74bbe0cfa1409656d751dcdbb088484a3c9
84e11d0d09aae771e92b3d48596140fc2967fbcf96b4f7694ddca0744e47
fd6ddc298113201938776b254f36f4878baaf6514d0108bde72f2d6fbb4a
d588> ND 
/g 
<10bf317046e845f3c38d9f70ba4464ac4e8fae8096f95866e14c9cfc76d4
2c91caccc55306d31fd922e308e96ee980323125643f9a86a8ffc2b52c12
c5bb9a13190b6aced9365e9c0da3f6e0016fa2ab359e2b06b32a173590b2
6f2094e4e558e81d1aad3b8794a704066a5c48c5835d67bbce791b1965a9
3fbd5fb55f1203033af92c703c31533cbcf30051576e5b8b57eedca25286
866fdee3b16f9555216746cd0cc4065676d353776467694c68063ac58586
fb4e91cf6077ef9d35ed3bc9160721b2f3dee4f8c47777dc722d34059624
2ed759> ND 
/i 
<10bf317021cc67b2bc312fc6a7ad37016808b8c74342617d801906e8ad23
4c7210637a5c2e2ea339f24d0c> ND 
/k 
<10bf31703cf850293dbeacb4825d9b43eba4ffb09ca8073f22015f91e054
b1f7b181ceef1abb9c955a524d127d186a3d6e0ab18596ed70aada> ND 
/l 
<10bf317021cc67b2bc31c11814793bc69b430b318ded78131a> ND 
/m 
<10bf31703bc84f280bc926798acdec2516269e7061028d385a31d255844f
a27fc6b4cdd6f6ba3dfabbbaadef207eca864f3bc97abd9a4f1b978df039
4779a47e3088a94b9cee6d3b276eef4d4950e88ef4a61f93e0b6cde961dc
7ec12956bd3a56a59704c6c5b5a401c3674bc856b6c34f276e7f1bc3056d
89b4805ca25b43894c427bc43b36554ede70476f7ee25d1a6c03ed9f5e40
5c72135defa96ede67a5a8ef5fea114c19a857db71952cb83f4d11> ND 
/n 
<10bf31702094fda2efce4110428b7f86f5f2073cab682ca78d0dc97da563
e3301b964801f725812f64cb67abc1e242f6d8dcd921f1fbf9e05fee92c3
cf16b5bf6083337a59bf026de7fa548a247b8bde12c672aa0ba0501ccc35
fcca587d7573f11dfc32a2ac31516847d39fb276060c6171da> ND 
/o 
<10bf317041f0d680f4930f6b0672f7536ce2eb70a2366463cc9006c590f6
6bbb22b4a706eff4a93c95880cecbbf82d6e623efa721926a49ba75b71ef
97d0e3d8c35761734c54d6d734cb61cf4c4d7050d90fa115600d26f47050
dfb8739452ed0059ffdca41c137f0b71425a690a4da83dcf8abcf17c206e
c5eff5dd0d7b85b999c37123dfb769cd075b5a162cb33d72426c> ND 
/p 
<10bf31703d364b58d236360a3109f388a509dc9806d07d5bc445174ad942
7c9600246e60ea62f48529a60136f844b413bd7834b903aeb5ec3a65352a
708c943d46c286b502a39b69aec9bc15c2a1798b51edb224db01e94ff1eb
dbf1e97f7f79a2c4ac7f7ccc29f5a1c29ed2d05ed3e5ff111a8b097f8d17
72a84cce0bcd066f78e2de698d38b96a99a99313e7a6639d82> ND 
/r 
<10bf31703f93f6c49808fdd8544fecb184adc28a087f99360dbfdf8b0375
9b819135c930698375e13c34125773b22d251f861dc05246608ab0d559df
442670f87f9615eabcaf25ab4b613b44e059b394bfb9> ND 
/s 
<10bf317050d961e87d157c0fe86ec5afecbd608ce0f232c64dcfb1d39b45
2e71b8ca2a92c46173a52c993c8ea0e3a6a97bbca89eebc0e87a68da7dcf
335cb16989a377c8400340e09bb7a3a4fae54003803791fa4d2f5b88afdc
392f17afecc8a037b6118f07b51c97b137676b140e2fba0e4b7ecc574c70
cbfa35d84fd49bc18c067342180503665d383fcdebee907501f8719ff862
5030352810efab946329f109adefea2f39c8182336b9eb95b38d69ca43cf
161d7fb7e8f46433cafa> ND 
/t 
<10bf3170688ce4cb1d2f5bf487137bec8ecb87b4485146ce17824d997ac5
95ab4afb2e80a065a802ee3f010bb37eac91d0f6ed42677aa9dde7e1ad01
769b95b971dec6d1669588801bb2fb04109e79e9771f019783524f2f268e
35dce126a03e55d028a6951cc9b40e649071f577> ND 
/u 
<10bf317022f1ca2cc2a22c3ff97c1232bc55839582d9c5ff7e86bfa4508d
4c6c2a32b8a91c23bc7417819a6d61bb6c4ffa588f9ea417cfc189ff4ca4
86806cfbdc09b2f0ef54b54c53e50d4afcfcb2df030b19aa33138b0a422d
d58054461b41c9166e86f2fb1f6b43052b68dc3202c1cc> ND 
/x 
<10bf3170638bf24b9ac01ae6f3f5ae817231c94093d6b928339de9a1f6d7
c03f6b6f7762b561ab36e6e40fc21093f89e72e352dadf27c949562edd95
94> ND 
/z 
<10bf31706ea98d84f3c625a1c3450f57f0cb972d7b4342feb5483a382b8c
546af3200ec3102c63cd8ee85ce02beb2b2e7a35b4d49541c8670b9156e1
3f2683e61a914abf9dc96f> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/JAEHIA+Arial,Bold findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 65 /A put
dup 67 /C put
dup 70 /F put
dup 73 /I put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 122 /z put
dup 160 /space put
pop
%%EndResource
[/N15/JAEHIA+Arial,Bold 1 TZ
%%BeginResource: font JAEHGO+Arial
11 dict begin
/FontName /JAEHGO+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/hyphen 
<10bf31705995db6ed81c8e93e5d1d568f767c41aee4b2647d0> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d898870164
1dba6c5defb41d909040a164fdb0a088fefa45fff299b57b0e194251a4a8
b9cf3bc1815fd2c5ba06e651f9d7799098b4541de9c35043282b335f2de1
7def94eec0695fa30f7aaa5574cd9d280a8b4d225396feeeafb4b20c3fcc
9f12e751228b7464328a957a71c1d6fc11ef53a8f692024ab80f5e0d7623
62b42a462a2bf96d5a0db86097e421e5cb8c7d7a0900e6cfd70978f26b60
122332f14359637710d630381bc4f9c629fd5be208af03ab6a69f0ba40b9
a2> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/a 
<10bf31705d64e193f685fe465eb14b2f9aa41e82540f554b50893fe63efd
4692fb4fc721a117ec78b6e9515c29fcb60e3aee68a6df1c3946e2cf738d
cda3e29fd055085b4d27d1a9d3bf0581a4eb2a1ee52161275aad552d9745
cae2527ba314929e16b3adcf63fbfe5b600507b479eb6bac8dbf57f9ea61
cf0c38792d951ff40006e32bfab335adbde18dd700c5843625ec18424a1a
470a3d82d751a36d8b4a69f1f5fb08cfc2b94ed2658b49c9985bc490581e
62f221617e1b4bb61c6dcc9e8e61b29e5f74c69c328c213bfddbc217436d
81d1dfe6a13e1cac30c3fa16cb4e265d8db4217e880afbaeb0227e92e214
5534c463a18baaf155fa6678668091a696c5190fde> ND 
/b 
<10bf31703e65fd7e1217c9f29c64bb1b9e17851bf25dd0466fa484e27564
2ef62da05fc0e561425aa7c0cf759f2df2fed9f5cab4e563d9d485ca6e49
6a23023cc7d5336a38ed163f6d25eac0416c891913363ad8aab5312feed7
de0b0bbcc0db8b66958d96174480f5040af2cfb1590a9410022fc6398cb1
d4435f6325a11aad4c77347983eb4748b4ada02263a3> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f67877e80be643ef8
5a01cff57f62859595ad9c2a1ef16f4c22144c6fc4d200f23642de52d57f
47e47c78a8b6713f5cb6dcd4a475047f70e7386f0baddd9f1c37f1598f60
1bc5b6005acf2115ed4aa52ed6ed621e5045f115e6c8ed146247e81ce086
3c881ef71e6e234403d5f37c528c6ebb0616bbdc05a29ca9d830ed27448f
> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/f 
<10bf31706629561882b73d5b02cebd16b0942e445fbe6e3232b3823cbdb2
63dcf8e5b5846268df4eba2210bb667f400c46f76ed43d4b268aed98cf98
689dff659a93d69b1917cc1e5f49aadef7d4b3b6109675927aeb98089c> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987
c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e
6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e
7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df
3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3
e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b
5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/k 
<10bf31703f936777fb99983a11586419ce72aadc44a2aa69d19b91e9f126
e6f5aabcb4381bf8bfee294b80bae1d888f1314da01fbe02> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79e55a006319a903b4934e0296676
bb7a5df970714192f29a85860f4cb191aa4b83ebc5b58328ecf58ed9d6ff
d0d3a63dd21733d64450e3abce2a149390b0894b2fb0fce1ee78d045f446
04c31c787e13fdae7e79785a1956f734ed54b976e123646b63ce5bee0b68
59b26a26c2ad993325ab7bd77cdd1be893a8ccd1451854fed772889a0d7d
7791ac97d81ac7> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3483c7b936ed6e6cf91cffcbd
a815b8df60ae150c20432c17a46c0682480f6226770a8905e960aec3fe5e
934f4cc994b08abf0fc9d432168086e4> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/JAEHGO+Arial findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 160 /space put
dup 173 /hyphen put
pop
%%EndResource
[/N13/JAEHGO+Arial 1 TZ
q
n
409.02 132.3 0.0599976 600.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
409.02 132.3 m
409.02 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
363.12 132.3 0.0599976 600.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
363.12 132.3 m
363.12 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
317.16 132.3 0.0599976 600.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
317.16 132.3 m
317.16 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
271.26 132.3 0.0599976 600.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
271.26 132.3 m
271.26 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
225.3 132.3 0.0599976 600.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
225.3 132.3 m
225.3 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
179.34 132.3 0.0599976 600.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
179.34 132.3 m
179.34 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
133.44 132.3 0.0599976 600.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
133.44 132.3 m
133.44 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
87.48 132.3 0.0599976 600.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
87.48 132.3 m
87.48 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
72 54 467.04 683.04 re
87.6 132.96 18 505.98 re
eoclip
n
1 J
0 j
0.960007 w
10 M
[] 0 d
false setSA
n
87.48 132.3 367.5 600.72 re
0.501999 0.501999 0.501999 setrgbcolor
S
Q
1 J
0 j
0.960007 w
10 M
[] 0 d
false setSA
n
450.3 144 4.67999 15.54 re
q
0.753006 0.753006 0.753006 setrgbcolor
eofill
Q
0 0 0 setrgbcolor
S
n
422.7 198.6 32.28 15.54 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
397.56 253.2 57.42 15.6 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
393.6 307.86 61.38 15.54 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
404.16 362.46 50.82 15.54 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
346.38 417.06 108.6 15.54 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
326.16 471.66 128.82 15.54 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
386.7 526.26 68.28 15.54 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
333.24 580.86 121.74 15.6 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
316.38 635.52 138.6 15.54 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
225.3 690.12 229.68 15.54 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
450.3 159.6 4.67999 15.54 re
q
eofill
Q
S
n
422.7 214.2 32.28 15.54 re
q
eofill
Q
S
n
428.16 268.86 26.82 15.54 re
q
eofill
Q
S
n
405.78 323.46 49.2 15.54 re
q
eofill
Q
S
n
414.48 378.06 40.5 15.54 re
q
eofill
Q
S
n
346.38 432.66 108.6 15.54 re
q
eofill
Q
S
n
350.52 487.26 104.46 15.54 re
q
eofill
Q
S
n
386.7 541.86 68.28 15.54 re
q
eofill
Q
S
n
333.24 596.52 121.74 15.54 re
q
eofill
Q
S
n
316.38 651.12 138.6 15.54 re
q
eofill
Q
S
q
n
131.64 700.32 323.34 26.4 re
W
n
n
137.04 705.72 317.94 15.54 re
q
eofill
Q
S
Q
0.0599976 w
n
87.48 132.3 m
454.98 132.3 l
454.98 127.98 m
454.98 132.3 l
409.02 127.98 m
409.02 132.3 l
363.12 127.98 m
363.12 132.3 l
317.16 127.98 m
317.16 132.3 l
271.26 127.98 m
271.26 132.3 l
225.3 127.98 m
225.3 132.3 l
179.34 127.98 m
179.34 132.3 l
133.44 127.98 m
133.44 132.3 l
87.48 127.98 m
87.48 132.3 l
454.98 132.3 m
454.98 733.02 l
459.3 132.3 m
454.98 132.3 l
459.3 186.9 m
454.98 186.9 l
459.3 241.5 m
454.98 241.5 l
459.3 296.16 m
454.98 296.16 l
459.3 350.76 m
454.98 350.76 l
459.3 405.36 m
454.98 405.36 l
459.3 459.96 m
454.98 459.96 l
459.3 514.56 m
454.98 514.56 l
459.3 569.16 m
454.98 569.16 l
459.3 623.82 m
454.98 623.82 l
459.3 678.42 m
454.98 678.42 l
459.3 733.02 m
454.98 733.02 l
S
459.54 113.88 m
/N13 [0 13.98 -13.98 0 0 0] Tf
(0) show
413.579 102.18 m
(0.2) show
367.679 102.18 m
(0.4) show
321.718 102.18 m
(0.6) show
275.818 102.18 m
(0.8) show
229.857 113.88 m
(1) show
183.897 102.18 m
(1.2) show
137.996 102.18 m
(1.4) show
92.0356 102.18 m
(1.6) show
506.4 127.02 m
/N13 [-9.88519 9.88519 -9.88519 -9.88519 0 0] Tf
(b) show
500.939 132.54 m
(it)
[-2.21804 2.21804 -2.77176 2.77176 ] pdfxys
495.96 137.46 m
(o) show
490.5 142.98 m
(ni)
[-5.51894 5.51894 -2.21714 2.21714 ] pdfxys
482.759 150.661 m
(c) show
486 202.02 m
(f) show
483.299 204.78 m
(ir)
[-2.21804 2.21804 -3.31538 3.31538 ] pdfxys
505.32 237.3 m
(f) show
502.619 240.06 m
(ft-f)
[-2.76 2.76 -2.76 2.76 -3.30361 3.30361 -2.76 2.76 ] pdfxys
491.039 251.58 m
(i) show
488.88 253.8 m
(ne)
[-5.51894 5.51894 -5.51894 5.51894 ] pdfxys
519.119 278.16 m
(f) show
516.419 280.92 m
(ft-coars)
[-2.75502 2.75502 -2.75502 2.75502 -3.29863 3.29863 -4.94953 4.94953 -5.5031 5.5031 -5.45862 5.45862 -3.29962 3.29962 -4.94953 4.94953 ] pdfxys
483.419 313.86 m
(e) show
499.799 352.08 m
(3) show
494.338 357.6 m
(gp)
[-5.51894 5.51894 -5.51894 5.51894 ] pdfxys
483.298 368.581 m
(p) show
531.118 375.361 m
(b) show
525.658 380.881 m
(ea)
[-5.51894 5.51894 -5.51894 5.51894 ] pdfxys
514.618 391.861 m
(mf) show
(o) show
498.178 408.361 m
(rmer)
[-3.30165 3.30165 -8.24425 8.24425 -5.50612 5.50612 -3.30165 3.30165 ] pdfxys
512.938 448.141 m
(m) show
504.718 456.421 m
(a) show
499.198 461.881 m
(t) show
496.497 464.641 m
(m) show
488.217 472.862 m
(u) show
482.757 478.382 m
(l) show
480.538 480.542 m
(t) show
510.777 504.902 m
(f) show
508.077 507.662 m
(m) show
499.797 515.882 m
(ra)
[-3.29954 3.29954 -5.50401 5.50401 ] pdfxys
491.037 524.702 m
(d) show
485.517 530.163 m
(i) show
483.357 532.382 m
(o) show
517.977 552.362 m
(f) show
515.276 555.122 m
(il)
[-2.21804 2.21804 -2.21804 2.21804 ] pdfxys
510.837 559.502 m
(t) show
508.136 562.262 m
(erb)
[-5.512 5.512 -3.30753 3.30753 -5.512 5.512 ] pdfxys
493.797 576.542 m
(a) show
488.336 582.062 m
(n) show
482.816 587.523 m
(k) show
523.496 601.443 m
(f) show
520.795 604.203 m
(il)
[-2.21804 2.21804 -2.21804 2.21804 ] pdfxys
516.355 608.583 m
(t) show
513.655 611.343 m
(erb)
[-5.512 5.512 -3.30753 3.30753 -5.512 5.512 ] pdfxys
499.315 625.623 m
(a) show
493.855 631.143 m
(n) show
488.335 636.604 m
(k) show
483.415 641.583 m
(2) show
499.735 679.803 m
(o) show
494.275 685.323 m
(fd)
[-2.76196 2.76196 -5.51004 5.51004 ] pdfxys
485.995 693.544 m
(m) show
446.64 73.92 m
/N15 -13.98 Tf
(execution time of CAF+scaling+SR+cutpeek)
[-7.77842 -7.77842 -7.77842 -7.77842 -8.54722 -4.66078 -3.89198 -8.54722 -8.54722 -3.9018 -4.66078 
-3.89198 -12.4337 -7.77842 -3.9018 -8.54722 -4.66078 -3.9018 -10.0989 -10.0989 -8.54722 -8.16986 
-7.77842 -7.77842 -7.77842 -3.89198 -3.89198 -8.54722 -8.54722 -8.16986 -9.33009 -10.0989 -8.16986 
-7.77842 -8.54722 -4.66078 -8.54722 -7.77842 -7.77842 -7.77842 ] pdfxs
423.479 91.3195 m
(\(normalized to unoptimized StreamIt\))
[-4.66227 -8.54871 -8.54871 -5.44515 -12.4351 -7.77991 -3.89348 -3.89348 -6.99704 -7.77991 -8.54871 
-3.90329 -4.66227 -8.54871 -3.90329 -8.54871 -8.54871 -8.54871 -8.54871 -4.66227 -3.89348 -12.4351 
-3.89348 -6.99704 -7.77991 -8.54871 -3.90329 -9.33159 -4.66227 -5.44515 -7.77991 -7.77991 -12.4351 
-3.89348 -4.66227 -4.66227 ] pdfxs
n
87.66 638.88 17.94 -505.86 re
1 1 1  setrgbcolor
f
n
87.6 132.96 18 505.92 re
0 0 0  setrgbcolor
S
0.960007 w
n
92.76 174 8.58 8.58 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
101.82 185.88 m
/N13 [0 13.98 -13.98 0 0 0] Tf
(before modification) show
n
92.76 384.54 8.58 8.58002 re
q
eofill
Q
S
101.82 396.42 m
(after instruction limit modification) show
0 J
1 j
2.5 w
n
225.3 132.96 m
225.3 733.02 l
0.0039978 0.0039978 0.0039978  setrgbcolor
S
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 150 3474 a(Figure)g(5-16:)44 b(P)m(erformance)35
b(of)f(cac)m(he)h(optimizations)f(after)g(instruction)g(limit)h(mo)s
(di\014cation)150 3594 y(on)d(an)h(Itanium)g(2)150 3968
y(gests)43 b(that)g(in)f(order)h(to)f(a)m(v)m(oid)h(the)g(negativ)m(e)h
(p)s(erformance)f(impact,)i(w)m(e)f(need)f(to)f(dev)m(elop)150
4148 y(a)c(detailed)i(cost)f(mo)s(del)f(for)g(ev)-5 b(aluating)39
b(the)g(tradeo\013)f(b)s(et)m(w)m(een)j(register)e(allo)s(cation)f(due)
h(to)150 4329 y(scalar)24 b(replacemen)m(t,)k(and)c(the)h(negativ)m(e)g
(impact)g(of)e(increased)j(co)s(de)e(size)h(due)g(to)f(the)g(excessiv)m
(e)150 4509 y(unrolling)33 b(that)f(is)h(necessary)i(to)d(enable)i
(scalar)f(replacemen)m(t.)1901 5649 y(59)p eop
%%Page: 60 60
60 59 bop 1901 5649 a Fs(60)p eop
%%Page: 61 61
61 60 bop 150 895 a Fq(Chapter)78 b(6)150 1442 y(Related)g(W)-19
b(ork)150 1962 y Fs(There)32 b(is)f(a)f(large)g(b)s(o)s(dy)h(of)f
(literature)h(on)f(sc)m(heduling)j(sync)m(hronous)f(data\015o)m(w)f
(\(SDF\))f(graphs)150 2143 y(to)35 b(optimize)h(v)-5
b(arious)36 b(metrics)g([4,)f(5].)51 b(The)36 b(w)m(ork)g(most)g
(closely)h(related)f(to)e(ours)i(is)g(a)f(recen)m(t)150
2323 y(study)29 b(b)m(y)f(Kohli)g([16])f(on)h(cac)m(he)h(a)m(w)m(are)f
(sc)m(heduling)i(of)d(SDF)g(graphs,)i(implemen)m(ted)h(as)e(part)f(of)
150 2504 y(the)36 b(Ptolem)m(y)i(framew)m(ork)e(for)g(sim)m(ulating)h
(heterogeneous)g(em)m(b)s(edded)h(systems)g([19].)53
b(Kohli)150 2684 y(dev)m(elops)46 b(a)d(Cac)m(he)i(Aw)m(are)f(Sc)m
(heduling)h(\(CAS\))f(heuristic)h(for)e(an)h(em)m(b)s(edded)h(target)e
(with)150 2865 y(a)48 b(soft)m(w)m(are-managed)g(scratc)m(hpad)i
(instruction)f(cac)m(he.)91 b(His)48 b(algorithm)g(greedily)h(decides)
150 3045 y(ho)m(w)37 b(man)m(y)h(times)f(to)f(execute)j(a)d(giv)m(en)i
(actor)e(based)h(on)g(estimates)h(of)e(the)h(data)f(cac)m(he)i(and)150
3226 y(instruction)e(cac)m(he)g(p)s(enalties)g(asso)s(ciated)f(with)h
(switc)m(hing)g(to)f(the)g(next)g(actor.)50 b(In)35 b(con)m(trast,)150
3407 y(our)h(algorithm)g(considers)j(the)d(bu\013ering)h(requiremen)m
(ts)i(of)d(all)h(\014lters)g(in)g(a)f(giv)m(en)h(con)m(tainer)150
3587 y(and)29 b(increases)j(the)e(m)m(ultiplicit)m(y)h(so)f(long)f(as)h
(90\045)f(of)g(bu\013ers)h(are)g(con)m(tained)g(within)h(the)e(data)150
3768 y(cac)m(he.)82 b(Kohli)46 b(do)s(es)f(not)g(consider)i(bu\013er)e
(managemen)m(t)i(strategies,)i(and)c(the)h(ev)-5 b(aluation)150
3948 y(is)46 b(limited)h(to)e(one)h(6-\014lter)g(pip)s(eline)h(and)f
(an)f(assortmen)m(t)i(of)f(random)f(SDF)g(graphs.)84
b(An)150 4129 y(empirical)30 b(comparison)g(of)e(our)h(heuristics)i(on)
e(a)g(common)g(arc)m(hitectural)h(target)f(w)m(ould)h(b)s(e)f(an)150
4309 y(in)m(teresting)34 b(direction)g(for)e(future)h(w)m(ork.)296
4497 y(It)41 b(is)g(recognized)h(that)e(there)h(is)g(a)f(tradeo\013)h
(b)s(et)m(w)m(een)h(co)s(de)f(size)h(and)e(bu\013er)h(size)h(when)150
4678 y(determining)37 b(an)f(SDF)g(sc)m(hedule.)56 b(Most)36
b(tec)m(hniques)j(to)d(date)g(ha)m(v)m(e)h(fo)s(cused)g(on)f(\\single)h
(ap-)150 4858 y(p)s(earance)30 b(sc)m(hedules")i(in)e(whic)m(h)h(eac)m
(h)f(\014lter)g(app)s(ears)g(at)f(only)g(one)h(p)s(osition)g(in)f(the)h
(lo)s(op)f(nest)150 5039 y(denoting)45 b(the)g(sc)m(hedule.)83
b(Suc)m(h)46 b(sc)m(hedules)h(guaran)m(tee)e(minimal)h(co)s(de)f(size)h
(and)f(facilitate)150 5219 y(the)d(inlining)f(of)g(\014lters.)70
b(There)42 b(are)f(a)g(n)m(um)m(b)s(er)i(of)d(approac)m(hes)j(to)d
(minimizing)j(the)e(bu\013er)150 5400 y(requiremen)m(ts)32
b(for)d(single-app)s(earance)h(sc)m(hedules)j(\(see)d([4])f(for)g(a)g
(review\).)44 b(While)30 b(it)f(has)h(b)s(een)1901 5649
y(61)p eop
%%Page: 62 62
62 61 bop 150 100 a Fs(sho)m(wn)42 b(that)e(obtaining)g(the)h(minimal)g
(memory)g(requiremen)m(ts)i(for)d(general)h(graphs)f(is)h(NP-)150
280 y(complete)30 b([3],)g(there)g(are)f(t)m(w)m(o)h(complimen)m(tary)h
(heuristics,)h(APGAN)d(\(P)m(airwise)i(Grouping)d(of)150
461 y(Adjacen)m(t)36 b(No)s(des\))g(and)f(RPMC)h(\(Recursiv)m(e)i(P)m
(artitioning)e(b)m(y)g(Minim)m(um)h(Cuts\),)g(that)e(ha)m(v)m(e)150
641 y(b)s(een)j(sho)m(wn)g(to)f(b)s(e)h(e\013ectiv)m(e)h(when)f
(applied)g(together)g([3].)57 b(Bu\013er)38 b(merging[21,)f(22)o(])h
(repre-)150 822 y(sen)m(ts)k(another)e(tec)m(hnique)j(for)c(decreasing)
j(bu\013er)f(sizes,)j(whic)m(h)d(could)g(b)s(e)f(in)m(tegrated)h(with)
150 1002 y(our)32 b(approac)m(h)h(in)g(the)g(future.)296
1199 y(Go)m(vindara)5 b(jan)29 b(et)h(al.)42 b(dev)m(elop)30
b(a)f(linear)g(programming)g(framew)m(ork)h(for)e(determining)j(the)150
1380 y(\\rate-optimal)i(sc)m(hedule")j(with)f(the)f(minimal)h(memory)g
(requiremen)m(t)h([11].)47 b(A)34 b(rate-optimal)150
1560 y(sc)m(hedule)k(is)d(one)h(that)f(tak)m(es)h(adv)-5
b(an)m(tage)36 b(of)e(parallel)i(resources)h(to)e(execute)i(the)e
(graph)g(with)150 1741 y(the)27 b(maximal)g(throughput.)42
b(Ho)m(w)m(ev)m(er,)30 b(the)d(tec)m(hnique)i(is)e(sp)s(eci\014c)i(to)d
(rate-optimal)g(sc)m(hedules)150 1921 y(and)37 b(can)f(result)i(in)f(a)
f(co)s(de)h(size)h(explosion,)h(as)d(the)h(same)h(no)s(de)e(is)i(p)s
(oten)m(tially)f(executed)i(in)150 2102 y(man)m(y)34
b(di\013eren)m(t)f(con)m(texts.)296 2298 y(The)25 b(w)m(ork)g(describ)s
(ed)h(ab)s(o)m(v)m(e)f(is)f(related)h(to)e(ours)h(in)h(that)e
(minimizing)j(bu\013er)e(requiremen)m(ts)150 2479 y(can)43
b(also)h(impro)m(v)m(e)g(cac)m(hing)g(b)s(eha)m(vior.)76
b(Ho)m(w)m(ev)m(er,)48 b(our)43 b(goal)g(is)g(di\013eren)m(t)i(in)e
(that)g(w)m(e)h(aim)150 2660 y(to)j(impro)m(v)m(e)j(spatial)e(and)g
(temp)s(oral)g(lo)s(calit)m(y)g(instead)h(of)e(simply)j(decreasing)f
(the)f(size)h(of)150 2840 y(the)41 b(liv)m(e)h(data)f(set.)69
b(In)41 b(fact,)i(our)e(scaling)g(transformation)g(actually)g
Fo(incr)-5 b(e)g(ases)40 b Fs(the)h(size)h(of)150 3021
y(the)i(data)g(bu\013ers,)k(leading)c(to)g(higher)g(p)s(erformance)h
(across)g(our)f(b)s(enc)m(hmark)h(suite.)79 b(Our)150
3201 y(transformations)33 b(also)h(tak)m(e)f(in)m(to)h(accoun)m(t)g
(the)f(size)h(of)f(the)g(instruction)i(and)e(data)f(cac)m(hes)j(to)150
3382 y(select)f(an)f(appropriate)f(scaling)i(and)e(partitioning)h(for)f
(the)h(stream)g(graph.)296 3578 y(Pro)s(ebsting)c(and)g(W)-8
b(atterson)28 b([23])g(giv)m(e)h(a)f(fusion)h(algorithm)f(that)g(in)m
(terlea)m(v)m(es)j(the)e(con)m(trol)150 3759 y(\015o)m(w)36
b(graphs)g(of)g(adjacen)m(t)g(\014lters.)54 b(Ho)m(w)m(ev)m(er,)39
b(their)d(algorithm)g(only)g(supp)s(orts)h(sync)m(hronous)150
3939 y Fn(get)h Fs(and)f Fn(put)g Fs(op)s(erations;)j(StreamIt's)e
Fn(peek)g Fs(op)s(eration)f(necessitates)i(bu\013er)f(managemen)m(t)150
4120 y(b)s(et)m(w)m(een)d(\014lters.)296 4317 y(There)45
b(are)e(a)g(large)g(n)m(um)m(b)s(er)i(of)d(stream)i(programming)f
(languages;)49 b(see)c([25)o(])f(for)e(a)h(re-)150 4497
y(view.)55 b(The)37 b(Bro)s(ok)f(language)g([6)o(])h(extends)g(C)g(to)e
(include)j(data-parallel)d(k)m(ernels)j(and)f(m)m(ulti-)150
4678 y(dimensional)32 b(streams)f(that)f(can)g(b)s(e)h(manipulated)g
(via)f(prede\014ned)i(op)s(erators.)43 b(Sync)m(hronous)150
4858 y(languages)26 b(suc)m(h)i(as)e(Esterel)i([2])e(and)g(LUSTRE)h
([12])f(also)g(target)g(the)h(em)m(b)s(edded)h(domain,)g(but)150
5039 y(they)34 b(are)e(more)h(con)m(trol-orien)m(ted)h(than)e(StreamIt)
h(and)g(are)g(less)h(amenable)f(to)g(compile-time)150
5219 y(optimizations.)42 b(Ben)m(v)m(eniste)30 b(et)d(al.)f([1])h(also)
f(pro)m(vides)i(an)f(o)m(v)m(erview)i(of)d(data\015o)m(w)h(sync)m
(hronous)150 5400 y(languages.)52 b(Sisal)36 b(\(Stream)g(and)f
(Iteration)g(in)h(a)f(Single)h(Assignmen)m(t)h(Language\))e(is)h(a)f
(high-)1901 5649 y(62)p eop
%%Page: 63 63
63 62 bop 150 100 a Fs(p)s(erformance,)43 b(implicitly)f(parallel)e
(functional)h(language)f([13].)66 b(W)-8 b(e)41 b(are)f(not)g(a)m(w)m
(are)h(of)f(an)m(y)150 280 y(cac)m(he)34 b(a)m(w)m(are)f(optimizations)
h(in)f(these)g(stream)h(languages.)296 461 y(There)49
b(is)g(a)e(large)h(b)s(o)s(dy)g(of)f(w)m(ork)i(co)m(v)m(ering)g(cac)m
(he)h(miss)f(equations,)k(and)48 b(an)g(equally)150 641
y(large)33 b(b)s(o)s(dy)h(of)f(w)m(ork)h(concerned)h(with)f(analytical)
g(mo)s(dels)h(for)e(reasoning)h(ab)s(out)f(data)g(reuse)150
822 y(distances)d(and)e(cac)m(he)i(b)s(eha)m(vior.)42
b(The)30 b(mo)s(del)e(in)m(tro)s(duced)h(in)g(this)g(thesis)g(is)g(lo)s
(osely)g(based)g(on)150 1002 y(the)g(notion)g(of)f(stac)m(k)j(reuse)f
(distances)g([20].)42 b(Our)29 b(mo)s(del)g(is)h(esp)s(ecially)h
(tailored)e(to)f(streaming)150 1183 y(computations,)34
b(and)e(unique)i(in)f(lev)m(eraging)h(the)f(concept)g(of)g(a)f(steady)i
(state)f(execution.)296 1364 y(There)42 b(is)e(some)h(w)m(ork)g
(related)f(to)g(scalar)g(replacemen)m(t.)68 b(See)41
b([7)o(])f(for)g(a)g(set)g(of)g(transfor-)150 1544 y(mations)k(that)g
(allo)m(w)g(traditional)f(coloring-based)h(register)h(allo)s(cator)d
(to)i(register)g(allo)s(cate)150 1725 y(individual)30
b(arra)m(y)e(elemen)m(ts.)45 b(Another)29 b(article)g([8)o(])g(presen)m
(ts)h(a)f(fully)g(automated)f(set)h(of)f(trans-)150 1905
y(formations)c(that)g(impro)m(v)m(e)h(memory)g(usage)g(for)e(lo)s(ops)h
(b)m(y)h(balancing)f(memory)h(op)s(erations)f(and)150
2086 y(\015oating-p)s(oin)m(t)35 b(op)s(erations.)53
b(See)37 b([9])e(for)h(an)f(exp)s(erimen)m(tal)j(ev)-5
b(aluation)36 b(of)f(the)h(e\013ectiv)m(eness)150 2267
y(of)25 b(scalar)h(replacemen)m(t)i(on)e(scien)m(ti\014c)i(b)s(enc)m
(hmarks.)43 b(While)27 b(the)f(ab)s(o)m(v)m(e)g(pap)s(ers)h(are)e
(concerned)150 2447 y(with)39 b(scalar)f(replacemen)m(t)i(for)d
(languages)i(lik)m(e)g(F)-8 b(ortran)37 b(and)h(C,)g(this)h(thesis)g
(highligh)m(ts)h(the)150 2628 y(imp)s(ortance)k(of)f(scalar)h
(replacemen)m(t)h(in)f(a)f(stream)h(compiler,)j(whic)m(h)e(generally)g
(has)e(m)m(uc)m(h)150 2808 y(more)33 b(information)f(due)i(to)e(a)g
(large)h(fraction)f(of)h(lo)s(ops)f(with)h(\014xed)h(iteration)f(coun)m
(t)g(and)g(lac)m(k)150 2989 y(of)27 b(aliasing)g(in)h(the)g(StreamIt)f
(programming)h(language.)41 b(Also)28 b(in)g(a)f(stream)h(program)f(m)m
(uc)m(h)h(of)150 3169 y(the)f(data)f(is)i(comm)m(unicated)g(using)g
(explicit)g(FIF)m(O)e(c)m(hannels;)31 b(it)c(is)g(therefore)g(imp)s
(ortan)m(t)g(that)150 3350 y(as)33 b(man)m(y)g(bu\013ers)h(as)f(p)s
(ossible)h(can)e(b)s(e)h(replaced)h(b)m(y)f(scalars)h(to)e(enable)i
(register)f(allo)s(cation.)1901 5649 y(63)p eop
%%Page: 64 64
64 63 bop 1901 5649 a Fs(64)p eop
%%Page: 65 65
65 64 bop 150 894 a Fq(Chapter)78 b(7)150 1439 y(Conclusion)150
1958 y Fs(This)37 b(thesis)g(presen)m(ts)h(a)d(set)i(of)e(simple)i(y)m
(et)g(e\013ectiv)m(e)h(cac)m(he)e(optimizations)h(that)f(are)f(aimed)
150 2138 y(at)48 b(impro)m(ving)h(run)m(time)h(p)s(erformance)f(and)f
(energy)h(requiremen)m(ts)j(for)47 b(executing)j(stream)150
2319 y(programs)45 b(on)f(commo)s(dit)m(y)h(pro)s(cessors.)81
b(W)-8 b(e)45 b(exploit)g(the)g(prop)s(ert)m(y)g(of)f(stream)h
(programs)150 2499 y(that)27 b(allo)m(ws)g(actors)g(in)g(a)g(stream)g
(graph)g(to)f(b)s(e)h(freely)h(com)m(bined)h(and)e(reordered.)42
b(This)28 b(allo)m(ws)150 2680 y(the)39 b(stream)h(compiler)g(to)f
(automatically)g(p)s(erform)g(the)h(kind)f(of)g(transformations)g(that)
g(are)150 2861 y(often)26 b(tediously)i(carried)f(out)f(man)m(ually)i
(for)d(to)s(da)m(y's)i(programs.)42 b(Those)27 b(transformations)g(are)
150 3041 y(otherwise)f(to)s(o)e(complex)j(to)d(p)s(erform)h
(automatically)g(in)g(hardw)m(are)h(or)f(in)g(the)g(most)g(aggressiv)m
(e)150 3222 y(of)32 b(C)h(compilers.)296 3408 y(The)42
b(transformations)f(presen)m(ted)h(in)f(this)g(thesis)h(are:)59
b Fo(\(i\))40 b Fs(cac)m(he)i(a)m(w)m(are)f(fusion,)i(whic)m(h)150
3589 y(com)m(bines)33 b(adjacen)m(t)g(actors)e(in)m(to)h(a)f(single)i
(function)f(th)m(us)g(allo)m(wing)g(the)g(C)g(compiler)g(to)f(opti-)150
3769 y(mize)36 b(across)f(actor)g(b)s(oundaries)g(and)g(reducing)h(the)
f(metho)s(d)g(call)g(o)m(v)m(erhead.)52 b Fo(\(ii\))34
b Fs(execution)150 3950 y(scaling,)48 b(whic)m(h)f(judiciously)f(rep)s
(eats)f(actor)g(executions)h(to)f(impro)m(v)m(e)h(instruction)g(and)e
(ac-)150 4130 y(tor)34 b(state)g(lo)s(calit)m(y)-8 b(,)35
b Fo(\(iii\))e Fs(scalar)h(replacemen)m(t,)j(whic)m(h)e(con)m(v)m(erts)
h(certain)f(data)e(bu\013ers)i(in)m(to)f(a)150 4311 y(sequence)j(of)c
(scalar)i(v)-5 b(ariables)35 b(that)e(can)i(b)s(e)f(register)h(allo)s
(cated,)f(and)h Fo(\(iv\))e Fs(optimized)i(bu\013er)150
4491 y(managemen)m(t,)28 b(whic)m(h)f(reduces)h(the)e(o)m(v)m(erall)g
(n)m(um)m(b)s(er)h(of)e(memory)i(accesses)h(issued)f(b)m(y)g(the)f
(pro-)150 4672 y(gram.)43 b(The)33 b(ab)s(o)m(v)m(e)g(transformations)g
(w)m(ere)h(implemen)m(ted)h(as)d(part)g(of)g(StreamIt,)h(a)f(language)
150 4853 y(and)h(compiler)g(infrastructure)h(for)e(stream)h
(programming)g([27)o(].)296 5039 y(Finally)42 b(an)g(exp)s(erimen)m
(tal)h(ev)-5 b(aluation)42 b(of)f(a)g(fully)h(automated)g(implemen)m
(tation)h(of)f(the)150 5219 y(cac)m(he)f(and)g(memory)g(optimizations)g
(sho)m(ws)h(signi\014can)m(t)g(p)s(erformance)e(impro)m(v)m(emen)m(ts)k
(o)m(v)m(er)150 5400 y(unoptimized)23 b(StreamIt)g(and)e(cac)m(he)j
(oblivious)e(full-fusion)g(on)g(an)g(em)m(b)s(edded)h(pro)s(cessor)g
(Stron-)1901 5649 y(65)p eop
%%Page: 66 66
66 65 bop 150 100 a Fs(gARM)29 b(1110.)41 b(The)30 b(p)s(erformance)f
(gains)g(o)m(v)m(er)h(cac)m(he)g(oblivious)g(full-fusion)f(are)f(more)h
(mo)s(dest)150 280 y(for)j(the)h(desktop)h(pro)s(cessors)g(P)m(en)m
(tium)g(3)f(and)f(Itanium)i(2.)150 704 y Fw(7.1)161 b(F)-13
b(uture)52 b(W)-13 b(ork)150 984 y Fs(The)31 b(90-10)d(heuristic)k
(whic)m(h)g(is)e(used)h(for)f(execution)h(scaling)g(migh)m(t)f(b)s(e)h
(impro)m(v)m(ed)g(b)m(y)g(consid-)150 1164 y(ering)h(w)m(ork)h
(estimates)h(of)d(stream)i(actors)f(instead)h(of)e(treating)h(all)g
(actors)g(as)g(equal.)45 b(Also)32 b(on)150 1345 y(some)40
b(arc)m(hitectures)h(it)e(migh)m(t)g(b)s(e)g(w)m(orth)h(to)f(c)m(hange)
g(90-10)f(ratio)g(to)h(75-25)e(or)i(some)h(other)150
1525 y(ratio)32 b(to)g(allo)m(w)h(more)g(scaling)g(at)g(the)g(exp)s
(ense)h(of)e(o)m(v)m(erscaling)j(larger)d(fraction)h(of)f(actors.)296
1706 y(An)40 b(alternativ)m(e)h(optimized)g(FIF)m(O)f(bu\013er)g
(implemen)m(tation)h(w)m(ould)g(b)s(e)f(to)f(increase)j(the)150
1886 y(size)30 b(of)d(the)i(bu\013er)g(and)f(insert)i(if)e(statemen)m
(ts)i(that)e(c)m(hec)m(k)j(if)d(the)h(head)g(p)s(oin)m(ter)f(is)h
(close)h(to)e(the)150 2067 y(end)33 b(of)f(the)h(data)f(bu\013er;)h(if)
f(so)h(the)g(liv)m(e)g(items)h(w)m(ould)f(b)s(e)g(copied)g(to)f(the)h
(start)g(of)e(the)i(bu\013er.)150 2248 y(It)28 b(migh)m(t)h(b)s(e)f(b)s
(ene\014cial)i(to)e(place)h(the)f(if)h(statemen)m(ts)h(outside)f(of)f
(the)g(execution)i(scaled)g(actors)150 2428 y(so)j(that)f(they)i(are)e
(in)m(v)m(ok)m(ed)j(infrequen)m(tly)-8 b(.)296 2609 y(Our)23
b(exp)s(erimen)m(tal)i(ev)-5 b(aluation)23 b(sho)m(w)m(ed)i(that)e
(sometimes)h(it)f(is)h(b)s(ene\014cial)g(to)e(create)i(actors)150
2789 y(with)44 b(an)f(instruction)h(fo)s(otprin)m(t)f(that)f(exceeds)k
(the)e(instruction)g(cac)m(he)g(size)g(so)g(that)f(more)150
2970 y(aggressiv)m(e)38 b(optimizations)e(across)h(actor)e(b)s
(oundaries)i(can)f(b)s(e)g(p)s(erformed.)54 b(W)-8 b(e)36
b(w)m(ould)h(need)150 3150 y(to)g(dev)m(elop)h(an)f(accurate)h(cost)f
(mo)s(del)h(to)e(allo)m(w)i(full)f(automation)f(of)h(suc)m(h)h
(decisions)h(in)f(the)150 3331 y(compiler.)296 3512 y(The)g(author)e
(of)g(this)g(thesis)i(has)f(also)f(dev)m(elop)s(ed)j(a)d(StreamIt)h
(bac)m(k)m(end)h(for)e(a)g(cluster)h(of)150 3692 y(w)m(orkstations)c
(during)f(his)g(time)g(with)g(the)g(StreamIt)g(group.)42
b(It)32 b(w)m(ould)g(b)s(e)g(in)m(teresting)h(to)e(see)150
3873 y(if)j(the)g(cac)m(he)i(optimizations)f(presen)m(ted)h(in)f(this)f
(thesis)i(could)f(b)s(e)f(used)h(to)f(impro)m(v)m(e)i(run)m(time)150
4053 y(of)d(stream)i(programs)f(on)g(a)g(cluster)h(\(b)m(y)g(applying)f
(cac)m(he)i(optimizations)e(to)g(actors)g(that)g(are)150
4234 y(running)f(on)g(a)f(giv)m(en)i(cluster)f(no)s(de\).)1901
5649 y(66)p eop
%%Page: 67 67
67 66 bop 150 888 a Fq(App)6 b(endix)78 b(A)150 1428
y(Exp)6 b(erimen)-6 b(tal)76 b(Ev)-13 b(aluation)76 b(of)150
1802 y(Execution)h(Scaling)g(Heuristic)150 2314 y Fs(In)27
b(this)g(c)m(hapter)h(w)m(e)g(ev)-5 b(aluate)27 b(our)f(execution)j
(scaling)e(heuristic)h(\(see)g(Section)g(4.1.2\).)40
b(F)-8 b(ollo)m(w-)150 2495 y(ing)29 b(nine)i(graphs)e(sho)m(w)i(the)e
(normalized)i(execution)g(time)f(of)f(scaling)h(cac)m(he)g(a)m(w)m(are)
h(partitions)150 2675 y(that)j(ha)m(v)m(e)h(b)s(een)g(pro)s(duced)g
(using)g(cac)m(he)g(a)m(w)m(are)g(fusion)f(\(without)h(allo)m(wing)f
(the)h(instruction)150 2856 y(fo)s(otprin)m(t)j(of)g(a)g(partition)g
(to)h(exceed)h(the)f(size)h(of)e(an)g(L1)g(instruction)i(cac)m(he\).)62
b(The)39 b(exp)s(eri-)150 3037 y(men)m(ts)i(are)f(p)s(erformed)g(on)f
(a)g(P)m(en)m(tium)j(3)d(pro)s(cessor.)66 b(The)40 b(large)f(diamond)i
(represen)m(ts)h(the)150 3217 y(scaling)33 b(factor)f(that)h(has)g(b)s
(een)g(c)m(hosen)h(b)m(y)g(our)e(90-10)f(heuristic.)1901
5649 y(67)p eop
%%Page: 68 68
68 67 bop 390 2343 a @beginspecial 72 @llx 54 @lly 756
@urx 522 @ury 3744 @rwi @setspecial
%%BeginDocument: s1.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Scaling2.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050531205447-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 54 756 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 54 moveto 756 54 lineto 756 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 54 684 468 rectclip
[ 0 -1 1 0 18 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font BJDFIB+Arial
11 dict begin
/FontName /BJDFIB+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d898870164
1dba6c5defb41d909040a164fdb0a088fefa45fff299b57b0e194251a4a8
b9cf3bc1815fd2c5ba06e651f9d7799098b4541de9c35043282b335f2de1
7def94eec0695fa30f7aaa5574cd9d280a8b4d225396feeeafb4b20c3fcc
9f12e751228b7464328a957a71c1d6fc11ef53a8f692024ab80f5e0d7623
62b42a462a2bf96d5a0db86097e421e5cb8c7d7a0900e6cfd70978f26b60
122332f14359637710d630381bc4f9c629fd5be208af03ab6a69f0ba40b9
a2> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f733e1cd354b07630
213f625adb3ae8b5aa6a51c1055a59d5f55e13f6cd6e1d9a82c372ef809e
0ee864af865bf5dd5f7dae9a46388470afbd9e2e8c39b7ea4fc9ab800d6e
8ab2edc1e3d36e194904842b1236ff6f70f88f5551621a9fa448c516e732
df410d140d211e3fe0becb6d0a54202b80a6977f> ND 
/seven 
<10bf317048559e9c292b4762aa54ba120b5bb6d9743398f6558de0cda9ce
72c94d95b651df1bda9b63361a928dc3b98c779dfd157220ceb78b8ebeab
638d0f6753cf0f10ef> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/nine 
<10bf317047276c49b9c0f950eed45ca9abbead4f9a337d9778d52804f095
e0959c13860a3969943ef1a12c3ee6c45422162d204a6f0d8cdc2d4e75b5
67f1b01796340d6df61e18c819464639606becbe4894a8ef149ed72054cf
28ee583aeb880d27fff9e2fa582b760e67cbad4f844afdb68b34f85c1a95
a0e8285de8ad462405443a57e05fe3bbb3d2281adc779f19070fa98342c5
c2c2ec79e83ff4803e54082ff002fd18e3d25566d6e2d40f56cc659c4866
84f0030ca9d50085195745fdce82f2f52a9ae7ae7227879d15b08026dcde
5aab87db399da6bb3c6e8f68808a93> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/BJDFIB+Arial findfont /Encoding get
dup 0 /.notdef put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
pop
%%EndResource
[/N15/BJDFIB+Arial 1 TZ
%%BeginResource: font BJDFHP+Arial,Bold
11 dict begin
/FontName /BJDFHP+Arial,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/C 
<10bf31704854f6e1a1a667b8970893ea3ae573d8f0b00f1e21c4da392880
f74a33a203a5eb2ac37bb1cec36ec2d3f1d6fe17d030e5f817de254d3a97
9bb0a180214fe6c133873897128ef01292c77a32877dc7bc6158a861cfdf
dd0152abc2812d8268588369a7e1e7abfe54f9dec9721a20ff256d00b940
20d33e255c770f4068fca4b2d690126cca> ND 
/F 
<10bf317027e93a6da982a87edd53b1a22870b99b44157cee5f7e1ac9dd0c
13b8ca1eb59184f62bdabd0c5d> ND 
/T 
<10bf317052458881086470d98dda64a2160ba1beda0296c20cab312fa01a
377c9e9f0f4b86> ND 
/a 
<10bf31705d64e193f644676913533d4f242b6181368ed1350652c8cb7a6f
e958f60841a88d1088c20f893090b458ae087d16aa8691f1ae44882b0528
d32f3e9827d4294992e18a57652ae7d531994f09c8f3899ddffaad39408b
1529cb6c6e94b8c5c36f6038811d22f304b6662d870ece2886bb4e9f799a
c37faedbf994154341e467f29126a4c489a05c6fef9ee5143f581ea41499
e4aecea25c0711d5cc7b9f01a37e7c0b7e59d5ee83c610a480921138ec2c
f957d766614f6ccaa7ceb4e20fd6f9ac362e8c090b1abb9485ee8c51fdeb
7fc72063a72ab3373c0c6872cf9ba20b3513a2189f8a98cd5a1ee87742> ND 
/c 
<10bf317047276c49998622737f5c0fdd43bdb1b35b15caae7eb2c80264ad
f0005e1c6be7a1a08efb8ae0111a7ff9c16d6d1d6fe6a62b9718659cdf71
ec1fec12732e715c04b3f3a8feb95e8d0f9e002393845281717573027f79
ad8c8ea5dce4faf3243344c83485cc434093ad2e51e73ce85594056ff3cf
8de95991fd7222c7dec9d4bc6113b2> ND 
/d 
<10bf317046e845f3cc81de7a4b8a8a1b3fe3a86a2a74eb0ce101ae9ff9ea
ca0b0d6152bab57b5a1a20451eca1d8bce22d8934498cbe1f50790f6dd2f
9d5a0cab606ce69313bb3e4094a370b8d3856d24b15d355e84c7c481bc80
d07358154d4cee4bac791720fabdb39630005823af359d78acbc47e52e70
c34626a827ae2272bde1c4ecc0359b7e45162ac0> ND 
/e 
<10bf3170599a82aebce2d0d9cd696e2d2232ae83b1d98ff884add96e0282
26fcd2cbd306888649029fbc75f18f771bf21f4d5f53f71cd70d56907fb2
0780ae57f65359db4c49ca929cb86ae96dd2f43742f720ffcefc0d1d3194
c72a55a6bfcf26d975c031741b09b969ea0410af02ae1e13b6c1d337a6b3
96eba6c714d73f9b5d2c2499a66a60f107d1dad4da56ef> ND 
/f 
<10bf317065f8aa629a44bd3be74bbe0cfa1409656d751dcdbb088484a3c9
84e11d0d09aae771e92b3d48596140fc2967fbcf96b4f7694ddca0744e47
fd6ddc298113201938776b254f36f4878baaf6514d0108bde72f2d6fbb4a
d588> ND 
/g 
<10bf317046e845f3c38d9f70ba4464ac4e8fae8096f95866e14c9cfc76d4
2c91caccc55306d31fd922e308e96ee980323125643f9a86a8ffc2b52c12
c5bb9a13190b6aced9365e9c0da3f6e0016fa2ab359e2b06b32a173590b2
6f2094e4e558e81d1aad3b8794a704066a5c48c5835d67bbce791b1965a9
3fbd5fb55f1203033af92c703c31533cbcf30051576e5b8b57eedca25286
866fdee3b16f9555216746cd0cc4065676d353776467694c68063ac58586
fb4e91cf6077ef9d35ed3bc9160721b2f3dee4f8c47777dc722d34059624
2ed759> ND 
/i 
<10bf317021cc67b2bc312fc6a7ad37016808b8c74342617d801906e8ad23
4c7210637a5c2e2ea339f24d0c> ND 
/l 
<10bf317021cc67b2bc31c11814793bc69b430b318ded78131a> ND 
/m 
<10bf31703bc84f280bc926798acdec2516269e7061028d385a31d255844f
a27fc6b4cdd6f6ba3dfabbbaadef207eca864f3bc97abd9a4f1b978df039
4779a47e3088a94b9cee6d3b276eef4d4950e88ef4a61f93e0b6cde961dc
7ec12956bd3a56a59704c6c5b5a401c3674bc856b6c34f276e7f1bc3056d
89b4805ca25b43894c427bc43b36554ede70476f7ee25d1a6c03ed9f5e40
5c72135defa96ede67a5a8ef5fea114c19a857db71952cb83f4d11> ND 
/n 
<10bf31702094fda2efce4110428b7f86f5f2073cab682ca78d0dc97da563
e3301b964801f725812f64cb67abc1e242f6d8dcd921f1fbf9e05fee92c3
cf16b5bf6083337a59bf026de7fa548a247b8bde12c672aa0ba0501ccc35
fcca587d7573f11dfc32a2ac31516847d39fb276060c6171da> ND 
/o 
<10bf317041f0d680f4930f6b0672f7536ce2eb70a2366463cc9006c590f6
6bbb22b4a706eff4a93c95880cecbbf82d6e623efa721926a49ba75b71ef
97d0e3d8c35761734c54d6d734cb61cf4c4d7050d90fa115600d26f47050
dfb8739452ed0059ffdca41c137f0b71425a690a4da83dcf8abcf17c206e
c5eff5dd0d7b85b999c37123dfb769cd075b5a162cb33d72426c> ND 
/r 
<10bf31703f93f6c49808fdd8544fecb184adc28a087f99360dbfdf8b0375
9b819135c930698375e13c34125773b22d251f861dc05246608ab0d559df
442670f87f9615eabcaf25ab4b613b44e059b394bfb9> ND 
/s 
<10bf317050d961e87d157c0fe86ec5afecbd608ce0f232c64dcfb1d39b45
2e71b8ca2a92c46173a52c993c8ea0e3a6a97bbca89eebc0e87a68da7dcf
335cb16989a377c8400340e09bb7a3a4fae54003803791fa4d2f5b88afdc
392f17afecc8a037b6118f07b51c97b137676b140e2fba0e4b7ecc574c70
cbfa35d84fd49bc18c067342180503665d383fcdebee907501f8719ff862
5030352810efab946329f109adefea2f39c8182336b9eb95b38d69ca43cf
161d7fb7e8f46433cafa> ND 
/t 
<10bf3170688ce4cb1d2f5bf487137bec8ecb87b4485146ce17824d997ac5
95ab4afb2e80a065a802ee3f010bb37eac91d0f6ed42677aa9dde7e1ad01
769b95b971dec6d1669588801bb2fb04109e79e9771f019783524f2f268e
35dce126a03e55d028a6951cc9b40e649071f577> ND 
/u 
<10bf317022f1ca2cc2a22c3ff97c1232bc55839582d9c5ff7e86bfa4508d
4c6c2a32b8a91c23bc7417819a6d61bb6c4ffa588f9ea417cfc189ff4ca4
86806cfbdc09b2f0ef54b54c53e50d4afcfcb2df030b19aa33138b0a422d
d58054461b41c9166e86f2fb1f6b43052b68dc3202c1cc> ND 
/x 
<10bf3170638bf24b9ac01ae6f3f5ae817231c94093d6b928339de9a1f6d7
c03f6b6f7762b561ab36e6e40fc21093f89e72e352dadf27c949562edd95
94> ND 
/z 
<10bf31706ea98d84f3c625a1c3450f57f0cb972d7b4342feb5483a382b8c
546af3200ec3102c63cd8ee85ce02beb2b2e7a35b4d49541c8670b9156e1
3f2683e61a914abf9dc96f> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/BJDFHP+Arial,Bold findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 67 /C put
dup 70 /F put
dup 84 /T put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 122 /z put
dup 160 /space put
pop
%%EndResource
[/N13/BJDFHP+Arial,Bold 1 TZ
1 J
0 j
0.960007 w
10 M
[] 0 d
false setSA
n
75.96 57.96 459.12 675 re
q
1 1 1 setrgbcolor
eofill
Q
0 0 0 setrgbcolor
S
q
n
404.88 136.08 0.119995 578.4 re
W
n
0.119995 w
n
404.88 136.08 m
404.88 714.48 l
S
Q
q
n
343.56 136.08 0.119995 578.4 re
W
n
0.119995 w
n
343.56 136.08 m
343.56 714.48 l
S
Q
q
n
282.36 136.08 0.119995 578.4 re
W
n
0.119995 w
n
282.36 136.08 m
282.36 714.48 l
S
Q
q
n
221.16 136.08 0.119995 578.4 re
W
n
0.119995 w
n
221.16 136.08 m
221.16 714.48 l
S
Q
q
n
159.84 136.08 0.119995 578.4 re
W
n
0.119995 w
n
159.84 136.08 m
159.84 714.48 l
S
Q
q
n
98.64 136.08 0.119995 578.4 re
W
n
0.119995 w
n
98.64 136.08 m
98.64 714.48 l
S
Q
n
98.64 136.08 367.44 578.4 re
0.501999 0.501999 0.501999  setrgbcolor
S
0.119995 w
n
98.64 136.08 m
466.08 136.08 l
466.08 131.28 m
466.08 136.08 l
404.88 131.28 m
404.88 136.08 l
343.56 131.28 m
343.56 136.08 l
282.36 131.28 m
282.36 136.08 l
221.16 131.28 m
221.16 136.08 l
159.84 131.28 m
159.84 136.08 l
98.64 131.28 m
98.64 136.08 l
466.08 136.08 m
466.08 714.48 l
470.88 136.08 m
466.08 136.08 l
470.88 208.44 m
466.08 208.44 l
470.88 280.68 m
466.08 280.68 l
470.88 353.04 m
466.08 353.04 l
470.88 425.28 m
466.08 425.28 l
470.88 497.64 m
466.08 497.64 l
470.88 569.88 m
466.08 569.88 l
470.88 642.24 m
466.08 642.24 l
470.88 714.48 m
466.08 714.48 l
0 0 0  setrgbcolor
S
1 j
1.92 w
n
98.64 150.6 m
300.48 165 l
343.56 179.52 l
378.96 193.92 l
393.6 208.44 l
405.72 222.84 l
420.36 237.36 l
425.52 251.76 l
421.2 266.28 l
410.88 280.68 l
241.8 425.28 l
106.44 569.88 l
97.8 714.48 l
0 0 0.501999  setrgbcolor
S
0.960007 w
n
96.6 150.6 m
98.64 152.64 l
100.68 150.6 l
98.64 148.56 l
96.6 150.6 l
h
q
eofill
Q
S
n
298.44 165 m
300.48 167.04 l
302.52 165 l
300.48 162.96 l
298.44 165 l
h
q
eofill
Q
S
n
341.52 179.52 m
343.56 181.56 l
345.6 179.52 l
343.56 177.48 l
341.52 179.52 l
h
q
eofill
Q
S
n
376.92 193.92 m
378.96 195.96 l
381 193.92 l
378.96 191.88 l
376.92 193.92 l
h
q
eofill
Q
S
n
387.12 208.44 m
393.6 214.92 l
400.08 208.44 l
393.6 201.96 l
387.12 208.44 l
h
q
eofill
Q
S
n
403.68 222.84 m
405.72 224.88 l
407.76 222.84 l
405.72 220.8 l
403.68 222.84 l
h
q
eofill
Q
S
n
418.32 237.36 m
420.36 239.4 l
422.4 237.36 l
420.36 235.32 l
418.32 237.36 l
h
q
eofill
Q
S
n
423.48 251.76 m
425.52 253.8 l
427.56 251.76 l
425.52 249.72 l
423.48 251.76 l
h
q
eofill
Q
S
n
419.16 266.28 m
421.2 268.32 l
423.24 266.28 l
421.2 264.24 l
419.16 266.28 l
h
q
eofill
Q
S
n
408.84 280.68 m
410.88 282.72 l
412.92 280.68 l
410.88 278.64 l
408.84 280.68 l
h
q
eofill
Q
S
n
239.76 425.28 m
241.8 427.32 l
243.84 425.28 l
241.8 423.24 l
239.76 425.28 l
h
q
eofill
Q
S
n
104.4 569.88 m
106.44 571.92 l
108.48 569.88 l
106.44 567.84 l
104.4 569.88 l
h
q
eofill
Q
S
0 0 0  setrgbcolor
438.84 580.32 m
/N13 [0 18.96 -18.96 0 0 0] Tf
(FFT Coarse) show
471.24 102.36 m
/N15 [0 15.72 -15.72 0 0 0] Tf
(0.7) show
410.04 93.5993 m
(0.75) show
348.72 102.36 m
(0.8) show
287.52 93.5993 m
(0.85) show
226.321 102.36 m
(0.9) show
165 93.5993 m
(0.95) show
103.801 115.439 m
(1) show
493.802 131.759 m
(05)
[72.3576 67.7972 ] pdfys
(1) show
(0)
[63.6141 ] pdfys
(1) show
(5)
[63.4947 ] pdfys
(2) show
(0)
[63.6141 ] pdfys
(2) show
(5)
[63.4947 ] pdfys
(3) show
(0)
[63.6141 ] pdfys
(3) show
(5)
[63.4947 ] pdfys
(40) show
520.202 374.159 m
/N13 [0 15.72 -15.72 0 0 0] Tf
(scaling factor) show
381 82.92 m
/N13 -15.72 Tf
(normalized execution time)
[-9.61272 -9.61272 -6.12288 -13.9829 -8.74823 -4.37807 -4.37807 -7.86792 -8.74823 -9.61272 -4.32314 
-8.74823 -8.74823 -8.74823 -8.74823 -9.61272 -5.24256 -4.37807 -9.61272 -9.61272 -4.32314 -5.24256 
-4.37807 -13.9829 -8.74823 ] pdfxs
q
n
72 54 468 684 re
W
n
0 j
n
75.96 57.96 459.12 675 re
S
Q
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 2741 x @beginspecial 72 @llx 54 @lly 756
@urx 522 @ury 3744 @rwi @setspecial
%%BeginDocument: s2.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Scaling2.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050601124448-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 54 756 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 54 moveto 756 54 lineto 756 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 54 684 468 rectclip
[ 0 -1 1 0 18 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font HOPJGL+Arial
11 dict begin
/FontName /HOPJGL+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/nine 
<10bf317047276c49b9c0f950eed45ca9abbead4f9a337d9778d52804f095
e0959c13860a3969943ef1a12c3ee6c45422162d204a6f0d8cdc2d4e75b5
67f1b01796340d6df61e18c819464639606becbe4894a8ef149ed72054cf
28ee583aeb880d27fff9e2fa582b760e67cbad4f844afdb68b34f85c1a95
a0e8285de8ad462405443a57e05fe3bbb3d2281adc779f19070fa98342c5
c2c2ec79e83ff4803e54082ff002fd18e3d25566d6e2d40f56cc659c4866
84f0030ca9d50085195745fdce82f2f52a9ae7ae7227879d15b08026dcde
5aab87db399da6bb3c6e8f68808a93> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/HOPJGL+Arial findfont /Encoding get
dup 0 /.notdef put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
dup 57 /nine put
pop
%%EndResource
[/N15/HOPJGL+Arial 1 TZ
%%BeginResource: font HOPJGJ+Arial,Bold
11 dict begin
/FontName /HOPJGJ+Arial,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/F 
<10bf317027e93a6da982a87edd53b1a22870b99b44157cee5f7e1ac9dd0c
13b8ca1eb59184f62bdabd0c5d> ND 
/T 
<10bf317052458881086470d98dda64a2160ba1beda0296c20cab312fa01a
377c9e9f0f4b86> ND 
/a 
<10bf31705d64e193f644676913533d4f242b6181368ed1350652c8cb7a6f
e958f60841a88d1088c20f893090b458ae087d16aa8691f1ae44882b0528
d32f3e9827d4294992e18a57652ae7d531994f09c8f3899ddffaad39408b
1529cb6c6e94b8c5c36f6038811d22f304b6662d870ece2886bb4e9f799a
c37faedbf994154341e467f29126a4c489a05c6fef9ee5143f581ea41499
e4aecea25c0711d5cc7b9f01a37e7c0b7e59d5ee83c610a480921138ec2c
f957d766614f6ccaa7ceb4e20fd6f9ac362e8c090b1abb9485ee8c51fdeb
7fc72063a72ab3373c0c6872cf9ba20b3513a2189f8a98cd5a1ee87742> ND 
/c 
<10bf317047276c49998622737f5c0fdd43bdb1b35b15caae7eb2c80264ad
f0005e1c6be7a1a08efb8ae0111a7ff9c16d6d1d6fe6a62b9718659cdf71
ec1fec12732e715c04b3f3a8feb95e8d0f9e002393845281717573027f79
ad8c8ea5dce4faf3243344c83485cc434093ad2e51e73ce85594056ff3cf
8de95991fd7222c7dec9d4bc6113b2> ND 
/d 
<10bf317046e845f3cc81de7a4b8a8a1b3fe3a86a2a74eb0ce101ae9ff9ea
ca0b0d6152bab57b5a1a20451eca1d8bce22d8934498cbe1f50790f6dd2f
9d5a0cab606ce69313bb3e4094a370b8d3856d24b15d355e84c7c481bc80
d07358154d4cee4bac791720fabdb39630005823af359d78acbc47e52e70
c34626a827ae2272bde1c4ecc0359b7e45162ac0> ND 
/e 
<10bf3170599a82aebce2d0d9cd696e2d2232ae83b1d98ff884add96e0282
26fcd2cbd306888649029fbc75f18f771bf21f4d5f53f71cd70d56907fb2
0780ae57f65359db4c49ca929cb86ae96dd2f43742f720ffcefc0d1d3194
c72a55a6bfcf26d975c031741b09b969ea0410af02ae1e13b6c1d337a6b3
96eba6c714d73f9b5d2c2499a66a60f107d1dad4da56ef> ND 
/f 
<10bf317065f8aa629a44bd3be74bbe0cfa1409656d751dcdbb088484a3c9
84e11d0d09aae771e92b3d48596140fc2967fbcf96b4f7694ddca0744e47
fd6ddc298113201938776b254f36f4878baaf6514d0108bde72f2d6fbb4a
d588> ND 
/g 
<10bf317046e845f3c38d9f70ba4464ac4e8fae8096f95866e14c9cfc76d4
2c91caccc55306d31fd922e308e96ee980323125643f9a86a8ffc2b52c12
c5bb9a13190b6aced9365e9c0da3f6e0016fa2ab359e2b06b32a173590b2
6f2094e4e558e81d1aad3b8794a704066a5c48c5835d67bbce791b1965a9
3fbd5fb55f1203033af92c703c31533cbcf30051576e5b8b57eedca25286
866fdee3b16f9555216746cd0cc4065676d353776467694c68063ac58586
fb4e91cf6077ef9d35ed3bc9160721b2f3dee4f8c47777dc722d34059624
2ed759> ND 
/i 
<10bf317021cc67b2bc312fc6a7ad37016808b8c74342617d801906e8ad23
4c7210637a5c2e2ea339f24d0c> ND 
/l 
<10bf317021cc67b2bc31c11814793bc69b430b318ded78131a> ND 
/m 
<10bf31703bc84f280bc926798acdec2516269e7061028d385a31d255844f
a27fc6b4cdd6f6ba3dfabbbaadef207eca864f3bc97abd9a4f1b978df039
4779a47e3088a94b9cee6d3b276eef4d4950e88ef4a61f93e0b6cde961dc
7ec12956bd3a56a59704c6c5b5a401c3674bc856b6c34f276e7f1bc3056d
89b4805ca25b43894c427bc43b36554ede70476f7ee25d1a6c03ed9f5e40
5c72135defa96ede67a5a8ef5fea114c19a857db71952cb83f4d11> ND 
/n 
<10bf31702094fda2efce4110428b7f86f5f2073cab682ca78d0dc97da563
e3301b964801f725812f64cb67abc1e242f6d8dcd921f1fbf9e05fee92c3
cf16b5bf6083337a59bf026de7fa548a247b8bde12c672aa0ba0501ccc35
fcca587d7573f11dfc32a2ac31516847d39fb276060c6171da> ND 
/o 
<10bf317041f0d680f4930f6b0672f7536ce2eb70a2366463cc9006c590f6
6bbb22b4a706eff4a93c95880cecbbf82d6e623efa721926a49ba75b71ef
97d0e3d8c35761734c54d6d734cb61cf4c4d7050d90fa115600d26f47050
dfb8739452ed0059ffdca41c137f0b71425a690a4da83dcf8abcf17c206e
c5eff5dd0d7b85b999c37123dfb769cd075b5a162cb33d72426c> ND 
/r 
<10bf31703f93f6c49808fdd8544fecb184adc28a087f99360dbfdf8b0375
9b819135c930698375e13c34125773b22d251f861dc05246608ab0d559df
442670f87f9615eabcaf25ab4b613b44e059b394bfb9> ND 
/s 
<10bf317050d961e87d157c0fe86ec5afecbd608ce0f232c64dcfb1d39b45
2e71b8ca2a92c46173a52c993c8ea0e3a6a97bbca89eebc0e87a68da7dcf
335cb16989a377c8400340e09bb7a3a4fae54003803791fa4d2f5b88afdc
392f17afecc8a037b6118f07b51c97b137676b140e2fba0e4b7ecc574c70
cbfa35d84fd49bc18c067342180503665d383fcdebee907501f8719ff862
5030352810efab946329f109adefea2f39c8182336b9eb95b38d69ca43cf
161d7fb7e8f46433cafa> ND 
/t 
<10bf3170688ce4cb1d2f5bf487137bec8ecb87b4485146ce17824d997ac5
95ab4afb2e80a065a802ee3f010bb37eac91d0f6ed42677aa9dde7e1ad01
769b95b971dec6d1669588801bb2fb04109e79e9771f019783524f2f268e
35dce126a03e55d028a6951cc9b40e649071f577> ND 
/u 
<10bf317022f1ca2cc2a22c3ff97c1232bc55839582d9c5ff7e86bfa4508d
4c6c2a32b8a91c23bc7417819a6d61bb6c4ffa588f9ea417cfc189ff4ca4
86806cfbdc09b2f0ef54b54c53e50d4afcfcb2df030b19aa33138b0a422d
d58054461b41c9166e86f2fb1f6b43052b68dc3202c1cc> ND 
/x 
<10bf3170638bf24b9ac01ae6f3f5ae817231c94093d6b928339de9a1f6d7
c03f6b6f7762b561ab36e6e40fc21093f89e72e352dadf27c949562edd95
94> ND 
/z 
<10bf31706ea98d84f3c625a1c3450f57f0cb972d7b4342feb5483a382b8c
546af3200ec3102c63cd8ee85ce02beb2b2e7a35b4d49541c8670b9156e1
3f2683e61a914abf9dc96f> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/HOPJGJ+Arial,Bold findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 70 /F put
dup 84 /T put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 122 /z put
dup 160 /space put
pop
%%EndResource
[/N13/HOPJGJ+Arial,Bold 1 TZ
false setSA
n
76.08 732.96 459 -674.88 re
1 1 1 setrgbcolor
f
1 J
1 j
0.119995 w
10 M
[] 0 d
n
75.96 57.96 459.12 675 re
0 0 0  setrgbcolor
S
q
n
405 136.08 0.119995 574.2 re
W
n
n
405 136.08 m
405 710.28 l
S
Q
q
n
343.68 136.08 0.119995 574.2 re
W
n
n
343.68 136.08 m
343.68 710.28 l
S
Q
q
n
282.48 136.08 0.119995 574.2 re
W
n
n
282.48 136.08 m
282.48 710.28 l
S
Q
q
n
221.28 136.08 0.119995 574.2 re
W
n
n
221.28 136.08 m
221.28 710.28 l
S
Q
q
n
159.96 136.08 0.119995 574.2 re
W
n
n
159.96 136.08 m
159.96 710.28 l
S
Q
q
n
98.76 136.08 0.119995 574.2 re
W
n
n
98.76 136.08 m
98.76 710.28 l
S
Q
0 j
0.960007 w
n
98.76 136.08 367.44 574.2 re
0.501999 0.501999 0.501999  setrgbcolor
S
0.119995 w
n
98.76 136.08 m
466.2 136.08 l
466.2 131.28 m
466.2 136.08 l
405 131.28 m
405 136.08 l
343.68 131.28 m
343.68 136.08 l
282.48 131.28 m
282.48 136.08 l
221.28 131.28 m
221.28 136.08 l
159.96 131.28 m
159.96 136.08 l
98.76 131.28 m
98.76 136.08 l
466.2 136.08 m
466.2 710.28 l
471 136.08 m
466.2 136.08 l
471 250.92 m
466.2 250.92 l
471 365.76 m
466.2 365.76 l
471 480.6 m
466.2 480.6 l
471 595.44 m
466.2 595.44 l
471 710.28 m
466.2 710.28 l
0 0 0  setrgbcolor
S
1 j
1.92 w
n
98.76 141.84 m
238.68 147.6 l
278.64 153.36 l
321.96 159 l
351.96 164.76 l
388.68 182.04 l
398.64 193.56 l
415.32 210.72 l
418.68 314.04 l
405.24 365.76 l
402 423.24 l
405.24 480.6 l
405.24 538.08 l
402 710.28 l
0 0 0.501999  setrgbcolor
S
q
n
380.88 709.2 22.32 7.67999 re
W
n
n
402 710.28 m
381.96 939.96 l
S
Q
0.960007 w
n
96.72 141.84 m
98.76 143.88 l
100.8 141.84 l
98.76 139.8 l
96.72 141.84 l
h
q
eofill
Q
S
n
236.64 147.6 m
238.68 149.64 l
240.72 147.6 l
238.68 145.56 l
236.64 147.6 l
h
q
eofill
Q
S
n
276.6 153.36 m
278.64 155.4 l
280.68 153.36 l
278.64 151.32 l
276.6 153.36 l
h
q
eofill
Q
S
n
319.92 159 m
321.96 161.04 l
324 159 l
321.96 156.96 l
319.92 159 l
h
q
eofill
Q
S
n
349.92 164.76 m
351.96 166.8 l
354 164.76 l
351.96 162.72 l
349.92 164.76 l
h
q
eofill
Q
S
n
386.64 182.04 m
388.68 184.08 l
390.72 182.04 l
388.68 180 l
386.64 182.04 l
h
q
eofill
Q
S
n
396.6 193.56 m
398.64 195.6 l
400.68 193.56 l
398.64 191.52 l
396.6 193.56 l
h
q
eofill
Q
S
n
408.84 210.72 m
415.32 217.2 l
421.8 210.72 l
415.32 204.24 l
408.84 210.72 l
h
q
eofill
Q
S
n
416.64 314.04 m
418.68 316.08 l
420.72 314.04 l
418.68 312 l
416.64 314.04 l
h
q
eofill
Q
S
n
403.2 365.76 m
405.24 367.8 l
407.28 365.76 l
405.24 363.72 l
403.2 365.76 l
h
q
eofill
Q
S
n
399.96 423.24 m
402 425.28 l
404.04 423.24 l
402 421.2 l
399.96 423.24 l
h
q
eofill
Q
S
n
403.2 480.6 m
405.24 482.64 l
407.28 480.6 l
405.24 478.56 l
403.2 480.6 l
h
q
eofill
Q
S
n
403.2 538.08 m
405.24 540.12 l
407.28 538.08 l
405.24 536.04 l
403.2 538.08 l
h
q
eofill
Q
S
n
399.96 710.28 m
402 712.32 l
404.04 710.28 l
402 708.24 l
399.96 710.28 l
h
q
eofill
Q
S
0 0 0  setrgbcolor
440.4 607.44 m
/N13 [0 18.96 -18.96 0 0 0] Tf
(FFT Fine) show
471.36 93.6 m
/N15 [0 15.72 -15.72 0 0 0] Tf
(0.88) show
410.16 102.361 m
(0.9) show
348.84 93.6 m
(0.92) show
287.64 93.6 m
(0.94) show
226.441 93.6 m
(0.96) show
165.12 93.6 m
(0.98) show
103.921 115.44 m
(1) show
493.922 131.76 m
(0)
[110.397 ] pdfys
(2) show
(0)
[106.094 ] pdfys
(4) show
(0)
[106.094 ] pdfys
(6) show
(0)
[106.094 ] pdfys
(8) show
(0)
[101.774 ] pdfys
(10) show
(0) show
520.322 371.999 m
/N13 [0 15.72 -15.72 0 0 0] Tf
(scaling factor) show
381.12 82.92 m
/N13 -15.72 Tf
(normalized execution time)
[-9.61272 -9.61272 -6.12288 -13.9829 -8.74823 -4.37807 -4.37807 -7.86792 -8.74823 -9.61272 -4.32314 
-8.74823 -8.74823 -8.74823 -8.74823 -9.61272 -5.24256 -4.37807 -9.61272 -9.61272 -4.32314 -5.24256 
-4.37807 -13.9829 -8.74823 ] pdfxs
0.119995 w
n
75.96 57.96 459.12 675 re
S
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 1901 5649 a Fs(68)p eop
%%Page: 69 69
69 68 bop 390 2343 a @beginspecial 72 @llx 54 @lly 756
@urx 522 @ury 3744 @rwi @setspecial
%%BeginDocument: s3.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Scaling2.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050531205549-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 54 756 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 54 moveto 756 54 lineto 756 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 54 684 468 rectclip
[ 0 -1 1 0 18 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font BKCGIB+Arial
11 dict begin
/FontName /BKCGIB+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d898870164
1dba6c5defb41d909040a164fdb0a088fefa45fff299b57b0e194251a4a8
b9cf3bc1815fd2c5ba06e651f9d7799098b4541de9c35043282b335f2de1
7def94eec0695fa30f7aaa5574cd9d280a8b4d225396feeeafb4b20c3fcc
9f12e751228b7464328a957a71c1d6fc11ef53a8f692024ab80f5e0d7623
62b42a462a2bf96d5a0db86097e421e5cb8c7d7a0900e6cfd70978f26b60
122332f14359637710d630381bc4f9c629fd5be208af03ab6a69f0ba40b9
a2> ND 
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f733e1cd354b07630
213f625adb3ae8b5aa6a51c1055a59d5f55e13f6cd6e1d9a82c372ef809e
0ee864af865bf5dd5f7dae9a46388470afbd9e2e8c39b7ea4fc9ab800d6e
8ab2edc1e3d36e194904842b1236ff6f70f88f5551621a9fa448c516e732
df410d140d211e3fe0becb6d0a54202b80a6977f> ND 
/seven 
<10bf317048559e9c292b4762aa54ba120b5bb6d9743398f6558de0cda9ce
72c94d95b651df1bda9b63361a928dc3b98c779dfd157220ceb78b8ebeab
638d0f6753cf0f10ef> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/nine 
<10bf317047276c49b9c0f950eed45ca9abbead4f9a337d9778d52804f095
e0959c13860a3969943ef1a12c3ee6c45422162d204a6f0d8cdc2d4e75b5
67f1b01796340d6df61e18c819464639606becbe4894a8ef149ed72054cf
28ee583aeb880d27fff9e2fa582b760e67cbad4f844afdb68b34f85c1a95
a0e8285de8ad462405443a57e05fe3bbb3d2281adc779f19070fa98342c5
c2c2ec79e83ff4803e54082ff002fd18e3d25566d6e2d40f56cc659c4866
84f0030ca9d50085195745fdce82f2f52a9ae7ae7227879d15b08026dcde
5aab87db399da6bb3c6e8f68808a93> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/BKCGIB+Arial findfont /Encoding get
dup 0 /.notdef put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
pop
%%EndResource
[/N15/BKCGIB+Arial 1 TZ
%%BeginResource: font BKCGHP+Arial,Bold
11 dict begin
/FontName /BKCGHP+Arial,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/B 
<10bf317026ba2bbce92b978098e619897b4b8fdcbd3cfc340d276e299c7d
6241a702438792f6ef9a7edeafb714c626a6a9d1f4fe8b35a1f4077e9f60
45b5e92d699603d455d3b63d3861400edd7f2123ef16ae3ea726f1498d3b
e37d32710718a14f6a88fc97633a2ed9b8e818ef920908126b901c1e1a75
46f5c5360d40a2285514d25bc3b533395d7b7e0636834b7c28d16e09eccf
ce232f60e1cd2ba029ff44de9b4e616b0ff8942bdfc864932f3f68475a30
bd6d0052837c3a825c1344dc5429ab3ee66dd081e9d780b109bb8a53fa76
265df58f35db> ND 
/F 
<10bf317027e93a6da982a87edd53b1a22870b99b44157cee5f7e1ac9dd0c
13b8ca1eb59184f62bdabd0c5d> ND 
/a 
<10bf31705d64e193f644676913533d4f242b6181368ed1350652c8cb7a6f
e958f60841a88d1088c20f893090b458ae087d16aa8691f1ae44882b0528
d32f3e9827d4294992e18a57652ae7d531994f09c8f3899ddffaad39408b
1529cb6c6e94b8c5c36f6038811d22f304b6662d870ece2886bb4e9f799a
c37faedbf994154341e467f29126a4c489a05c6fef9ee5143f581ea41499
e4aecea25c0711d5cc7b9f01a37e7c0b7e59d5ee83c610a480921138ec2c
f957d766614f6ccaa7ceb4e20fd6f9ac362e8c090b1abb9485ee8c51fdeb
7fc72063a72ab3373c0c6872cf9ba20b3513a2189f8a98cd5a1ee87742> ND 
/c 
<10bf317047276c49998622737f5c0fdd43bdb1b35b15caae7eb2c80264ad
f0005e1c6be7a1a08efb8ae0111a7ff9c16d6d1d6fe6a62b9718659cdf71
ec1fec12732e715c04b3f3a8feb95e8d0f9e002393845281717573027f79
ad8c8ea5dce4faf3243344c83485cc434093ad2e51e73ce85594056ff3cf
8de95991fd7222c7dec9d4bc6113b2> ND 
/d 
<10bf317046e845f3cc81de7a4b8a8a1b3fe3a86a2a74eb0ce101ae9ff9ea
ca0b0d6152bab57b5a1a20451eca1d8bce22d8934498cbe1f50790f6dd2f
9d5a0cab606ce69313bb3e4094a370b8d3856d24b15d355e84c7c481bc80
d07358154d4cee4bac791720fabdb39630005823af359d78acbc47e52e70
c34626a827ae2272bde1c4ecc0359b7e45162ac0> ND 
/e 
<10bf3170599a82aebce2d0d9cd696e2d2232ae83b1d98ff884add96e0282
26fcd2cbd306888649029fbc75f18f771bf21f4d5f53f71cd70d56907fb2
0780ae57f65359db4c49ca929cb86ae96dd2f43742f720ffcefc0d1d3194
c72a55a6bfcf26d975c031741b09b969ea0410af02ae1e13b6c1d337a6b3
96eba6c714d73f9b5d2c2499a66a60f107d1dad4da56ef> ND 
/f 
<10bf317065f8aa629a44bd3be74bbe0cfa1409656d751dcdbb088484a3c9
84e11d0d09aae771e92b3d48596140fc2967fbcf96b4f7694ddca0744e47
fd6ddc298113201938776b254f36f4878baaf6514d0108bde72f2d6fbb4a
d588> ND 
/g 
<10bf317046e845f3c38d9f70ba4464ac4e8fae8096f95866e14c9cfc76d4
2c91caccc55306d31fd922e308e96ee980323125643f9a86a8ffc2b52c12
c5bb9a13190b6aced9365e9c0da3f6e0016fa2ab359e2b06b32a173590b2
6f2094e4e558e81d1aad3b8794a704066a5c48c5835d67bbce791b1965a9
3fbd5fb55f1203033af92c703c31533cbcf30051576e5b8b57eedca25286
866fdee3b16f9555216746cd0cc4065676d353776467694c68063ac58586
fb4e91cf6077ef9d35ed3bc9160721b2f3dee4f8c47777dc722d34059624
2ed759> ND 
/i 
<10bf317021cc67b2bc312fc6a7ad37016808b8c74342617d801906e8ad23
4c7210637a5c2e2ea339f24d0c> ND 
/k 
<10bf31703cf850293dbeacb4825d9b43eba4ffb09ca8073f22015f91e054
b1f7b181ceef1abb9c955a524d127d186a3d6e0ab18596ed70aada> ND 
/l 
<10bf317021cc67b2bc31c11814793bc69b430b318ded78131a> ND 
/m 
<10bf31703bc84f280bc926798acdec2516269e7061028d385a31d255844f
a27fc6b4cdd6f6ba3dfabbbaadef207eca864f3bc97abd9a4f1b978df039
4779a47e3088a94b9cee6d3b276eef4d4950e88ef4a61f93e0b6cde961dc
7ec12956bd3a56a59704c6c5b5a401c3674bc856b6c34f276e7f1bc3056d
89b4805ca25b43894c427bc43b36554ede70476f7ee25d1a6c03ed9f5e40
5c72135defa96ede67a5a8ef5fea114c19a857db71952cb83f4d11> ND 
/n 
<10bf31702094fda2efce4110428b7f86f5f2073cab682ca78d0dc97da563
e3301b964801f725812f64cb67abc1e242f6d8dcd921f1fbf9e05fee92c3
cf16b5bf6083337a59bf026de7fa548a247b8bde12c672aa0ba0501ccc35
fcca587d7573f11dfc32a2ac31516847d39fb276060c6171da> ND 
/o 
<10bf317041f0d680f4930f6b0672f7536ce2eb70a2366463cc9006c590f6
6bbb22b4a706eff4a93c95880cecbbf82d6e623efa721926a49ba75b71ef
97d0e3d8c35761734c54d6d734cb61cf4c4d7050d90fa115600d26f47050
dfb8739452ed0059ffdca41c137f0b71425a690a4da83dcf8abcf17c206e
c5eff5dd0d7b85b999c37123dfb769cd075b5a162cb33d72426c> ND 
/r 
<10bf31703f93f6c49808fdd8544fecb184adc28a087f99360dbfdf8b0375
9b819135c930698375e13c34125773b22d251f861dc05246608ab0d559df
442670f87f9615eabcaf25ab4b613b44e059b394bfb9> ND 
/s 
<10bf317050d961e87d157c0fe86ec5afecbd608ce0f232c64dcfb1d39b45
2e71b8ca2a92c46173a52c993c8ea0e3a6a97bbca89eebc0e87a68da7dcf
335cb16989a377c8400340e09bb7a3a4fae54003803791fa4d2f5b88afdc
392f17afecc8a037b6118f07b51c97b137676b140e2fba0e4b7ecc574c70
cbfa35d84fd49bc18c067342180503665d383fcdebee907501f8719ff862
5030352810efab946329f109adefea2f39c8182336b9eb95b38d69ca43cf
161d7fb7e8f46433cafa> ND 
/t 
<10bf3170688ce4cb1d2f5bf487137bec8ecb87b4485146ce17824d997ac5
95ab4afb2e80a065a802ee3f010bb37eac91d0f6ed42677aa9dde7e1ad01
769b95b971dec6d1669588801bb2fb04109e79e9771f019783524f2f268e
35dce126a03e55d028a6951cc9b40e649071f577> ND 
/u 
<10bf317022f1ca2cc2a22c3ff97c1232bc55839582d9c5ff7e86bfa4508d
4c6c2a32b8a91c23bc7417819a6d61bb6c4ffa588f9ea417cfc189ff4ca4
86806cfbdc09b2f0ef54b54c53e50d4afcfcb2df030b19aa33138b0a422d
d58054461b41c9166e86f2fb1f6b43052b68dc3202c1cc> ND 
/x 
<10bf3170638bf24b9ac01ae6f3f5ae817231c94093d6b928339de9a1f6d7
c03f6b6f7762b561ab36e6e40fc21093f89e72e352dadf27c949562edd95
94> ND 
/z 
<10bf31706ea98d84f3c625a1c3450f57f0cb972d7b4342feb5483a382b8c
546af3200ec3102c63cd8ee85ce02beb2b2e7a35b4d49541c8670b9156e1
3f2683e61a914abf9dc96f> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/BKCGHP+Arial,Bold findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 66 /B put
dup 70 /F put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 122 /z put
dup 160 /space put
pop
%%EndResource
[/N13/BKCGHP+Arial,Bold 1 TZ
1 J
0 j
0.960007 w
10 M
[] 0 d
false setSA
n
76.02 58.02 459 674.94 re
q
1 1 1 setrgbcolor
eofill
Q
0 0 0 setrgbcolor
S
q
n
404.64 136.38 0.0599976 573.66 re
W
n
0.0599976 w
n
404.64 136.38 m
404.64 710.04 l
S
Q
q
n
343.44 136.38 0.0599976 573.66 re
W
n
0.0599976 w
n
343.44 136.38 m
343.44 710.04 l
S
Q
q
n
282.3 136.38 0.0599976 573.66 re
W
n
0.0599976 w
n
282.3 136.38 m
282.3 710.04 l
S
Q
q
n
221.1 136.38 0.0599976 573.66 re
W
n
0.0599976 w
n
221.1 136.38 m
221.1 710.04 l
S
Q
q
n
159.9 136.38 0.0599976 573.66 re
W
n
0.0599976 w
n
159.9 136.38 m
159.9 710.04 l
S
Q
q
n
98.7 136.38 0.0599976 573.66 re
W
n
0.0599976 w
n
98.7 136.38 m
98.7 710.04 l
S
Q
n
98.7 136.38 367.14 573.66 re
0.501999 0.501999 0.501999  setrgbcolor
S
0.0599976 w
n
98.7 136.38 m
465.84 136.38 l
465.84 131.46 m
465.84 136.38 l
404.64 131.46 m
404.64 136.38 l
343.44 131.46 m
343.44 136.38 l
282.3 131.46 m
282.3 136.38 l
221.1 131.46 m
221.1 136.38 l
159.9 131.46 m
159.9 136.38 l
98.7 131.46 m
98.7 136.38 l
465.84 136.38 m
465.84 710.04 l
470.76 136.38 m
465.84 136.38 l
470.76 232.02 m
465.84 232.02 l
470.76 327.6 m
465.84 327.6 l
470.76 423.24 m
465.84 423.24 l
470.76 518.82 m
465.84 518.82 l
470.76 614.46 m
465.84 614.46 l
470.76 710.04 m
465.84 710.04 l
0 0 0  setrgbcolor
S
1 j
1.92 w
n
98.7 138.3 m
413.64 155.52 l
429.78 174.6 l
432.48 193.74 l
436.08 212.88 l
432.48 436.62 l
419.88 518.82 l
422.58 581.94 l
393.9 645 l
393.9 710.04 l
0 0 0.501999  setrgbcolor
S
q
n
379.38 709.02 15.6 7.56 re
W
n
n
393.9 710.04 m
380.4 773.16 l
S
Q
0.960007 w
n
96.72 138.3 m
98.7 140.28 l
100.68 138.3 l
98.7 136.32 l
96.72 138.3 l
h
q
eofill
Q
S
n
411.66 155.52 m
413.64 157.5 l
415.62 155.52 l
413.64 153.54 l
411.66 155.52 l
h
q
eofill
Q
S
n
427.8 174.6 m
429.78 176.58 l
431.76 174.6 l
429.78 172.62 l
427.8 174.6 l
h
q
eofill
Q
S
n
430.5 193.74 m
432.48 195.72 l
434.46 193.74 l
432.48 191.76 l
430.5 193.74 l
h
q
eofill
Q
S
n
434.1 212.88 m
436.08 214.86 l
438.06 212.88 l
436.08 210.9 l
434.1 212.88 l
h
q
eofill
Q
S
n
426 436.62 m
432.48 443.1 l
438.96 436.62 l
432.48 430.14 l
426 436.62 l
h
q
eofill
Q
S
n
417.9 518.82 m
419.88 520.8 l
421.86 518.82 l
419.88 516.84 l
417.9 518.82 l
h
q
eofill
Q
S
n
420.6 581.94 m
422.58 583.92 l
424.56 581.94 l
422.58 579.96 l
420.6 581.94 l
h
q
eofill
Q
S
n
391.92 645 m
393.9 646.98 l
395.88 645 l
393.9 643.02 l
391.92 645 l
h
q
eofill
Q
S
n
391.92 710.04 m
393.9 712.02 l
395.88 710.04 l
393.9 708.06 l
391.92 710.04 l
h
q
eofill
Q
S
0 0 0  setrgbcolor
438.9 597.6 m
/N13 [0 19.02 -19.02 0 0 0] Tf
(FilterBank) show
471.12 102.42 m
/N15 [0 15.78 -15.78 0 0 0] Tf
(0.7) show
409.921 93.6605 m
(0.75) show
348.721 102.42 m
(0.8) show
287.581 93.6605 m
(0.85) show
226.382 102.42 m
(0.9) show
165.182 93.6605 m
(0.95) show
103.983 115.56 m
(1) show
493.863 132 m
(0)
[91.2573 ] pdfys
(5) show
(0)
[82.4221 ] pdfys
(10) show
(0)
[78.0857 ] pdfys
(15) show
(0)
[78.0258 ] pdfys
(20) show
(0)
[78.0857 ] pdfys
(25) show
(0)
[78.0258 ] pdfys
(300) show
519.723 371.879 m
/N13 [0 15.78 -15.78 0 0 0] Tf
(scaling factor) show
381.36 83.52 m
/N13 -15.78 Tf
(no)
[-9.64628 -9.64628 ] pdfxs
(rma) show
(liz)
[-4.39165 -4.39165 -7.89481 ] pdfxs
(e) show
(d)
[-9.64628 ] pdfxs
( exec) show
(ution)
[-9.64628 -5.25944 -4.39165 -9.64628 -9.64628 ] pdfxs
( ) show
(ti)
[-5.25944 -4.39165 ] pdfxs
(me) show
q
n
72 54 468 684 re
W
n
0 j
n
76.02 58.02 459 674.94 re
S
Q
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 2741 x @beginspecial 72 @llx 54 @lly 756
@urx 522 @ury 3744 @rwi @setspecial
%%BeginDocument: s4.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Scaling2.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050531205610-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 54 756 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 54 moveto 756 54 lineto 756 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 54 684 468 rectclip
[ 0 -1 1 0 18 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font BKHICP+Arial
11 dict begin
/FontName /BKHICP+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f733e1cd354b07630
213f625adb3ae8b5aa6a51c1055a59d5f55e13f6cd6e1d9a82c372ef809e
0ee864af865bf5dd5f7dae9a46388470afbd9e2e8c39b7ea4fc9ab800d6e
8ab2edc1e3d36e194904842b1236ff6f70f88f5551621a9fa448c516e732
df410d140d211e3fe0becb6d0a54202b80a6977f> ND 
/seven 
<10bf317048559e9c292b4762aa54ba120b5bb6d9743398f6558de0cda9ce
72c94d95b651df1bda9b63361a928dc3b98c779dfd157220ceb78b8ebeab
638d0f6753cf0f10ef> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/nine 
<10bf317047276c49b9c0f950eed45ca9abbead4f9a337d9778d52804f095
e0959c13860a3969943ef1a12c3ee6c45422162d204a6f0d8cdc2d4e75b5
67f1b01796340d6df61e18c819464639606becbe4894a8ef149ed72054cf
28ee583aeb880d27fff9e2fa582b760e67cbad4f844afdb68b34f85c1a95
a0e8285de8ad462405443a57e05fe3bbb3d2281adc779f19070fa98342c5
c2c2ec79e83ff4803e54082ff002fd18e3d25566d6e2d40f56cc659c4866
84f0030ca9d50085195745fdce82f2f52a9ae7ae7227879d15b08026dcde
5aab87db399da6bb3c6e8f68808a93> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/BKHICP+Arial findfont /Encoding get
dup 0 /.notdef put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 53 /five put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
pop
%%EndResource
[/N15/BKHICP+Arial 1 TZ
%%BeginResource: font BKHICN+Arial,Bold
11 dict begin
/FontName /BKHICN+Arial,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/B 
<10bf317026ba2bbce92b978098e619897b4b8fdcbd3cfc340d276e299c7d
6241a702438792f6ef9a7edeafb714c626a6a9d1f4fe8b35a1f4077e9f60
45b5e92d699603d455d3b63d3861400edd7f2123ef16ae3ea726f1498d3b
e37d32710718a14f6a88fc97633a2ed9b8e818ef920908126b901c1e1a75
46f5c5360d40a2285514d25bc3b533395d7b7e0636834b7c28d16e09eccf
ce232f60e1cd2ba029ff44de9b4e616b0ff8942bdfc864932f3f68475a30
bd6d0052837c3a825c1344dc5429ab3ee66dd081e9d780b109bb8a53fa76
265df58f35db> ND 
/a 
<10bf31705d64e193f644676913533d4f242b6181368ed1350652c8cb7a6f
e958f60841a88d1088c20f893090b458ae087d16aa8691f1ae44882b0528
d32f3e9827d4294992e18a57652ae7d531994f09c8f3899ddffaad39408b
1529cb6c6e94b8c5c36f6038811d22f304b6662d870ece2886bb4e9f799a
c37faedbf994154341e467f29126a4c489a05c6fef9ee5143f581ea41499
e4aecea25c0711d5cc7b9f01a37e7c0b7e59d5ee83c610a480921138ec2c
f957d766614f6ccaa7ceb4e20fd6f9ac362e8c090b1abb9485ee8c51fdeb
7fc72063a72ab3373c0c6872cf9ba20b3513a2189f8a98cd5a1ee87742> ND 
/c 
<10bf317047276c49998622737f5c0fdd43bdb1b35b15caae7eb2c80264ad
f0005e1c6be7a1a08efb8ae0111a7ff9c16d6d1d6fe6a62b9718659cdf71
ec1fec12732e715c04b3f3a8feb95e8d0f9e002393845281717573027f79
ad8c8ea5dce4faf3243344c83485cc434093ad2e51e73ce85594056ff3cf
8de95991fd7222c7dec9d4bc6113b2> ND 
/d 
<10bf317046e845f3cc81de7a4b8a8a1b3fe3a86a2a74eb0ce101ae9ff9ea
ca0b0d6152bab57b5a1a20451eca1d8bce22d8934498cbe1f50790f6dd2f
9d5a0cab606ce69313bb3e4094a370b8d3856d24b15d355e84c7c481bc80
d07358154d4cee4bac791720fabdb39630005823af359d78acbc47e52e70
c34626a827ae2272bde1c4ecc0359b7e45162ac0> ND 
/e 
<10bf3170599a82aebce2d0d9cd696e2d2232ae83b1d98ff884add96e0282
26fcd2cbd306888649029fbc75f18f771bf21f4d5f53f71cd70d56907fb2
0780ae57f65359db4c49ca929cb86ae96dd2f43742f720ffcefc0d1d3194
c72a55a6bfcf26d975c031741b09b969ea0410af02ae1e13b6c1d337a6b3
96eba6c714d73f9b5d2c2499a66a60f107d1dad4da56ef> ND 
/f 
<10bf317065f8aa629a44bd3be74bbe0cfa1409656d751dcdbb088484a3c9
84e11d0d09aae771e92b3d48596140fc2967fbcf96b4f7694ddca0744e47
fd6ddc298113201938776b254f36f4878baaf6514d0108bde72f2d6fbb4a
d588> ND 
/g 
<10bf317046e845f3c38d9f70ba4464ac4e8fae8096f95866e14c9cfc76d4
2c91caccc55306d31fd922e308e96ee980323125643f9a86a8ffc2b52c12
c5bb9a13190b6aced9365e9c0da3f6e0016fa2ab359e2b06b32a173590b2
6f2094e4e558e81d1aad3b8794a704066a5c48c5835d67bbce791b1965a9
3fbd5fb55f1203033af92c703c31533cbcf30051576e5b8b57eedca25286
866fdee3b16f9555216746cd0cc4065676d353776467694c68063ac58586
fb4e91cf6077ef9d35ed3bc9160721b2f3dee4f8c47777dc722d34059624
2ed759> ND 
/i 
<10bf317021cc67b2bc312fc6a7ad37016808b8c74342617d801906e8ad23
4c7210637a5c2e2ea339f24d0c> ND 
/l 
<10bf317021cc67b2bc31c11814793bc69b430b318ded78131a> ND 
/m 
<10bf31703bc84f280bc926798acdec2516269e7061028d385a31d255844f
a27fc6b4cdd6f6ba3dfabbbaadef207eca864f3bc97abd9a4f1b978df039
4779a47e3088a94b9cee6d3b276eef4d4950e88ef4a61f93e0b6cde961dc
7ec12956bd3a56a59704c6c5b5a401c3674bc856b6c34f276e7f1bc3056d
89b4805ca25b43894c427bc43b36554ede70476f7ee25d1a6c03ed9f5e40
5c72135defa96ede67a5a8ef5fea114c19a857db71952cb83f4d11> ND 
/n 
<10bf31702094fda2efce4110428b7f86f5f2073cab682ca78d0dc97da563
e3301b964801f725812f64cb67abc1e242f6d8dcd921f1fbf9e05fee92c3
cf16b5bf6083337a59bf026de7fa548a247b8bde12c672aa0ba0501ccc35
fcca587d7573f11dfc32a2ac31516847d39fb276060c6171da> ND 
/o 
<10bf317041f0d680f4930f6b0672f7536ce2eb70a2366463cc9006c590f6
6bbb22b4a706eff4a93c95880cecbbf82d6e623efa721926a49ba75b71ef
97d0e3d8c35761734c54d6d734cb61cf4c4d7050d90fa115600d26f47050
dfb8739452ed0059ffdca41c137f0b71425a690a4da83dcf8abcf17c206e
c5eff5dd0d7b85b999c37123dfb769cd075b5a162cb33d72426c> ND 
/r 
<10bf31703f93f6c49808fdd8544fecb184adc28a087f99360dbfdf8b0375
9b819135c930698375e13c34125773b22d251f861dc05246608ab0d559df
442670f87f9615eabcaf25ab4b613b44e059b394bfb9> ND 
/s 
<10bf317050d961e87d157c0fe86ec5afecbd608ce0f232c64dcfb1d39b45
2e71b8ca2a92c46173a52c993c8ea0e3a6a97bbca89eebc0e87a68da7dcf
335cb16989a377c8400340e09bb7a3a4fae54003803791fa4d2f5b88afdc
392f17afecc8a037b6118f07b51c97b137676b140e2fba0e4b7ecc574c70
cbfa35d84fd49bc18c067342180503665d383fcdebee907501f8719ff862
5030352810efab946329f109adefea2f39c8182336b9eb95b38d69ca43cf
161d7fb7e8f46433cafa> ND 
/t 
<10bf3170688ce4cb1d2f5bf487137bec8ecb87b4485146ce17824d997ac5
95ab4afb2e80a065a802ee3f010bb37eac91d0f6ed42677aa9dde7e1ad01
769b95b971dec6d1669588801bb2fb04109e79e9771f019783524f2f268e
35dce126a03e55d028a6951cc9b40e649071f577> ND 
/u 
<10bf317022f1ca2cc2a22c3ff97c1232bc55839582d9c5ff7e86bfa4508d
4c6c2a32b8a91c23bc7417819a6d61bb6c4ffa588f9ea417cfc189ff4ca4
86806cfbdc09b2f0ef54b54c53e50d4afcfcb2df030b19aa33138b0a422d
d58054461b41c9166e86f2fb1f6b43052b68dc3202c1cc> ND 
/x 
<10bf3170638bf24b9ac01ae6f3f5ae817231c94093d6b928339de9a1f6d7
c03f6b6f7762b561ab36e6e40fc21093f89e72e352dadf27c949562edd95
94> ND 
/z 
<10bf31706ea98d84f3c625a1c3450f57f0cb972d7b4342feb5483a382b8c
546af3200ec3102c63cd8ee85ce02beb2b2e7a35b4d49541c8670b9156e1
3f2683e61a914abf9dc96f> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/BKHICN+Arial,Bold findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 66 /B put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 122 /z put
dup 160 /space put
pop
%%EndResource
[/N13/BKHICN+Arial,Bold 1 TZ
1 J
0 j
0.960007 w
10 M
[] 0 d
false setSA
n
75.96 57.96 459.12 675 re
q
1 1 1 setrgbcolor
eofill
Q
0 0 0 setrgbcolor
S
q
n
405 136.08 0.119995 569.76 re
W
n
0.119995 w
n
405 136.08 m
405 705.84 l
S
Q
q
n
343.68 136.08 0.119995 569.76 re
W
n
0.119995 w
n
343.68 136.08 m
343.68 705.84 l
S
Q
q
n
282.48 136.08 0.119995 569.76 re
W
n
0.119995 w
n
282.48 136.08 m
282.48 705.84 l
S
Q
q
n
221.28 136.08 0.119995 569.76 re
W
n
0.119995 w
n
221.28 136.08 m
221.28 705.84 l
S
Q
q
n
159.96 136.08 0.119995 569.76 re
W
n
0.119995 w
n
159.96 136.08 m
159.96 705.84 l
S
Q
q
n
98.76 136.08 0.119995 569.76 re
W
n
0.119995 w
n
98.76 136.08 m
98.76 705.84 l
S
Q
n
98.76 136.08 367.44 569.76 re
0.501999 0.501999 0.501999  setrgbcolor
S
0.119995 w
n
98.76 136.08 m
466.2 136.08 l
466.2 131.28 m
466.2 136.08 l
405 131.28 m
405 136.08 l
343.68 131.28 m
343.68 136.08 l
282.48 131.28 m
282.48 136.08 l
221.28 131.28 m
221.28 136.08 l
159.96 131.28 m
159.96 136.08 l
98.76 131.28 m
98.76 136.08 l
466.2 136.08 m
466.2 705.84 l
471 136.08 m
466.2 136.08 l
471 326.04 m
466.2 326.04 l
471 515.88 m
466.2 515.88 l
471 705.84 m
466.2 705.84 l
0 0 0  setrgbcolor
S
1 j
1.92 w
n
98.76 136.08 m
377.64 326.04 l
381.36 383.16 l
392.52 416.64 l
381.36 440.4 l
381.36 462 l
385.08 515.88 l
366.48 573.12 l
366.48 630.24 l
344.16 663.72 l
344.16 687.48 l
340.44 705.84 l
0 0 0.501999  setrgbcolor
S
q
n
335.64 704.76 6 7.67999 re
W
n
n
340.44 705.84 m
336.72 720.84 l
S
Q
0.960007 w
n
96.72 136.08 m
98.76 138.12 l
100.8 136.08 l
98.76 134.04 l
96.72 136.08 l
h
q
eofill
Q
S
n
375.6 326.04 m
377.64 328.08 l
379.68 326.04 l
377.64 324 l
375.6 326.04 l
h
q
eofill
Q
S
n
379.32 383.16 m
381.36 385.2 l
383.4 383.16 l
381.36 381.12 l
379.32 383.16 l
h
q
eofill
Q
S
n
390.48 416.64 m
392.52 418.68 l
394.56 416.64 l
392.52 414.6 l
390.48 416.64 l
h
q
eofill
Q
S
n
379.32 440.4 m
381.36 442.44 l
383.4 440.4 l
381.36 438.36 l
379.32 440.4 l
h
q
eofill
Q
S
n
374.88 462 m
381.36 468.48 l
387.84 462 l
381.36 455.52 l
374.88 462 l
h
q
eofill
Q
S
n
383.04 515.88 m
385.08 517.92 l
387.12 515.88 l
385.08 513.84 l
383.04 515.88 l
h
q
eofill
Q
S
n
364.44 573.12 m
366.48 575.16 l
368.52 573.12 l
366.48 571.08 l
364.44 573.12 l
h
q
eofill
Q
S
n
364.44 630.24 m
366.48 632.28 l
368.52 630.24 l
366.48 628.2 l
364.44 630.24 l
h
q
eofill
Q
S
n
342.12 663.72 m
344.16 665.76 l
346.2 663.72 l
344.16 661.68 l
342.12 663.72 l
h
q
eofill
Q
S
n
342.12 687.48 m
344.16 689.52 l
346.2 687.48 l
344.16 685.44 l
342.12 687.48 l
h
q
eofill
Q
S
n
338.4 705.84 m
340.44 707.88 l
342.48 705.84 l
340.44 703.8 l
338.4 705.84 l
h
q
eofill
Q
S
0 0 0  setrgbcolor
441 574.2 m
/N13 [0 18.96 -18.96 0 0 0] Tf
(Beamformer) show
471.36 93.6 m
/N15 [0 15.72 -15.72 0 0 0] Tf
(0.82) show
410.16 93.6 m
(0.85) show
348.84 93.6 m
(0.88) show
287.64 93.6 m
(0.91) show
226.441 93.6 m
(0.94) show
165.12 93.6 m
(0.97) show
103.921 115.44 m
(1) show
493.922 131.76 m
(1)
[185.518 ] pdfys
(1) show
(0)
[176.775 ] pdfys
(10) show
(0)
[168.033 ] pdfys
(1000) show
520.322 369.84 m
/N13 [0 15.72 -15.72 0 0 0] Tf
(scaling factor) show
381.12 82.92 m
/N13 -15.72 Tf
(normalized execution time)
[-9.61272 -9.61272 -6.12288 -13.9829 -8.74823 -4.37807 -4.37807 -7.86792 -8.74823 -9.61272 -4.32314 
-8.74823 -8.74823 -8.74823 -8.74823 -9.61272 -5.24256 -4.37807 -9.61272 -9.61272 -4.32314 -5.24256 
-4.37807 -13.9829 -8.74823 ] pdfxs
q
n
72 54 468 684 re
W
n
0 j
n
75.96 57.96 459.12 675 re
S
Q
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 1901 5649 a Fs(69)p eop
%%Page: 70 70
70 69 bop 390 2343 a @beginspecial 72 @llx 54 @lly 756
@urx 522 @ury 3744 @rwi @setspecial
%%BeginDocument: s5.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Scaling2.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050531205635-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 54 756 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 54 moveto 756 54 lineto 756 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 54 684 468 rectclip
[ 0 -1 1 0 18 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font BKNJBA+Arial
11 dict begin
/FontName /BKNJBA+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f733e1cd354b07630
213f625adb3ae8b5aa6a51c1055a59d5f55e13f6cd6e1d9a82c372ef809e
0ee864af865bf5dd5f7dae9a46388470afbd9e2e8c39b7ea4fc9ab800d6e
8ab2edc1e3d36e194904842b1236ff6f70f88f5551621a9fa448c516e732
df410d140d211e3fe0becb6d0a54202b80a6977f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/seven 
<10bf317048559e9c292b4762aa54ba120b5bb6d9743398f6558de0cda9ce
72c94d95b651df1bda9b63361a928dc3b98c779dfd157220ceb78b8ebeab
638d0f6753cf0f10ef> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/nine 
<10bf317047276c49b9c0f950eed45ca9abbead4f9a337d9778d52804f095
e0959c13860a3969943ef1a12c3ee6c45422162d204a6f0d8cdc2d4e75b5
67f1b01796340d6df61e18c819464639606becbe4894a8ef149ed72054cf
28ee583aeb880d27fff9e2fa582b760e67cbad4f844afdb68b34f85c1a95
a0e8285de8ad462405443a57e05fe3bbb3d2281adc779f19070fa98342c5
c2c2ec79e83ff4803e54082ff002fd18e3d25566d6e2d40f56cc659c4866
84f0030ca9d50085195745fdce82f2f52a9ae7ae7227879d15b08026dcde
5aab87db399da6bb3c6e8f68808a93> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/BKNJBA+Arial findfont /Encoding get
dup 0 /.notdef put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
pop
%%EndResource
[/N15/BKNJBA+Arial 1 TZ
%%BeginResource: font BKNIPO+Arial,Bold
11 dict begin
/FontName /BKNIPO+Arial,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/F 
<10bf317027e93a6da982a87edd53b1a22870b99b44157cee5f7e1ac9dd0c
13b8ca1eb59184f62bdabd0c5d> ND 
/M 
<10bf317020950cf8a7d65c5e0deb0edda2c46e3c0ac469cbe379c347b177
d8a11239e7ae93b4b60537ec6b28c7bf8485a496e157dff5416f3245253b
e0> ND 
/R 
<10bf317026ba2bbc95a451500e8f7f1d9eea40aa6073cf8d8a53256d5069
7a95f0a69cc27900ab66f73526710c1dd1b314dd64652bf01e66e7f1a039
9f801abc85bdfedaa9c191a89df077e519ba29ac06c308453bc06fc68fe6
b9d02220c09e8991fe4c96b0e59636d8c7b7e6c81d6ab22b6d7790c2f074
6fd6013faa33b96dab58268b6e89ee1d96b97459969f9ef8dca47d5b13c4
b0ca738a9d2aa7f7b1da1ca4> ND 
/a 
<10bf31705d64e193f644676913533d4f242b6181368ed1350652c8cb7a6f
e958f60841a88d1088c20f893090b458ae087d16aa8691f1ae44882b0528
d32f3e9827d4294992e18a57652ae7d531994f09c8f3899ddffaad39408b
1529cb6c6e94b8c5c36f6038811d22f304b6662d870ece2886bb4e9f799a
c37faedbf994154341e467f29126a4c489a05c6fef9ee5143f581ea41499
e4aecea25c0711d5cc7b9f01a37e7c0b7e59d5ee83c610a480921138ec2c
f957d766614f6ccaa7ceb4e20fd6f9ac362e8c090b1abb9485ee8c51fdeb
7fc72063a72ab3373c0c6872cf9ba20b3513a2189f8a98cd5a1ee87742> ND 
/c 
<10bf317047276c49998622737f5c0fdd43bdb1b35b15caae7eb2c80264ad
f0005e1c6be7a1a08efb8ae0111a7ff9c16d6d1d6fe6a62b9718659cdf71
ec1fec12732e715c04b3f3a8feb95e8d0f9e002393845281717573027f79
ad8c8ea5dce4faf3243344c83485cc434093ad2e51e73ce85594056ff3cf
8de95991fd7222c7dec9d4bc6113b2> ND 
/d 
<10bf317046e845f3cc81de7a4b8a8a1b3fe3a86a2a74eb0ce101ae9ff9ea
ca0b0d6152bab57b5a1a20451eca1d8bce22d8934498cbe1f50790f6dd2f
9d5a0cab606ce69313bb3e4094a370b8d3856d24b15d355e84c7c481bc80
d07358154d4cee4bac791720fabdb39630005823af359d78acbc47e52e70
c34626a827ae2272bde1c4ecc0359b7e45162ac0> ND 
/e 
<10bf3170599a82aebce2d0d9cd696e2d2232ae83b1d98ff884add96e0282
26fcd2cbd306888649029fbc75f18f771bf21f4d5f53f71cd70d56907fb2
0780ae57f65359db4c49ca929cb86ae96dd2f43742f720ffcefc0d1d3194
c72a55a6bfcf26d975c031741b09b969ea0410af02ae1e13b6c1d337a6b3
96eba6c714d73f9b5d2c2499a66a60f107d1dad4da56ef> ND 
/f 
<10bf317065f8aa629a44bd3be74bbe0cfa1409656d751dcdbb088484a3c9
84e11d0d09aae771e92b3d48596140fc2967fbcf96b4f7694ddca0744e47
fd6ddc298113201938776b254f36f4878baaf6514d0108bde72f2d6fbb4a
d588> ND 
/g 
<10bf317046e845f3c38d9f70ba4464ac4e8fae8096f95866e14c9cfc76d4
2c91caccc55306d31fd922e308e96ee980323125643f9a86a8ffc2b52c12
c5bb9a13190b6aced9365e9c0da3f6e0016fa2ab359e2b06b32a173590b2
6f2094e4e558e81d1aad3b8794a704066a5c48c5835d67bbce791b1965a9
3fbd5fb55f1203033af92c703c31533cbcf30051576e5b8b57eedca25286
866fdee3b16f9555216746cd0cc4065676d353776467694c68063ac58586
fb4e91cf6077ef9d35ed3bc9160721b2f3dee4f8c47777dc722d34059624
2ed759> ND 
/i 
<10bf317021cc67b2bc312fc6a7ad37016808b8c74342617d801906e8ad23
4c7210637a5c2e2ea339f24d0c> ND 
/l 
<10bf317021cc67b2bc31c11814793bc69b430b318ded78131a> ND 
/m 
<10bf31703bc84f280bc926798acdec2516269e7061028d385a31d255844f
a27fc6b4cdd6f6ba3dfabbbaadef207eca864f3bc97abd9a4f1b978df039
4779a47e3088a94b9cee6d3b276eef4d4950e88ef4a61f93e0b6cde961dc
7ec12956bd3a56a59704c6c5b5a401c3674bc856b6c34f276e7f1bc3056d
89b4805ca25b43894c427bc43b36554ede70476f7ee25d1a6c03ed9f5e40
5c72135defa96ede67a5a8ef5fea114c19a857db71952cb83f4d11> ND 
/n 
<10bf31702094fda2efce4110428b7f86f5f2073cab682ca78d0dc97da563
e3301b964801f725812f64cb67abc1e242f6d8dcd921f1fbf9e05fee92c3
cf16b5bf6083337a59bf026de7fa548a247b8bde12c672aa0ba0501ccc35
fcca587d7573f11dfc32a2ac31516847d39fb276060c6171da> ND 
/o 
<10bf317041f0d680f4930f6b0672f7536ce2eb70a2366463cc9006c590f6
6bbb22b4a706eff4a93c95880cecbbf82d6e623efa721926a49ba75b71ef
97d0e3d8c35761734c54d6d734cb61cf4c4d7050d90fa115600d26f47050
dfb8739452ed0059ffdca41c137f0b71425a690a4da83dcf8abcf17c206e
c5eff5dd0d7b85b999c37123dfb769cd075b5a162cb33d72426c> ND 
/r 
<10bf31703f93f6c49808fdd8544fecb184adc28a087f99360dbfdf8b0375
9b819135c930698375e13c34125773b22d251f861dc05246608ab0d559df
442670f87f9615eabcaf25ab4b613b44e059b394bfb9> ND 
/s 
<10bf317050d961e87d157c0fe86ec5afecbd608ce0f232c64dcfb1d39b45
2e71b8ca2a92c46173a52c993c8ea0e3a6a97bbca89eebc0e87a68da7dcf
335cb16989a377c8400340e09bb7a3a4fae54003803791fa4d2f5b88afdc
392f17afecc8a037b6118f07b51c97b137676b140e2fba0e4b7ecc574c70
cbfa35d84fd49bc18c067342180503665d383fcdebee907501f8719ff862
5030352810efab946329f109adefea2f39c8182336b9eb95b38d69ca43cf
161d7fb7e8f46433cafa> ND 
/t 
<10bf3170688ce4cb1d2f5bf487137bec8ecb87b4485146ce17824d997ac5
95ab4afb2e80a065a802ee3f010bb37eac91d0f6ed42677aa9dde7e1ad01
769b95b971dec6d1669588801bb2fb04109e79e9771f019783524f2f268e
35dce126a03e55d028a6951cc9b40e649071f577> ND 
/u 
<10bf317022f1ca2cc2a22c3ff97c1232bc55839582d9c5ff7e86bfa4508d
4c6c2a32b8a91c23bc7417819a6d61bb6c4ffa588f9ea417cfc189ff4ca4
86806cfbdc09b2f0ef54b54c53e50d4afcfcb2df030b19aa33138b0a422d
d58054461b41c9166e86f2fb1f6b43052b68dc3202c1cc> ND 
/x 
<10bf3170638bf24b9ac01ae6f3f5ae817231c94093d6b928339de9a1f6d7
c03f6b6f7762b561ab36e6e40fc21093f89e72e352dadf27c949562edd95
94> ND 
/z 
<10bf31706ea98d84f3c625a1c3450f57f0cb972d7b4342feb5483a382b8c
546af3200ec3102c63cd8ee85ce02beb2b2e7a35b4d49541c8670b9156e1
3f2683e61a914abf9dc96f> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/BKNIPO+Arial,Bold findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 70 /F put
dup 77 /M put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 122 /z put
dup 160 /space put
pop
%%EndResource
[/N13/BKNIPO+Arial,Bold 1 TZ
1 J
0 j
0.960007 w
10 M
[] 0 d
false setSA
n
76.02 58.02 459 674.94 re
q
1 1 1 setrgbcolor
eofill
Q
0 0 0 setrgbcolor
S
q
n
425.4 135.84 0.0599976 565.44 re
W
n
0.0599976 w
n
425.4 135.84 m
425.4 701.28 l
S
Q
q
n
384.6 135.84 0.0599976 565.44 re
W
n
0.0599976 w
n
384.6 135.84 m
384.6 701.28 l
S
Q
q
n
343.74 135.84 0.0599976 565.44 re
W
n
0.0599976 w
n
343.74 135.84 m
343.74 701.28 l
S
Q
q
n
302.88 135.84 0.0599976 565.44 re
W
n
0.0599976 w
n
302.88 135.84 m
302.88 701.28 l
S
Q
q
n
262.08 135.84 0.0599976 565.44 re
W
n
0.0599976 w
n
262.08 135.84 m
262.08 701.28 l
S
Q
q
n
221.22 135.84 0.0599976 565.44 re
W
n
0.0599976 w
n
221.22 135.84 m
221.22 701.28 l
S
Q
q
n
180.36 135.84 0.0599976 565.44 re
W
n
0.0599976 w
n
180.36 135.84 m
180.36 701.28 l
S
Q
q
n
139.56 135.84 0.0599976 565.44 re
W
n
0.0599976 w
n
139.56 135.84 m
139.56 701.28 l
S
Q
q
n
98.7 135.84 0.0599976 565.44 re
W
n
0.0599976 w
n
98.7 135.84 m
98.7 701.28 l
S
Q
n
98.7 135.84 367.56 565.44 re
0.501999 0.501999 0.501999  setrgbcolor
S
0.0599976 w
n
98.7 135.84 m
466.26 135.84 l
466.26 130.92 m
466.26 135.84 l
425.4 130.92 m
425.4 135.84 l
384.6 130.92 m
384.6 135.84 l
343.74 130.92 m
343.74 135.84 l
302.88 130.92 m
302.88 135.84 l
262.08 130.92 m
262.08 135.84 l
221.22 130.92 m
221.22 135.84 l
180.36 130.92 m
180.36 135.84 l
139.56 130.92 m
139.56 135.84 l
98.7 130.92 m
98.7 135.84 l
466.26 135.84 m
466.26 701.28 l
471.18 135.84 m
466.26 135.84 l
471.18 277.2 m
466.26 277.2 l
471.18 418.56 m
466.26 418.56 l
471.18 559.92 m
466.26 559.92 l
471.18 701.28 m
466.26 701.28 l
0 0 0  setrgbcolor
S
1 j
1.92 w
n
98.7 135.84 m
341.1 234.66 l
370.68 277.2 l
384.66 319.74 l
390.06 344.64 l
392.4 362.28 l
394.74 387.18 l
396.3 404.88 l
396.3 418.56 l
404.82 528.54 l
397.08 584.82 l
393.18 616.2 l
387.78 636.84 l
380.76 652.26 l
0 0 0.501999  setrgbcolor
S
0.960007 w
n
96.72 135.84 m
98.7 137.82 l
100.68 135.84 l
98.7 133.86 l
96.72 135.84 l
h
q
eofill
Q
S
n
339.12 234.66 m
341.1 236.64 l
343.08 234.66 l
341.1 232.68 l
339.12 234.66 l
h
q
eofill
Q
S
n
368.7 277.2 m
370.68 279.18 l
372.66 277.2 l
370.68 275.22 l
368.7 277.2 l
h
q
eofill
Q
S
n
382.68 319.74 m
384.66 321.72 l
386.64 319.74 l
384.66 317.76 l
382.68 319.74 l
h
q
eofill
Q
S
n
388.08 344.64 m
390.06 346.62 l
392.04 344.64 l
390.06 342.66 l
388.08 344.64 l
h
q
eofill
Q
S
n
385.92 362.28 m
392.4 368.76 l
398.88 362.28 l
392.4 355.8 l
385.92 362.28 l
h
q
eofill
Q
S
n
392.76 387.18 m
394.74 389.16 l
396.72 387.18 l
394.74 385.2 l
392.76 387.18 l
h
q
eofill
Q
S
n
394.32 404.88 m
396.3 406.86 l
398.28 404.88 l
396.3 402.9 l
394.32 404.88 l
h
q
eofill
Q
S
n
394.32 418.56 m
396.3 420.54 l
398.28 418.56 l
396.3 416.58 l
394.32 418.56 l
h
q
eofill
Q
S
n
402.84 528.54 m
404.82 530.52 l
406.8 528.54 l
404.82 526.56 l
402.84 528.54 l
h
q
eofill
Q
S
n
395.1 584.82 m
397.08 586.8 l
399.06 584.82 l
397.08 582.84 l
395.1 584.82 l
h
q
eofill
Q
S
n
391.2 616.2 m
393.18 618.18 l
395.16 616.2 l
393.18 614.22 l
391.2 616.2 l
h
q
eofill
Q
S
n
385.8 636.84 m
387.78 638.82 l
389.76 636.84 l
387.78 634.86 l
385.8 636.84 l
h
q
eofill
Q
S
n
378.78 652.26 m
380.76 654.24 l
382.74 652.26 l
380.76 650.28 l
378.78 652.26 l
h
q
eofill
Q
S
0 0 0  setrgbcolor
444.3 596.58 m
/N13 [0 19.02 -19.02 0 0 0] Tf
(FM Radio) show
471.54 93.12 m
/N15 [0 15.78 -15.78 0 0 0] Tf
(0.46) show
430.679 93.12 m
(0.52) show
389.878 93.12 m
(0.58) show
349.018 93.12 m
(0.64) show
308.157 101.879 m
(0.7) show
267.356 93.12 m
(0.76) show
226.495 93.12 m
(0.82) show
185.635 93.12 m
(0.88) show
144.834 93.12 m
(0.94) show
103.973 115.02 m
(1) show
494.272 131.459 m
(1)
[136.978 ] pdfys
(1) show
(0)
[128.201 ] pdfys
(10) show
(0)
[119.426 ] pdfys
(100) show
(0)
[110.649 ] pdfys
(10000) show
519.78 368.28 m
/N13 [0 15.48 -15.48 0 0 0] Tf
(scaling factor) show
379.68 83.1 m
/N13 -15.48 Tf
(normalized execution time)
[-9.4721 -9.4721 -6.03554 -13.7755 -8.62081 -4.31737 -4.31737 -7.75393 -8.62081 -9.4721 -4.3221 
-8.62081 -8.62081 -8.62081 -8.62081 -9.4721 -5.16866 -4.31737 -9.4721 -9.4721 -4.3221 -5.16866 
-4.31737 -13.7755 -8.62081 ] pdfxs
q
n
72 54 468 684 re
W
n
0 j
n
76.02 58.02 459 674.94 re
S
Q
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 2741 x @beginspecial 72 @llx 54 @lly 756
@urx 522 @ury 3744 @rwi @setspecial
%%BeginDocument: s6.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Scaling2.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050531205655-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 54 756 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 54 moveto 756 54 lineto 756 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 54 684 468 rectclip
[ 0 -1 1 0 18 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font BLCGGJ+Arial
11 dict begin
/FontName /BLCGGJ+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f733e1cd354b07630
213f625adb3ae8b5aa6a51c1055a59d5f55e13f6cd6e1d9a82c372ef809e
0ee864af865bf5dd5f7dae9a46388470afbd9e2e8c39b7ea4fc9ab800d6e
8ab2edc1e3d36e194904842b1236ff6f70f88f5551621a9fa448c516e732
df410d140d211e3fe0becb6d0a54202b80a6977f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/seven 
<10bf317048559e9c292b4762aa54ba120b5bb6d9743398f6558de0cda9ce
72c94d95b651df1bda9b63361a928dc3b98c779dfd157220ceb78b8ebeab
638d0f6753cf0f10ef> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/nine 
<10bf317047276c49b9c0f950eed45ca9abbead4f9a337d9778d52804f095
e0959c13860a3969943ef1a12c3ee6c45422162d204a6f0d8cdc2d4e75b5
67f1b01796340d6df61e18c819464639606becbe4894a8ef149ed72054cf
28ee583aeb880d27fff9e2fa582b760e67cbad4f844afdb68b34f85c1a95
a0e8285de8ad462405443a57e05fe3bbb3d2281adc779f19070fa98342c5
c2c2ec79e83ff4803e54082ff002fd18e3d25566d6e2d40f56cc659c4866
84f0030ca9d50085195745fdce82f2f52a9ae7ae7227879d15b08026dcde
5aab87db399da6bb3c6e8f68808a93> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/BLCGGJ+Arial findfont /Encoding get
dup 0 /.notdef put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
pop
%%EndResource
[/N15/BLCGGJ+Arial 1 TZ
%%BeginResource: font BLCGGH+Arial,Bold
11 dict begin
/FontName /BLCGGH+Arial,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/B 
<10bf317026ba2bbce92b978098e619897b4b8fdcbd3cfc340d276e299c7d
6241a702438792f6ef9a7edeafb714c626a6a9d1f4fe8b35a1f4077e9f60
45b5e92d699603d455d3b63d3861400edd7f2123ef16ae3ea726f1498d3b
e37d32710718a14f6a88fc97633a2ed9b8e818ef920908126b901c1e1a75
46f5c5360d40a2285514d25bc3b533395d7b7e0636834b7c28d16e09eccf
ce232f60e1cd2ba029ff44de9b4e616b0ff8942bdfc864932f3f68475a30
bd6d0052837c3a825c1344dc5429ab3ee66dd081e9d780b109bb8a53fa76
265df58f35db> ND 
/S 
<10bf31705d65c0900ab6f1dec202feebed63a391e8923b6171e4bd9a9891
3483f7e18f03f81efeea9ec6e499086f29e069b330e0714349bdbde86411
119421305eb3ccf831a419f2b1b383ae283eef31cd6ab17d35e046224edf
8d334c91b8f3410ce0b754cf25ffc38b1c45008fedcc6fb476440d278757
5aef3183071e560db2a44ec14079a58ceb82879a9f1a9b4e9fcabb16df58
24675d0a68f72691cd9980f0d6d9adcd3e204eaf9c302558bc548ec6583d
8e097a247d483ed52d9f91d7ca0feb01513c1c9a868c4cf1c92a6751c828
3f7c6f8c290f25> ND 
/a 
<10bf31705d64e193f644676913533d4f242b6181368ed1350652c8cb7a6f
e958f60841a88d1088c20f893090b458ae087d16aa8691f1ae44882b0528
d32f3e9827d4294992e18a57652ae7d531994f09c8f3899ddffaad39408b
1529cb6c6e94b8c5c36f6038811d22f304b6662d870ece2886bb4e9f799a
c37faedbf994154341e467f29126a4c489a05c6fef9ee5143f581ea41499
e4aecea25c0711d5cc7b9f01a37e7c0b7e59d5ee83c610a480921138ec2c
f957d766614f6ccaa7ceb4e20fd6f9ac362e8c090b1abb9485ee8c51fdeb
7fc72063a72ab3373c0c6872cf9ba20b3513a2189f8a98cd5a1ee87742> ND 
/c 
<10bf317047276c49998622737f5c0fdd43bdb1b35b15caae7eb2c80264ad
f0005e1c6be7a1a08efb8ae0111a7ff9c16d6d1d6fe6a62b9718659cdf71
ec1fec12732e715c04b3f3a8feb95e8d0f9e002393845281717573027f79
ad8c8ea5dce4faf3243344c83485cc434093ad2e51e73ce85594056ff3cf
8de95991fd7222c7dec9d4bc6113b2> ND 
/d 
<10bf317046e845f3cc81de7a4b8a8a1b3fe3a86a2a74eb0ce101ae9ff9ea
ca0b0d6152bab57b5a1a20451eca1d8bce22d8934498cbe1f50790f6dd2f
9d5a0cab606ce69313bb3e4094a370b8d3856d24b15d355e84c7c481bc80
d07358154d4cee4bac791720fabdb39630005823af359d78acbc47e52e70
c34626a827ae2272bde1c4ecc0359b7e45162ac0> ND 
/e 
<10bf3170599a82aebce2d0d9cd696e2d2232ae83b1d98ff884add96e0282
26fcd2cbd306888649029fbc75f18f771bf21f4d5f53f71cd70d56907fb2
0780ae57f65359db4c49ca929cb86ae96dd2f43742f720ffcefc0d1d3194
c72a55a6bfcf26d975c031741b09b969ea0410af02ae1e13b6c1d337a6b3
96eba6c714d73f9b5d2c2499a66a60f107d1dad4da56ef> ND 
/f 
<10bf317065f8aa629a44bd3be74bbe0cfa1409656d751dcdbb088484a3c9
84e11d0d09aae771e92b3d48596140fc2967fbcf96b4f7694ddca0744e47
fd6ddc298113201938776b254f36f4878baaf6514d0108bde72f2d6fbb4a
d588> ND 
/g 
<10bf317046e845f3c38d9f70ba4464ac4e8fae8096f95866e14c9cfc76d4
2c91caccc55306d31fd922e308e96ee980323125643f9a86a8ffc2b52c12
c5bb9a13190b6aced9365e9c0da3f6e0016fa2ab359e2b06b32a173590b2
6f2094e4e558e81d1aad3b8794a704066a5c48c5835d67bbce791b1965a9
3fbd5fb55f1203033af92c703c31533cbcf30051576e5b8b57eedca25286
866fdee3b16f9555216746cd0cc4065676d353776467694c68063ac58586
fb4e91cf6077ef9d35ed3bc9160721b2f3dee4f8c47777dc722d34059624
2ed759> ND 
/i 
<10bf317021cc67b2bc312fc6a7ad37016808b8c74342617d801906e8ad23
4c7210637a5c2e2ea339f24d0c> ND 
/l 
<10bf317021cc67b2bc31c11814793bc69b430b318ded78131a> ND 
/m 
<10bf31703bc84f280bc926798acdec2516269e7061028d385a31d255844f
a27fc6b4cdd6f6ba3dfabbbaadef207eca864f3bc97abd9a4f1b978df039
4779a47e3088a94b9cee6d3b276eef4d4950e88ef4a61f93e0b6cde961dc
7ec12956bd3a56a59704c6c5b5a401c3674bc856b6c34f276e7f1bc3056d
89b4805ca25b43894c427bc43b36554ede70476f7ee25d1a6c03ed9f5e40
5c72135defa96ede67a5a8ef5fea114c19a857db71952cb83f4d11> ND 
/n 
<10bf31702094fda2efce4110428b7f86f5f2073cab682ca78d0dc97da563
e3301b964801f725812f64cb67abc1e242f6d8dcd921f1fbf9e05fee92c3
cf16b5bf6083337a59bf026de7fa548a247b8bde12c672aa0ba0501ccc35
fcca587d7573f11dfc32a2ac31516847d39fb276060c6171da> ND 
/o 
<10bf317041f0d680f4930f6b0672f7536ce2eb70a2366463cc9006c590f6
6bbb22b4a706eff4a93c95880cecbbf82d6e623efa721926a49ba75b71ef
97d0e3d8c35761734c54d6d734cb61cf4c4d7050d90fa115600d26f47050
dfb8739452ed0059ffdca41c137f0b71425a690a4da83dcf8abcf17c206e
c5eff5dd0d7b85b999c37123dfb769cd075b5a162cb33d72426c> ND 
/r 
<10bf31703f93f6c49808fdd8544fecb184adc28a087f99360dbfdf8b0375
9b819135c930698375e13c34125773b22d251f861dc05246608ab0d559df
442670f87f9615eabcaf25ab4b613b44e059b394bfb9> ND 
/s 
<10bf317050d961e87d157c0fe86ec5afecbd608ce0f232c64dcfb1d39b45
2e71b8ca2a92c46173a52c993c8ea0e3a6a97bbca89eebc0e87a68da7dcf
335cb16989a377c8400340e09bb7a3a4fae54003803791fa4d2f5b88afdc
392f17afecc8a037b6118f07b51c97b137676b140e2fba0e4b7ecc574c70
cbfa35d84fd49bc18c067342180503665d383fcdebee907501f8719ff862
5030352810efab946329f109adefea2f39c8182336b9eb95b38d69ca43cf
161d7fb7e8f46433cafa> ND 
/t 
<10bf3170688ce4cb1d2f5bf487137bec8ecb87b4485146ce17824d997ac5
95ab4afb2e80a065a802ee3f010bb37eac91d0f6ed42677aa9dde7e1ad01
769b95b971dec6d1669588801bb2fb04109e79e9771f019783524f2f268e
35dce126a03e55d028a6951cc9b40e649071f577> ND 
/u 
<10bf317022f1ca2cc2a22c3ff97c1232bc55839582d9c5ff7e86bfa4508d
4c6c2a32b8a91c23bc7417819a6d61bb6c4ffa588f9ea417cfc189ff4ca4
86806cfbdc09b2f0ef54b54c53e50d4afcfcb2df030b19aa33138b0a422d
d58054461b41c9166e86f2fb1f6b43052b68dc3202c1cc> ND 
/x 
<10bf3170638bf24b9ac01ae6f3f5ae817231c94093d6b928339de9a1f6d7
c03f6b6f7762b561ab36e6e40fc21093f89e72e352dadf27c949562edd95
94> ND 
/z 
<10bf31706ea98d84f3c625a1c3450f57f0cb972d7b4342feb5483a382b8c
546af3200ec3102c63cd8ee85ce02beb2b2e7a35b4d49541c8670b9156e1
3f2683e61a914abf9dc96f> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/BLCGGH+Arial,Bold findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 66 /B put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 122 /z put
dup 160 /space put
pop
%%EndResource
[/N13/BLCGGH+Arial,Bold 1 TZ
1 J
0 j
0.960007 w
10 M
[] 0 d
false setSA
n
76.02 58.02 459 674.94 re
q
1 1 1 setrgbcolor
eofill
Q
0 0 0 setrgbcolor
S
q
n
425.64 136.02 0.0599976 574.02 re
W
n
0.0599976 w
n
425.64 136.02 m
425.64 710.04 l
S
Q
q
n
384.78 136.02 0.0599976 574.02 re
W
n
0.0599976 w
n
384.78 136.02 m
384.78 710.04 l
S
Q
q
n
343.92 136.02 0.0599976 574.02 re
W
n
0.0599976 w
n
343.92 136.02 m
343.92 710.04 l
S
Q
q
n
303.06 136.02 0.0599976 574.02 re
W
n
0.0599976 w
n
303.06 136.02 m
303.06 710.04 l
S
Q
q
n
262.2 136.02 0.0599976 574.02 re
W
n
0.0599976 w
n
262.2 136.02 m
262.2 710.04 l
S
Q
q
n
221.34 136.02 0.0599976 574.02 re
W
n
0.0599976 w
n
221.34 136.02 m
221.34 710.04 l
S
Q
q
n
180.48 136.02 0.0599976 574.02 re
W
n
0.0599976 w
n
180.48 136.02 m
180.48 710.04 l
S
Q
q
n
139.62 136.02 0.0599976 574.02 re
W
n
0.0599976 w
n
139.62 136.02 m
139.62 710.04 l
S
Q
q
n
98.76 136.02 0.0599976 574.02 re
W
n
0.0599976 w
n
98.76 136.02 m
98.76 710.04 l
S
Q
n
98.76 136.02 367.74 574.02 re
0.501999 0.501999 0.501999  setrgbcolor
S
0.0599976 w
n
98.76 136.02 m
466.5 136.02 l
466.5 131.1 m
466.5 136.02 l
425.64 131.1 m
425.64 136.02 l
384.78 131.1 m
384.78 136.02 l
343.92 131.1 m
343.92 136.02 l
303.06 131.1 m
303.06 136.02 l
262.2 131.1 m
262.2 136.02 l
221.34 131.1 m
221.34 136.02 l
180.48 131.1 m
180.48 136.02 l
139.62 131.1 m
139.62 136.02 l
98.76 131.1 m
98.76 136.02 l
466.5 136.02 m
466.5 710.04 l
471.42 136.02 m
466.5 136.02 l
471.42 224.34 m
466.5 224.34 l
471.42 312.66 m
466.5 312.66 l
471.42 400.98 m
466.5 400.98 l
471.42 489.24 m
466.5 489.24 l
471.42 577.56 m
466.5 577.56 l
471.42 665.88 m
466.5 665.88 l
0 0 0  setrgbcolor
S
1 j
1.92 w
n
98.76 140.46 m
322.56 149.28 l
372.54 166.92 l
391.02 184.62 l
396.24 193.44 l
401.52 211.08 l
406.8 233.16 l
410.28 268.5 l
411.18 299.4 l
413.82 356.82 l
415.56 445.08 l
405.9 533.4 l
383.1 621.72 l
380.46 710.04 l
0 0 0.501999  setrgbcolor
S
0.960007 w
n
96.78 140.46 m
98.76 142.44 l
100.74 140.46 l
98.76 138.48 l
96.78 140.46 l
h
q
eofill
Q
S
n
320.58 149.28 m
322.56 151.26 l
324.54 149.28 l
322.56 147.3 l
320.58 149.28 l
h
q
eofill
Q
S
n
370.56 166.92 m
372.54 168.9 l
374.52 166.92 l
372.54 164.94 l
370.56 166.92 l
h
q
eofill
Q
S
n
384.54 184.62 m
391.02 191.1 l
397.5 184.62 l
391.02 178.14 l
384.54 184.62 l
h
q
eofill
Q
S
n
394.26 193.44 m
396.24 195.42 l
398.22 193.44 l
396.24 191.46 l
394.26 193.44 l
h
q
eofill
Q
S
n
399.54 211.08 m
401.52 213.06 l
403.5 211.08 l
401.52 209.1 l
399.54 211.08 l
h
q
eofill
Q
S
n
404.82 233.16 m
406.8 235.14 l
408.78 233.16 l
406.8 231.18 l
404.82 233.16 l
h
q
eofill
Q
S
n
408.3 268.5 m
410.28 270.48 l
412.26 268.5 l
410.28 266.52 l
408.3 268.5 l
h
q
eofill
Q
S
n
409.2 299.4 m
411.18 301.38 l
413.16 299.4 l
411.18 297.42 l
409.2 299.4 l
h
q
eofill
Q
S
n
411.84 356.82 m
413.82 358.8 l
415.8 356.82 l
413.82 354.84 l
411.84 356.82 l
h
q
eofill
Q
S
n
413.58 445.08 m
415.56 447.06 l
417.54 445.08 l
415.56 443.1 l
413.58 445.08 l
h
q
eofill
Q
S
n
403.92 533.4 m
405.9 535.38 l
407.88 533.4 l
405.9 531.42 l
403.92 533.4 l
h
q
eofill
Q
S
n
381.12 621.72 m
383.1 623.7 l
385.08 621.72 l
383.1 619.74 l
381.12 621.72 l
h
q
eofill
Q
S
n
378.48 710.04 m
380.46 712.02 l
382.44 710.04 l
380.46 708.06 l
378.48 710.04 l
h
q
eofill
Q
S
0 0 0  setrgbcolor
444.54 578.88 m
/N13 [0 19.02 -19.02 0 0 0] Tf
(Bitonic Sort) show
471.78 93.3 m
/N15 [0 15.78 -15.78 0 0 0] Tf
(0.46) show
430.919 93.3 m
(0.52) show
390.059 93.3 m
(0.58) show
349.198 93.3 m
(0.64) show
308.337 102.059 m
(0.7) show
267.476 93.3 m
(0.76) show
226.616 93.3 m
(0.82) show
185.755 93.3 m
(0.88) show
144.894 93.3 m
(0.94) show
104.033 115.2 m
(1) show
494.512 131.639 m
(0)
[83.937 ] pdfys
(2) show
(0)
[79.5422 ] pdfys
(4) show
(0)
[79.5422 ] pdfys
(6) show
(0)
[79.4823 ] pdfys
(8) show
(0)
[75.1617 ] pdfys
(10) show
(0)
[70.7654 ] pdfys
(120) show
520.02 372.72 m
/N13 [0 15.48 -15.48 0 0 0] Tf
(scaling factor) show
379.8 83.28 m
/N13 -15.48 Tf
(normalized execution time)
[-9.4721 -9.4721 -6.03554 -13.7755 -8.62081 -4.31737 -4.31737 -7.75393 -8.62081 -9.4721 -4.3221 
-8.62081 -8.62081 -8.62081 -8.62081 -9.4721 -5.16866 -4.31737 -9.4721 -9.4721 -4.3221 -5.16866 
-4.31737 -13.7755 -8.62081 ] pdfxs
q
n
72 54 468 684 re
W
n
0 j
n
76.02 58.02 459 674.94 re
S
Q
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 1901 5649 a Fs(70)p eop
%%Page: 71 71
71 70 bop 390 2343 a @beginspecial 72 @llx 54 @lly 756
@urx 522 @ury 3744 @rwi @setspecial
%%BeginDocument: s7.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Scaling2.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050531205733-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 54 756 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 54 moveto 756 54 lineto 756 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 54 684 468 rectclip
[ 0 -1 1 0 18 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font BLLMKC+Arial
11 dict begin
/FontName /BLLMKC+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d898870164
1dba6c5defb41d909040a164fdb0a088fefa45fff299b57b0e194251a4a8
b9cf3bc1815fd2c5ba06e651f9d7799098b4541de9c35043282b335f2de1
7def94eec0695fa30f7aaa5574cd9d280a8b4d225396feeeafb4b20c3fcc
9f12e751228b7464328a957a71c1d6fc11ef53a8f692024ab80f5e0d7623
62b42a462a2bf96d5a0db86097e421e5cb8c7d7a0900e6cfd70978f26b60
122332f14359637710d630381bc4f9c629fd5be208af03ab6a69f0ba40b9
a2> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f733e1cd354b07630
213f625adb3ae8b5aa6a51c1055a59d5f55e13f6cd6e1d9a82c372ef809e
0ee864af865bf5dd5f7dae9a46388470afbd9e2e8c39b7ea4fc9ab800d6e
8ab2edc1e3d36e194904842b1236ff6f70f88f5551621a9fa448c516e732
df410d140d211e3fe0becb6d0a54202b80a6977f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/nine 
<10bf317047276c49b9c0f950eed45ca9abbead4f9a337d9778d52804f095
e0959c13860a3969943ef1a12c3ee6c45422162d204a6f0d8cdc2d4e75b5
67f1b01796340d6df61e18c819464639606becbe4894a8ef149ed72054cf
28ee583aeb880d27fff9e2fa582b760e67cbad4f844afdb68b34f85c1a95
a0e8285de8ad462405443a57e05fe3bbb3d2281adc779f19070fa98342c5
c2c2ec79e83ff4803e54082ff002fd18e3d25566d6e2d40f56cc659c4866
84f0030ca9d50085195745fdce82f2f52a9ae7ae7227879d15b08026dcde
5aab87db399da6bb3c6e8f68808a93> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/BLLMKC+Arial findfont /Encoding get
dup 0 /.notdef put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 56 /eight put
dup 57 /nine put
pop
%%EndResource
[/N15/BLLMKC+Arial 1 TZ
%%BeginResource: font BLLMJA+Arial,Bold
11 dict begin
/FontName /BLLMJA+Arial,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/M 
<10bf317020950cf8a7d65c5e0deb0edda2c46e3c0ac469cbe379c347b177
d8a11239e7ae93b4b60537ec6b28c7bf8485a496e157dff5416f3245253b
e0> ND 
/a 
<10bf31705d64e193f644676913533d4f242b6181368ed1350652c8cb7a6f
e958f60841a88d1088c20f893090b458ae087d16aa8691f1ae44882b0528
d32f3e9827d4294992e18a57652ae7d531994f09c8f3899ddffaad39408b
1529cb6c6e94b8c5c36f6038811d22f304b6662d870ece2886bb4e9f799a
c37faedbf994154341e467f29126a4c489a05c6fef9ee5143f581ea41499
e4aecea25c0711d5cc7b9f01a37e7c0b7e59d5ee83c610a480921138ec2c
f957d766614f6ccaa7ceb4e20fd6f9ac362e8c090b1abb9485ee8c51fdeb
7fc72063a72ab3373c0c6872cf9ba20b3513a2189f8a98cd5a1ee87742> ND 
/c 
<10bf317047276c49998622737f5c0fdd43bdb1b35b15caae7eb2c80264ad
f0005e1c6be7a1a08efb8ae0111a7ff9c16d6d1d6fe6a62b9718659cdf71
ec1fec12732e715c04b3f3a8feb95e8d0f9e002393845281717573027f79
ad8c8ea5dce4faf3243344c83485cc434093ad2e51e73ce85594056ff3cf
8de95991fd7222c7dec9d4bc6113b2> ND 
/d 
<10bf317046e845f3cc81de7a4b8a8a1b3fe3a86a2a74eb0ce101ae9ff9ea
ca0b0d6152bab57b5a1a20451eca1d8bce22d8934498cbe1f50790f6dd2f
9d5a0cab606ce69313bb3e4094a370b8d3856d24b15d355e84c7c481bc80
d07358154d4cee4bac791720fabdb39630005823af359d78acbc47e52e70
c34626a827ae2272bde1c4ecc0359b7e45162ac0> ND 
/e 
<10bf3170599a82aebce2d0d9cd696e2d2232ae83b1d98ff884add96e0282
26fcd2cbd306888649029fbc75f18f771bf21f4d5f53f71cd70d56907fb2
0780ae57f65359db4c49ca929cb86ae96dd2f43742f720ffcefc0d1d3194
c72a55a6bfcf26d975c031741b09b969ea0410af02ae1e13b6c1d337a6b3
96eba6c714d73f9b5d2c2499a66a60f107d1dad4da56ef> ND 
/f 
<10bf317065f8aa629a44bd3be74bbe0cfa1409656d751dcdbb088484a3c9
84e11d0d09aae771e92b3d48596140fc2967fbcf96b4f7694ddca0744e47
fd6ddc298113201938776b254f36f4878baaf6514d0108bde72f2d6fbb4a
d588> ND 
/g 
<10bf317046e845f3c38d9f70ba4464ac4e8fae8096f95866e14c9cfc76d4
2c91caccc55306d31fd922e308e96ee980323125643f9a86a8ffc2b52c12
c5bb9a13190b6aced9365e9c0da3f6e0016fa2ab359e2b06b32a173590b2
6f2094e4e558e81d1aad3b8794a704066a5c48c5835d67bbce791b1965a9
3fbd5fb55f1203033af92c703c31533cbcf30051576e5b8b57eedca25286
866fdee3b16f9555216746cd0cc4065676d353776467694c68063ac58586
fb4e91cf6077ef9d35ed3bc9160721b2f3dee4f8c47777dc722d34059624
2ed759> ND 
/i 
<10bf317021cc67b2bc312fc6a7ad37016808b8c74342617d801906e8ad23
4c7210637a5c2e2ea339f24d0c> ND 
/l 
<10bf317021cc67b2bc31c11814793bc69b430b318ded78131a> ND 
/m 
<10bf31703bc84f280bc926798acdec2516269e7061028d385a31d255844f
a27fc6b4cdd6f6ba3dfabbbaadef207eca864f3bc97abd9a4f1b978df039
4779a47e3088a94b9cee6d3b276eef4d4950e88ef4a61f93e0b6cde961dc
7ec12956bd3a56a59704c6c5b5a401c3674bc856b6c34f276e7f1bc3056d
89b4805ca25b43894c427bc43b36554ede70476f7ee25d1a6c03ed9f5e40
5c72135defa96ede67a5a8ef5fea114c19a857db71952cb83f4d11> ND 
/n 
<10bf31702094fda2efce4110428b7f86f5f2073cab682ca78d0dc97da563
e3301b964801f725812f64cb67abc1e242f6d8dcd921f1fbf9e05fee92c3
cf16b5bf6083337a59bf026de7fa548a247b8bde12c672aa0ba0501ccc35
fcca587d7573f11dfc32a2ac31516847d39fb276060c6171da> ND 
/o 
<10bf317041f0d680f4930f6b0672f7536ce2eb70a2366463cc9006c590f6
6bbb22b4a706eff4a93c95880cecbbf82d6e623efa721926a49ba75b71ef
97d0e3d8c35761734c54d6d734cb61cf4c4d7050d90fa115600d26f47050
dfb8739452ed0059ffdca41c137f0b71425a690a4da83dcf8abcf17c206e
c5eff5dd0d7b85b999c37123dfb769cd075b5a162cb33d72426c> ND 
/r 
<10bf31703f93f6c49808fdd8544fecb184adc28a087f99360dbfdf8b0375
9b819135c930698375e13c34125773b22d251f861dc05246608ab0d559df
442670f87f9615eabcaf25ab4b613b44e059b394bfb9> ND 
/s 
<10bf317050d961e87d157c0fe86ec5afecbd608ce0f232c64dcfb1d39b45
2e71b8ca2a92c46173a52c993c8ea0e3a6a97bbca89eebc0e87a68da7dcf
335cb16989a377c8400340e09bb7a3a4fae54003803791fa4d2f5b88afdc
392f17afecc8a037b6118f07b51c97b137676b140e2fba0e4b7ecc574c70
cbfa35d84fd49bc18c067342180503665d383fcdebee907501f8719ff862
5030352810efab946329f109adefea2f39c8182336b9eb95b38d69ca43cf
161d7fb7e8f46433cafa> ND 
/t 
<10bf3170688ce4cb1d2f5bf487137bec8ecb87b4485146ce17824d997ac5
95ab4afb2e80a065a802ee3f010bb37eac91d0f6ed42677aa9dde7e1ad01
769b95b971dec6d1669588801bb2fb04109e79e9771f019783524f2f268e
35dce126a03e55d028a6951cc9b40e649071f577> ND 
/u 
<10bf317022f1ca2cc2a22c3ff97c1232bc55839582d9c5ff7e86bfa4508d
4c6c2a32b8a91c23bc7417819a6d61bb6c4ffa588f9ea417cfc189ff4ca4
86806cfbdc09b2f0ef54b54c53e50d4afcfcb2df030b19aa33138b0a422d
d58054461b41c9166e86f2fb1f6b43052b68dc3202c1cc> ND 
/x 
<10bf3170638bf24b9ac01ae6f3f5ae817231c94093d6b928339de9a1f6d7
c03f6b6f7762b561ab36e6e40fc21093f89e72e352dadf27c949562edd95
94> ND 
/z 
<10bf31706ea98d84f3c625a1c3450f57f0cb972d7b4342feb5483a382b8c
546af3200ec3102c63cd8ee85ce02beb2b2e7a35b4d49541c8670b9156e1
3f2683e61a914abf9dc96f> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/BLLMJA+Arial,Bold findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 77 /M put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 122 /z put
dup 160 /space put
pop
%%EndResource
[/N13/BLLMJA+Arial,Bold 1 TZ
1 J
0 j
0.960007 w
10 M
[] 0 d
false setSA
n
76.02 58.02 459 674.94 re
q
1 1 1 setrgbcolor
eofill
Q
0 0 0 setrgbcolor
S
q
n
405.18 135.84 0.0599976 578.58 re
W
n
0.0599976 w
n
405.18 135.84 m
405.18 714.42 l
S
Q
q
n
343.92 135.84 0.0599976 578.58 re
W
n
0.0599976 w
n
343.92 135.84 m
343.92 714.42 l
S
Q
q
n
282.6 135.84 0.0599976 578.58 re
W
n
0.0599976 w
n
282.6 135.84 m
282.6 714.42 l
S
Q
q
n
221.34 135.84 0.0599976 578.58 re
W
n
0.0599976 w
n
221.34 135.84 m
221.34 714.42 l
S
Q
q
n
160.02 135.84 0.0599976 578.58 re
W
n
0.0599976 w
n
160.02 135.84 m
160.02 714.42 l
S
Q
q
n
98.76 135.84 0.0599976 578.58 re
W
n
0.0599976 w
n
98.76 135.84 m
98.76 714.42 l
S
Q
n
98.76 135.84 367.74 578.58 re
0.501999 0.501999 0.501999  setrgbcolor
S
0.0599976 w
n
98.76 135.84 m
466.5 135.84 l
466.5 130.92 m
466.5 135.84 l
405.18 130.92 m
405.18 135.84 l
343.92 130.92 m
343.92 135.84 l
282.6 130.92 m
282.6 135.84 l
221.34 130.92 m
221.34 135.84 l
160.02 130.92 m
160.02 135.84 l
98.76 130.92 m
98.76 135.84 l
466.5 135.84 m
466.5 714.42 l
471.42 135.84 m
466.5 135.84 l
471.42 232.26 m
466.5 232.26 l
471.42 328.68 m
466.5 328.68 l
471.42 425.16 m
466.5 425.16 l
471.42 521.58 m
466.5 521.58 l
471.42 618 m
466.5 618 l
471.42 714.42 m
466.5 714.42 l
0 0 0  setrgbcolor
S
1 j
1.92 w
n
98.76 145.5 m
107.52 155.1 l
142.44 164.76 l
0 0 0.501999  setrgbcolor
S
q
n
92.28 163.74 51.24 11.76 re
W
n
n
142.44 164.76 m
90 174.42 l
S
Q
q
n
92.28 173.4 42.48 11.76 re
W
n
n
90 174.42 m
133.68 184.08 l
S
Q
n
133.68 184.08 m
203.52 222.6 l
177.36 232.26 l
203.52 280.5 l
229.74 328.68 l
220.98 367.26 l
247.2 425.16 l
247.2 521.58 l
255.9 618 l
264.66 714.42 l
S
0.960007 w
n
92.28 145.5 m
98.76 151.98 l
105.24 145.5 l
98.76 139.02 l
92.28 145.5 l
h
q
eofill
Q
S
n
105.54 155.1 m
107.52 157.08 l
109.5 155.1 l
107.52 153.12 l
105.54 155.1 l
h
q
eofill
Q
S
n
140.46 164.76 m
142.44 166.74 l
144.42 164.76 l
142.44 162.78 l
140.46 164.76 l
h
q
eofill
Q
S
n
131.7 184.08 m
133.68 186.06 l
135.66 184.08 l
133.68 182.1 l
131.7 184.08 l
h
q
eofill
Q
S
n
201.54 222.6 m
203.52 224.58 l
205.5 222.6 l
203.52 220.62 l
201.54 222.6 l
h
q
eofill
Q
S
n
175.38 232.26 m
177.36 234.24 l
179.34 232.26 l
177.36 230.28 l
175.38 232.26 l
h
q
eofill
Q
S
n
201.54 280.5 m
203.52 282.48 l
205.5 280.5 l
203.52 278.52 l
201.54 280.5 l
h
q
eofill
Q
S
n
227.76 328.68 m
229.74 330.66 l
231.72 328.68 l
229.74 326.7 l
227.76 328.68 l
h
q
eofill
Q
S
n
219 367.26 m
220.98 369.24 l
222.96 367.26 l
220.98 365.28 l
219 367.26 l
h
q
eofill
Q
S
n
245.22 425.16 m
247.2 427.14 l
249.18 425.16 l
247.2 423.18 l
245.22 425.16 l
h
q
eofill
Q
S
n
245.22 521.58 m
247.2 523.56 l
249.18 521.58 l
247.2 519.6 l
245.22 521.58 l
h
q
eofill
Q
S
n
253.92 618 m
255.9 619.98 l
257.88 618 l
255.9 616.02 l
253.92 618 l
h
q
eofill
Q
S
n
262.68 714.42 m
264.66 716.4 l
266.64 714.42 l
264.66 712.44 l
262.68 714.42 l
h
q
eofill
Q
S
0 0 0  setrgbcolor
444.54 582.6 m
/N13 [0 19.02 -19.02 0 0 0] Tf
(Matrix Mult) show
471.78 93.12 m
/N15 [0 15.78 -15.78 0 0 0] Tf
(0.88) show
410.461 101.879 m
(0.9) show
349.201 93.12 m
(0.92) show
287.882 93.12 m
(0.94) show
226.622 93.12 m
(0.96) show
165.303 93.12 m
(0.98) show
104.043 115.02 m
(1) show
494.522 131.459 m
(0)
[92.0368 ] pdfys
(1) show
(0)
[87.6546 ] pdfys
(2) show
(0)
[87.6546 ] pdfys
(3) show
(0)
[87.6546 ] pdfys
(4) show
(0)
[87.6546 ] pdfys
(5) show
(0)
[87.6546 ] pdfys
(6) show
(0) show
520.02 374.82 m
/N13 [0 15.48 -15.48 0 0 0] Tf
(scaling factor) show
379.8 83.1 m
/N13 -15.48 Tf
(normalized execution time)
[-9.4721 -9.4721 -6.03554 -13.7755 -8.62081 -4.31737 -4.31737 -7.75393 -8.62081 -9.4721 -4.3221 
-8.62081 -8.62081 -8.62081 -8.62081 -9.4721 -5.16866 -4.31737 -9.4721 -9.4721 -4.3221 -5.16866 
-4.31737 -13.7755 -8.62081 ] pdfxs
q
n
72 54 468 684 re
W
n
0 j
n
76.02 58.02 459 674.94 re
S
Q
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 2741 x @beginspecial 72 @llx 54 @lly 756
@urx 522 @ury 3744 @rwi @setspecial
%%BeginDocument: s8.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Scaling2.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050531205754-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 54 756 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 54 moveto 756 54 lineto 756 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 54 684 468 rectclip
[ 0 -1 1 0 18 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font BMAONN+Arial
11 dict begin
/FontName /BMAONN+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/nine 
<10bf317047276c49b9c0f950eed45ca9abbead4f9a337d9778d52804f095
e0959c13860a3969943ef1a12c3ee6c45422162d204a6f0d8cdc2d4e75b5
67f1b01796340d6df61e18c819464639606becbe4894a8ef149ed72054cf
28ee583aeb880d27fff9e2fa582b760e67cbad4f844afdb68b34f85c1a95
a0e8285de8ad462405443a57e05fe3bbb3d2281adc779f19070fa98342c5
c2c2ec79e83ff4803e54082ff002fd18e3d25566d6e2d40f56cc659c4866
84f0030ca9d50085195745fdce82f2f52a9ae7ae7227879d15b08026dcde
5aab87db399da6bb3c6e8f68808a93> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/BMAONN+Arial findfont /Encoding get
dup 0 /.notdef put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
dup 57 /nine put
pop
%%EndResource
[/N15/BMAONN+Arial 1 TZ
%%BeginResource: font BMAONL+Arial,Bold
11 dict begin
/FontName /BMAONL+Arial,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/F 
<10bf317027e93a6da982a87edd53b1a22870b99b44157cee5f7e1ac9dd0c
13b8ca1eb59184f62bdabd0c5d> ND 
/I 
<10bf31703d39827325e422c7051b9c34531bb76f5b30bcfd5d> ND 
/R 
<10bf317026ba2bbc95a451500e8f7f1d9eea40aa6073cf8d8a53256d5069
7a95f0a69cc27900ab66f73526710c1dd1b314dd64652bf01e66e7f1a039
9f801abc85bdfedaa9c191a89df077e519ba29ac06c308453bc06fc68fe6
b9d02220c09e8991fe4c96b0e59636d8c7b7e6c81d6ab22b6d7790c2f074
6fd6013faa33b96dab58268b6e89ee1d96b97459969f9ef8dca47d5b13c4
b0ca738a9d2aa7f7b1da1ca4> ND 
/a 
<10bf31705d64e193f644676913533d4f242b6181368ed1350652c8cb7a6f
e958f60841a88d1088c20f893090b458ae087d16aa8691f1ae44882b0528
d32f3e9827d4294992e18a57652ae7d531994f09c8f3899ddffaad39408b
1529cb6c6e94b8c5c36f6038811d22f304b6662d870ece2886bb4e9f799a
c37faedbf994154341e467f29126a4c489a05c6fef9ee5143f581ea41499
e4aecea25c0711d5cc7b9f01a37e7c0b7e59d5ee83c610a480921138ec2c
f957d766614f6ccaa7ceb4e20fd6f9ac362e8c090b1abb9485ee8c51fdeb
7fc72063a72ab3373c0c6872cf9ba20b3513a2189f8a98cd5a1ee87742> ND 
/c 
<10bf317047276c49998622737f5c0fdd43bdb1b35b15caae7eb2c80264ad
f0005e1c6be7a1a08efb8ae0111a7ff9c16d6d1d6fe6a62b9718659cdf71
ec1fec12732e715c04b3f3a8feb95e8d0f9e002393845281717573027f79
ad8c8ea5dce4faf3243344c83485cc434093ad2e51e73ce85594056ff3cf
8de95991fd7222c7dec9d4bc6113b2> ND 
/d 
<10bf317046e845f3cc81de7a4b8a8a1b3fe3a86a2a74eb0ce101ae9ff9ea
ca0b0d6152bab57b5a1a20451eca1d8bce22d8934498cbe1f50790f6dd2f
9d5a0cab606ce69313bb3e4094a370b8d3856d24b15d355e84c7c481bc80
d07358154d4cee4bac791720fabdb39630005823af359d78acbc47e52e70
c34626a827ae2272bde1c4ecc0359b7e45162ac0> ND 
/e 
<10bf3170599a82aebce2d0d9cd696e2d2232ae83b1d98ff884add96e0282
26fcd2cbd306888649029fbc75f18f771bf21f4d5f53f71cd70d56907fb2
0780ae57f65359db4c49ca929cb86ae96dd2f43742f720ffcefc0d1d3194
c72a55a6bfcf26d975c031741b09b969ea0410af02ae1e13b6c1d337a6b3
96eba6c714d73f9b5d2c2499a66a60f107d1dad4da56ef> ND 
/f 
<10bf317065f8aa629a44bd3be74bbe0cfa1409656d751dcdbb088484a3c9
84e11d0d09aae771e92b3d48596140fc2967fbcf96b4f7694ddca0744e47
fd6ddc298113201938776b254f36f4878baaf6514d0108bde72f2d6fbb4a
d588> ND 
/g 
<10bf317046e845f3c38d9f70ba4464ac4e8fae8096f95866e14c9cfc76d4
2c91caccc55306d31fd922e308e96ee980323125643f9a86a8ffc2b52c12
c5bb9a13190b6aced9365e9c0da3f6e0016fa2ab359e2b06b32a173590b2
6f2094e4e558e81d1aad3b8794a704066a5c48c5835d67bbce791b1965a9
3fbd5fb55f1203033af92c703c31533cbcf30051576e5b8b57eedca25286
866fdee3b16f9555216746cd0cc4065676d353776467694c68063ac58586
fb4e91cf6077ef9d35ed3bc9160721b2f3dee4f8c47777dc722d34059624
2ed759> ND 
/i 
<10bf317021cc67b2bc312fc6a7ad37016808b8c74342617d801906e8ad23
4c7210637a5c2e2ea339f24d0c> ND 
/l 
<10bf317021cc67b2bc31c11814793bc69b430b318ded78131a> ND 
/m 
<10bf31703bc84f280bc926798acdec2516269e7061028d385a31d255844f
a27fc6b4cdd6f6ba3dfabbbaadef207eca864f3bc97abd9a4f1b978df039
4779a47e3088a94b9cee6d3b276eef4d4950e88ef4a61f93e0b6cde961dc
7ec12956bd3a56a59704c6c5b5a401c3674bc856b6c34f276e7f1bc3056d
89b4805ca25b43894c427bc43b36554ede70476f7ee25d1a6c03ed9f5e40
5c72135defa96ede67a5a8ef5fea114c19a857db71952cb83f4d11> ND 
/n 
<10bf31702094fda2efce4110428b7f86f5f2073cab682ca78d0dc97da563
e3301b964801f725812f64cb67abc1e242f6d8dcd921f1fbf9e05fee92c3
cf16b5bf6083337a59bf026de7fa548a247b8bde12c672aa0ba0501ccc35
fcca587d7573f11dfc32a2ac31516847d39fb276060c6171da> ND 
/o 
<10bf317041f0d680f4930f6b0672f7536ce2eb70a2366463cc9006c590f6
6bbb22b4a706eff4a93c95880cecbbf82d6e623efa721926a49ba75b71ef
97d0e3d8c35761734c54d6d734cb61cf4c4d7050d90fa115600d26f47050
dfb8739452ed0059ffdca41c137f0b71425a690a4da83dcf8abcf17c206e
c5eff5dd0d7b85b999c37123dfb769cd075b5a162cb33d72426c> ND 
/r 
<10bf31703f93f6c49808fdd8544fecb184adc28a087f99360dbfdf8b0375
9b819135c930698375e13c34125773b22d251f861dc05246608ab0d559df
442670f87f9615eabcaf25ab4b613b44e059b394bfb9> ND 
/s 
<10bf317050d961e87d157c0fe86ec5afecbd608ce0f232c64dcfb1d39b45
2e71b8ca2a92c46173a52c993c8ea0e3a6a97bbca89eebc0e87a68da7dcf
335cb16989a377c8400340e09bb7a3a4fae54003803791fa4d2f5b88afdc
392f17afecc8a037b6118f07b51c97b137676b140e2fba0e4b7ecc574c70
cbfa35d84fd49bc18c067342180503665d383fcdebee907501f8719ff862
5030352810efab946329f109adefea2f39c8182336b9eb95b38d69ca43cf
161d7fb7e8f46433cafa> ND 
/t 
<10bf3170688ce4cb1d2f5bf487137bec8ecb87b4485146ce17824d997ac5
95ab4afb2e80a065a802ee3f010bb37eac91d0f6ed42677aa9dde7e1ad01
769b95b971dec6d1669588801bb2fb04109e79e9771f019783524f2f268e
35dce126a03e55d028a6951cc9b40e649071f577> ND 
/u 
<10bf317022f1ca2cc2a22c3ff97c1232bc55839582d9c5ff7e86bfa4508d
4c6c2a32b8a91c23bc7417819a6d61bb6c4ffa588f9ea417cfc189ff4ca4
86806cfbdc09b2f0ef54b54c53e50d4afcfcb2df030b19aa33138b0a422d
d58054461b41c9166e86f2fb1f6b43052b68dc3202c1cc> ND 
/x 
<10bf3170638bf24b9ac01ae6f3f5ae817231c94093d6b928339de9a1f6d7
c03f6b6f7762b561ab36e6e40fc21093f89e72e352dadf27c949562edd95
94> ND 
/z 
<10bf31706ea98d84f3c625a1c3450f57f0cb972d7b4342feb5483a382b8c
546af3200ec3102c63cd8ee85ce02beb2b2e7a35b4d49541c8670b9156e1
3f2683e61a914abf9dc96f> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/BMAONL+Arial,Bold findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 70 /F put
dup 73 /I put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 122 /z put
dup 160 /space put
pop
%%EndResource
[/N13/BMAONL+Arial,Bold 1 TZ
1 J
0 j
0.960007 w
10 M
[] 0 d
false setSA
n
76.02 58.02 459 674.94 re
q
1 1 1 setrgbcolor
eofill
Q
0 0 0 setrgbcolor
S
q
n
405.18 136.02 0.0599976 565.26 re
W
n
0.0599976 w
n
405.18 136.02 m
405.18 701.28 l
S
Q
q
n
343.92 136.02 0.0599976 565.26 re
W
n
0.0599976 w
n
343.92 136.02 m
343.92 701.28 l
S
Q
q
n
282.6 136.02 0.0599976 565.26 re
W
n
0.0599976 w
n
282.6 136.02 m
282.6 701.28 l
S
Q
q
n
221.34 136.02 0.0599976 565.26 re
W
n
0.0599976 w
n
221.34 136.02 m
221.34 701.28 l
S
Q
q
n
160.02 136.02 0.0599976 565.26 re
W
n
0.0599976 w
n
160.02 136.02 m
160.02 701.28 l
S
Q
q
n
98.76 136.02 0.0599976 565.26 re
W
n
0.0599976 w
n
98.76 136.02 m
98.76 701.28 l
S
Q
n
98.76 136.02 367.74 565.26 re
0.501999 0.501999 0.501999  setrgbcolor
S
0.0599976 w
n
98.76 136.02 m
466.5 136.02 l
466.5 131.1 m
466.5 136.02 l
405.18 131.1 m
405.18 136.02 l
343.92 131.1 m
343.92 136.02 l
282.6 131.1 m
282.6 136.02 l
221.34 131.1 m
221.34 136.02 l
160.02 131.1 m
160.02 136.02 l
98.76 131.1 m
98.76 136.02 l
466.5 136.02 m
466.5 701.28 l
471.42 136.02 m
466.5 136.02 l
471.42 277.32 m
466.5 277.32 l
471.42 418.68 m
466.5 418.68 l
471.42 559.98 m
466.5 559.98 l
471.42 701.28 m
466.5 701.28 l
0 0 0  setrgbcolor
S
1 j
1.92 w
n
98.76 136.02 m
196.02 418.68 l
244.68 602.52 l
220.38 627.36 l
220.38 645.06 l
244.68 658.74 l
220.38 669.9 l
220.38 679.38 l
269.04 687.6 l
220.38 694.8 l
171.72 701.28 l
0 0 0.501999  setrgbcolor
S
0.960007 w
n
96.78 136.02 m
98.76 138 l
100.74 136.02 l
98.76 134.04 l
96.78 136.02 l
h
q
eofill
Q
S
n
194.04 418.68 m
196.02 420.66 l
198 418.68 l
196.02 416.7 l
194.04 418.68 l
h
q
eofill
Q
S
n
242.7 602.52 m
244.68 604.5 l
246.66 602.52 l
244.68 600.54 l
242.7 602.52 l
h
q
eofill
Q
S
n
218.4 627.36 m
220.38 629.34 l
222.36 627.36 l
220.38 625.38 l
218.4 627.36 l
h
q
eofill
Q
S
n
218.4 645.06 m
220.38 647.04 l
222.36 645.06 l
220.38 643.08 l
218.4 645.06 l
h
q
eofill
Q
S
n
242.7 658.74 m
244.68 660.72 l
246.66 658.74 l
244.68 656.76 l
242.7 658.74 l
h
q
eofill
Q
S
n
218.4 669.9 m
220.38 671.88 l
222.36 669.9 l
220.38 667.92 l
218.4 669.9 l
h
q
eofill
Q
S
n
213.9 679.38 m
220.38 685.86 l
226.86 679.38 l
220.38 672.9 l
213.9 679.38 l
h
q
eofill
Q
S
n
267.06 687.6 m
269.04 689.58 l
271.02 687.6 l
269.04 685.62 l
267.06 687.6 l
h
q
eofill
Q
S
n
218.4 694.8 m
220.38 696.78 l
222.36 694.8 l
220.38 692.82 l
218.4 694.8 l
h
q
eofill
Q
S
n
169.74 701.28 m
171.72 703.26 l
173.7 701.28 l
171.72 699.3 l
169.74 701.28 l
h
q
eofill
Q
S
0 0 0  setrgbcolor
438.18 646.02 m
/N13 [0 19.02 -19.02 0 0 0] Tf
(FIR) show
471.78 93.3 m
/N15 [0 15.78 -15.78 0 0 0] Tf
(0.88) show
410.461 102.059 m
(0.9) show
349.201 93.3 m
(0.92) show
287.882 93.3 m
(0.94) show
226.622 93.3 m
(0.96) show
165.303 93.3 m
(0.98) show
104.043 115.2 m
(1) show
494.522 131.639 m
(1)
[136.918 ] pdfys
(1) show
(0)
[128.201 ] pdfys
(10) show
(0)
[119.365 ] pdfys
(100) show
(0)
[110.589 ] pdfys
(10000) show
520.02 368.34 m
/N13 [0 15.48 -15.48 0 0 0] Tf
(scaling factor) show
379.8 83.28 m
/N13 -15.48 Tf
(normalized execution time)
[-9.4721 -9.4721 -6.03554 -13.7755 -8.62081 -4.31737 -4.31737 -7.75393 -8.62081 -9.4721 -4.3221 
-8.62081 -8.62081 -8.62081 -8.62081 -9.4721 -5.16866 -4.31737 -9.4721 -9.4721 -4.3221 -5.16866 
-4.31737 -13.7755 -8.62081 ] pdfxs
q
n
72 54 468 684 re
W
n
0 j
n
76.02 58.02 459 674.94 re
S
Q
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 1901 5649 a Fs(71)p eop
%%Page: 72 72
72 71 bop 390 3713 a @beginspecial 72 @llx 54 @lly 756
@urx 522 @ury 3744 @rwi @setspecial
%%BeginDocument: s9.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Scaling2.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050531205936-04'00')
%%For: (janiss)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 54 756 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 54 moveto 756 54 lineto 756 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 54 684 468 rectclip
[ 0 -1 1 0 18 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font BNJNOB+Arial
11 dict begin
/FontName /BNJNOB+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d898870164
1dba6c5defb41d909040a164fdb0a088fefa45fff299b57b0e194251a4a8
b9cf3bc1815fd2c5ba06e651f9d7799098b4541de9c35043282b335f2de1
7def94eec0695fa30f7aaa5574cd9d280a8b4d225396feeeafb4b20c3fcc
9f12e751228b7464328a957a71c1d6fc11ef53a8f692024ab80f5e0d7623
62b42a462a2bf96d5a0db86097e421e5cb8c7d7a0900e6cfd70978f26b60
122332f14359637710d630381bc4f9c629fd5be208af03ab6a69f0ba40b9
a2> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f733e1cd354b07630
213f625adb3ae8b5aa6a51c1055a59d5f55e13f6cd6e1d9a82c372ef809e
0ee864af865bf5dd5f7dae9a46388470afbd9e2e8c39b7ea4fc9ab800d6e
8ab2edc1e3d36e194904842b1236ff6f70f88f5551621a9fa448c516e732
df410d140d211e3fe0becb6d0a54202b80a6977f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/nine 
<10bf317047276c49b9c0f950eed45ca9abbead4f9a337d9778d52804f095
e0959c13860a3969943ef1a12c3ee6c45422162d204a6f0d8cdc2d4e75b5
67f1b01796340d6df61e18c819464639606becbe4894a8ef149ed72054cf
28ee583aeb880d27fff9e2fa582b760e67cbad4f844afdb68b34f85c1a95
a0e8285de8ad462405443a57e05fe3bbb3d2281adc779f19070fa98342c5
c2c2ec79e83ff4803e54082ff002fd18e3d25566d6e2d40f56cc659c4866
84f0030ca9d50085195745fdce82f2f52a9ae7ae7227879d15b08026dcde
5aab87db399da6bb3c6e8f68808a93> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/BNJNOB+Arial findfont /Encoding get
dup 0 /.notdef put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 56 /eight put
dup 57 /nine put
pop
%%EndResource
[/N15/BNJNOB+Arial 1 TZ
%%BeginResource: font BNJNNP+Arial,Bold
11 dict begin
/FontName /BNJNNP+Arial,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/three 
<10bf3170435d0d440860530d539ff91fbeb84b45ccc7a1133230e64e009e
0c490ad4a8c72e30c66b9d7da2ebb61201fd5dbcf58b0c0488dc2a377321
5f26e0f7b61ae06bbd548a7c70db3930bb70d925be0576849d7017235523
559a7bd33c2b1cf718bf0b01521a2da1ae141319b8a7b7648826982192c9
9cac43d499c3346f8ae704779f7b332be818bd1aedb27938b45cc4303b57
6f7b6048a80721796cf703217479afeb4946fccc211036e97d76c144b665
49f485406b5a21bfa9b3b6ddd1fb25f39a00f379> ND 
/G 
<10bf317049853377a7c14408213f8cb0d7a0c9f167e5d8c5ab81d02a6368
40fe7690a6220dd951ed1475afe94af1dca8cd00af32527ccdb4443a6f1b
0f1d9f948f41689d552617fbb202a848e943cafeef773c524f107cecac26
dd1073fd79085c0ccd4cc17b02b3c84d6937bb8c88ee0f58f0488cae3848
b481c280d21ec8fe3faf9183edbd586a23518efaddb855a9de63fa94b398
a92d1943acefbb9697> ND 
/P 
<10bf317026ba62063a41a530d6e25ee764c7f37e357d9f4340ad256cb4c6
3eb336efd9daf309283a29cbee7e81d5cb35b4e414d564fb43d54f1be124
58e12175036224baa1ddd853331407c204e3c541751c1c73505c6c30ec2d
6cdf96d9fde307c47b2bc88392f53a36b4a782bd0cc150cc752b44d84c5e
c0ddf42bd181226665ff> ND 
/a 
<10bf31705d64e193f644676913533d4f242b6181368ed1350652c8cb7a6f
e958f60841a88d1088c20f893090b458ae087d16aa8691f1ae44882b0528
d32f3e9827d4294992e18a57652ae7d531994f09c8f3899ddffaad39408b
1529cb6c6e94b8c5c36f6038811d22f304b6662d870ece2886bb4e9f799a
c37faedbf994154341e467f29126a4c489a05c6fef9ee5143f581ea41499
e4aecea25c0711d5cc7b9f01a37e7c0b7e59d5ee83c610a480921138ec2c
f957d766614f6ccaa7ceb4e20fd6f9ac362e8c090b1abb9485ee8c51fdeb
7fc72063a72ab3373c0c6872cf9ba20b3513a2189f8a98cd5a1ee87742> ND 
/c 
<10bf317047276c49998622737f5c0fdd43bdb1b35b15caae7eb2c80264ad
f0005e1c6be7a1a08efb8ae0111a7ff9c16d6d1d6fe6a62b9718659cdf71
ec1fec12732e715c04b3f3a8feb95e8d0f9e002393845281717573027f79
ad8c8ea5dce4faf3243344c83485cc434093ad2e51e73ce85594056ff3cf
8de95991fd7222c7dec9d4bc6113b2> ND 
/d 
<10bf317046e845f3cc81de7a4b8a8a1b3fe3a86a2a74eb0ce101ae9ff9ea
ca0b0d6152bab57b5a1a20451eca1d8bce22d8934498cbe1f50790f6dd2f
9d5a0cab606ce69313bb3e4094a370b8d3856d24b15d355e84c7c481bc80
d07358154d4cee4bac791720fabdb39630005823af359d78acbc47e52e70
c34626a827ae2272bde1c4ecc0359b7e45162ac0> ND 
/e 
<10bf3170599a82aebce2d0d9cd696e2d2232ae83b1d98ff884add96e0282
26fcd2cbd306888649029fbc75f18f771bf21f4d5f53f71cd70d56907fb2
0780ae57f65359db4c49ca929cb86ae96dd2f43742f720ffcefc0d1d3194
c72a55a6bfcf26d975c031741b09b969ea0410af02ae1e13b6c1d337a6b3
96eba6c714d73f9b5d2c2499a66a60f107d1dad4da56ef> ND 
/f 
<10bf317065f8aa629a44bd3be74bbe0cfa1409656d751dcdbb088484a3c9
84e11d0d09aae771e92b3d48596140fc2967fbcf96b4f7694ddca0744e47
fd6ddc298113201938776b254f36f4878baaf6514d0108bde72f2d6fbb4a
d588> ND 
/g 
<10bf317046e845f3c38d9f70ba4464ac4e8fae8096f95866e14c9cfc76d4
2c91caccc55306d31fd922e308e96ee980323125643f9a86a8ffc2b52c12
c5bb9a13190b6aced9365e9c0da3f6e0016fa2ab359e2b06b32a173590b2
6f2094e4e558e81d1aad3b8794a704066a5c48c5835d67bbce791b1965a9
3fbd5fb55f1203033af92c703c31533cbcf30051576e5b8b57eedca25286
866fdee3b16f9555216746cd0cc4065676d353776467694c68063ac58586
fb4e91cf6077ef9d35ed3bc9160721b2f3dee4f8c47777dc722d34059624
2ed759> ND 
/i 
<10bf317021cc67b2bc312fc6a7ad37016808b8c74342617d801906e8ad23
4c7210637a5c2e2ea339f24d0c> ND 
/l 
<10bf317021cc67b2bc31c11814793bc69b430b318ded78131a> ND 
/m 
<10bf31703bc84f280bc926798acdec2516269e7061028d385a31d255844f
a27fc6b4cdd6f6ba3dfabbbaadef207eca864f3bc97abd9a4f1b978df039
4779a47e3088a94b9cee6d3b276eef4d4950e88ef4a61f93e0b6cde961dc
7ec12956bd3a56a59704c6c5b5a401c3674bc856b6c34f276e7f1bc3056d
89b4805ca25b43894c427bc43b36554ede70476f7ee25d1a6c03ed9f5e40
5c72135defa96ede67a5a8ef5fea114c19a857db71952cb83f4d11> ND 
/n 
<10bf31702094fda2efce4110428b7f86f5f2073cab682ca78d0dc97da563
e3301b964801f725812f64cb67abc1e242f6d8dcd921f1fbf9e05fee92c3
cf16b5bf6083337a59bf026de7fa548a247b8bde12c672aa0ba0501ccc35
fcca587d7573f11dfc32a2ac31516847d39fb276060c6171da> ND 
/o 
<10bf317041f0d680f4930f6b0672f7536ce2eb70a2366463cc9006c590f6
6bbb22b4a706eff4a93c95880cecbbf82d6e623efa721926a49ba75b71ef
97d0e3d8c35761734c54d6d734cb61cf4c4d7050d90fa115600d26f47050
dfb8739452ed0059ffdca41c137f0b71425a690a4da83dcf8abcf17c206e
c5eff5dd0d7b85b999c37123dfb769cd075b5a162cb33d72426c> ND 
/r 
<10bf31703f93f6c49808fdd8544fecb184adc28a087f99360dbfdf8b0375
9b819135c930698375e13c34125773b22d251f861dc05246608ab0d559df
442670f87f9615eabcaf25ab4b613b44e059b394bfb9> ND 
/s 
<10bf317050d961e87d157c0fe86ec5afecbd608ce0f232c64dcfb1d39b45
2e71b8ca2a92c46173a52c993c8ea0e3a6a97bbca89eebc0e87a68da7dcf
335cb16989a377c8400340e09bb7a3a4fae54003803791fa4d2f5b88afdc
392f17afecc8a037b6118f07b51c97b137676b140e2fba0e4b7ecc574c70
cbfa35d84fd49bc18c067342180503665d383fcdebee907501f8719ff862
5030352810efab946329f109adefea2f39c8182336b9eb95b38d69ca43cf
161d7fb7e8f46433cafa> ND 
/t 
<10bf3170688ce4cb1d2f5bf487137bec8ecb87b4485146ce17824d997ac5
95ab4afb2e80a065a802ee3f010bb37eac91d0f6ed42677aa9dde7e1ad01
769b95b971dec6d1669588801bb2fb04109e79e9771f019783524f2f268e
35dce126a03e55d028a6951cc9b40e649071f577> ND 
/u 
<10bf317022f1ca2cc2a22c3ff97c1232bc55839582d9c5ff7e86bfa4508d
4c6c2a32b8a91c23bc7417819a6d61bb6c4ffa588f9ea417cfc189ff4ca4
86806cfbdc09b2f0ef54b54c53e50d4afcfcb2df030b19aa33138b0a422d
d58054461b41c9166e86f2fb1f6b43052b68dc3202c1cc> ND 
/x 
<10bf3170638bf24b9ac01ae6f3f5ae817231c94093d6b928339de9a1f6d7
c03f6b6f7762b561ab36e6e40fc21093f89e72e352dadf27c949562edd95
94> ND 
/z 
<10bf31706ea98d84f3c625a1c3450f57f0cb972d7b4342feb5483a382b8c
546af3200ec3102c63cd8ee85ce02beb2b2e7a35b4d49541c8670b9156e1
3f2683e61a914abf9dc96f> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/BNJNNP+Arial,Bold findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 51 /three put
dup 71 /G put
dup 80 /P put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 122 /z put
dup 160 /space put
pop
%%EndResource
[/N13/BNJNNP+Arial,Bold 1 TZ
1 J
0 j
0.960007 w
10 M
[] 0 d
false setSA
n
76.02 58.02 459 674.94 re
q
1 1 1 setrgbcolor
eofill
Q
0 0 0 setrgbcolor
S
q
n
405.3 135.84 0.0599976 574.2 re
W
n
0.0599976 w
n
405.3 135.84 m
405.3 710.04 l
S
Q
q
n
343.98 135.84 0.0599976 574.2 re
W
n
0.0599976 w
n
343.98 135.84 m
343.98 710.04 l
S
Q
q
n
282.66 135.84 0.0599976 574.2 re
W
n
0.0599976 w
n
282.66 135.84 m
282.66 710.04 l
S
Q
q
n
221.4 135.84 0.0599976 574.2 re
W
n
0.0599976 w
n
221.4 135.84 m
221.4 710.04 l
S
Q
q
n
160.08 135.84 0.0599976 574.2 re
W
n
0.0599976 w
n
160.08 135.84 m
160.08 710.04 l
S
Q
q
n
98.76 135.84 0.0599976 574.2 re
W
n
0.0599976 w
n
98.76 135.84 m
98.76 710.04 l
S
Q
n
98.76 135.84 367.86 574.2 re
0.501999 0.501999 0.501999  setrgbcolor
S
0.0599976 w
n
98.76 135.84 m
466.62 135.84 l
466.62 130.92 m
466.62 135.84 l
405.3 130.92 m
405.3 135.84 l
343.98 130.92 m
343.98 135.84 l
282.66 130.92 m
282.66 135.84 l
221.4 130.92 m
221.4 135.84 l
160.08 130.92 m
160.08 135.84 l
98.76 130.92 m
98.76 135.84 l
466.62 135.84 m
466.62 710.04 l
471.54 135.84 m
466.62 135.84 l
471.54 207.6 m
466.62 207.6 l
471.54 279.42 m
466.62 279.42 l
471.54 351.18 m
466.62 351.18 l
471.54 422.94 m
466.62 422.94 l
471.54 494.7 m
466.62 494.7 l
471.54 566.52 m
466.62 566.52 l
471.54 638.28 m
466.62 638.28 l
471.54 710.04 m
466.62 710.04 l
0 0 0  setrgbcolor
S
1 j
1.92 w
n
98.76 137.28 m
200.04 150.18 l
264.48 164.58 l
264.48 250.68 l
273.66 279.42 l
264.48 298.08 l
264.48 351.18 l
255.24 422.94 l
282.9 494.7 l
273.66 566.52 l
301.26 710.04 l
0 0 0.501999  setrgbcolor
S
0.960007 w
n
96.78 137.28 m
98.76 139.26 l
100.74 137.28 l
98.76 135.3 l
96.78 137.28 l
h
q
eofill
Q
S
n
198.06 150.18 m
200.04 152.16 l
202.02 150.18 l
200.04 148.2 l
198.06 150.18 l
h
q
eofill
Q
S
n
262.5 164.58 m
264.48 166.56 l
266.46 164.58 l
264.48 162.6 l
262.5 164.58 l
h
q
eofill
Q
S
n
258 190.38 m
264.48 196.86 l
270.96 190.38 l
264.48 183.9 l
258 190.38 l
h
q
eofill
Q
S
n
262.5 207.6 m
264.48 209.58 l
266.46 207.6 l
264.48 205.62 l
262.5 207.6 l
h
q
eofill
Q
S
n
262.5 222 m
264.48 223.98 l
266.46 222 l
264.48 220.02 l
262.5 222 l
h
q
eofill
Q
S
n
262.5 250.68 m
264.48 252.66 l
266.46 250.68 l
264.48 248.7 l
262.5 250.68 l
h
q
eofill
Q
S
n
271.68 279.42 m
273.66 281.4 l
275.64 279.42 l
273.66 277.44 l
271.68 279.42 l
h
q
eofill
Q
S
n
262.5 298.08 m
264.48 300.06 l
266.46 298.08 l
264.48 296.1 l
262.5 298.08 l
h
q
eofill
Q
S
n
262.5 351.18 m
264.48 353.16 l
266.46 351.18 l
264.48 349.2 l
262.5 351.18 l
h
q
eofill
Q
S
n
253.26 422.94 m
255.24 424.92 l
257.22 422.94 l
255.24 420.96 l
253.26 422.94 l
h
q
eofill
Q
S
n
280.92 494.7 m
282.9 496.68 l
284.88 494.7 l
282.9 492.72 l
280.92 494.7 l
h
q
eofill
Q
S
n
271.68 566.52 m
273.66 568.5 l
275.64 566.52 l
273.66 564.54 l
271.68 566.52 l
h
q
eofill
Q
S
n
299.28 710.04 m
301.26 712.02 l
303.24 710.04 l
301.26 708.06 l
299.28 710.04 l
h
q
eofill
Q
S
0 0 0  setrgbcolor
438.18 636 m
/N13 [0 19.02 -19.02 0 0 0] Tf
(3GPP) show
471.9 93.12 m
/N15 [0 15.78 -15.78 0 0 0] Tf
(0.88) show
410.581 101.879 m
(0.9) show
349.261 93.12 m
(0.92) show
287.942 93.12 m
(0.94) show
226.682 93.12 m
(0.96) show
165.363 93.12 m
(0.98) show
104.043 115.02 m
(1) show
494.642 131.459 m
(0)
[67.3774 ] pdfys
(5) show
(0)
[58.6621 ] pdfys
(10) show
(0)
[54.2059 ] pdfys
(15) show
(0)
[54.2059 ] pdfys
(20) show
(0)
[54.2059 ] pdfys
(25) show
(0)
[54.2658 ] pdfys
(30) show
(0)
[54.2059 ] pdfys
(35) show
(0)
[54.2059 ] pdfys
(400) show
520.14 372.66 m
/N13 [0 15.48 -15.48 0 0 0] Tf
(scaling factor) show
379.86 83.1 m
/N13 -15.48 Tf
(normalized execution time)
[-9.4721 -9.4721 -6.03554 -13.7755 -8.62081 -4.31737 -4.31737 -7.75393 -8.62081 -9.4721 -4.3221 
-8.62081 -8.62081 -8.62081 -8.62081 -9.4721 -5.16866 -4.31737 -9.4721 -9.4721 -4.3221 -5.16866 
-4.31737 -13.7755 -8.62081 ] pdfxs
q
n
72 54 468 684 re
W
n
0 j
n
76.02 58.02 459 674.94 re
S
Q
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 1901 5649 a Fs(72)p eop
%%Page: 73 73
73 72 bop 150 896 a Fq(Bibliograph)-6 b(y)199 1417 y
Fs([1])49 b(Alb)s(ert)32 b(Ben)m(v)m(eniste,)k(P)m(aul)d(Caspi,)g(P)m
(aul)g(Le)g(Guernic,)g(and)f(Nicolas)h(Halb)m(w)m(ac)m(hs.)45
b(Data-)351 1597 y(Flo)m(w)32 b(Sync)m(hronous)j(Languages.)44
b(In)32 b Fo(REX)k(Scho)-5 b(ol/Symp)g(osium)p Fs(,)31
b(pages)i(1{45,)e(1993.)199 1900 y([2])49 b(Gerard)43
b(Berry)h(and)g(Georges)g(Gon)m(thier.)76 b(The)45 b(Esterel)g(Sync)m
(hronous)h(Programming)351 2081 y(Language:)78 b(Design,)55
b(Seman)m(tics,)i(Implemen)m(tation.)98 b Fo(Scienc)-5
b(e)50 b(of)g(Computer)h(Pr)-5 b(o)g(g.)p Fs(,)351 2261
y(19\(2\),)31 b(1992.)199 2564 y([3])49 b(Ch)m(uvra)42
b(S.)f(Bhattac)m(haryy)m(a,)k(Pra)m(v)m(een)e(K.)d(Murth)m(y)-8
b(,)45 b(and)c(Edw)m(ard)h(A.)f(Lee.)70 b(APGAN)351 2744
y(and)23 b(RPMC:)i(Complemen)m(tary)g(Heuristics)h(for)d(T)-8
b(ranslating)24 b(DSP)f(Blo)s(c)m(k)i(Diagrams)e(in)m(to)351
2925 y(E\016cien)m(t)j(Soft)m(w)m(are)f(Implemen)m(tations.)33
b Fo(Journal)28 b(of)f(Design)f(A)n(utomation)i(for)f(Emb)-5
b(e)g(dde)g(d)351 3106 y(Systems.)p Fs(,)32 b(pages)h(33{60,)e(Jan)m
(uary)j(1997.)199 3408 y([4])49 b(S.)32 b(Bhattac)m(haryy)m(a,)h(P)-8
b(.)32 b(Murth)m(y)-8 b(,)33 b(and)f(E.)h(Lee.)42 b(Syn)m(thesis)35
b(of)c(em)m(b)s(edded)j(soft)m(w)m(are)f(from)351 3589
y(sync)m(hronous)28 b(data\015o)m(w)f(sp)s(eci\014cations.)36
b Fo(Journal)29 b(of)g(VLSI)g(Signal)g(Pr)-5 b(o)g(c)g(essing)28
b(Systems)p Fs(,)351 3769 y(21\(2\),)j(June)j(1999.)199
4072 y([5])49 b(S.)44 b(S.)h(Bhattac)m(haryy)m(a,)k(P)-8
b(.)44 b(K.)h(Murth)m(y)-8 b(,)48 b(and)d(E.)g(A.)g(Lee.)79
b Fo(Softwar)-5 b(e)45 b(Synthesis)g(fr)-5 b(om)351 4253
y(Data\015ow)34 b(Gr)-5 b(aphs)p Fs(.)43 b(Klu)m(w)m(er)34
b(Academic)g(Publishers,)h(1996.)199 4556 y([6])49 b(Ian)31
b(Buc)m(k,)i(Tim)e(F)-8 b(oley)g(,)32 b(Daniel)f(Horn,)h(Jerem)m(y)g
(Sugerman,)h(Ka)m(yv)m(on)f(F)-8 b(atahalian,)30 b(Mik)m(e)351
4736 y(Houston,)i(and)g(P)m(at)h(Hanrahan.)42 b(Bro)s(ok)32
b(for)f(GPUs:)44 b(Stream)33 b(Computing)f(on)g(Graphics)351
4917 y(Hardw)m(are.)44 b(In)33 b Fo(SIGGRAPH)p Fs(,)g(2004.)199
5219 y([7])49 b(Da)m(vid)27 b(Callahan,)i(Stev)m(e)g(Carr,)f(and)f(Ken)
h(Kennedy)-8 b(.)36 b(Impro)m(ving)29 b(register)f(allo)s(cation)e(for)
351 5400 y(subscripted)34 b(v)-5 b(ariables.)45 b(In)32
b Fo(PLDI)p Fs(,)g(pages)h(53{65,)f(1990.)1901 5649 y(73)p
eop
%%Page: 74 74
74 73 bop 199 100 a Fs([8])49 b(Stev)m(e)57 b(Carr)f(and)f(Ken)i
(Kennedy)-8 b(.)113 b(Impro)m(ving)57 b(the)f(ratio)g(of)f(memory)i(op)
s(erations)351 280 y(to)j(\015oating-p)s(oin)m(t)g(op)s(erations)h(in)g
(lo)s(ops.)128 b Fo(A)n(CM)61 b(T)-7 b(r)i(ans.)59 b(Pr)-5
b(o)g(gr)g(am.)60 b(L)-5 b(ang.)61 b(Syst.)p Fs(,)351
461 y(16\(6\):1768{1810,)29 b(1994.)199 729 y([9])49
b(Stev)m(e)28 b(Carr)g(and)f(Philip)h(Sw)m(ean)m(y)-8
b(.)37 b(An)27 b(exp)s(erimen)m(tal)i(ev)-5 b(aluation)28
b(of)e(scalar)i(replacemen)m(t)351 909 y(on)k(scien)m(ti\014c)j(b)s
(enc)m(hmarks.)45 b Fo(Softw.)35 b(Pr)-5 b(act.)35 b(Exp)-5
b(er.)p Fs(,)32 b(33\(15\):1419{1445,)e(2003.)150 1177
y([10])49 b(Mic)m(hael)43 b(Gordon,)h(William)e(Thies,)k(Mic)m(hal)d
(Karczmarek,)j(Jasp)s(er)c(Lin,)j(Ali)d(S.)g(Meli,)351
1358 y(Andrew)g(A.)g(Lam)m(b,)i(Chris)e(Leger,)i(Jerem)m(y)f(W)-8
b(ong,)43 b(Henry)g(Ho\013mann,)g(Da)m(vid)f(Maze,)351
1538 y(and)33 b(Saman)g(Amarasinghe.)47 b(A)33 b(Stream)h(Compiler)h
(for)d(Comm)m(unication-Exp)s(osed)k(Ar-)351 1719 y(c)m(hitectures.)45
b(In)33 b Fo(ASPLOS)p Fs(,)g(2002.)150 1987 y([11])49
b(R.)32 b(Go)m(vindara)5 b(jan,)32 b(G.R.)g(Gao,)f(and)h(P)-8
b(.)33 b(Desai.)43 b(Minimizing)33 b(memory)h(requiremen)m(ts)h(in)351
2167 y(rate-optimal)25 b(sc)m(hedules.)37 b(In)26 b Fo(Pr)-5
b(o)g(c)g(e)g(e)g(dings)28 b(of)h(the)g(1994)f(Int.)h(c)-5
b(onfer)g(enc)g(e)28 b(on)h(Applic)-5 b(ation)351 2348
y(Sp)g(e)g(ci\014c)33 b(A)n(rr)-5 b(ay)35 b(Pr)-5 b(o)g(c)g(essors)p
Fs(,)32 b(pages)h(75{86,)f(August)h(1994.)150 2616 y([12])49
b(N.)26 b(Halb)m(w)m(ac)m(hs,)31 b(P)-8 b(.)27 b(Caspi,)i(P)-8
b(.)27 b(Ra)m(ymond,)i(and)d(D.)h(Pilaud.)34 b(The)28
b(sync)m(hronous)h(data-\015o)m(w)351 2796 y(programming)j(language)h
(LUSTRE.)44 b Fo(Pr)-5 b(o)g(c.)34 b(of)h(the)g(IEEE)p
Fs(,)d(79\(9\),)g(1991.)150 3064 y([13])49 b(J.)23 b(Gaudiot)f(and)h
(W.)g(Bohm)g(and)g(T.)h(DeBoni)f(and)g(J.)g(F)-8 b(eo)22
b(and)h(P)-8 b(.)23 b(Mille.)29 b(The)24 b(Sisal)f(Mo)s(del)351
3245 y(of)k(F)-8 b(unctional)29 b(Programming)f(and)h(its)g(Implemen)m
(tation.)38 b(In)29 b Fo(Pr)-5 b(o)g(c.)30 b(of)h(the)g(Se)-5
b(c)g(ond)30 b(A)n(izu)351 3425 y(International)j(Symp)-5
b(osium)34 b(on)h(Par)-5 b(al)5 b(lel)34 b(A)n(lgorithms/A)n(r)-5
b(chite)g(ctur)g(es)34 b(Synthesis)p Fs(,)e(1997.)150
3693 y([14])49 b(Mic)m(hael)26 b(A.)f(Karczmarek.)33
b(Constrained)26 b(and)g(phased)g(sc)m(heduling)h(of)e(sync)m(hronous)i
(data)351 3874 y(\015o)m(w)42 b(graphs)h(for)e(the)i(streamit)g
(language.)71 b(Master's)44 b(thesis,)i(MIT)d(CSAIL,)g(Octob)s(er)351
4055 y(2002.)150 4322 y([15])49 b(Mic)m(hal)24 b(Karczmarek,)j(William)
e(Thies,)i(and)d(Saman)g(Amarasinghe.)30 b(Phased)25
b(sc)m(heduling)351 4503 y(of)32 b(stream)h(programs.)43
b(In)33 b Fo(LCTES)p Fs(,)f(2003.)150 4771 y([16])49
b(Sanjeev)30 b(Kohli.)37 b(Cac)m(he)31 b(a)m(w)m(are)f(sc)m(heduling)h
(of)d(sync)m(hronous)k(data\015o)m(w)d(programs.)38 b(Mas-)351
4952 y(ter's)33 b(Rep)s(ort)f(T)-8 b(ec)m(hnical)35 b(Memorandum)f
(UCB/URL)e(M04/03,)g(UC)h(Berk)m(eley)-8 b(,)35 b(2004.)150
5219 y([17])49 b(Andrew)24 b(A.)g(Lam)m(b.)29 b(Linear)24
b(analysis)h(and)e(optimization)h(of)g(stream)g(programs.)29
b(Master's)351 5400 y(thesis,)34 b(MIT)f(CSAIL,)h(Ma)m(y)f(2003.)1901
5649 y(74)p eop
%%Page: 75 75
75 74 bop 150 100 a Fs([18])49 b(E.)g(A.)g(Lee)g(and)g(D.)f(G.)h
(Messersc)m(hmitt.)95 b(Static)49 b(sc)m(heduling)i(of)d(sync)m
(hronous)j(data)351 280 y(\015o)m(w)38 b(programs)g(for)f(digital)g
(signal)h(pro)s(cessing.)60 b Fo(IEEE)39 b(T)-7 b(r)i(ansactions)38
b(on)h(Computers)p Fs(,)351 461 y(Jan)m(uary)33 b(1987.)150
712 y([19])49 b(Edw)m(ard)30 b(A.)f(Lee.)38 b(Ov)m(erview)31
b(of)d(the)i(Ptolem)m(y)g(Pro)5 b(ject.)38 b(T)-8 b(ec)m(hnical)31
b(rep)s(ort,)f(T)-8 b(ec)m(h)30 b(Memo)351 893 y(UCB/ERL)j(M03/25,)e
(UC)j(Berk)m(eley)-8 b(,)34 b(2003.)150 1144 y([20])49
b(R.)34 b(L.)g(Mattson,)i(J.)f(Gecsei,)h(D.)e(R.)g(Slutz,)i(and)f(I.)f
(L.)h(T)-8 b(raiger.)49 b(Ev)-5 b(aluation)35 b(tec)m(hniques)351
1325 y(for)d(storage)g(hierarc)m(hies.)46 b Fo(IBM)34
b(Systems)g(Journal)p Fs(,)f(1970.)150 1576 y([21])49
b(P)-8 b(.)23 b(K.)h(Murth)m(y)h(and)e(S.)h(S.)g(Bhattac)m(haryy)m(a.)
29 b(A)24 b(Bu\013er)g(Merging)g(T)-8 b(ec)m(hnique)26
b(for)d(Reducing)351 1757 y(Memory)31 b(Requiremen)m(ts)h(of)e(Sync)m
(hronous)i(Data\015o)m(w)d(Sp)s(eci\014cations.)41 b(In)30
b Fo(International)351 1937 y(Symp)-5 b(osium)34 b(on)g(System)h
(Synthesis)p Fs(,)d(1999.)150 2188 y([22])49 b(P)-8 b(.)42
b(K.)f(Murth)m(y)i(and)f(S.)g(S.)h(Bhattac)m(haryy)m(a.)72
b(Bu\013er)42 b(Merging)g(|)f(A)h(P)m(o)m(w)m(erful)i(T)-8
b(ec)m(h-)351 2369 y(nique)41 b(for)f(Reducing)h(Memory)g(Requiremen)m
(ts)i(of)d(Sync)m(hronous)i(Data\015o)m(w)e(Sp)s(eci\014ca-)351
2550 y(tions.)63 b(T)-8 b(ec)m(hnical)42 b(rep)s(ort,)f(Inst.)f(for)f
(Adv.)h(Computer)g(Studies,)j(UMD)c(College)h(P)m(ark,)351
2730 y(2000.)150 2982 y([23])49 b(T)-8 b(o)s(dd)32 b(A.)h(Pro)s
(ebsting)g(and)g(Scott)g(A.)f(W)-8 b(atterson.)44 b(Filter)33
b(F)-8 b(usion.)43 b(In)33 b Fo(POPL)p Fs(,)g(1996.)150
3233 y([24])49 b(Janis)22 b(Serm)m(ulins,)27 b(William)c(Thies,)i(Ro)s
(dric)d(Rabbah,)j(and)d(Saman)g(Amarasinghe.)28 b(Cac)m(he)351
3413 y(a)m(w)m(are)33 b(optimization)g(of)f(stream)h(programs.)44
b(In)33 b Fo(LCTES)p Fs(,)f(2005.)150 3665 y([25])49
b(Rob)s(ert)26 b(Stephens.)36 b(A)27 b(Surv)m(ey)h(of)e(Stream)i(Pro)s
(cessing.)35 b Fo(A)-5 b(cta)30 b(Informatic)-5 b(a)p
Fs(,)27 b(34\(7\),)g(1997.)150 3916 y([26])49 b(D.)33
b(T)-8 b(ennenhouse)36 b(and)e(V.)g(Bose.)47 b(The)35
b(Sp)s(ectrumW)-8 b(are)34 b(Approac)m(h)h(to)e(Wireless)j(Signal)351
4097 y(Pro)s(cessing.)44 b(Wireless)35 b(Net)m(w)m(orks,)g(1999.)150
4348 y([27])49 b(William)28 b(Thies,)i(Mic)m(hal)f(Karczmarek,)h(and)e
(Saman)g(Amarasinghe.)37 b(StreamIt:)42 b(A)28 b(Lan-)351
4529 y(guage)33 b(for)g(Streaming)i(Applications.)48
b(In)34 b Fo(Pr)-5 b(o)g(c.)36 b(of)g(the)g(Int.)f(Conf.)g(on)h
(Compiler)f(Con-)351 4709 y(struction)g(\(CC\))p Fs(,)d(2002.)150
4961 y([28])49 b(William)35 b(Thies,)h(Jasp)s(er)f(Lin,)h(and)e(Saman)h
(Amarasinghe.)50 b(P)m(artitioning)35 b(a)f(structured)351
5141 y(stream)49 b(graph)f(using)h(dynamic)g(programming.)91
b(In)48 b Fo(5th)i(Workshop)f(on)f(Me)-5 b(dia)50 b(and)351
5322 y(Str)-5 b(e)g(aming)34 b(Pr)-5 b(o)g(c)g(essors)p
Fs(,)31 b(Decem)m(b)s(er)j(2003.)1901 5649 y(75)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
