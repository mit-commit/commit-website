%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: main.dvi
%%Pages: 13
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips main.dvi -o main.ps
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2003.01.17:1923
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 40258431 52099146 1000 600 600 (main.dvi)
@start
%DVIPSBitmapFont: Fa cmti9 9 55
/Fa 55 123 df<EA0380EA0FE0121FA5EA0760120013E013C0A2120113801203EA070012
06120E5A5A5A5A5A0B176FB318>39 D<1560EC01E0EC03C0EC0700140E5C143C5C5C495A
495A13075C49C7FC5B131E5B137C137813F85B12015B12035B1207A25B120FA290C8FC5A
A2121E123EA3123C127CA31278A212F8A35AAF12701278A21238A2123C121CA27EA27E6C
7E12011B4A75B71F>I<14301438A28080A2140F801580A2140315C0A4140115E0A81403
A415C0A31407A31580140FA315005CA3141E143EA2143C147CA25CA25C13015C13035C13
075C130F91C7FC131E133E133C5B5B485AA2485A485A48C8FC121E5A12705A5A1B4A7EB7
1F>I<EA0380EA0FE0121FA5EA0760120013E013C0A2120113801203EA07001206120E5A
5A5A5A5A0B177A8718>44 D<B51280A46C1300110579911B>I<121C127F12FFA412FE12
380808778718>I<17E0EE01F0A2EE03E0A2EE07C0160F1780EE1F00A2163EA25EA25E15
015E4B5AA24B5AA24B5A151F93C7FC153EA25DA25DA24A5A14035D4A5AA24A5AA24AC8FC
A2143E147E147C5CA2495AA2495A13075C495AA249C9FCA2133EA25B13FC5B485AA2485A
A2485AA2485A121F90CAFC123EA25AA25AA25A5A2C4B7EB727>I<EC1FC0EC7FF0903801
E0F8903807C03CEB0F00011E131E133E013C131F5B13F85B1201A2485AA20007143F5BA2
120F153E49137E121FA348C712FCA4007EEB01F8A4007CEB03F012FCA2EC07E0A24814C0
A2EC0F80A2EC1F00A2141E5C0078137C5C387C01F0383C03E0381F0F80D80FFEC7FCEA03
F8203477B127>I<EC01801403A21407140FEC1F005C14FF5BEB1FFEEB7FBEEB7E7E1320
EB007CA214FCA25CA21301A25CA21303A25CA21307A25CA2130FA25CA2131FA291C7FCA2
5BA2133EA2137EA2137C13FCB512FCA3193277B127>I<EC0FE0EC3FF8ECF03E903803C0
1F903907800F80EB0F00011EEB07C0131C5BD978C013E0EB70E0EBF06013E0120113C0EC
E00F000301C013C013801381EC801F01831480903887003F018E1400D801FC137ED800F0
5B90380001F84A5A4A5A4A5A4AC7FC147E14F8EB03E0EB0FC049C8FC133E13784848EB03
80485A4913074848140048C75A121E001C141E003F143E01F85B397DFF80F838781FFF48
6C5BD8E0035B6D1380D9007EC7FC23347AB127>I<150E151FA2153F153EA3157E157CA2
15FC15F8A2140115F0A2EC03E0A3EC07C0A2EC0F80A2EC1F00A2143EA25C147814F85C13
01903803E0E0ECC1F0EB0781EB0F83EC03E0131E133CEB7C0701F813C0EA01F0EA03E038
07C00FD80F801380EA1FFC383FFFCF48EBFF82D8F00313FF3860003FC7EA1FF8EC3F0014
3EA3147E147CA314FC5CA4146020417DB127>52 D<010614C090380FC00F91B512801600
15FC4913F015C0D91CFEC7FC91C8FC133C1338A313781370A313F0EBE0FE9038E3FF8090
38EF03C03901FC01E001F87FEBF000497F485A5BC8FCA41401A4003C130300FC5CA34A5A
5A00E0495AA24A5A4AC7FC6C137E00705B387801F8383E07F0381FFFC06C90C8FCEA03F8
223478B127>I<D9E0F81338EBE3FC2601EFFE137801FF14F048EC01E09038FE0E03D807
F814C09039F0060F80390FC0071F90398003FF00391F0001EF001EEB001E003E5C123C48
5C15F8485C4813015DC712034A5AA24A5AA2141F92C7FC5C143E147EA25CA2495AA3495A
A213075CA2130F5CA2131FA25C133FA391C8FCA2131C253476B127>55
D<EC07E0EC3FFC4A7E903801F81F903903E00F809038078007D90F0013C0491303131E5B
A21507017C1480A2150F1600017E131E017F133E6E5A6D6C5AECE1E090381FFBC06DB4C7
FC6D5A6D7E497F011E7F90387C7FE09038F01FF048486C7E3807C007EB8003380F000100
1E1300123E003C1478127C1278A215F800F85C5A6C495A007813035D007C495A003C011F
C7FC003E133E381F81FC380FFFF0000313C0C648C8FC223479B127>I<EC0FC0EC7FF0EC
FFFC903803F07E903807C03E49487EEB1F00013E7F017E14805BA2485AA2485A151FA212
075BA2ED3F00A2485A5DA2000714FEA21401140300035CEBE0070001131E3900F039F8EB
7FF1EB0FC190380003F0A24A5AA25D4A5A141F003891C7FC007E133E00FE137E5C48485A
48485A48485A38781F80D87FFFC8FCEA1FFCEA07E0213478B127>I<1370EA01FC1203A4
13F8EA00E01300B0121C127F5AA45A12380E20779F18>I<161C163CA2167C16FCA21501
821503A2ED077E150F150E151CA21538A2157015F015E0EC01C0A2913803807F82EC0700
A2140E141E141C5CA25CA25C49B6FCA25B913880003F49C7EA1F80A2130E131E131C133C
13385B13F05B12011203D80FF0EC3FC0D8FFFE903807FFFEA32F367BB539>65
D<DB1FF013C09238FFFC010203EBFF03913A0FF00F878091393F8003CF9139FE0001EF49
48EB00FFD903F01500D90FE080495A49488091C8123E137E13FE485A4848153CA2485AA2
48481538A2485A94C7FC123F5BA3127F90CBFCA412FEA2EE03C0A25F127E160794C7FC5E
160E007F151E6C5D5E6C6C147016F06C6C495A6C6CEB07C06C6C49C8FC6C6C133E6CB413
FC90387FFFF0011F13C0D903FEC9FC323775B437>67 D<0107B612C04915F017FC903A00
3F8001FEEE007FEF1F8092C7EA0FC0EF07E05CEF03F0147E170102FE15F8A25CA21301A2
5CA2130317035CA2130718F04A1407A2130F18E04A140F18C0011F151F18805CEF3F0013
3F177E91C85AA2494A5A4C5A017E4A5A4C5A01FE4A5A047EC7FC49495A0001EC0FF8007F
B612E0B7C8FC15F835337BB23A>I<0107B712F05B18E0903A003F80001F1707170392C7
FC17015C18C0147EA214FEA24A130EA20101EC1E03041C13804A91C7FC163C13035E9138
F001F891B5FC5B5EECE0011500130F5E5C1707011F01015BEEC00E0280141E92C7121C13
3F173C91C812381778495DA2017E14014C5A01FE14074C5A49141F00014AB45A007FB7FC
B8FC94C7FC34337CB234>I<92391FE001809238FFF8030207EBFE07913A1FF01F0F0091
393F80079F9139FE0003DFD901F86DB4FCD907F05C49481300495A4948147E49C8127C13
7E13FE485A48481578A2485AA248481570A2485A94C7FC123F5BA3127F90CBFCA400FE91
383FFFFCA25F9238003F8094C7FCA2007E5DA2167EA2007F15FE7E5E6C6C1301A26C6C49
5A6D13076C6CEB0F786C6C133E3A00FF01FC3090387FFFF0011F01C0C8FCD903FEC9FC31
3775B43B>71 D<010FB51280A216009038003FC05DA292C7FCA25CA2147EA214FEA25CA2
1301A25CA21303A25CA21307A25CA2130FA25CA2131FA25CA2133FA291C8FCA25BA2137E
A213FEA25B1201B512F8A25C21337BB21E>73 D<0107B512C05BA29026003FC0C7FC5DA2
92C8FCA25CA2147EA214FEA25CA21301A25CA21303A25CA21307A25CA2130FA25C17E001
1F140117C05C1603013F1580160791C7FCEE0F005B5E017E143EA201FE5CED01FC491303
0001EC1FF8007FB6FCB7FC5E2B337CB230>76 D<902607FFC0ED7FFC4917FF81D9003F4B
1300611803023BED077CA2027BED0EFC610273151C1838DAF1F01439F071F014E118E101
01ED01C36102C1EC0383EF070301031607050E5BEC80F8171C0107ED380F6102001470A2
49EDE01FDC01C090C7FC130EEE0380011E017C5C933807003E011C140EA2013C4A137E18
7C01385C5E017816FC6F485B1370ED3FC001F0EC80016000011500D807F81503277FFF80
3E90B512C0B5EB3C01151C46337BB245>I<902607FF8090383FFFC0496D5BA2D9001F91
3803F8004A6C6D5A6060EC3BF0027B140360EC71F8A202F11407DAF0FC91C7FC14E0A201
01017E5B170E14C0810103151EEE801CEC801FA20107ECC03C030F1338140016E0490107
13781770010E14F01503011E15F0705A011C1301A2013C14FD03005B133816FF0178147F
5F0170143FA213F070C8FC1201EA07F8267FFF807FB5140EA23A337BB239>I<ED1FE091
3801FFFC913807E03F91391F800FC091393E0003E002F8EB01F0495A4948EB00F8494814
FC4948147C49C8127E133E017E153E49153F485AA2485A12075B120F5B121F177F5B123F
A348C912FEA4EE01FC12FEEE03F8A217F0160717E0160F007E16C0EE1F80A2EE3F006C15
7E5E5E6C6C495A000F4A5A6D495A0007EC1F806C6C013EC7FCD801F813FC39007E07F090
383FFF80D907FCC8FC303775B43B>I<0107B612C04915F883903A003F8001FEEE003FEF
1F8092C713C0170F5C18E0147EA214FEEF1FC05CA201011680173F4A1500177E010315FE
5F4AEB03F8EE07E00107EC3FC091B6C7FC16F802E0C9FC130FA25CA2131FA25CA2133FA2
91CAFCA25BA2137EA213FEA25B1201387FFFF0B5FCA233337CB234>I<ED1FE0913801FF
FC913807E03F91391F800FC091393E0007E002F8EB03F0494813014948EB00F8494814FC
4948147C49C8127E133E137E49153F12015B485A12075B120FA2485A177FA2485AA348C9
12FEA4007EED01FC12FE17F8160317F0160717E0160F007E16C0EE1F80A2023EEB3F0000
3E9038FF807E263F01C1137C90390380C0F8001F903800C1F0D80F87EBC3E001C6EBE7C0
0007ECFF80D803E649C7FCD801FE5B3B007F07F0018090383FFFE0D907FC130390C71400
5E1401160EEDF01EEDF87EEDFFFC5EA26E5B5E6F5A031FC7FC304475B43B>I<0107B512
FE49ECFFC017F0903A003F8007F8EE01FCEE007E92C7127F835C1880147EA214FEEF7F00
5CA2010115FE5F4A13015F01034A5AEE0FC04A495A04FEC7FC49B512F016C09138E003E0
ED01F8010F6D7E167C4A137EA2131FA25CA2013F14FEA291C7FCA24913015E137EEF01C0
01FE150318805B00011607277FFFF0001400B5ECFE0EEE7E1CC9EA1FF8EE07E032357BB2
38>I<913901FC018091380FFF03023F13C791387E07EF903A01F801FF0049487E4A7F49
5A4948133E131F91C7FC5B013E143CA3137E1638A293C7FC137FA26D7E14E014FE90381F
FFC06D13F86D7F01017F6D6C7E020F7F1400153F6F7E150FA4120EA2001E5D121CA2151F
003C92C7FCA2003E143E5D127E007F5C6D485A9038C007E039F3F80FC000F0B5C8FC38E0
3FFC38C00FF029377AB42B>I<0003B812C05A1880903AF800FC003F260FC001141F0180
150F01005B001EEE07001403121C003C4A5BA200380107140E127800705CA2020F141E00
F0161CC74990C7FCA2141FA25DA2143FA292C9FCA25CA2147EA214FEA25CA21301A25CA2
1303A25CA21307A25C497E001FB512F05AA2323374B237>I<EB03F0EB0FF890383E1C60
90387C0FF0EBF807EA01F0EA03E00007EB03E0EA0FC0A2381F800715C0EA3F00A2140F48
1480127EA2141F00FE14005A1506EC3F07EC3E0F150E147E007C141EECFE1CEB01FCD83C
03133C393E07BE38391F0E1E783907FC0FF03901F003C0202278A027>97
D<137EEA0FFE121F5B1200A35BA21201A25BA21203A25BA21207A2EBC3E0EBCFF8380FDC
3EEBF81F497E01E01380EA1FC0138015C013005AA2123EA2007E131F1580127CA2143F00
FC14005AA2147EA25CA2387801F85C495A6C485A495A6C48C7FCEA0FFCEA03F01A3578B3
23>I<14FCEB07FF90381F078090383E03C0EBFC013801F8033803F0073807E00F13C012
0F391F80070091C7FC48C8FCA35A127EA312FE5AA4007C14C0EC01E0A2EC03C06CEB0F80
EC1F006C137C380F81F03803FFC0C648C7FC1B2278A023>I<ED0FC0EC03FFA21680EC00
1FA31600A25DA2153EA2157EA2157CA215FCA2903803F0F8EB0FF8EB3E1DEB7C0F496C5A
EA01F0EA03E000071303D80FC05BA2381F8007A2D83F005BA2140F5A007E5CA2141F12FE
4891C7FC1506EC3F075DEC3E0E147E007C141EECFE1CEB01FCD83C03133C393E07BE3839
1F0E1E783907FC0FF03901F003C0223578B327>I<EB03F8EB0FFEEB3E0F9038F8078038
01F003EA03E0EA07C0120FEA1F801407D83F0013005C007E133EEB03F8387FFFE04848C7
FC00FCC8FCA45AA4EC0180EC03C0A2007CEB0780EC1F00003C133E6C13F8380F03E03807
FF80D801FCC7FC1A2277A023>I<151FED7FC0EDF0E0020113F0EC03E3A2EC07C316E0ED
C1C091380FC0005DA4141F92C7FCA45C143E90381FFFFEA3D9007EC7FC147CA414FC5CA5
13015CA413035CA413075CA3130FA25CA3131F91C8FCA35B133E1238EA7E3CA2EAFE7812
FC485AEA78E0EA3FC0000FC9FC244582B418>I<143FECFF80903803E1E6903807C0FF90
380F807FEB1F00133E017E133F49133EA24848137EA24848137CA215FC12074913F8A214
01A2D80FC013F0A21403120715E01407140F141F3903E03FC00001137FEBF0FF38007FCF
90381F0F801300141FA21500A25C143E1238007E137E5C00FE5B48485A387803E0387C0F
80D81FFFC7FCEA07F820317CA023>I<EB0FC0EA03FFA25CEA001FA391C8FCA25BA2133E
A2137EA2137CA213FCA29038F83F80ECFFE03901FBE0F09038FF80F8EC007849137C485A
5B5BA2484813FC5D5BA2000F13015D1380A2001F13035DEB0007EDC0C048ECC1E0020F13
C0003E1481A2007E1483ED0380007C1407160000FC140E151E48EB07F80070EB01F02335
7BB327>I<EB0180EB07E0A2130FEB07C0EB038090C7FCABEA01F0EA03FCEA0F1E120E12
1C123C1238EA783E1270A2137EEAF07CEA60FCC65AA212015BA212035BA2000713C0EBC1
E0000F13C01381A21383EB038013071400130E131EEA07F8EA01F013337AB118>I<1538
157C15FCA315701500AB143EECFF80903801E3C090380383E0EB0701130FEB0E03131C13
3C133814071378013013C01300140FA21580A2141FA21500A25CA2143EA2147EA2147CA2
14FCA25CA21301A25CA213035C1238387E07C0A238FE0F804848C7FCEAF83EEA787CEA3F
F0EA0F801E4283B118>I<133FEA07FF5A13FEEA007EA3137CA213FCA213F8A21201A213
F0A21203A213E0A21207A213C0A2120FA21380A2121FA21300A25AA2123EA2127EA2127C
1318EAFC1C133CEAF838A21378137012F013F0EAF8E01279EA3FC0EA0F00103579B314>
108 D<2703C003F8137F3C0FF00FFE01FFC03C1E783C1F07C1E03C1C7CF00F8F01F03B3C
3DE0079E0026383FC001FC7FD97F805B007001005B5E137ED8F0FC90380FC00100E05FD8
60F8148012000001021F130360491400A200034A13076049013E130FF081800007027EEC
83C0051F138049017C1403A2000F02FC1407053E130049495CEF1E0E001F01015D183C01
0049EB0FF0000E6D48EB03E03A227AA03F>I<3903C007F0390FF01FFC391E787C1E391C
7CF01F393C3DE00F26383FC01380EB7F8000781300EA707EA2D8F0FC131F00E01500EA60
F8120000015C153E5BA20003147E157C4913FCEDF8180007153C0201133801C013F0A200
0F1578EDE070018014F016E0001FECE1C015E390C7EAFF00000E143E26227AA02B>I<14
FCEB07FF90381F07C090383E03E09038FC01F0EA01F83903F000F8485A5B120F484813FC
A248C7FCA214014814F8127EA2140300FE14F05AA2EC07E0A2007CEB0FC01580141FEC3F
006C137E5C381F01F0380F83E03803FF80D800FCC7FC1E2278A027>I<011E137C90387F
81FF9039F3C387C09039E3EF03E03901E1FE01D9C1FC13F0EBC3F8000313F0018314F814
E0EA07871307000313C01200010F130316F01480A2011F130716E01400A249EB0FC0A201
3EEB1F80A2017EEB3F00017F133E5D5D9038FF81F09038FDC3E09038F8FF80027EC7FC00
0190C8FCA25BA21203A25BA21207A25BB5FCA325307FA027>I<3903C00FC0390FF03FF0
391E78F078391C7DE03C393C3FC0FC00381380EB7F00007814F8D8707E13701500EAF0FC
12E0EA60F812001201A25BA21203A25BA21207A25BA2120FA25BA2121FA290C8FC120E1E
227AA020>114 D<EB03F0EB1FFCEB3C1EEB780FEBF007EA01E0140F0003131F13C0A2EB
E00414007FEBFF8014E06C13F06C13F8EB7FFC1307EB00FE147E143E123800FC133CA314
7C00F013784813F0EAF001387803E0383C0F80381FFE00EA03F818227AA01F>I<1303EB
0F80A3131FA21400A25BA2133EA2137EA2137C387FFFF8A2B5FC3800F800A21201A25BA2
1203A25BA21207A25BA2120FA25B1460001F13F014E01300130114C01303001E1380EB07
005BEA0F1EEA07F8EA01E015307AAE19>I<EA01F0D803FC1307D80F1E5B000E5C121C12
3C00385CD8783E133E1270A2017E137ED8F07C137CEA60FCC65A15FC00015C5BA2140100
035C13E0166002031370EDE0F0D807C014E0A20003EB07E116C09038E00FC1EC1FC30001
90383FE3809038F071E73A007FE0FF0090381F803C24227AA029>I<01F01338D803FC13
FCEA0F1E120E121C123C0038147CEA783E0070143CA2137ED8F07C1338EA60FCC65A1578
000114705BA215F0000314E05BA2EC01C0A2EBC003158014071500EBE00EA26C6C5A3800
F878EB7FE0EB1F801E227AA023>I<D801F01538D803FC010E13FCD80F1E131E000E143E
121C123C0038027E137CD8783E137C0070163CA2017E13FCD8F07C491338EA60FCC65A02
01147800014A137013F0A2020314F0000316E001E05BA2160117C001C013C00207EB0380
A29039E00FE0071700021F130E3A01F03DF01E3A00F878F83C90393FF03FF090390FC00F
C02E227AA033>I<011F137C90387FC1FF3A01E1E787803A03C0F703C0903880FE0FEA07
004813FC000E1580001E9038F80700001C91C7FC1301003C5B1218120013035CA31307A2
5C1506010F130F150E14800038141ED87C1F131C00FC143C1538013F5B39F07FC0E03970
F3C3C0393FE1FF80260F807EC7FC22227CA023>I<13F0D803FC1307D80F1E130F000E14
1F121C123C0038143FD8783E133E1270A2017E137ED8F07C137CEA60FCC65A15FC000114
F85BA21401000314F013E0A2140315E0EA07C0A20003130715C0EBE00F141F0001133F90
38F07F8038007FEFEB1F8FEB001F1500A25C003E133E007E137E147C5C007C5BEA700149
5A38380780D83C1FC7FCEA0FFCEA07F020317AA025>I<903807801C90381FE03C90383F
F038017F13789038FFF8F03901F07CE0EBE01F3903C003C09038800780EC0F00C7121E14
1C143C5C5C495AEB07C0495A011EC7FC5B5B4913704913F0000114E0485A38078001390F
C003C0381FF80790383E0F80393C1FFF00127838700FFE38F007F838E001E01E227CA01F
>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmsy7 7 1
/Fb 1 51 df<49B5FC130F133F01FFC7FCEA01F8EA03E0EA078048C8FC121E121C123C12
3812781270A212F05AA2B7FCA300E0C8FCA27E1270A212781238123C121C121E7E6C7EEA
03E0EA01F86CB4FC013FB5FC130F130120277AA12D>50 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmbx10 10 36
/Fc 36 123 df<EA0F80EA3FE0EA7FF0A2EAFFF8A5EA7FF0A2EA3FE0EA0F800D0D798C1B
>46 D<141E143E14FE1307133FB5FCA313CFEA000FB3B3A6007FB61280A4213779B630>
49 D<EB0FFC90387FFFC048B512F0000714FC390FF03FFF261F800F1380263F000313C0
5AD9C00113E0486C6C13F07FA2ED7FF8A46C5A6C5A000FC7FCC8FCEDFFF0A216E05C16C0
4A138016004A5A5D4A5A4A5A4A5AEC7F8092C7FC14FEEB01F849481378495A495A495A01
3EC712F84914F05B4848130148B6FCA25A5A5A5A4815E0B7FCA425377BB630>I<EB03FF
011F13F0017F13FC3901FC07FF2603F003138048486C13C0496C13E0EA0FF001FC14F012
1F7FA56C4814E0A23803F001C714C04A138016004A5A4A5AEC3FF090380FFFC092C7FC15
F090380007FE913801FF806E13C016E0ED7FF016F816FC153FA216FEEA1FC0487E487E48
7EA416FCA249EB7FF8127F01C0EBFFF06C4814E06C6C4813C0260FFC0713806CB6120000
0114FC6C6C13F0010790C7FC27387CB630>I<ED07C0150FA2151F153F157F15FFA25C5C
5C5CA2141E5C147C5C5C495A495A1307495A5C131E5B137C5B5B485A485A1207485A90C7
FC121E5A127C5AB81280A4C70001EBC000AA0103B61280A429377DB630>I<001C15C0D8
1F80130701F8137F90B61280A216005D5D15F05D15804AC7FC14F090C9FCA8EB07FE9038
3FFFE090B512F89038FC07FC9038E003FFD98001138090C713C0120EC813E0157F16F0A2
16F8A21206EA3F80EA7FE012FF7FA44914F0A26C4813FF90C713E0007C15C06C5B6C4913
80D9C0071300390FF01FFE6CB512F8000114E06C6C1380D90FF8C7FC25387BB630>I<EC
0FF8ECFFFE0103EBFF8090390FF80FC090393FE003E090397FC001F09038FF000F48EC1F
F84848133F485A120F5B121FA2003FEC1FF0ED0FE04990C7FC127FA21408EC7FF039FFF1
FFFC01F313FFD9F78013809039FF007FC049EB3FE04914F0ED1FF85B16FCA34914FEA512
7FA5123F16FCA26C7E16F8000F143F6C6C14F0ED7FE06C6C14C03A01FF81FF806C90B512
00013F13FC010F13F00101138027387CB630>I<123C123EEA3FE090B71280A41700485D
5E5E5EA25E007CC7EA0FC000784A5A4BC7FC00F8147E48147C15FC4A5A4A5AC7485A5D14
0F4A5A143F92C8FC5C147E14FE1301A2495AA31307A2130F5CA2131FA5133FA96D5A6D5A
6D5A293A7BB830>I<EA0F80EA3FE0EA7FF0A2EAFFF8A5EA7FF0A2EA3FE0EA0F80C7FCAB
EA0F80EA3FE0EA7FF0A2EAFFF8A5EA7FF0A2EA3FE0EA0F800D2579A41B>58
D<ED03E04B7EA24B7EA34B7EA24B7EA34B7EA292B57EA34A8015F302038015E1A2020780
15C0020F80ED807FA2021F80ED003F4A80023E131FA2027E80027C7F02FC814A7FA20101
824A7F49B77EA3498202C0C7FC010F824A147FA2011F8291C8123F4982013E151FA2017E
82017C8101FE83B500F80107B61280A4413A7DB948>65 D<B912F0A426007FF8C7FCEF1F
F8170717031701A21700A21878A3043C137C183CA41800167CA216FC150391B5FCA4ECF8
031500167CA2163C180FA3181EA293C7FCA2183EA2183C187CA218FCA2EF01F81703170F
173FEE01FFB9FC18F0A338397DB83F>69 D<B912C0A43A007FF800039338007FE0171F17
0F1707A21703A21701A318F0EE7800A41800A216F8A21501150791B5FCA4ECF807150115
00A21678A693C8FCADB7FCA434397DB83C>I<DB3FFCEB01C00203B5EAC003021FECF007
91B6EAFC0F01039039FC00FF3F4901C0EB1FFFD91FFEC77E49481403D97FF08049488048
5B48177F4849153F4890C9FC181F485A180F123F5B1807127FA24993C8FC12FFAB043FB6
1280A2127F7FDC0003EBC000123FA27F121FA26C7EA26C7F6C7F6C7F7ED97FF85C6D7E6D
B45C010701C05B6D01FCEBFF3F010090B5EAFE0F021FECF8030203ECE0009126003FFEC9
FC413B7BB94B>I<B612FCA439007FF800B3B3ADB612FCA41E397DB824>73
D<B8FC17F017FEEFFF8028007FF8000F13C0040113E07013F0EF7FF8EF3FFCA2EF1FFEA2
18FFA818FEA2EF3FFCA2EF7FF8EFFFF04C13E0040F13C091B7120017FC17E002F8C9FCB3
A4B612FCA438397DB841>80 D<B712FCEEFFE017FC17FF28007FF8000F13C004017F707F
717E717EA2717EA284A760A24D5A604D5A4D5A04035B041F90C8FC91B612FC17E0839139
F8003FFCEE0FFF707F707F8284A2707FA584A51A601AF084177F1901DD3FFE13E0B600FC
011F130394390FFF87C071EBFF8005011400CBEA1FFC443A7DB848>82
D<D907FF130E013FEBE01E90B5EAF83E0003ECFE7E3A07FC01FFFE390FF0001F4848130F
48481303491301007F140090C8FC167E5A163EA27F161E7F7F6D91C7FC13FC387FFFE014
FEECFFF06C14FE6F7E6C816C15F06C816C81C681133F010F801301D9000F1480EC007F03
0F13C01503818100F0157FA3163FA27E17807E167F6C16007E6D14FE01E0495A01F81303
9039FF801FF800FC90B512E0D8F83F5CD8F00749C7FC39E0007FF02A3B7BB935>I<EB3F
FE0003B512E0000F14F8391FF00FFE003FEB03FF6D6C7F6E7FA26F7EA26C5A6C5AEA0380
C8FCA2EC3FFF010FB5FC137F3901FFF87F00071380380FFE00EA3FF85B485A12FF5BA415
FF6D5A127F263FF00713F83B1FFC1FBFFFC0390FFFFE1F0003EBF80F39003FE0032A257D
A42E>97 D<903801FFC0010F13FC017F13FFD9FF8013802603FE0013C048485AEA0FF812
1F13F0123F6E13804848EB7F00151C92C7FC12FFA9127FA27F123FED01E06C7E15036C6C
EB07C06C6C14806C6C131FC69038C07E006DB45A010F13F00101138023257DA42A>99
D<EE7F80ED7FFFA4150381AF903801FF81010F13F1013F13FD9038FFC07F0003EB001FD8
07FC1307000F8048487F5B123FA2485AA312FFAA127FA27F123FA26C6C5B000F5C6C6C5B
6C6C4913C02701FF80FD13FE39007FFFF9011F13E1010313012F3A7DB935>I<903803FF
80011F13F0017F13FC3901FF83FE3A03FE007F804848133F484814C0001FEC1FE05B003F
EC0FF0A2485A16F8150712FFA290B6FCA301E0C8FCA4127FA36C7E1678121F6C6C14F86D
14F000071403D801FFEB0FE06C9038C07FC06DB51200010F13FC010113E025257DA42C>
I<EC1FF0903801FFFC010713FF90391FF87F8090383FE0FFD9FFC113C0A2481381A24813
016E1380A2ED3E0092C7FCA8B6FCA4000390C8FCB3ABB512FEA4223A7DB91D>I<161FD9
07FEEBFFC090387FFFE348B6EAEFE02607FE07138F260FF801131F48486C138F003F15CF
4990387FC7C0EEC000007F81A6003F5DA26D13FF001F5D6C6C4890C7FC3907FE07FE48B5
12F86D13E0261E07FEC8FC90CAFCA2123E123F7F6C7E90B512F8EDFF8016E06C15F86C81
6C815A001F81393FC0000F48C8138048157F5A163FA36C157F6C16006D5C6C6C495AD81F
F0EB07FCD807FEEB3FF00001B612C06C6C91C7FC010713F02B377DA530>I<EA01F0EA07
FC487EA2487EA56C5AA26C5AEA01F0C8FCA913FF127FA412077EB3A9B512F8A4153B7DBA
1B>105 D<13FFB5FCA412077EB3B3ACB512FCA4163A7DB91B>108
D<01FED97FE0EB0FFC00FF902601FFFC90383FFF80020701FF90B512E0DA1F81903983F0
3FF0DA3C00903887801F000749DACF007F00034914DE6D48D97FFC6D7E4A5CA24A5CA291
C75BB3A3B5D8FC1FB50083B512F0A44C257DA451>I<01FEEB7FC000FF903803FFF8020F
13FE91381F03FFDA3C011380000713780003497E6D4814C05CA25CA291C7FCB3A3B5D8FC
3F13FFA430257DA435>I<903801FFC0010F13F8017F13FFD9FF807F3A03FE003FE04848
6D7E48486D7E48486D7EA2003F81491303007F81A300FF1680A9007F1600A3003F5D6D13
07001F5DA26C6C495A6C6C495A6C6C495A6C6C6CB45A6C6CB5C7FC011F13FC010113C029
257DA430>I<9039FF01FF80B5000F13F0023F13FC9138FE07FFDAF00113800007496C13
C06C0180EB7FE091C713F0EE3FF8A2EE1FFCA3EE0FFEAA17FC161FA217F8163F17F06E13
7F6E14E06EEBFFC0DAF00313809139FC07FE0091383FFFF8020F13E0020390C7FC91C9FC
ACB512FCA42F357EA435>I<9038FE03F000FFEB0FFEEC3FFF91387C7F809138F8FFC000
075B6C6C5A5CA29138807F80ED3F00150C92C7FC91C8FCB3A2B512FEA422257EA427>
114 D<90383FF0383903FFFEF8000F13FF381FC00F383F0003007E1301007C130012FC15
787E7E6D130013FCEBFFE06C13FCECFF806C14C06C14F06C14F81203C614FC131F903800
7FFE140700F0130114007E157E7E157C6C14FC6C14F8EB80019038F007F090B512C000F8
140038E01FF81F257DA426>I<130FA55BA45BA25B5BA25A1207001FEBFFE0B6FCA30003
90C7FCB21578A815F86CEB80F014816CEBC3E090383FFFC06D1380903803FE001D357EB4
25>I<01FFEC3FC0B5EB3FFFA4000714016C80B3A35DA25DA26C5C6E4813E06CD9C03E13
FF90387FFFFC011F13F00103138030257DA435>I<B539F001FFF8A4000390C7EA3F0016
1E6E133E6C153C6E137C6C15786E13F8017F5CECF001013F5C14F8011F495AA2ECFC0701
0F5CECFE0F010791C7FC6E5A6D131E15BE6D13BC15FC6D5BA36E5AA26E5AA26E5AA26E5A
A22D257EA432>I<B539F001FFF8A4000390C7EA3F00161E6E133E6C153C6E137C6C1578
6E13F8017F5CECF001013F5C14F8011F495AA2ECFC07010F5CECFE0F010791C7FC6E5A6D
131E15BE6D13BC15FC6D5BA36E5AA26E5AA26E5AA26E5AA292C8FCA25C141E003F133E38
7F803C38FFC07C147814F8EBC1F0EBC3E06C485A387D1F80D83FFFC9FCEA1FFCEA07F02D
357EA432>121 D<003FB612C0A3D9F0031380EB800749481300003E5C003C495A007C13
3F5D0078495A14FF5D495B5BC6485B92C7FC495A131F5C495A017FEB03C0EBFFF014E048
13C05AEC80074813005A49EB0F80485A003F141F4848133F9038F001FFB7FCA322257DA4
2A>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmsy6 6 1
/Fd 1 34 df<1606160E82A2831603831601707E17701778171E007FB81280B912E06C17
80CAEA1E00177817705F4C5A16035F160794C7FCA2160E1606331B7C993D>33
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmex10 10 2
/Fe 2 81 df<161E167EED01FE1507ED0FF8ED3FE0ED7FC0EDFF80913801FE004A5A4A5A
5D140F4A5A5D143F5D147F92C7FCA25C5CB3B3B3A313015CA3495AA213075C495AA2495A
495A137F49C8FC485A485AEA07F0EA1FE0485AB4C9FC12FCA2B4FCEA3FC06C7EEA07F0EA
03FC6C7E6C7E6D7E133F6D7E6D7EA26D7E801303A26D7EA3801300B3B3B3A38080A28114
3F81141F816E7E1407816E7E6E7E913800FF80ED7FC0ED3FE0ED0FF8ED07FE1501ED007E
161E27C675823E>26 D<BB12FC86A3D87FC0C9001F7FF0007F6C6C17076C6C050113806C
6CEF007F1A1F6C6CF00FC06C6C18076C6C1803F201E06C6D17006D6C1860013F19706E18
306D7E6D6C18181B006D7E6D7E6D7EA26D7F6E7E6E7EA26E7E6E7E6E7EA26E7E6E7E8082
6F7E6F7EA26F7E6F7E6F5A5EA24B5A5E4BCBFC153E157E5D5D4A5A4A5A14075D4A5A4ACC
FC143E147E147C5C4948181801031930495A4A18704948186049CC12E0491801017EF003
C0017C180749180F4848F01F800003197F49EF01FF4848050713004848173F48CA000FB5
FC48BA5AA25ABB5AA24D537B7F58>80 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmmi6 6 3
/Ff 3 107 df<D9FFE0EBFFF0A2D907F0EB0F00160ED90DF8130C130C80147C01185C80
A28001305CEC0F80A2EC07C001605C15E0140315F0D9C0015B15F8140015FC4848EB7D80
157F153FA248C76CC7FCA281EA0F80D8FFF01306A22C227CA130>78
D<1338137CA2137813701300A7EA0780EA1FC0EA38E01230EA60F0EAC1E0A3EA03C0A3EA
0780A2EA0F0013041306EA1E0CA21318121CEA1E70EA0FE0EA07800F237DA116>105
D<1418143C147CA214381400A7EB0780EB1FE01338EB60F013C0A2EA0180A2380001E0A4
EB03C0A4EB0780A4EB0F00A4131EA21238EA783CEAF8381378EA70F0EA7FC0001FC7FC16
2D81A119>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmmi9 9 39
/Fg 39 123 df<123C127E12FFA4127E123C08087A8715>58 D<123C127EB4FCA21380A2
127F123D1201A412031300A25A1206120E120C121C5A5A126009177A8715>I<171C177E
EE01FEEE07FCEE1FF0EE7FC0923801FF00ED07FCED1FF0ED7FC04A48C7FCEC07FCEC1FF0
EC7FC04948C8FCEB07FCEB1FF0EB7FC04848C9FCEA07FCEA1FF0EA7FC048CAFCA2EA7FC0
EA1FF0EA07FCEA01FF38007FC0EB1FF0EB07FCEB01FF9038007FC0EC1FF0EC07FCEC01FF
9138007FC0ED1FF0ED07FCED01FF9238007FC0EE1FF0EE07FCEE01FEEE007E171C2F2E7A
A93C>I<1530157815F8A215F01401A215E01403A215C01407A21580140FA215005CA214
3EA2143C147CA2147814F8A25C1301A25C1303A25C1307A2495AA291C7FC5BA2131E133E
A2133C137CA2137813F8A25B1201A25B1203A2485AA25B120FA290C8FC5AA2121E123EA2
123C127CA2127812F8A25A12601D4B7CB726>I<127012FCB4FCEA7FC0EA1FF0EA07FCEA
01FF38007FC0EB1FF0EB07FCEB01FF9038007FC0EC1FF0EC07FCEC01FF9138007FC0ED1F
F0ED07FCED01FF9238007FC0EE1FF0EE07FCEE01FEA2EE07FCEE1FF0EE7FC0923801FF00
ED07FCED1FF0ED7FC04A48C7FCEC07FCEC1FF0EC7FC04948C8FCEB07FCEB1FF0EB7FC048
48C9FCEA07FCEA1FF0EA7FC048CAFC12FC12702F2E7AA93C>I<010FB612F017FEEFFF80
903B003FC0003FE0EF0FF017074B14F81703027F15FCA292C7FCA25C18F84A140718F001
01150F18E04AEC1FC0EF3F800103ED7F00EE01FE4AEB07F891B612E04915809139F8001F
F04AEB03FCEE00FE010F157FA24AEC3F80A2011F16C0A25CA2133F18804A147FA2017FED
FF005F91C712014C5A494A5A4C5A49EC3FE00001913801FF80B748C7FC16F816C036337D
B23A>66 D<010FB612F817FF18C0903B003FC0003FE0EF0FF0EF03F84B6D7E717E027F15
7F8492C81380A24A151F19C05CA21301A25CA21303183F5CA2130719804A157FA2130F19
004A5D60011F1501605C4D5A013F5E17074A4A5A60017F4B5A4DC7FC91C8127E4C5A494A
5AEE0FF049EC3FC000014AB4C8FCB712FC16F093C9FC3A337DB23F>68
D<010FB712FCA218F8903A003FC00007170018785D1838147F183092C8FCA25CA25C1606
0101020E1370040C13604A1500A20103141C5E5C16F849B5FCA25EECF001010F13001660
5CA2011F14E05E5CA2013F91C8FCA25CA2137FA291CAFCA25BA25B487EB6FCA336337DB2
31>70 D<DB0FF81318DB7FFF13380203B5EAC078913A0FFC03E0F091393FC000F102FFC7
123BD901FC141FD907F815E04948140F49481407EB3F80017F16C049C81203485A5B0003
1780485A485AA248481600A2485A94C7FC127F5BA312FF90CBFCA4480207B512C05DA292
390007F8005FA2160FA25F127F161FA26C6C5D163F6C7E6C6C4A5A6C6C14FF6C6CEB01CF
D801FEEB07872800FFC03F07C7FC90393FFFFC03010F01F0C8FC0101138035377CB43C>
I<020FB512C0A39139000FF000A35EA2151F5EA3153F5EA3157F93C7FCA35D5DA314015D
A314035DA314075DA3140F5DA2123E007F131F485CA2143F485C4849C8FC12C06C13FE38
6001F8387003F0383C0FC0D80FFFC9FCEA03F82A357BB22A>74 D<010FB500C090B5FCA3
9026003FE0C7EA1FE04B1500183E4B143818F0027FEC01C04D5A92C7000EC7FC5F4A5C17
E04A495A4C5A0101020EC8FC5E4A5B16F0010313011503ECF80F4B7E0107133FEDF3FCEC
F1C39138F381FE90380FF7019138FC00FF5C5C49486D7EA24A6D7EA2013F6E7EA24A6D7E
A2137F707E91C7FC707E5B707E5B00014B7EB500FC013F13F85EA240337DB241>I<010F
B512F0A39026003FE0C7FC5DA25DA2147FA292C8FCA25CA25CA21301A25CA21303A25CA2
1307A25CA2130FA25C170C011F151C17185C1738013F153017705C17E0137F160191C7EA
03C0160749EC0F80161F49147F0001913803FF00B8FCA25E2E337DB234>I<010FB612F0
17FE83903B003FC0007FC0EF1FE0EF07F05DEF03F8147FA292C713FCA25CEF07F85CA201
0116F0170F4A15E0EF1FC00103ED3F80EF7F004A14FEEE03FC0107EC1FF091B612C04CC7
FC02F0C9FC130FA25CA2131FA25CA2133FA25CA2137FA291CAFCA25BA25B1201B512FCA3
36337DB231>80 D<010FB67E17F817FE903A003FC001FF9338003FC0EF1FE04B130FEF07
F0147FA292C713F8A25CEF0FF05CA20101ED1FE018C04AEC3F8018000103157E4C5A4AEB
07F0EE3FC049B500FEC7FC16F89138F0007E82010F6E7E707E5C83131FA25CA2013F141F
A25CA2017F143F5F91C7FC180649160E180C49161C00011718B500FC011F133893380FE0
70040713E0C93803FFC09338007F0037357DB23A>82 D<03FF13180207EBE038021FEBF8
7891397F00FCF802FCEB1FF0D901F0130F4948130749481303494814E0A249C71201A201
3E15C0A3137E1780A2017F91C7FC8080EB3FF014FF15F06D13FE6D6D7E6D806D80010080
020F7F1400150F6F7E150315011500A2120CA2001C5D1218A2150100385D003C14035E4B
5A007E4A5A007F141F6D49C7FCD87BE0137C39F9FC03F839F07FFFE0D8E01F138026C003
FEC8FC2D377CB42F>I<0003B812F05A18E0903AF0007F000FD80F8049130390C7140100
0E5C48EE00C01401121800384A1301A2003001031580127000605CA20207140300E01700
C74990C7FCA2140FA25DA2141FA25DA2143FA25DA2147FA292C9FCA25CA25CA21301A25C
A21303A25C497E001FB512FEA334337FB22D>I<EB01F8EB07FE90381F071C90387C03FE
EBF801EA01F00003130048485B5B120F381F80015DEA3F00A21403485C127EA2140700FE
5C5A1640020F1360EDC0E016C0127CEC1FC1023F1380003CEB7F81003EEBEF833A1E01C7
C300390F0787C73907FE03FE3900F800F823227EA029>97 D<133FEA1FFFA25B1200A35B
A21201A25BA21203A25BA21207A2EBE0F8EBE3FF390FEF07809038FC03C001F813E0EBF0
01D81FE013F013C0138015F8123FA21300A248130315F0127EA2140700FE14E05AA2EC0F
C0A2EC1F80007C14005C147E003C137C003E5B381E01F0380F07C06CB4C7FCEA00FC1D35
7EB321>I<147F903803FFC090380FC0F090383F0038137C4913F83801F0013803E00312
07EA0FC090388001F0001F90C7FC123F90C8FCA25A127EA45AA3127C150C151C15386C14
7015E06CEB03C0390F800F003807C07E3801FFF038007F801E227EA021>I<ED01F815FF
A216F01507A316E0A2150FA216C0A2151FA21680A2153FA2D901F81300EB07FE90381F07
7F90387C03FF496C5AEA01F000031300485A495B120F381F8001A2D83F005BA214035A00
7E5CA2140712FE485C1640020F136016E0EDC0C0127CEC1FC1023F1380003CEB7F81003E
EBEF833A1E01C7C300390F0787C73907FE03FE3900F800F825357EB328>I<14FE903807
FF8090381F03C090387C01E03801F800485A485A485A485A1401D83F0013C01403007EEB
0F80ECFE00387FFFF8B5128000FCC8FCA45AA415186C1438007C147015E0003CEB01C000
3EEB07806CEB1E00380F80FC3803FFE0C690C7FC1D227DA024>I<ED0F80ED3FE0ED7870
913801F0F815E31403A2020713F0A291380FC1C0EDC000A4141F5DA4143F92C7FC011FB5
12805B1600D9007FC7FC147EA414FE5CA513015CA413035CA413075CA4130F5CA45C131F
A291C8FC121CEA7F1E133EA2EAFE3C5B1278EA70F0EA3FC0EA0F8025457CB425>I<EC1F
80EC7FE0903901F071C0903907C03FE090380F801F90381F000F5B137E017C14C013FC48
48131FA248481480A2153F1207491400A25DA249137EA215FEA25DA214013803E0034A5A
3801F01F3800F83BEB3FF390380FC3F0EB00031407A25DA2140F001C5C127F4A5A143F00
FE91C7FC147E387801FC383C03F0381FFFC0D803FEC8FC23317FA025>I<EB07E0EA03FF
A25CEA001FA35CA3133F91C8FCA35B137EA313FE9038FC0FE0EC3FF8ECF07E3901FFC03F
EC001F5B49148012035B5B153F000715005BA25D000F147E5B15FE5D121FEB8001EDF808
161C003F01031318010013F01638020713304814E0007E1570020313E0EDE1C000FE9038
01E38048903800FF000038143C26357DB32C>I<EB01C0EB07E014F0130F14E01307EB03
8090C7FCAA13F0EA03FCEA071EEA0E1F121C123800301380EB3F00127012605BEAE07EEA
40FE12005B12015BA212035B12071420EBE070000F136013C014E014C0EA1F80EA0F81EB
8380EB8700EA078EEA03FCEA00F014337EB11A>I<EB1F80EA07FF5A1400C67EA3137EA2
13FEA25BA21201A25BA21203A25BA21207A25BA2120FA25BA2121FA25BA2123FA290C7FC
A25AA2127E1304EAFE0E130C12FCA2131C131812F81338EA7C701360EA3FE0EA0F801135
7DB317>108 D<D801E001FEEB07F03C07F803FF801FFC3C0E3E0F07E0783F001C903B3C
03F1E01F803C181F7001F3800F003801E0EBF70026303FC001FE14C01270006001805B02
005B0303141FD8E07F4A1480EA407E12000307143F01FE1700495C60030F147E1201494A
13FEF0FC04031F150E00030401130C49028013F8191C033F01031318000717F049020014
38050113704B15E0000F933800F1C049017EEC7F80D80380011CEC1E003F227EA044>I<
D801E013FE3A07F803FF803A0E3E0F07E0001C90383C03F039181F7001003813E026303F
C07F12700060138014001503D8E07F5CEA407E1200150701FE5C5B150F5E120149131FEE
8080EE81C00003023F13804914011603037F13000007147E495CED3E0E5E000FEC1E3849
EB0FF0D80380EB03C02A227EA02E>I<147F903803FFC090380FC1F090383F00F8017C13
7C497F485A48487F1207485A5B001F1580123F90C7FCED3F005A127EA25D157E5A15FE5D
007C5C14014A5A5D6C495A4A5A6C49C7FC380F807E3807C1F83801FFE06C6CC8FC21227E
A025>I<011F131F90397FC07FE09039E3E1E0F09039C3E380783A01C1F7007CD981FE13
3CD983FC133E00035BEB03F0163FEA0707120600025B1200010F147F167E5CA2011F14FE
16FC5CA2013FEB01F8A291380003F016E0491307ED0FC002801380ED1F009038FFC03E90
38FEE0F89038FC7FE0EC1F80000190C8FCA25BA21203A25BA21207A25BB57EA3283083A0
27>I<3903E003E0390FF81FF8391C7C3C1C0018EB703E39383EE0FE38303FC0EB7F8000
70EB00FCEA607E157000E01400EAC0FEEA40FC1200A212015BA312035BA312075BA3120F
5BA3121F5B0007C8FC1F227EA023>114 D<EB01FCEB0FFF90383E03C090387800E04913
603901E001E014030003130713C013E0EC03806DC7FC13FF14F014FC6C7F6C7F6D138013
0F9038007FC0141F140F007E130700FE1480A3EC0F005A00C0131E6C5B00705B383C01F0
380FFFC0D803FEC7FC1B227CA024>I<EB0380EB0FC0A3131FA21480A2133FA21400A25B
A2137E387FFFFEA2B5FC3800FC00A21201A25BA21203A25BA21207A25BA2120FA25B1408
001F131C14181380143814701460EB00E0EB01C0380F8380EB8700EA07FEEA01F817307F
AE1C>I<13F8D803FEEB01C0D8070FEB03E0000EEB8007121C001813C00038140FEA301F
0070018013C01260013F131F00E0130000401580C65A017E133F13FE491400A25D120149
137E1602EDFE0716064913FCA2160E0201130C9039F803F81C1618000090380F7C38D97C
1C137090393FF81FE0903907E0078028227EA02C>I<01F0130ED803FC131FD8071EEB3F
80EA0E1F121C0038EB801F0030140F013F130700701300006014035BD8E07E14001240EA
00FE495B000114065BA2150E0003140C5B151C15181538491330157015606D13E04A5A00
01495A6D48C7FC3800FC1EEB3FF8EB07E021227EA025>I<01F01507D803FC903903800F
80D8071E903907C01FC0D80E1F130F121C00380180140F0030021F1307013FEC80030070
13000060160149133FD8E07E168000401500EA00FE494913030001170049137EA203FE5B
00031606495B170E170CA24B131C4915186D15384A6C5B17600001010314E03B00F8077E
01C0903A7C0E3F078090273FFC0FFEC7FC903907F001F832227EA037>I<90391F801F80
90397FE07FE09039E0F0E0703A01C0F9C0F83903807D833807007F000E1403000C15F000
1C137E0018EC01C002FEC7FC00385B1210C7FC13015CA31303A25C1640010714E016C000
1C5B007E1401010F148000FE1403011FEB0700011B130E39F839F01C397070F878393FE0
7FE0390F801F8025227EA02C>I<13F0D803FCEB01C0D8071EEB03E0D80E1F1307121C00
3813800030140F013F14C000701300126049131FD8E07E14801240EA00FE49133F000115
005BA25D0003147E5BA215FE5D5BA214015DEBF00314070001130F3900F83FF0EB3FFBEB
0FC3EB00075DA20007130FD81F805B003F495AA24AC7FCEB007E003E137C00385B381803
F0381E07C0D807FFC8FCEA01F823317EA026>I<903807800390381FE00790383FF00690
387FF80E9038FFFC1C48EBFE789038E03FF03803800190C712E0EC01C0C7EA0380EC0700
140E143C14705C495A495A49C7FC130E133C0170130C49131C484813184848133848C712
78D80EC013F0380FFE03391F3FFFE0D8381F13C0486C1380D86007130038E003FE38C000
F020227DA024>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmmi7 7 3
/Fh 3 115 df<130E131F5BA2133E131C90C7FCA7EA03E0487EEA0C78EA187C1230A212
605B12C0A2EA01F0A3485AA2485AA2EBC180EA0F81A2381F0300A213066C5A131CEA07F0
6C5A11287DA617>105 D<137CEA0FFCA2EA00F8A21201A213F0A21203A213E0A21207A2
13C0A2120FA21380A2121FA21300A25AA2123EA2127EA2EA7C18A3EAF830A21320EA7860
13C0EA3F80EA0F000E297EA715>108 D<3807803E390FE0FF803818F3C13930F703C0EB
FE073860FC0F13F8158039C1F0070091C7FC1201A2485AA4485AA4485AA448C8FCA2120E
1A1B7D991F>114 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmmi10 10 28
/Fi 28 122 df<121C127FEAFF80A5EA7F00121C0909798817>58
D<0103B7FC4916E018F8903B0007F80007FE4BEB00FFF03F80020FED1FC0180F4B15E0F0
07F0021F1503A24B15F81801143F19FC5DA2147FA292C8FCA25C18035CA2130119F84A15
07A2130319F04A150FA2010717E0181F4A16C0A2010FEE3F80A24AED7F00187E011F16FE
4D5A4A5D4D5A013F4B5A4D5A4A4A5A057FC7FC017F15FEEE03FC91C7EA0FF049EC7FC0B8
C8FC16FC16C03E397DB845>68 D<0103B6FC5B5E90260007FCC8FC5D5D140FA25DA2141F
A25DA2143FA25DA2147FA292C9FCA25CA25CA21301A25CA21303A25CA2130718404A15C0
A2010F150118804A1403A2011F16005F4A1406170E013F151E171C4A143C177C017F5D16
0391C7120F49EC7FF0B8FCA25F32397DB839>76 D<902603FFF891381FFFF8496D5CA2D9
0007030113006FEC007C02061678DA0EFF157081020C6D1460A2DA1C3F15E0705CEC181F
82023815016F6C5C1430150702706D1303030392C7FC02607FA2DAE0015C701306ECC000
8201016E130EEF800C5C163F0103EDC01C041F131891C713E0160F49EDF0381830010614
0717F8010E02031370EFFC60130CEE01FE011C16E004005B011815FF177F133860013015
3FA20170151F95C8FC01F081EA07FCB512E01706A245397DB843>78
D<92391FE00380DBFFFC130002036D5A91390FE01F8F91393F0007DF027EEB01FE02F813
00495A4948147E177C4948143C495AA2011F153891C8FCA3491530A28094C7FC80806D7E
14FEECFFE06D13FE6DEBFFC06D14F06D806D80021F7F02037FEC003F03037F1500167F16
3F161FA3120C160FA2001C151F94C7FCA3003C153EA25E003E5D127E007F4A5A6D495A6D
EB0FC0D8F9F0495AD8F0FE01FEC8FC39E03FFFF8010F13E0D8C00190C9FC313D7CBA33>
83 D<0003B812FEA25A903AF8003FC00101C0913880007E4848163C90C7007F141C121E
001C92C7FCA2485CA200305C007017180060130112E0485CA21403C716005DA21407A25D
A2140FA25DA2141FA25DA2143FA25DA2147FA292C9FCA25CA25CA21301A25CA21303A25C
EB0FFC003FB6FC5AA237397EB831>I<147E903803FF8090390FC1C38090391F00EFC001
7E137F49133F485A4848EB1F8012075B000F143F48481400A2485A5D007F147E90C7FCA2
15FE485C5AA214015D48150CA21403EDF01C16181407007C1538007E010F1330003E131F
027B13706C01E113E03A0F83C0F9C03A03FF007F80D800FCEB1F0026267DA42C>97
D<133FEA1FFFA3C67E137EA313FE5BA312015BA312035BA31207EBE0FCEBE3FF9038E707
C0390FFE03E09038F801F001F013F8EBE000485A15FC5BA2123F90C7FCA214015A127EA2
140312FE4814F8A2140715F05AEC0FE0A215C0EC1F80143F00781400007C137E5C383C01
F86C485A380F07C06CB4C7FCEA01FC1E3B7CB924>I<EC3FC0903801FFF0903807E03C90
380F800E90383F0007017E131F49137F484813FF485A485A120F4913FE001F1438484813
00A2127F90C8FCA35A5AA45AA315031507007E1406150E003E143C003F14706C14E0390F
8007C03907C03F003801FFF838003FC020267DA424>I<163FED1FFFA3ED007F167EA216
FEA216FCA21501A216F8A21503A216F0A21507A2027E13E0903803FF8790380FC1CF9038
1F00EF017EEB7FC049133F485A4848131F000715805B000F143F485A1600485A5D127F90
C7127EA215FE5A485CA21401A248ECF80CA21403161CEDF0181407007C1538007E010F13
30003E131F027B13706C01E113E03A0F83C0F9C03A03FF007F80D800FCEB1F00283B7DB9
2B>I<EC3FC0903801FFF0903807E07890381F801C90387E001E49130E485A485A120748
5A49131E001F141C153C484813F8EC03E0007FEB3FC09038FFFE0014E090C8FC5A5AA700
7E140315071506003E140E153C6C14706C6C13E0EC07C03903E03F003801FFF838003FC0
20267DA427>I<16F8ED03FEED0F8792381F0F80ED3E3F167F157CA215FC1700161C4A48
C7FCA414035DA414075DA20107B512F0A39026000FE0C7FC5DA4141F5DA4143F92C8FCA4
5C147EA514FE5CA413015CA4495AA45C1307A25C121E123F387F8F80A200FF90C9FC131E
12FEEA7C3CEA7878EA1FF0EA07C0294C7CBA29>I<EC07E0EC1FF891387C1C38903901F8
0EFC903803F007903807E003EB0FC090381F8001D93F0013F85B017E130313FE16F0485A
150712034914E0A2150F12074914C0A2151FA2491480A2153FA2160000035C6D5B00015B
4A5A3900F8077E90387C1EFEEB1FF8903807E0FC90C7FC1401A25DA21403001E5C123F38
7F80075D00FF495A49485A4849C7FC007C137E383C01F8381FFFE0000390C8FC26367FA4
28>I<EB03F0EA01FFA3EA00075CA3130F5CA3131F5CA3133F91C9FCA35B90387E03F8EC
0FFF91383C0F809039FEF007C0D9FDC07FEBFF80EC0003485A5BA249130712035BA2150F
00075D5BA2151F000F5D5B153F93C7FC121F4990387F0180157EEDFE03003F02FC130090
C7FC5EEDF80648150E007E150C161C5E00FEEC787048EC3FE00038EC0F80293B7CB930>
I<14E0EB03F8A21307A314F0EB01C090C7FCAB13F8EA03FEEA070F000E1380121C121812
381230EA701F1260133F00E0130012C05BEA007EA213FE5B1201A25B12035BA200071318
13E01438000F133013C01470EB806014E014C01381EB838038078700EA03FEEA00F81539
7EB71D>I<EB0FC0EA03FF5AA2EA001F1480A2133FA21400A25BA2137EA213FEA25BA212
01A25BA21203A25BA21207A25BA2120FA25BA2121FA25BA2123FA290C7FCA25AA2EA7E03
A2EAFE07130612FCA2130E130C131C1318EA7C38EA3C70EA1FE0EA0780123B7DB919>
108 D<D803E0017F14FE3D07F801FFE003FFC03D0E3C0781F00F03E03D1C3E1E00F83C01
F026383F38D9FC707F00304914E04A90387DC000007049EB7F8000604991C7FCA200E090
C700FE1301485A017E5CA200000201140301FE5F495CA203031407000160495C180F0307
5D1203494A011F13601980030F023F13E00007F000C0495C1901031F023E1380000F1803
494A150061033F150E001FEF1E1C4991C7EA0FF80007C7000EEC03E043267EA449>I<D8
03E0137F3A07F801FFE03A0E3C0781F03A1C3E1E00F826383F387F00305B4A137C00705B
00605BA200E090C712FC485A137EA20000140101FE5C5BA2150300015D5B15075E120349
010F133016C0031F13700007ED80605B17E0EE00C0000F15014915801603EE0700001FEC
0F0E49EB07FC0007C7EA01F02C267EA432>I<EC1FC0ECFFF8903807E07E90380F801F90
393F000F80017E14C0491307484814E0485A4848EB03F0120F5B121F48481307A2127F90
C7FCA2150F5A4815E0A2151F16C0A248EC3F8016005D157E007E5C4A5A003E495A003F49
5A6C495A6C6C48C7FC3807E07E3801FFF038003F8024267DA428>I<90390F8003F09039
1FE00FFC903939F03C1F903A70F8700F80903AE0FDE007C09038C0FF80030013E0000149
1303018015F05CEA038113015CA2D800031407A25CA20107140FA24A14E0A2010F141F17
C05CEE3F80131FEE7F004A137E16FE013F5C6E485A4B5A6E485A90397F700F80DA383FC7
FC90387E1FFCEC07E001FEC9FCA25BA21201A25BA21203A25B1207B512C0A32C3583A42A
>I<3903E001F83907F807FE390E3C1E07391C3E381F3A183F703F800038EBE07F0030EB
C0FF00705B00601500EC007E153CD8E07F90C7FCEAC07EA2120013FE5BA312015BA31203
5BA312075BA3120F5BA3121F5B0007C9FC21267EA425>114 D<14FF010313C090380F80
F090383E00380178131C153C4913FC0001130113E0A33903F000F06D13007F3801FFE014
FC14FF6C14806D13C0011F13E013039038003FF014071403001E1301127FA24814E0A348
EB03C012F800E0EB07800070EB0F006C133E001E13F83807FFE0000190C7FC1E267CA427
>I<EB01C0497E1307A4130F5CA3131F5CA3133F91C7FC007FB51280A2B6FCD8007EC7FC
A313FE5BA312015BA312035BA312075BA3120FEBC006A2140E001F130CEB801C14181438
5C146014E0380F81C038078780D803FEC7FCEA00F819357EB31E>I<13F8D803FE1438D8
070F147C000E6D13FC121C1218003814011230D8701F5C12601503EAE03F00C001005B5B
D8007E1307A201FE5C5B150F1201495CA2151F120349EC80C0A2153F1681EE0180A2ED7F
0303FF130012014A5B3A00F8079F0E90397C0E0F1C90393FFC07F8903907F001F02A267E
A430>I<01F8EB03C0D803FEEB07E0D8070F130F000E018013F0121C1218003814070030
1403D8701F130112601500D8E03F14E000C090C7FC5BEA007E16C013FE5B150100011580
5B150316001203495B1506150E150C151C151815385D00015C6D485A6C6C485AD97E0FC7
FCEB1FFEEB07F024267EA428>I<01F816F0D803FE9138E001F8D8070F903801F003000E
D9800314FC121C12180038020713010030EDE000D8701F167C1260030F143CD8E03F1638
00C001005B5BD8007E131F183001FE5C5B033F1470000117604991C7FCA218E000034A14
C049137E17011880170318005F03FE1306170E000101015C01F801BF5B3B00FC039F8070
903A7E0F0FC0E0903A1FFC03FFC0902703F0007FC7FC36267EA43B>I<903907E001F090
391FF807FC9039783E0E0F9039E01F1C1FD801C09038383F803A03800FF07F0100EBE0FF
5A000E4A1300000C157E021F133C001C4AC7FC1218A2C7123FA292C8FCA25CA2147EA214
FEA24A130CA20101141C001E1518003F5BD87F81143801835C00FF1560010714E03AFE0E
7C01C0D87C1C495A2778383E0FC7FC391FF00FFC3907C003F029267EA42F>I<13F8D803
FE1470D8070F14F8000EEB8001121C121800381403003015F0EA701F1260013F130700E0
010013E012C05BD8007E130F16C013FE5B151F000115805BA2153F000315005BA25D157E
A315FE5D1401000113033800F80790387C1FF8EB3FF9EB0FE1EB00035DA2000E1307D83F
805B007F495AA24A5A92C7FCEB003E007C5B00705B6C485A381E07C06CB4C8FCEA01FC25
367EA429>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmsy10 10 3
/Fj 3 14 df<007FB81280B912C0A26C17803204799641>0 D<121C127FEAFF80A5EA7F
00121C0909799917>I<923803FFC0033F13FC4AB67E020715E0913A1FFE007FF8DA7FE0
EB07FE4AC87ED903FCED3FC0D907F0ED0FE0D90FC0ED03F049486F7E49CA7E017E177E49
8349834848EF0F80000319C04917074848EF03E0000F19F049170148CC12F8A2001E1978
003E197CA2003C193C007C193EA20078191EA300F8191FA248190FAA6C191FA20078191E
A3007C193EA2003C193C003E197CA2001E1978001F19F8A26C6CEF01F06D1703000719E0
6C6CEF07C06D170F000119806C6CEF1F006D5F017E177E6D5F6D6C4B5A6D6C4B5AD907F0
ED0FE0D903FCED3FC0D900FF03FFC7FCDA7FE0EB07FEDA1FFEEB7FF80207B612E0020115
80DA003F01FCC8FC030313C0484E7BBB53>13 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk cmcsc10 10 1
/Fk 1 115 df<B67E15F03907F800FE6C48133FED0FC06F7EA26F7E82A65E4B5AA24B5A
033FC7FC15FE90B512F05D9038F001F8EC007E816F7EA26F7EA582A4171816F015071738
486C903803F830B5D8C00113709238007FE0C9EA1F802D2C7CAA32>114
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fl cmti10 10 21
/Fl 21 122 df<387FFFF8A2B5FCA214F0150579941E>45 D<120EEA3F80127F12FFA313
00127E123C0909778819>I<14F8EB07FE90381F871C90383E03FE137CEBF80112014848
6C5A485A120FEBC001001F5CA2EA3F801403007F5C1300A21407485C5AA2140F5D48ECC1
C0A2141F15831680143F1587007C017F1300ECFF076C485B9038038F8E391F0F079E3907
FE03FC3901F000F0222677A42A>97 D<133FEA1FFFA3C67E137EA313FE5BA312015BA312
035BA31207EBE0F8EBE7FE9038EF0F80390FFC07C013F89038F003E013E0D81FC013F0A2
1380A2123F1300A214075A127EA2140F12FE4814E0A2141F15C05AEC3F80A215005C147E
5C387801F8007C5B383C03E0383E07C0381E1F80D80FFEC7FCEA01F01C3B77B926>I<14
7F903803FFC090380FC1E090381F0070017E13784913383901F801F83803F003120713E0
120FD81FC013F091C7FC485AA2127F90C8FCA35A5AA45AA3153015381578007C14F0007E
EB01E0003EEB03C0EC0F806CEB3E00380F81F83803FFE0C690C7FC1D2677A426>I<ED01
F815FFA3150316F0A21507A216E0A2150FA216C0A2151FA21680A2153FA202F81300EB07
FE90381F877F90383E03FF017C5BEBF80112013803F00048485B120FEBC001121F5DEA3F
801403127F01005BA214075A485CA2140FA248ECC1C0A2141F15C3ED8380143F1587007C
017F1300ECFF076C485B9038038F8E391F0F079E3907FE03FC3901F000F0253B77B92A>
I<147F903803FFC090380FC1E090383F00F0017E13785B485A485A485A120F4913F8001F
14F0383F8001EC07E0EC1F80397F81FF00EBFFF891C7FC90C8FC5A5AA55AA21530007C14
381578007E14F0003EEB01E0EC03C06CEB0F806CEB3E00380781F83803FFE0C690C7FC1D
2677A426>I<EC07C0EC3FF09138FC38E0903901F01FF0EB03E0903807C00FEB0F80011F
1307D93F0013E05B017E130F13FE4914C01201151F1203491480A2153F1207491400A25D
A249137EA215FEA25D00031301140314076C6C485A0000131FEB787BEB3FF390380FC3F0
EB00031407A25DA2140F5D121C007E131F5D00FE49C7FC147E5C387801F8387C07E0381F
FF80D803FEC8FC24367CA426>103 D<EB01C0EB07E014F0130F14E01307EB038090C7FC
AB13F0EA03FCEA071EEA0E1F121CA212385B1270A25BEAF07E12E013FEC65AA212015B12
03A25B12075BA2000F13E013C013C1001F13C01381A2EB83801303EB0700A2130E6C5AEA
07F8EA01E0143879B619>105 D<EB0FC0EA07FFA3EA001F1480A2133FA21400A25BA213
7EA213FEA25BA21201A25BA21203A25BA21207A25BA2120FA25BA2121FA25BA2123FA290
C7FCA25AA2EA7E0EA212FE131EEAFC1CA2133C133812F81378EA7870EA7CE0121FEA0F80
123B79B915>108 D<D801E001FEEB07F03C07F803FF801FFC3C0E3C0F07C0783E3C1E3E
3C03E1E01F261C1F78D9F3C013803C383FF001F7800F02E01400007801C013FE007018C0
02805B4A4848EB1F80EAF07FD8E07E5CA200000207143F01FE1700495CA2030F5C000117
7E495C18FE031F5C120349DA8001131C18F8033F153C00070403133849020013F0A24B15
70000F17E049017E15F019E003FEECE1C0001FEE01E34949903800FF000007C70038143C
3E2679A444>I<D801E013FE3A07F803FF803A0E3C0F07C03A1E3E3C03E0261C1F787F39
383FF00114E0007813C000708114804A485AEAF07FEAE07EA20000140701FE5C5BA2150F
00015D5B151F5E12034990383F8380160316070007027F130049137EA2160E000F147C49
141E161C5E001FEC3C7849EB1FE00007C7EA0780292679A42F>I<147F903803FFC09038
0FC1F090381F00F8017E137C5B4848137E4848133E0007143F5B120F485AA2485A157F12
7F90C7FCA215FF5A4814FEA2140115FC5AEC03F8A2EC07F015E0140F007C14C0007EEB1F
80003EEB3F00147E6C13F8380F83F03803FFC0C648C7FC202677A42A>I<9039078007C0
90391FE03FF090393CF0787C903938F8E03E9038787FC00170497EECFF00D9F0FE148013
E05CEA01E113C15CA2D80003143FA25CA20107147FA24A1400A2010F5C5E5C4B5A131F5E
EC80035E013F495A6E485A5E6E48C7FC017F133EEC70FC90387E3FF0EC0F8001FEC9FCA2
5BA21201A25BA21203A25B1207B512C0A3293580A42A>I<3903C003F0390FF01FFC391E
783C0F381C7C703A3C3EE03F8038383FC0EB7F800078150000701300151CD8F07E90C7FC
EAE0FE5BA2120012015BA312035BA312075BA3120F5BA3121F5BA3123F90C9FC120E2126
79A423>114 D<14FE903807FF8090380F83C090383E00E04913F00178137001F813F000
01130313F0A215E00003EB01C06DC7FC7FEBFFC06C13F814FE6C7F6D13807F010F13C013
00143F141F140F123E127E00FE1480A348EB1F0012E06C133E00705B6C5B381E03E06CB4
5AD801FEC7FC1C267AA422>I<EB0380EB07C0130FA4131F1480A3133F1400A35B137E00
7FB5FCA2B6FC3800FC00A312015BA312035BA312075BA3120F5BA3121FEB801CA2143C00
3F1338EB0078147014F014E0EB01C0EA3E03381F0780380F0F00EA07FCEA01F0183579B3
1C>I<13F8D803FEEB01C0D8078FEB03E0390E0F8007121E121C0038140F131F007815C0
1270013F131F00F0130000E015805BD8007E133FA201FE14005B5D120149137EA215FE12
0349EBFC0EA20201131E161C15F813E0163CD9F003133814070001ECF07091381EF8F03A
00F83C78E090393FF03FC090390FC00F00272679A42D>I<01F0130ED803FC133FD8071E
EB7F80EA0E1F121C123C0038143F49131F0070140FA25BD8F07E140000E08013FEC6485B
150E12015B151E0003141C5BA2153C000714385B5DA35DA24A5A140300035C6D48C7FC00
01130E3800F83CEB7FF8EB0FC0212679A426>I<903907E007C090391FF81FF89039787C
383C9038F03E703A01E01EE0FE3803C01F018013C0D8070014FC481480000E1570023F13
00001E91C7FC121CA2C75AA2147EA214FEA25CA21301A24A1370A2010314F016E0001C5B
007E1401010714C000FEEC0380010F1307010EEB0F0039781CF81E9038387C3C393FF03F
F03907C00FC027267CA427>120 D<13F0D803FCEB01C0D8071EEB03E0D80E1F1307121C
123C0038140F4914C01270A249131FD8F07E148012E013FEC648133F160012015B5D0003
147E5BA215FE00075C5BA214015DA314035D14070003130FEBF01F3901F87FE038007FF7
EB1FC7EB000F5DA2141F003F5C48133F92C7FC147E147C007E13FC387001F8EB03E06C48
5A383C1F80D80FFEC8FCEA03F0233679A428>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fm cmbx12 12 40
/Fm 40 122 df<EA07C0EA1FF0EA3FF8EA7FFC12FF13FEA213FFA47E7E7EEA07CFEA000F
A2131F131EA2133EA2133C137C13F8A2EA01F0120313E0EA07C0EA1F801300121E120C10
22788E1F>44 D<B612F8A91D097F9A25>I<EC03C01407141F147FEB03FF133FB6FCA413
C3EA0003B3B3ADB712FCA5264177C038>49 D<ECFFE0010F13FE013F6D7E90B612E00003
15F82607FC0313FE3A0FE0007FFFD81F806D138048C7000F13C0488001C015E001F07F00
FF6E13F07F17F881A46C5A6C5A6C5AC9FC17F05DA217E05D17C04B13804B1300A2ED1FFC
4B5A5E4B5A4B5A4A90C7FC4A5A4A5AEC0FF04A5AEC3F804AC7127814FE495A494814F8D9
07E014F0495A495A49C8FC017C140149140348B7FC4816E05A5A5A5A5AB8FC17C0A42D41
7BC038>I<ECFFF0010713FF011F14C0017F14F049C66C7ED803F8EB3FFED807E06D7E81
D80FF86D138013FE001F16C07FA66C5A6C4815806C485BC814005D5E4B5A4B5A4B5A4A5B
020F1380902607FFFEC7FC15F815FF16C090C713F0ED3FFCED0FFEEEFF80816F13C017E0
A26F13F0A217F8A3EA0FC0EA3FF0487EA2487EA217F0A25D17E06C5A494913C05BD83F80
491380D81FF0491300D80FFEEBFFFE6CB612F800015D6C6C14C0011F49C7FC010113E02D
427BC038>I<163FA25E5E5D5DA25D5D5D5DA25D92B5FCEC01F7EC03E7140715C7EC0F87
EC1F07143E147E147C14F8EB01F0EB03E0130714C0EB0F80EB1F00133E5BA25B485A485A
485A120F5B48C7FC123E5A12FCB91280A5C8000F90C7FCAC027FB61280A531417DC038>
I<0007150301E0143F01FFEB07FF91B6FC5E5E5E5E5E16804BC7FC5D15E092C8FC01C0C9
FCAAEC3FF001C1B5FC01C714C001DF14F09039FFE03FFC9138000FFE01FC6D7E01F06D13
804915C0497F6C4815E0C8FC6F13F0A317F8A4EA0F80EA3FE0487E12FF7FA317F05B5D6C
4815E05B007EC74813C0123E003F4A1380D81FC0491300D80FF0495AD807FEEBFFFC6CB6
12F0C65D013F1480010F01FCC7FC010113C02D427BC038>I<4AB47E021F13F0027F13FC
49B6FC01079038807F8090390FFC001FD93FF014C04948137F4948EBFFE048495A5A1400
485A120FA248486D13C0EE7F80EE1E00003F92C7FCA25B127FA2EC07FC91381FFF8000FF
017F13E091B512F89039F9F01FFC9039FBC007FE9039FF8003FF17804A6C13C05B6F13E0
A24915F0A317F85BA4127FA5123FA217F07F121FA2000F4A13E0A26C6C15C06D4913806C
018014006C6D485A6C9038E01FFC6DB55A011F5C010714C0010191C7FC9038003FF02D42
7BC038>I<121E121F13FC90B712FEA45A17FC17F817F017E017C0A2481680007EC8EA3F
00007C157E5E00785D15014B5A00F84A5A484A5A5E151FC848C7FC157E5DA24A5A14035D
14074A5AA2141F5D143FA2147F5D14FFA25BA35B92C8FCA35BA55BAA6D5A6D5A6D5A2F44
7AC238>I<EC7FF00103B5FC010F14C0013F14F090397F801FFC3A01FC0003FE48486D7E
497F4848EC7F80163F484815C0A2001F151FA27FA27F7F01FE143F6D158002C0137F02F0
14006C01FC5B6E485A6C9038FF83FCEDE7F86CECFFE06C5D6C92C7FC6D14C06D80010F14
F882013F8090B7FC48013F14802607FC0F14C0260FF80314E04848C6FC496D13F0003F14
1F48481307496D13F8150000FF157F90C8123F161F160FA21607A36D15F0127F160F6D15
E06C6C141F6DEC3FC06C6CEC7F80D80FFE903801FF003A07FFC00FFE6C90B55AC615F001
3F14C0010F91C7FC010013F02D427BC038>I<EC7FF0903807FFFE011F6D7E017F14E090
39FFE03FF0489038800FF848496C7E48488048486D7E001F80003F1680A2484815C08117
E0A212FF17F0A617F8A45D127FA3003F5CA26C7E5D6C6C5B12076C6C133E6CEBC07C6CEB
FFF8013F5B010F01C013F00101130090C8FCA217E05DA2EA03C0D80FF015C0487E486C49
1380A217004B5A150F5E49495A6C48495A01C0EBFFE0260FF0035B6CB65A6C4AC7FC6C14
F86C6C13E0D907FEC8FC2D427BC038>I<EE1F80A24C7EA24C7EA34C7EA24B7FA34B7FA2
4B7FA34B7F169F031F80161F82033F80ED3E07037E80157C8203FC804B7E02018115F082
0203814B137F0207815D173F020F814B7F021F8292C77EA24A82023E80027E82027FB7FC
A291B87EA2498302F0C8FCA20103834A157F0107834A153FA249488284011F8491C97E49
84133E017E82B6020FB612F0A54C457CC455>65 D<B9FC18F018FE727E19E026003FFCC7
00077F05017F716C7E727E727EA2721380A37213C0A74E1380A24E1300A24E5A4E5A4E5A
4D5B05075B94B5128091B700FCC7FC18F018FF19E002FCC7000113F8716C7EF01FFE727E
7213801AC07213E0A27213F0A31AF8A71AF0A2601AE0604E13C0604E138095B512000507
5BBA12F86119C04EC7FC18E045447CC350>I<DCFFF01470031F01FF14F04AB6EAE00102
07EDF803023FEDFE0791B539E001FF0F4949C7EA3F9F010701F0EC0FFF4901C0804990C8
7E4948814948814948167F4849163F4849161F5A4A160F485B19074890CAFC19035A5BA2
007F1801A34994C7FC12FFAE127F7F1AF0A2123FA27F6C18011AE06C7F19036C6D17C06E
16077E6C6DEE0F806C6DEE1F006D6C5E6D6C167E6D6C6C5D6D6D4A5A6D01F0EC07F00101
01FEEC1FE06D903AFFF001FF80023F90B6C7FC020715FC020115F0DA001F1480030001F8
C8FC44467AC451>I<BA12F8A485D8001F90C71201EF003F180F180318011800A2197E19
3EA3191EA21778A285A405F890C7FCA316011603161F92B5FCA5ED001F160316011600A2
F101E01778A2F103C0A494C7FC1907A21A80A2190FA2191FA2193FF17F0061601807181F
4DB5FCBBFC61A443447DC34A>69 D<BA1280A419C026003FFEC7121F1701EF007F183F18
1F180F180719E01803A31801A3EE01E0F000F0A419001603A31607160F167F91B6FCA591
38FE007F160F16071603A31601A693C9FCAFB712F0A53C447CC346>I<B7D88003B612FE
A526003FFEC9EBF800B3A791B9FCA54AC9FCB3AAB7D88003B612FEA54F447CC358>72
D<B712E0A5D8001F90C7FCB3B3B3A4B712E0A523447DC32A>I<B9FC18F018FE727E19E0
D8001F90C7000F7F05017F716C7E727E727E721380A21AC084A21AE0A91AC0A24E1380A2
1A00604E5A4E5A4D485A050F5B92B712C096C7FC18FC18C092CBFCB3A7B712E0A543447D
C34D>80 D<B812F8EFFFC018F818FE727ED8001F90C7003F13E005037F05007F727E727E
727EA28684A286A762A24E90C7FCA24E5A61187F943801FFF005075B053F138092B7C8FC
18F818E018F892C77FEF3FFF050F7F717F717FA2717FA2717FA785A61B0F85A2187F7313
1F72141EB700E06DEB803E72EBE0FC72EBFFF8060114F0726C13E0CC0007138050457DC3
54>82 D<B600FE017FB691B512FEA526007FFCC8D83FFEC9EA7C006E82013F7017788074
15F86D705F6F7014016D705FA26F7014036D64814E6D14076D646F70140F6D041E94C7FC
A26F023E6D5C6DDC3C7F151E81027F037C6D5CF0783F6F70147C023F4B6C1578A26F0101
6F13F86E4B6C5D16806E02036F485A4E7E04C0EEE0036E4A486C5DA2DCE00FEDF0076E4B
6C5D16F06E4A6F48C8FC051E7F04F8705A6E4A027F131EA2DCFC7CEDFE3E037F0178023F
133C04FE16FF033F01F85E4D8004FF17F86F496E5BA36F496E5BA26F604D80A26F90C86C
5BA36F486F90C9FCA26F48167EA30478163C6F457EC374>87 D<903801FFE0011F13FE01
7F6D7E48B612E03A03FE007FF84848EB1FFC6D6D7E486C6D7EA26F7FA36F7F6C5A6C5AEA
00F090C7FCA40203B5FC91B6FC1307013F13F19038FFFC01000313E0000F1380381FFE00
485A5B127F5B12FF5BA35DA26D5B6C6C5B4B13F0D83FFE013EEBFFC03A1FFF80FC7F0007
EBFFF86CECE01FC66CEB8007D90FFCC9FC322F7DAD36>97 D<EC3FFC49B512C0010F14F0
013F14FC90397FF003FE9039FFC001FF0003495A48494813805B120F485AA2485A6F1300
007F6E5AED00784991C7FCA212FFAC6C7EA3123F6DEC03C0A26C6C1407000F16806D140F
6C6DEB1F006C6D133E6C01F05B3A007FFC03F86DB55A010F14C0010391C7FC9038003FF8
2A2F7CAD32>99 D<EE03FEED07FFA5ED001F160FB1EC3FE0903803FFFC010FEBFF8F013F
14CF9039FFF807FF48EBC00148903880007F4890C7123F4848141F49140F121F485AA312
7F5BA212FFAC127FA37F123FA26C6C141FA26C6C143F0007157F6C6C91B5FC6CD9C00314
FC6C9038F01FEF6DB5128F011FEBFE0F010713F89026007FC0EBF80036467CC43E>I<EC
3FF80103B57E010F14E0013F8090397FF83FF89039FFC007FC48496C7E48496C7E48486D
1380485A001FED7FC05B003FED3FE0A2127F5B17F0161F12FFA290B7FCA401F0C9FCA512
7FA27FA2123F17F06C7E16016C6C15E06C6C14036C6DEB07C06C6DEB0F806C01F0EB3F00
90397FFE01FE011FB55A010714F0010114C09026001FFEC7FC2C2F7DAD33>I<EDFF8002
0F13E0027F13F049B512F849EB8FFC90390FFE0FFE90381FFC1F14F8133FEB7FF0A2ED0F
FCEBFFE0ED03F0ED00C01600ABB612F8A5C601E0C7FCB3B0007FEBFFE0A527467DC522>
I<DAFFE0137E010F9039FE03FF80013FEBFF8F90B812C048D9C07F133F489038001FF848
48EB0FFC4848903907FE1F80001F9238FF0F00496D90C7FCA2003F82A8001F93C7FCA26D
5B000F5D6C6C495A6C6C495A6C9038C07FF04890B55A1680D8078F49C8FC018013E0000F
90CAFCA47F7F7F90B612C016FC6CEDFF8017E06C826C16FC7E000382000F82D81FF0C77E
D83FC014074848020113808248C9FC177FA46D15FF007F17006D5C6C6C4A5A6C6C4A5AD8
0FFEEC3FF83B07FFC001FFF0000190B612C06C6C92C7FC010F14F8D9007F90C8FC32427D
AC38>I<137C48B4FC4813804813C0A24813E0A56C13C0A26C13806C1300EA007C90C7FC
AAEB7FC0EA7FFFA512037EB3AFB6FCA518467CC520>105 D<EB7FC0B5FCA512037EB293
387FFFE0A593380FE0004C5A4CC7FC167E5EED03F8ED07E04B5A4B5A037FC8FC15FEECC1
FCECC3FE14C7ECDFFF91B57E82A202F97F02E17F02C07FEC807F6F7E826F7E816F7F836F
7F816F7F83707E163FB60003B512F8A535457DC43B>107 D<EB7FC0B5FCA512037EB3B3
B3A3B61280A519457CC420>I<90277F8007FEEC0FFCB590263FFFC090387FFF8092B5D8
F001B512E002816E4880913D87F01FFC0FE03FF8913D8FC00FFE1F801FFC0003D99F0090
26FF3E007F6C019E6D013C130F02BC5D02F86D496D7EA24A5D4A5DA34A5DB3A7B60081B6
0003B512FEA5572D7CAC5E>I<90397F8007FEB590383FFF8092B512E0028114F8913987
F03FFC91388F801F000390399F000FFE6C139E14BC02F86D7E5CA25CA35CB3A7B60083B5
12FEA5372D7CAC3E>I<EC1FFC49B512C0010714F0011F14FC90397FF80FFF9026FFC001
7F48496C7F4848C7EA3FE000078248486E7E49140F001F82A2003F82491407007F82A400
FF1780AA007F1700A46C6C4A5AA2001F5E6D141F000F5E6C6C4A5AA26C6C6CEBFFE06C6D
485B27007FF80F90C7FC6DB55A010F14F8010114C09026001FFCC8FC312F7DAD38>I<90
397FC00FF8B590B57E02C314E002CF14F89139DFC03FFC9139FF001FFE000301FCEB07FF
6C496D13804A15C04A6D13E05C7013F0A2EF7FF8A4EF3FFCACEF7FF8A318F017FFA24C13
E06E15C06E5B6E4913806E4913006E495A9139DFC07FFC02CFB512F002C314C002C091C7
FCED1FF092C9FCADB67EA536407DAC3E>I<90387F807FB53881FFE0028313F0028F13F8
ED8FFC91389F1FFE000313BE6C13BC14F8A214F0ED0FFC9138E007F8ED01E092C7FCA35C
B3A5B612E0A5272D7DAC2E>114 D<90391FFC038090B51287000314FF120F381FF00338
3FC00049133F48C7121F127E00FE140FA215077EA27F01E090C7FC13FE387FFFF014FF6C
14C015F06C14FC6C800003806C15806C7E010F14C0EB003F020313E0140000F0143FA26C
141F150FA27EA26C15C06C141FA26DEB3F8001E0EB7F009038F803FE90B55A00FC5CD8F0
3F13E026E007FEC7FC232F7CAD2C>I<EB01E0A51303A41307A2130FA2131FA2133F137F
13FF1203000F90B51280B7FCA4C601E0C7FCB3A3ED01E0A9150302F013C0137F15079039
3FF80F8090391FFC1F006DB5FC6D13FC01015B9038003FE023407EBE2C>I<D97FC049B4
FCB50103B5FCA50003EC000F6C81B3A85EA25EA25E7E6E491380017FD901F713FE9138F8
07E76DB512C7010F1407010313FE9026007FF0EBFC00372E7CAC3E>I<B500FE90383FFF
F0A5C601F0903803E0006D6C495A013F4A5A6D6C49C7FC6E5B6D6C137E6DEB807C6D6D5A
6DEBC1F0EDE3E06DEBF7C06EB45A806E90C8FC5D6E7E6E7F6E7FA24A7F4A7F8291381F3F
FCEC3E1F027C7F4A6C7E49486C7F01036D7F49487E02C08049486C7F49C76C7E013E6E7E
017E141FB500E090B512FCA5362C7EAB3B>120 D<B6903803FFFCA5000101E09038003E
006C163C80017F5D8017F8013F5D6E1301011F5D6E1303010F5D6E13076D5DED800F6D92
C7FC15C05E6DEBE01E163E6D143CEDF07C027F1378EDF8F8023F5B15FD021F5B15FF6E5B
A36E5BA26E90C8FCA26E5AA26E5AA21578A215F85D14015D001F1303D83F805B387FC007
D8FFE05B140F92C9FC5C143E495A387FC1F8EB07F06CB45A6C5B000790CAFCEA01FC3640
7EAB3B>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fn cmbx9 9 44
/Fn 44 123 df<B512FCA816087F931D>45 D<120FEA3FC0EA7FE0EAFFF0A6EA7FE0EA3F
C0EA0F000C0C7A8B19>I<147814F81303131FEA03FFB5FCA3EAFC1F1200B3B2007FB512
FEA41F317AB02C>49 D<EB1FFC90B57E000314E0000F14F8391FE03FFC393F800FFF4848
7E6D6C1380D8FFC014C06D7E16E080A36C5A6C5A6CC7FCC8FC16C05C16805C16004A5A4A
5A5D4A5AEC3FC04A5A02FEC7FC495A495A903907E001E0EB0FC0EB1F8090383E00034914
C05B4848130748B6FC5A5A5A5A5AB71280A423317CB02C>I<EB0FFC90387FFF8048B512
F03903F01FF83907C00FFE380F8007486C6C7E01F01480123F13F8A5D81FF014006C485A
D803805BC7FC4A5A4A5A4A5AECFFC0013F90C7FC14FCECFFC09038001FF0EC0FFC6E7E6E
7E16806E13C0A2000F15E0EA3FC0EA7FE0EAFFF0A416C0A2495AD87FC014804948130000
3F5B391FF01FFE6CB512F8000314E0C61480D91FFCC7FC23327CB02C>I<151F5D5DA25D
5C5C5C5CA25C143D147D14F9EB01F114E1EB03C1EB0781130FEB1F01133E133C137813F0
1201EA03E0EA07C01380EA0F00121E123E5A5AB712FEA4C700031300A80103B512FEA427
317EB02C>I<000C140ED80FE013FE90B5FC5D5D5D5D5D92C7FC14FC14F091C8FC1380A6
EB87FE9038BFFFC090B512F09038FC0FF89038E003FE01C07F497E01001480000E6D13C0
C8FCA216E0A3121FEA7F807F487EA316C05B5CD87F801480D87C0014006C5B393F8007FE
391FE01FFC0007B512F06C14C0C691C7FCEB1FF823327CB02C>I<EC7FC0903803FFF001
0F13FC90383FE07E90387F801F4848485A4848EBFF8048485A13F8120FEA1FF0A2123F6E
13004848133C92C7FCA2142039FFE1FF8001E713E001EF13F89038FE03FC496C7E01F87F
6E13805B16C0A24914E0A5127FA5123F16C0121F6D1480000F5B01F814006C6C485A6C6C
485A6CB55A6C6C5B011F13C0D907FEC7FC23327CB02C>I<123C123F90B612F8A44815F0
16E016C0168016005D007CC7127E00785C4A5A00F8495A48495A4A5A4A5AC7FC4AC7FC14
7E14FE5C13015C1303A2495AA2130FA2131FA25C133FA4137FA96D5AA2010FC8FC25337B
B12C>I<ED1F80A24B7EA24B7EA34B7EA24A7FA34A7FA24A7F15CFA2020F7F1587021F80
1503023F80EC3E01A2027E80EC7C0002FC804A137FA20101814A133F0103814A131FA249
B67EA24981A290271F8000077F91C77EA24982013E80017E82017C80A201FC8249157FB5
00F0013FB512F0A43C347DB343>65 D<B712FEEEFFC017F817FEC69039C0001FFF040713
80040113C0A27013E0A2EF7FF0A6EFFFE0A24C13C0A24C138093380FFE00EE3FFC91B612
F017C017F89139C00007FE933803FF80040013C018E0EF7FF018F8173FA218FCA618F8A2
177FEFFFF04C13E05E040F13C0B912005F17F0178036337DB23F>I<DBFFE01338021F01
FE137891B6EA80F8010315E1010F9038E00FF7903A1FFE0001FFD97FF8EB007FD9FFE014
3F4849141F4849140F4890C81207485A1703485A1701123F5B007F1600A349160012FFAB
127F7F1878A2123F7F001F17F818F06C7E6D15016CEE03E06C7F6C6DEC07C06C6DEC0F80
D97FF8EC3F00D91FFE14FE903A0FFFE007FC010390B512F0010015C0021F49C7FC020013
F035357BB340>I<B812FEA4C69038E0000FEE01FF82838383A283A3DB01E013801707A4
030390C7FCA21507151F91B5FCA4ECE01F1507150318F01501A2EF01E0A392C7FCA21703
A2EF07C0A2170F171F173F17FF1607B91280A434337DB23A>69 D<B812FCA4C69038E000
1FEE03FE16011600177E173EA2171EA3923803C01F170FA403071300A2150F153F91B5FC
A4ECE03F150F1507A21503A592C8FCABB612F8A430337DB238>I<912601FFE01370021F
01FC13F091B61201010315C3010F9038C00FFF90393FFE0003D97FF81300D9FFE0147F48
49143F4849141F4890C8120F485A1707485A1703485AA2007F1601A25B94C8FC12FFA903
03B612C0A2127F7F92C7387FF000A2123FA26C7EA26C7EA26C7E6C7F6C7F6C6D14FFEB7F
F8D93FFE130390390FFFE00F010390B512E301001580021F9038FE0030020101F090C7FC
3A357BB345>I<B612E0A4C6EBE000B3B3A7B612E0A41B337DB221>73
D<B712F8EEFF8017E017F8C69039E0007FFCEE0FFE707E701380A27013C0A218E0A718C0
A24C1380A24C13004C5AEE7FFC91B612F017C04CC7FC02E0C9FCB3B612E0A433337DB23C
>80 D<B712E016FEEEFFC017F0C6D9E00013FCEE1FFEEE07FF707FA2707FA284A660A24C
5B95C7FC4C5AEE1FFCEEFFF891B612C094C8FC83DAE0037F03007FEE3FF083707EA2707E
A583A4193CA2188082F0C07CB6D8E003147870EBE1F070EBFFE0053F13C0CA000313803E
347DB242>82 D<D90FFC137090397FFF80F048B512E1000714FB390FF803FF391FE0007F
4848133F49130F007F140790C7FC1503481401A36D1300A27F6D140013F8387FFFC014FC
ECFFE06C14F86C14FE816C1580000315C06C15E06C6C14F0131F010014F8140F9138007F
FC153F151F150F00F01407A21503A27EA216F86C14076C15F07E6DEB0FE001E0131F01FE
EB7FC000FDB61200D8F87F5BD8F01F13F8D8E00113C026357BB331>I<003FB812F8A4D9
F003EB801FD87F80ED03FC01001501007E1600007C177CA20078173CA400F8173E48171E
A4C71600B3A9011FB612F0A437327DB13E>I<EB7FFE0003B512E04814F8390FF00FFC39
1FF803FF806E138016C0157F6C5A6C5AEA0180C8FCEC7FFF010FB5FC90B6FC0003EBF07F
000F1300EA1FF8485A485A485A5BA315FF7F007F5B6D4813E03A3FF80FBFFF000FB5121F
0003EBFC0F39007FE00728217EA02B>97 D<EA01FC12FFA4120F1207ADEC07FC91387FFF
8001FDB512E09039FFF00FF89138C007FC91380003FE496D7E496D1380A217C0167FA217
E0A917C0A216FF1780A26D4913006D495A9138C007FC9039F3F01FF801E1B512E0D9C07F
13809026800FF8C7FC2B347EB331>I<903807FF80013F13F090B512FC3903FE01FE4848
487EEA0FF8EA1FF0EA3FE0A2007F6D5A496C5A153000FF91C7FCA9127F7FA2003FEC0780
7F6C6C130F000FEC1F00D807FE133E3903FF80FCC6EBFFF8013F13E0010790C7FC21217D
A027>I<ED01FC15FFA4150F1507ADEB07FE90383FFFC790B512F70003EB01FF3907FC00
3F4848131F4848130F48481307A2127F5BA212FFA9127FA27F123F150F6C6C131F6C6C13
3F6C6C497E2603FE03B512E0C6B512E7013F1387903807FC072B347DB331>I<903803FF
80013F13F090B512FC48EB03FE3907FC007F4848EB3F804848EB1FC05B003FEC0FE0127F
5B16F012FF150790B6FCA301C0C8FCA4127F7F123F16F06C7E000F14016C6CEB03E0D803
FEEB0FC03A01FF807F806C6CB51200011F13FC010313E024217EA029>I<EC3FE0903803
FFF8010F13FC90383FF1FE90387FC3FFEBFF83481303A2EA03FEEC01FEA2EC00781500A7
B512FEA4D803FEC7FCB3A7387FFFF8A420347EB31B>I<16F890390FFC07FE90387FFF9F
48B6127F3907FC0FFC380FF003001F14FED9E001133E003FECFF1C1600A6001F5CEBF003
000F5C3907FC0FF890B512E0486C1380D90FFCC7FC48C9FCA37F7F90B512F015FE6CECFF
8016E06C15F06C15F84815FC121F393F80001F48C7EA03FE481401481400A46C14016C6C
EB03FC6C6CEB07F86C6CEB0FF0D80FFCEB7FE00003B61280C6ECFE00010F13E028327EA1
2C>I<EA01FC12FFA4120F1207ADEC03FF020F13C0023F13F09138FC0FF89039FDE007FC
EBFFC04A6C7E1400A25BA25BB2B539E07FFFF0A42C347DB331>I<EA03F0487E487E487E
A66C5A6C5A6C5AC8FCA8EA01FC12FFA4120F1207B3A5B512C0A412357DB418>I<EA01FC
12FFA4120F1207ADED7FFFA4ED1FC04B5A037EC7FC5DEC03F8EC07E04A5AEC3F804AC8FC
4A7E90B5FC8181ECBFF0EC3FF89038FC1FFCEBF80F6E7E6E7E6E7F82806F7E6F7E6F7EB5
39C07FFFC0A42A347DB32F>107 D<EA01FC12FFA4120F1207B3B3A6B512E0A413347DB3
18>I<2703F803FEEB03FE00FF903B1FFFC01FFFC0027FD9E07F7F913BF81FF0F81FF090
3CF9E00FF9E00FF8260FFBC0EBFBC06CB4486CB4486C7E02001400495CA3495CB2B500E0
B500E0B512E0A443217CA04A>I<3901F803FF00FF010F13C0023F13F09138FC0FF89039
F9E007FC380FFBC06CB4486C7E1400A25BA25BB2B539E07FFFF0A42C217DA031>I<9038
03FF80011F13F090B512FE48EB01FF3A07FC007FC0D80FF0EB1FE0001F15F049130F003F
15F8491307007F15FCA300FF15FEA8007F15FCA26D130F003F15F8001F15F06D131F6C6C
EB3FE06C6CEB7FC03A01FF01FF006CEBFFFE013F13F80103138027217EA02C>I<3901FC
07FC00FF90387FFF8001FDB512E09039FFF01FF89138C007FC000F90380003FE6C488049
6D1380A26F13C0A3EE7FE0A9EEFFC0A34B1380A26D4913006D495A9138C00FFC9138F03F
F801FDB512E0D9FC7F1380DA0FF8C7FC91C9FCABB512E0A42B307EA031>I<3901F81F80
00FFEB7FF0ECFFF89038F9E3FC9038FBC7FE380FFF876C1307A213FEEC03FCEC01F8EC00
60491300B1B512F0A41F217EA024>114 D<9038FFE1C0000713FF5A383F803F387E000F
14075A14037EA26C6CC7FC13FCEBFFE06C13FC806CEBFF80000F14C06C14E0C6FC010F13
F0EB007F140F00F0130714037EA26C14E06C13076CEB0FC09038C01F8090B5120000F913
FC38E03FE01C217DA023>I<133CA5137CA313FCA21201A212031207001FB51280B6FCA3
D807FCC7FCB0EC03C0A79038FE078012033901FF0F006C13FEEB3FFCEB0FF01A2F7EAE22
>I<D801FC14FE00FF147FA4000F140700071403B21507A2150F151F6C6C497E6C6C01FB
13F06CEBFFF3013F13C3903807FE032C217DA031>I<B539C007FFC0A4D807FEC7EAF800
00035D6D13016C5D14806C4A5AA2ECC007017F5CECE00F013F91C7FC6E5A011F131EECF8
3E010F133CECFC7C01071378ECFEF801035B14FF6D5BA26D5BA26E5AA26EC8FCA2141E2A
217EA02F>I<B53B83FFFC03FFE0A43D07FC001FE0003E00183C6D167C00036F1378033F
14F86C6C6E5B157F9139807BFC016C5FDAC0FB1303017FD9F1FE5B14C19139E1E0FF0701
3F5E9139F3C07F0F011F038FC7FC14F7903A0FFF803FDEA29238001FFE6D5DA26D486D5A
A24A130701015DA26D486D5A4A13013B217EA040>I<B539C03FFF80A400039039000FC0
006C01805B6C4AC7FC90387FC03E6D6C5A6E5A90381FF9F0EB0FFF6D5B6D5B6D5B7F816E
7E4A7E497FEB03EF903807C7FC90380FC3FE90381F83FFD93F017FD97E007F496D7E496D
7E4848131FD8FFFE90387FFFC0A42A217EA02F>I<B539C007FFC0A4D807FEC7EAF80000
035D6D13016C5D14806C4A5AA2ECC007017F5CECE00F013F91C7FC6E5A011F131EECF83E
010F133CECFC7C01071378ECFEF801035B14FF6D5BA26D5BA26E5AA26EC8FCA2141EA25C
A2147C003E1378007F13F8486C5A1381EB83E0EB87C0495AD87F3FC9FCEA3FFEEA1FF8EA
07E02A307EA02F>I<001FB6FCA39038E007FE9038800FFCEB001F001EEB3FF8003E14F0
EC7FE0003C13FF4913C01580491300C65A495A495A5C133F90387FF00FEBFFE014C04813
805A48EB001F5B4848131E001F143E4848137E4913FE387FE003B6FCA320217EA027>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fo cmtt9 9 18
/Fo 18 122 df<120FEA3FC013E0EA7FF0A213F8A2123FA2120F120113F01203EA07E012
1FEA7FC0EAFF8013005A12700D14738927>44 D<121EEA7F80A2EAFFC0A4EA7F80A2EA1E
000A0A728927>46 D<EB01FE903807FF80011F13C0017F13E090B512F048EB03F83803FC
013907F000FC390FE01F7C9038C07FFE381F80FF1301485A393E07F1FF007E13E0397C0F
C07FEC803FA2EAFC1F00F8EB001FA800FCEB803FD87C0F133EA2ECC07E397E07E0FC003E
13F1393F03FFF86C6C13F0018013E0390FC07FC09038E01F1E3907F0003FD803FC137F39
01FF03FF6CEBFFFE6D13FC011F13F0010713C001011300202E7DAD27>64
D<3803FFC0000F13F04813FC4813FF811380EC1FC0381F000F000480C71207A2EB0FFF13
7F0003B5FC120F5A383FFC07EA7FC0130012FE5AA46C130F007F131FEBC0FF6CB612806C
15C07E000313F1C69038807F8022207C9F27>97 D<EB0FFF017F13C048B512E04814F05A
380FF807EA1FE0393FC003E0903880008048C8FC127EA212FE5AA67E127EA2007F14F039
3F8001F813C0381FE003390FF80FF06CB5FC6C14E06C14C06C6C1300EB0FF81D207B9F27
>99 D<EC3FF04A7EA3143F1401A9EB0FE1EB7FFD48B5FC5A5A380FF83F381FE00F383FC0
07EB8003EA7F00007E1301A212FE5AA67E007E1303A2127F6C1307EB800F381FE01F380F
F03F6CB612C06C15E06C13FD38007FF9D91FE013C0232E7EAD27>I<EB0FF8EB3FFE90B5
1280000314C04814E0390FFC0FF0391FE003F8EBC001D83F8013FC48C7FC127E157E12FE
B612FEA415FC00FCC8FC7E127E127F6C143C6D137E6C7E01F013FE390FFC07FC6CB5FC00
0114F86C14F0013F13C0903807FE001F207D9F27>I<153F90391FC0FF80D97FF313C048
B612E05A4814EF390FF07F873A1FC01FC3C0EDC000EB800F48486C7EA66C6C485AEBC01F
A2390FF07F8090B5C7FC5C485BEB7FF0EB1FC090C9FCA27F6CB5FC15E015F84814FE4880
EB8001007EC7EA3F80007C140F00FC15C0481407A46C140F007C1580007F143F6C6CEB7F
009038F807FF6CB55A000714F86C5CC614C0D90FFCC7FC23337EA027>103
D<EA7FE0487EA3127F1203A9147F9038F1FFC001F713F090B5FC8114C1EC01FCEBFE005B
5BA25BB03A7FFF83FFE0B500C713F0A36C018313E0242E7FAD27>I<130F497E497EA46D
5A6DC7FC90C8FCA7383FFF80487FA37EEA000FB3A4007FB512F0B6FC15F815F07E1D2F7B
AE27>I<387FFF80B57EA37EEA000FB3B2007FB512F8B612FCA36C14F81E2E7CAD27>108
D<397F07C01F3AFF9FF07FC09039FFF9FFE091B57E7E3A0FFC7FF1F89038F03FC001E013
8001C01300A3EB803EB03A7FF0FFC3FF486C01E3138001F913E701F813E36C4801C31300
2920819F27>I<387FE07F39FFF1FFC001F713F090B5FC6C80000313C1EC01FCEBFE005B
5BA25BB03A7FFF83FFE0B500C713F0A36C018313E024207F9F27>I<387FE0FFD8FFF313
C090B512F0816C800003EB81FE49C67E49EB3F8049131F16C049130FA216E01507A6150F
16C07F151F6DEB3F80157F6DEBFF009038FF83FEECFFFC5D5D01F313C0D9F0FEC7FC91C8
FCAC387FFF80B57EA36C5B23317F9F27>112 D<9038FFF3800007EBFFC0121F5A5AEB80
3F38FC000F5AA2EC07806C90C7FCEA7F8013FC383FFFF06C13FC000713FF00011480D800
0F13C09038003FE014070078EB03F000FC1301A27E14036CEB07E0EBE01F90B512C01580
150000FB13FC38707FF01C207B9F27>115 D<133C137EA8007FB512F0B612F8A36C14F0
D8007EC7FCAE1518157EA415FE6D13FC1483ECFFF86D13F06D13E0010313C0010013001F
297EA827>I<397FE01FF8486C487EA3007F131F00031300B21401A21403EBFC0F6CB612
E016F07EEB3FFE90390FF87FE024207F9F27>I<3A7FFC0FFF80486C4813C0A36C486C13
803A07E000F800000313015D13F00001130301F85B1200A26D485A137CA290387E0F8013
3EA2011F90C7FC5CA2130F149E14BE130714FC1303A25C1301A25CA213035CA213075C12
08EA3E0F007F5B131FD87E7FC8FCEA7FFE6C5A5B6C5AEA07C022317E9F27>121
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fp cmsy9 9 6
/Fp 6 113 df<007FB712FCB812FEA26C16FC2F047A943C>0 D<123C127E12FFA4127E12
3C08087A9615>I<1630167816F8A2ED01F0A2ED03E0A2ED07C0A2ED0F80A2ED1F00A215
3EA25DA25DA24A5AA24A5AA24A5AA24A5AA24AC7FCA2143EA25CA25CA2495AA2495AA249
5AA2495AA249C8FCA2133EA25BA25BA2485AA2485AA2485AA2485AA248C9FCA2123EA25A
A25AA25A1260254675B500>54 D<EC07E0143FECFE00EB03F8495A495A5C131F5CB3A513
3F91C7FC137E5BEA03F8EA7FE048C8FCEA7FE0EA03F8C67E137E7F80131FB3A580130F80
6D7E6D7EEB00FEEC3FE014071B4B7BB726>102 D<12FCEAFFC0EA07F0EA01FC6C7E137F
7F80131FB3A580130F6D7E6D7EEB01FC9038007FC0EC1FE0EC7FC0903801FC00EB03F049
5A495A131F5CB3A5133F91C7FC5B13FE485AEA07F0EAFFC000FCC8FC1B4B7BB726>I<19
30197819F8A2F001F0A2F003E0A2F007C0A2F00F80A2F01F00A2183EA260A260A24D5AA2
4D5AA24D5AA24D5AA24DC7FCA2173EA25FA25FA24C5A13C000014B5AEA07E0000F4B5AEA
3FF000734B5AEAE3F800C14BC8FCEA01FC0000153E7F017E5C137F6D5CA26E485A131F6E
485A130F6E485A13076E485A13036E48C9FC1301153E14FC01005B14FEEC7EF8147F6E5A
A26E5AA26E5AA26E5A92CAFC3D4C7B8340>112 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fq cmr9 9 80
/Fq 80 124 df<91393FE00FE0903A01FFF83FF8903A07E01EF83C903A1F800FF07E903A
3F001FE0FE017E133F4914C0485A1738484890381F8000ACB812C0A33B03F0001F8000B3
A7486C497EB50083B5FCA32F357FB42D>11 D<EC1FE0ECFFFC903803F01E90390FC00780
EB1F8090393F000FC0017E131F5BA2485AED0F8092C7FCA9ED0FC0B7FCA33901F8001F15
0FB3A6486CEB1FE0267FFFC1B5FCA328357FB42B>I<EC1FF891B512C0903803F00F9038
0FC01FEB1F80EB3F00137E5B150F485AACB7FCA33901F8000FB3A7486CEB1FE0267FFFE3
B5FCA328357FB42B>I<DA1FE013FF9126FFFC0713E0903B03F01E1F80F0903B0FC0077E
003CD91F805B90273F001FF8137E017E4A13FE495CA248485C030F147C95C7FCA9187EB9
12FEA33B01F8000FC000187EB3A6486C496C13FF297FFFC1FFFE0F13F8A33D357FB440>
I<017C1503D803FEED078026078780140F260F01C0141F261E00E0EC3F00003E01F8147E
003C017CEB01FE007C90397F8007FC913933FFFEF800789038307FF900F89039380001F0
0218495A16075F4C5A161F4CC7FC163E5E023813FC007801305B007C4A5AEC7003003C01
605B003E9038E007C0001EEBC00FD80F015C270787801FC8FC3903FE003FD8007C133E90
C748131F03FCEBFF809239F801E1E0913A01F003C07002039038078030DBE00F1338DA07
C0EB0018020F49131C0380140C91381F001E4A013E130E023E15065C14FC495A5C495A13
075C4948150E011F021E130C91C7121F013E161C017E6E1318017CED8038490207133000
01923803C07049913801E1E049913800FF806C48ED1F00373C7CB740>37
D<147CEB01FEEB07C790380F8380EB1F0181EB3E00A2137EA2137C137EA214015D140392
C9FC5C140E6D5A1418143802F090380FFFF05C6D5A04011300EE00FC6D6C1470011F1560
013F15E0D977F0495AD9E3F85CD801C31403260381FC91C7FC00075D48C66C130E486D13
0C486D131C003E6D6C5A007EECC03091381FE07000FE010F5B6F5AEC07F96EB45A6C6D90
C712306E5A157F6C6C6D6C13604B6C13E03A3FC001EFE03C1FE003C7F803C03C0FF01F83
FE0F802707FFFE00B51200000101F8EB3FFE26003FC0EB07F034387DB53C>I<123C127E
B4FCA21380A2127F123D1201A412031300A25A1206120E120C121C5A5A126009177AB315
>I<14C01301EB0380EB0F00130E5B133C5B5BA2485A485AA212075B120F90C7FC5AA212
1E123EA3123C127CA55AB0127CA5123C123EA3121E121FA27E7F12077F1203A26C7E6C7E
A213787F131C7F130FEB0380EB01C01300124A79B71E>I<12C07E1270123C121C7E120F
6C7E6C7EA26C7E6C7EA27F1378137C133C133EA2131E131FA37F1480A5EB07C0B0EB0F80
A514005BA3131E133EA2133C137C137813F85BA2485A485AA2485A48C7FC120E5A123C12
705A5A124A7CB71E>I<156015F0B3A4007FB812C0B912E0A26C17C0C800F0C8FCB3A415
6033327CAB3C>43 D<123C127EB4FCA21380A2127F123D1201A412031300A25A1206120E
120C121C5A5A126009177A8715>I<B512F0A514057F921A>I<123C127E12FFA4127E123C
08087A8715>I<1530157815F8A215F01401A215E01403A215C01407A21580140FA21500
5CA2143EA2143C147CA2147814F8A25C1301A25C1303A25C1307A2495AA291C7FC5BA213
1E133EA2133C137CA2137813F8A25B1201A25B1203A2485AA25B120FA290C8FC5AA2121E
123EA2123C127CA2127812F8A25A12601D4B7CB726>I<EB0FE0EB7FFCEBF83E3903E00F
803907C007C0EB8003000F14E0391F0001F0A24814F8A2003E1300007E14FCA500FE14FE
B2007E14FCA56CEB01F8A36C14F0A2390F8003E03907C007C0A23903E00F803900F83E00
EB7FFCEB0FE01F347DB126>I<13075B5B137FEA07FFB5FC13BFEAF83F1200B3B3A2497E
007FB51280A319327AB126>I<EB3FC0EBFFF0000313FC380F80FF391E007F80001CEB3F
C048EB1FE048130F15F00060130712FC6C14F87E1403A3007E1307123CC7FC15F0A2140F
15E0EC1FC0A2EC3F801500147E5C495A5C495A495A495A49C7FC133E133C4913185B485A
48481330485A48C7FC001C1470001FB512F05A5AB612E0A31D327CB126>I<EB1FE0EBFF
FC4813FF3907E03F80390F001FC0001EEB0FE0001CEB07F0123F018013F8140313C01380
A2381F0007C7FC15F0A2EC0FE015C0141FEC3F80EC7E00EB01F8EB7FE014FCEB003FEC1F
C0EC0FE0EC07F015F8140315FC140115FEA3127EB4FCA415FC48130312780070EB07F86C
14F0003C130F001FEB1FE0390FE03F800003B51200C613FCEB1FE01F347DB126>I<EC01
C0A214031407A2140F141FA2143F147F146F14CF1301EB038F140F1307130E130C131C13
381330137013E013C0EA0180120313001206120E120C5A123812305A12E0B71280A3C738
0FC000A94A7E0107B51280A321337EB226>I<000C14C0380FC00F90B5128015005C5C14
F014C0D80C18C7FC90C8FCA9EB0FC0EB7FF8EBF07C380FC03F9038001F80EC0FC0120E00
0CEB07E0A2C713F01403A215F8A41218127E12FEA315F0140712F8006014E01270EC0FC0
6C131F003C14806CEB7F00380F80FE3807FFF8000113E038003F801D347CB126>I<14FE
903807FF80011F13E090383F00F0017C13703901F801F8EBF003EA03E01207EA0FC0EC01
F04848C7FCA248C8FCA35A127EEB07F0EB1FFC38FE381F9038700F809038E007C039FFC0
03E0018013F0EC01F8130015FC1400A24814FEA5127EA4127F6C14FCA26C1301018013F8
000F14F0EBC0030007EB07E03903E00FC03901F81F806CB51200EB3FFCEB0FE01F347DB1
26>I<1230123C003FB6FCA34814FEA215FC0070C7123800601430157015E04814C01401
EC0380C7EA07001406140E5C141814385CA25CA2495A1303A3495AA2130FA3131F91C7FC
A25BA55BA9131C20347CB126>I<EB0FE0EB7FFC90B5FC3903F01F803907C007C0390F00
03E0000EEB01F0001E1300001C14F8003C1478A3123EA2003F14F86D13F0EBC001D81FF0
13E09038F803C0390FFE07803907FF0F006C13DE6C13F87EEB3FFE8001F713C0D803E313
E0D8078013F0390F007FF8001E131F003EEB07FC003C1303481301EC007E12F848143EA2
151EA37E153C1278007C14787E6C14F0390F8003E03907F01FC00001B5120038007FFCEB
1FE01F347DB126>I<EB0FE0EB7FF8EBFFFE3803F83F3907E00F80390FC007C0D81F8013
E0EC03F0EA3F0048EB01F8127EA200FE14FC1400A415FEA5007E1301A2127F7E1403EA1F
80000F13073807C00E3803E01C3801F03838007FF090381FC0FC90C7FC1401A215F8A215
F01403001F14E0383F800715C0140FEC1F809038003F00001C137E381F01FC380FFFF000
0313C0C690C7FC1F347DB126>I<123C127E12FFA4127E123C1200B0123C127E12FFA412
7E123C08207A9F15>I<123C127E12FFA4127E123C1200B0123C127E12FE12FFA3127F12
3F1203A412071206A3120E120C121C1238123012701260082F7A9F15>I<007FB812C0B9
12E0A26C17C0CCFCAC007FB812C0B912E0A26C17C033147C9C3C>61
D<15E0A34A7EA24A7EA34A7EA3EC0DFE140CA2EC187FA34A6C7EA202707FEC601FA202E0
7FECC00FA2D901807F1507A249486C7EA301066D7EA2010E80010FB5FCA249800118C77E
A24981163FA2496E7EA3496E7EA20001821607487ED81FF04A7ED8FFFE49B512E0A33336
7DB53A>65 D<B7FC16E016F83A03FC0003FE0001EC00FFEE7F80EE3FC0161F17E0160F17
F0A617E0161F17C0EE3F80EE7F0016FEED03FC90B612F05E9039FC0007FCED00FEEE3F80
EE1FC0EE0FE017F0160717F8160317FCA617F81607A2EE0FF0EE1FE0163FEE7FC0000391
3803FF00B75A16F816C02E337DB236>I<DA03FE130C91393FFF801C91B512E0903A03FE
01F83C903A0FF0003C7CD91FC0EB0EFCD97F80130701FEC7120348481401000315005B48
48157C485A173C485A171C123F5B007F160CA390C9FC481600AB7E6D150CA3123F7F001F
161C17186C7E17386C6C15306C6C15706D15E012016C6CEC01C0D97F80EB0380D91FC0EB
0F00D90FF0131ED903FE13FC0100B512F0023F13C0DA03FEC7FC2E377CB437>I<B77E16
F016FE3A01FE0001FF00009138003FC0EE0FE0707E707E707E707E177E177FEF3F80A2EF
1FC0A3EF0FE0A418F0AA18E0A3171F18C0A21880173F18005F17FE5F4C5AEE07F04C5AEE
3FC000014AB45AB748C7FC16F8168034337EB23B>I<B812C0A3D803FCC7127F0001150F
EE03E01601A21600A21760A403061330A41700150EA2151E157E90B512FEA39038FC007E
151E150EA21506170CA3171892C7FCA41738A21770A217F01601160316070003157FB812
E0A32E337DB234>I<B81280A3D803FCC7FC0001151FEE07C01603A21601A21600A41760
150CA31700A2151CA2153C15FC90B5FCA3EBFC00153C151CA2150CA592C8FCAB487EB512
FEA32B337DB232>I<DA03FE130C91393FFF801C91B512E0903A03FE01F83C903A0FF000
3C7CD91FC0EB0EFCD97F80130701FEC7120348481401000315005B4848157C485A173C48
5A171C123F5B007F160CA390C9FC4893C7FCAA0303B512E07E7F92390003FE00705A123F
7F121FA26C7E7F12076C7E7F6C6C14036C7E6D6C1307D91FC0EB0E7CD90FF0EB1C3CD903
FEEBF81C0100B5EAF00C023F01C0C7FCDA03FEC8FC33377CB43C>I<B5D8FE03B512F8A3
000190C73807FC006C486E5AB390B7FCA349C71203B3A3486C4A7EB5D8FE03B512F8A335
337EB23A>I<B512FEA3000113006C5AB3B3A7487EB512FEA317337EB21C>I<017FB5FCA3
9038003FE0EC1FC0B3B1127EB4FCA4EC3F805A0060140000705B6C13FE6C485A380F03F0
3803FFC0C690C7FC20357DB227>I<B500FE903807FFF8A3000190C7000113006C48EC00
FC17F04C5A4C5A4CC7FC160E5E5E5E5E4B5A4B5A4BC8FC150E5D5D15F84A7E14034A7EEC
0EFF5C4A6C7E4A6C7EECE01FD9FFC07F4A6C7E4A6C7E5B6F7E6F7EA26F7E707EA2707E70
7E160F83707E707EA283486C913807FF80B500FE013F13FCA336337EB23C>I<B512FEA3
D803FEC9FC6C5AB3A9EE0180A416031700A45EA25E5E5E5E16FE00031407B7FCA329337D
B230>I<D8FFFC923801FFF86D5DA20003EFFE00D801BFED06FCA3D99F80140CA2D98FC0
1418A3D987E01430A2D983F01460A3D981F814C0A3D980FCEB0180A2027EEB0300A36E13
06A26E6C5AA36E6C5AA36E6C5AA26E6C5AA36E6C5AA3913800FD80A2037FC7FCA3486C13
3ED80FF04B7EB5011C90387FFFF8A33D337CB246>I<D8FFFE91381FFFF87F80C6030013
006E143CD9DFE01418EBCFF0A2EBC7F8EBC3FCA2EBC1FEEBC0FF6E7EA26E7E6E7EA26E7E
6E7E6E7EA26E7E6E7EA2ED7F80ED3FC0ED1FE0A2ED0FF0ED07F8A2ED03FCED01FEED00FF
A2EE7F98EE3FD8A2EE1FF8160F1607A216031601A2486C1400D807F81578B500C01438A2
171835337EB23A>I<EC07FC91387FFFC0903901FC07F0903907E000FCD90F80133E013F
C76C7E017E6E7E496E7E48486E7E48486E7EA248486E7E000F8249157E001F167FA24848
ED3F80A2007F17C0A290C9121FA24817E0AB6C17C06D153FA3003F17806D157FA2001F17
006D5D000F5E6C6C4A5AA26C6C4A5A00015E6C6C4A5A017E4A5A6D4A5AD91FC0017FC7FC
D907E013FC903901FC07F09039007FFFC0DA07FCC8FC33377CB43C>I<B612FEEDFFC016
F03A03FC0007FC0001EC00FE167FEE3F80EE1FC017E0160FA217F0A617E0A2EE1FC0A2EE
3F80EE7F0016FEED07F890B65A168001FCC9FCB3A2487EB512F8A32C337DB234>I<B612
FCEDFF8016F03A01FE0007FC0000EC01FEED007F707E707E83160F83A65FA24C5AA24C5A
047EC7FC4B5AED0FF090B612C093C8FC9039FE001FC0ED07F06F7E6F7E150082167E167F
A583A5180C17C0A2043F131C486C1618B500FEEB1FE0040F1338933807F070C93801FFE0
9338003F8036357EB239>82 D<90381FE00390387FFC0748B5FC3907F01FCF390F8003FF
48C7FC003E80814880A200788000F880A46C80A27E92C7FC127F13C0EA3FF013FF6C13F0
6C13FF6C14C06C14F0C680013F7F01037F9038003FFF140302001380157F153FED1FC015
0F12C0A21507A37EA26CEC0F80A26C15006C5C6C143E6C147E01C05B39F1FC03F800E0B5
12E0011F138026C003FEC7FC22377CB42B>I<007FB712FEA390398007F001D87C00EC00
3E0078161E0070160EA20060160600E01607A3481603A6C71500B3AB4A7E011FB512FCA3
30337DB237>I<B500FE90381FFFF8A3000190C813006C48153C1718B3AF1738017F1530
A217706D6C1460011F15E06E495A010F14036D6C495A6D6C49C7FCD901FC131E6DB413FC
91383FFFF0020F13C0020190C8FC35357EB23A>I<B500F0903803FFF8A3D807FEC8EA7F
C06C48ED1F000001161E6D151C00001618A26D15386D1530A26D6C5CA26E14E0011F5DA2
6D6C495AA28001074AC7FCA26D6C1306A28001015CA26E131C01001418806E5BA2ED8070
023F1360A26E6C5AA215E1020F5BA2DA07F3C8FCA215FBEC03FEA36E5AA26E5AA31570A2
35357EB23A>I<B5D8F007B539800FFFF0A3000390C7273FF000011300D801FC6E48EB00
7C1A386D140F00001930836D020715706D1860A26E496C14E0013F60A26ED919FC130101
1F60A26ED930FE1303010F95C7FCA26ED9607F5B01071706A26E9039C03F800E0103170C
A2913BFC01801FC01C01011718A2913BFE03000FE03801001730A2DAFF06EB07F0027F5E
A2038CEB03F8023F5EA203D8EB01FC021FEDFD80A203F0EB00FF020F93C8FCA24B800207
157EA24B143E0203153CA24B141C020115184C357FB24F>I<003FB612FCA39039F80007
F813C090C7EA0FF0003EEC1FE0123C0038EC3FC00078EC7F801270EDFF004A5AA2006049
5AA24A5A4A5AC7FC4A5A4A5AA24A5A4AC7FCA2495A495AA2495A495AA24948130C495AA2
495A49C7FCA24848141CA2485A485A1638485A4848147816F84848130148481307153FB7
FCA326337CB22F>90 D<EAFFF0A4EAF000B3B3B3ADEAFFF0A40C4B79B715>I<EAFFF0A4
1200B3B3B3AD12FFA40C4B7FB715>93 D<12035A120E5A12181238123012701260A212E0
5AA412DEB4FC1380A2127FA2EA3F00121E09177BB315>96 D<EB7F803803FFF0380F80FC
381C003E003F133F6D6C7E6E7EA26E7EEA1F00C7FCA4EB01FF131FEBFF873803FC07EA0F
F0EA1FC0EA3F80127F13004815C05AA3140FA26C131F6C133B3A3F8071F180391FC1E1FF
2607FFC013003900FE003C22237DA126>I<EA03F012FFA312071203AEEC3F80ECFFE090
38F3C0F89038F7007E01FE7F49EB1F8049EB0FC05BED07E016F0A2150316F8AA16F01507
16E0A2ED0FC07F6DEB1F8001ECEB3F0001CF137C90388381F8903801FFE0C76CC7FC2535
7EB32B>I<EB07F8EB3FFF9038FC07C03901F000E03903E003F03807C007120FEA1F8012
3F90380003E04890C7FCA2127E12FEAA127FA26C14187F001F14386D1330000F14706C6C
13E03903F001C03900FC0F8090383FFE00EB07F01D237EA122>I<153FEC0FFFA3EC007F
81AEEB07F0EB3FFCEBFC0F3901F003BF3907E001FF48487E48487F8148C7FCA25A127E12
FEAA127E127FA27E6C6C5BA26C6C5B6C6C4813803A03F007BFFC3900F81E3FEB3FFCD90F
E0130026357DB32B>I<EB0FE0EB7FFCEBF83F3903F00F80D807E013C0390FC007E0381F
800315F0EA3F0014014814F8127EA212FEA2B6FCA248C8FCA5127E127FA26C1418A26C6C
1338000F14306D13706C6C13E03901F003C03900FC0F00EB3FFEEB07F01D237EA122>I<
EB01FCEB07FF90381F078090383E0FC0EB7C1F13FCEA01F8A20003EB070049C7FCACB512
F0A3D803F0C7FCB3A7487E387FFFE0A31A357FB417>I<151F90391FC07F809039FFF8E3
C03901F07FC73907E03F033A0FC01F83809039800F8000001F80EB00074880A66C5CEB80
0F000F5CEBC01F6C6C48C7FCEBF07C380EFFF8380C1FC0001CC9FCA3121EA2121F380FFF
FEECFFC06C14F06C14FC4880381F0001003EEB007F4880ED1F8048140FA56C141F007C15
006C143E6C5C390FC001F83903F007E0C6B51280D91FFCC7FC22337EA126>I<EA03F012
FFA312071203AEEC1FC0EC7FF09038F1E0FC9038F3807C9038F7007E13FE497FA25BA25B
B3486CEB7F80B538C7FFFCA326347EB32B>I<EA0780EA0FC0EA1FE0A4EA0FC0EA0780C7
FCAAEA07E012FFA3120F1207B3A6EA0FF0B5FCA310337EB215>I<EB03C0EB07E0EB0FF0
A4EB07E0EB03C090C7FCAAEB03F013FFA313071303B3B01238127C00FE13E0130714C013
0F007C138038381F00EA1FFCEA07F0144384B217>I<EA03F012FFA312071203AF913803
FFE0A36E1300EC00F8EC01E05D4A5A020FC7FC141C5C5C14F0EBF3F8EBF7FC13FEEBFC7E
EBF87F496C7E141F6E7E8114076E7E8114016E7E81486CEBFF80B500C313F0A324347EB3
29>I<EA07E012FFA3120F1207B3B3A7EA0FF0B5FCA310347EB315>I<2703F01FE013FF00
FF90267FF80313C0903BF1E07C0F03E0903BF3803E1C01F02807F7003F387FD803FE1470
496D486C7EA2495CA2495CB3486C496C487EB53BC7FFFE3FFFF0A33C217EA041>I<3903
F01FC000FFEB7FF09038F1E0FC9038F3807C3907F7007EEA03FE497FA25BA25BB3486CEB
7F80B538C7FFFCA326217EA02B>I<EB07F0EB3FFE9038FC1F803901F007C03903C001E0
00078048486C7E48C7127CA248147E003E143E007E143FA300FE1580A8007E1500A36C14
7EA26C147C6D13FC6C6C485A00075C3903F007E03900FC1F80D93FFEC7FCEB07F021237E
A126>I<3903F03F8000FFEBFFE09038F3C0F89038F7007ED807FE7F6C48EB1F804914C0
49130F16E0ED07F0A3ED03F8A9150716F0A216E0150F16C06D131F6DEB3F80160001FF13
FC9038F381F89038F1FFE0D9F07FC7FC91C8FCAA487EB512C0A325307EA02B>I<903807
F00390383FFC07EBFC0F3901F8038F3807E001000F14DF48486CB4FC497F123F90C77E5A
A25A5AA9127FA36C6C5B121F6D5B000F5B3907E003BF3903F0073F3800F81EEB3FF8EB0F
E090C7FCAAED7F8091380FFFFCA326307DA029>I<3803E07C38FFE1FF9038E38F809038
E71FC0EA07EEEA03ECA29038FC0F8049C7FCA35BB2487EB512E0A31A217FA01E>I<EBFF
06000713CE381F00FE003C133E48131E140E5A1406A27EA200FE90C7FC6C7EEA7FFC383F
FFC014F0000F7F6C7FC67FEB0FFF1300EC3F8000C0131F140F6C1307A37E15006C5B6C13
0E6C5B38F7807838E1FFE038C07F8019237EA11E>I<1330A51370A313F0A21201A21203
1207381FFFFEB5FCA23803F000AF1403A814073801F806A23800FC0EEB7E1CEB1FF8EB07
E0182F7FAD1E>I<D803F0133F00FFEB0FFFA30007EB007F000380B35DA35D12016D4813
800000903803BFFC90387E073FEB1FFED907F8130026227EA02B>I<B5EBFFF0A3D80FF0
EB3F800007EC1F000003140E150C6D131C00011418A26C6C5BA26D1370017E1360137F6D
5BA290381F8180A214C3010F90C7FCA2EB07E6A214FE6D5AA26D5AA36D5AA2146024217E
9F29>I<B53A1FFF81FFF0A33C07F801FC003F8001F049EB1E0000030100141C816C6C01
7C1318A26D017E1338000002FE1330A290267E01FF5B159F168090263F030F5BA216C090
3A1F8607C180A202C613E390260FCC0390C7FCA2D907FC13F6ECF80116FE6D486C5AA36D
481378A36D48133034217F9F37>I<B53801FFF8A32603FE0013806C48EB7C0000001478
017E1370017F5B90383F81C090381F8380D90FC3C7FCEB07E614FE6D5A6D5A6D7E80805B
9038039F809038071FC09038060FE0EB0C0790381C03F0496C7E01707FEBF00000018000
0FECFF8026FFFC0313FCA326207F9F29>I<3A7FFF807FF8A33A07F8001FC00003EC0F80
0001EC070015066C6C5BA26D131C017E1318A26D5BA2EC8070011F1360ECC0E0010F5BA2
903807E180A214F3010390C7FC14FBEB01FEA26D5AA31478A21430A25CA214E05CA2495A
1278D8FC03C8FCA21306130EEA701CEA7838EA1FF0EA0FC025307F9F29>I<003FB512F0
A2EB000F003C14E00038EB1FC00030EB3F800070137F1500006013FE495A13035CC6485A
495AA2495A495A49C7FC153013FE485A12035B48481370485A001F14604913E0485A387F
000348130F90B5FCA21C207E9F22>I<B712F8A22502809426>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fr cmr6 6 7
/Fr 7 62 df<13E01201120712FF12F91201B3A7487EB512C0A212217AA01E>49
D<EA01FC3807FF80381C0FC0383003E0386001F0EB00F812F86C13FCA2147C1278003013
FCC7FC14F8A2EB01F0EB03E014C0EB0780EB0F00131E13385B5B3801C00CEA0380380600
185A5A383FFFF85AB512F0A216217CA01E>I<13FF000313C0380F03E0381C00F014F800
3E13FC147CA2001E13FC120CC712F8A2EB01F0EB03E0EB0FC03801FF00A2380003E0EB00
F01478147C143E143F1230127812FCA2143E48137E0060137C003813F8381E03F0380FFF
C00001130018227DA01E>I<14E01301A213031307A2130D131D13391331136113E113C1
EA01811203EA07011206120C121C12181230127012E0B6FCA2380001E0A6EB03F0EB3FFF
A218227DA11E>I<00101330381E01F0381FFFE014C01480EBFE00EA1BF00018C7FCA513
FE381BFF80381F03C0381C01E0381800F014F8C71278A2147CA21230127812F8A2147848
13F8006013F0387001E01238381E07803807FF00EA01F816227CA01E>I<EB0FC0EB7FF0
3801F0383803C0183807803C380F007C121E001C1338003C1300A2127C1278EB7FC038F9
FFE038FB80F038FE0038143C48131EA248131FA41278A36C131EA2001C133C001E13386C
1370380781E03801FFC038007F0018227DA01E>I<B712FEA3CAFCA9B712FEA3270F7C93
2F>61 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fs cmr7 7 34
/Fs 34 122 df<1238127C12FE12FFA2127F123B1203A31206A3120C1218123812701220
08127B8613>44 D<1238127C12FEA3127C123807077B8613>46 D<13381378EA01F8121F
12FE12E01200B3AB487EB512F8A215267BA521>49 D<13FF000313E0380E03F0381800F8
48137C48137E00787F12FC6CEB1F80A4127CC7FC15005C143E147E147C5C495A495A5C49
5A010EC7FC5B5B903870018013E0EA0180390300030012065A001FB5FC5A485BB5FCA219
267DA521>I<13FF000313E0380F01F8381C007C0030137E003C133E007E133FA4123CC7
123E147E147C5C495AEB07E03801FF8091C7FC380001E06D7E147C80143F801580A21238
127C12FEA21500485B0078133E00705B6C5B381F01F03807FFC0C690C7FC19277DA521>
I<1438A2147814F81301A2130313071306130C131C131813301370136013C012011380EA
03005A120E120C121C5A12305A12E0B612E0A2C7EAF800A7497E90383FFFE0A21B277EA6
21>I<0018130C001F137CEBFFF85C5C1480D819FCC7FC0018C8FCA7137F3819FFE0381F
81F0381E0078001C7F0018133EC7FC80A21580A21230127C12FCA3150012F00060133E12
7000305B001C5B380F03E03803FFC0C648C7FC19277DA521>I<EB0FE0EB3FF8EBF81C38
01E0063803C01F48485AEA0F005A121E003E131E91C7FC5AA21304EB3FC038FCFFF038FD
C078EB003CB4133E48131E141FA2481480A4127CA4003C1400123E001E131E143E6C133C
6C6C5A3803C1F03801FFC06C6CC7FC19277DA521>I<B539C07FFFE0A23B07F80003FC00
6C486D5AAF90B6FCA29038F00001B1486C497EB539C07FFFE0A22B287EA731>72
D<D8FFF0EDFFF06D5C0007EEFE0000035E017CEC037CA26D1406A26D140CA36D6C1318A2
6D6C1330A36D6C1360A26D6C13C0A3903900F80180A291387C0300A2EC3E06A36E5AA2EC
0F98A3EC07F0A26E5AEA0780D80FC015FE3CFFFC01C01FFFF0A234287DA73C>77
D<90387F80203903FFF06039078078E0380E000E481307481303007813010070130012F0
A21560A27E1500127C127FEA3FE013FF6C13F06C13FC000313FFC61480010F13C0010013
E0EC0FF014031401EC00F8A200C01478A46C1470A26C14F06C14E06CEB01C000EFEB0780
39E3E01F0038C0FFFC38801FF01D2A7DA825>83 D<B590B5EB3FFEA2D80FF8D90FF8EB07
F06C486D48EB03E00003EF01C003031580A26C6C6EEB0300A36C6CD906FC1306A26D160E
017ED90C7E130CA2017F027F131C6D496C1318A290261F80386D5AED301FA290260FC070
6D5AED600FA26D6C486C6C5AA214F0903B03F18003F180A202F914F3902801FB0001FBC7
FCA202FF14FF6D486D5AA2027E5C027C147CA202381438A33F297FA743>87
D<13FE3807FFC0380F03E0381C00F0003E1378003F137C143C143E121EC7FCA3EB3FFEEA
01FF3807F03EEA1FC0EA3F00127EA2481418A3147E127EECDF38393F838FF0390FFE0FE0
3903F807C01D1C7E9A21>97 D<EA0F8012FFA2121F120FAAEB81FCEB8FFF9038BC0FC090
38F003E09038C001F0EB800015F815FC157CA2157EA7157CA215FC15F89038C001F015E0
90387003C0390E3C0F80390C0FFF00380003F81F297EA725>I<EB3FC0EBFFF83803E03C
3807C00E380F801F381F003F123EA2007E131E007C1300A212FCA7127C127E1403123E6C
1306EA0F803807C00C3803F0383800FFE0EB3F80181C7E9A1E>I<EC03E0143FA2140714
03AAEB3F833801FFE33803E03B3807800F380F0007481303123E127E127CA212FCA7127C
A2127E123E001E1307001F130F390F801FF03903E073FE3801FFE339007F03E01F297EA7
25>I<133F3801FFE03803E1F0380F80F8381F007C143E123E007E131E141F127C12FCA2
B6FCA200FCC7FCA4127C127E1403123E6C1307380F800E3807C01C3803E0783800FFE0EB
3F80181C7E9A1E>I<EB07E0EB3FF0EB7C78EBF0FCEA01E01203EBC078000713301400A8
B51280A23807C000B3A2487EEA7FFEA216297FA815>I<90387E03E03901FF9FF03807C3
FC380F00F048EBF800001E1378003E137CA6001E1378001F13F86C5BEBC3E0380DFF80D8
1C7EC7FC90C8FCA3121E380FFFF014FC6C13FF001F1480393E001FC000781307EC03E048
1301A40078EB03C0007C13076CEB0F80390FC07E003803FFF838007FC01C277E9921>I<
EA0F8012FFA2121F120FAAEB81FCEB8FFF90389C0F809038B007C013E09038C003E0A313
80AF391FC007F039FFF83FFEA21F287EA725>I<120EEA3F80A5EA0E00C7FCA7EA078012
FFA2121F120FB3121FEAFFF8A20D287EA713>I<EA0F8012FFA2121F120FABEC3FF8A2EC
1FC01500143C5C14E0EB81C0EB8380018FC7FCEB9F8013BFEBF7C0EBC3E0EB81F0801380
147C80143FEC1F80EC0FC0D81FC013E039FFF83FFCA21E287EA723>107
D<EA0F8012FFA2121F120FB3AFEA1FC0EAFFF8A20D287EA713>I<260F81FC137F3BFF8F
FF03FFC0903A9C0F8703E03B1FB007CC01F0D80FE013D8903AC003F000F8A301805BAF48
6C486C487E3CFFF83FFE0FFF80A2311A7E9937>I<380F81FC38FF8FFF90389C0F80391F
B007C0EA0FE09038C003E0A31380AF391FC007F039FFF83FFEA21F1A7E9925>I<EB3F80
EBFFE03803E0F83807803C48487E001E7F003E1480A248EB07C0A300FC14E0A7007C14C0
A2007E130F003E1480001E1400001F5B380F803E3803E0F86CB45A38003F801B1C7E9A21
>I<380F81FC38FF8FFF9038BC0FC0391FF007E0390FC003F0EB800115F8EC00FCA2157C
157EA7157C15FCA2EC01F801C013F0EC03E09038F007C09038BC1F8090388FFF00EB83F8
0180C7FCA7487EEAFFF8A21F257E9925>I<380F07C038FF1FF0EB38F8EA1F71EA0F6113
C1EBC0F014005BAF487EEAFFFCA2151A7E991A>114 D<3803F840380FFEC0EA3C07EA78
03EA7001EAF000A37E6C1300EA7FC013FC6CB4FC6C1380000713C0C613E0130738C003F0
130113007EA26C13E0130100F813C038EE078038C7FF00EA81FC141C7E9A1A>I<13C0A4
1201A312031207120F121FB512E0A23807C000AC1430A73803E060A23801F0C03800FF80
EB3F0014257FA31A>I<390F8003E000FF133FA2001F1307000F1303B01407A20007130F
9038C01BF03903E073FE3801FFE339007F83E01F1B7E9925>I<39FFF807FEA2390FE001
F001C013E0000714C013E000031480EBF00300011400A23800F806A2EB7C0CA2EB7E1CEB
3E18A26D5AA2EB0FE0A36D5AA26D5AA21F1A7F9823>I<3BFFF8FFF07FE0A23B1FC01FC0
1F80000F90390F800E00A20007150CEC1FC02603E01B5B15E0143B2601F0315B15F0D9F8
6013700000156015F89039FCC078E0017CEB7CC0137D90393F803D80153FEC001F6D91C7
FCA2011E7F010E130EA22B1A7F982F>I<39FFF807FEA2390FE001F001C013E0000714C0
EA03E01580EBF003000114006D5A0000130613FCEB7C0CA26D5AA26D5AA214F06D5AA26D
5AA26D5AA291C7FCA213061230EA780EEAFC0C131C1318485AEA70E0EA3FC06CC8FC1F25
7F9823>121 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ft cmr10 10 79
/Ft 79 125 df<DA0FF813FC91397FFF07FF903B01F807DF83C0903A07E001FF0F903B1F
8007FE1FE090393F000FFC137E16F85B9338F007804848010790C7FC1503ACB812F8A328
01F80003F0C7FCB3AB486C497E267FFFE0B512F0A3333B7FBA30>11
D<EC0FF8EC7FFE903901F80780903907E001C090391F8000E090383F0007017E497EA25B
A2485A6F5AED018092C8FCA9ED03F0B7FCA33901F8000F1503B3AA486C497E267FFFE0B5
12C0A32A3B7FBA2E>I<EC0FFC91387FFF70903901F803F0903807E00790381F800FEB3F
00137EA25B150748481303ADB7FCA33901F80003B3AB486C497E267FFFE0B512C0A32A3B
7FBA2E>I<DA0FF0EB1FF0DA7FFEEBFFFC903B01F80F83F00F903C07E001CFC00380903C
1F8000FF0001C090273F0007FE130F017E4948497EA2495CA248485C03076E5A03030203
C7FC95C8FCA9F007E0BAFCA33C01F80003F0001F1807B3AA486C496C497E267FFFE0B500
C1B51280A3413B7FBA45>I<017C166048B416F02607C3801401260F81C01403D900E04A
5A001E01784A5A003E6D141F003C013FEC7F80007C90271BE003FFC7FC0218B512BF0078
91381FFC3E00F8011CC75A020C14FC5F4C5A16035F4C5A160F5F4CC8FC021C5B00780118
133E007C5D16FC003C01385B003E90383001F0001EEB70036C01E05B903981C007C03907
C3800F2601FF005BD8007C49C9FC90C748EB07C0033EEB1FF04BEB3C3803FCEBF81C4B49
7E913A01F001E00602030103130703E0497E912607C0071480020F15011580DA1F000180
13C04A010F1300143E5C14FC5C495A13035C495A130F4A0107130149C701C013805B013E
1603490203140001FC6F5A49020113064848913800F00E0003705A49ED3C3849ED1FF06C
48ED07C03A437BBD45>37 D<121C127FEAFF80A213C0A3127F121C1200A412011380A212
0313005A1206120E5A5A5A12600A1979B917>39 D<146014E0EB01C0EB0380EB0700130E
131E5B5BA25B485AA2485AA212075B120F90C7FCA25A121EA2123EA35AA65AB2127CA67E
A3121EA2121F7EA27F12077F1203A26C7EA26C7E1378A27F7F130E7FEB0380EB01C0EB00
E01460135278BD20>I<12C07E12707E7E7E120F6C7E6C7EA26C7E6C7EA21378A2137C13
3C133E131EA2131F7FA21480A3EB07C0A6EB03E0B2EB07C0A6EB0F80A31400A25B131EA2
133E133C137C1378A25BA2485A485AA2485A48C7FC120E5A5A5A5A5A13527CBD20>I<15
301578B3A6007FB812F8B912FCA26C17F8C80078C8FCB3A6153036367BAF41>43
D<121C127FEAFF80A213C0A3127F121C1200A412011380A2120313005A1206120E5A5A5A
12600A19798817>I<B512FCA516057F941C>I<121C127FEAFF80A5EA7F00121C09097988
17>I<EB03F8EB1FFF90387E0FC09038F803E03901E000F0484813780007147C48487FA2
48C77EA2481580A3007EEC0FC0A600FE15E0B3007E15C0A4007F141F6C1580A36C15006D
5B000F143EA26C6C5B6C6C5B6C6C485A6C6C485A90387E0FC0D91FFFC7FCEB03F8233A7D
B72A>48 D<EB01C013031307131F13FFB5FCA2131F1200B3B3A8497E007FB512F0A31C38
79B72A>I<EB0FF0EB7FFE48B57E3903E03FE0390F000FF0000E6D7E486D7E486D7E1230
00706D7E126012FCB4EC7F807FA56CC7FC121CC8FCEDFF00A34A5A5D14035D4A5A5D140F
4A5A4A5A92C7FC147C5C495A495A495A495A91C8FC011EEB01805B5B4913034848140048
5A485A000EC75A000FB6FC5A5A485CB6FCA321387CB72A>I<EB07F8EB3FFF4913C03901
F80FF03903C007F848486C7E380E0001000F80381FE0006D7FA56C5A6C5AC85A1401A25D
4A5AA24A5A5DEC0F80027EC7FCEB1FFCECFF809038000FE06E7EEC01FC816E7EED7F80A2
16C0A2153F16E0A2121EEA7F80487EA416C049137F007F1580007EC7FC0070ECFF006C49
5A121E390F8003F83907F00FF00001B512C06C6C90C7FCEB0FF8233A7DB72A>I<1538A2
157815F8A2140114031407A2140F141F141B14331473146314C313011483EB0303130713
06130C131C131813301370136013C01201EA038013005A120E120C5A123812305A12E0B7
12F8A3C73803F800AB4A7E0103B512F8A325397EB82A>I<0006140CD80780133C9038F0
03F890B5FC5D5D158092C7FC14FC38067FE090C9FCABEB07F8EB3FFE9038780F803907E0
07E090388003F0496C7E12066E7EC87EA28181A21680A4123E127F487EA490C71300485C
12E000605C12700030495A00385C6C1303001E495A6C6C485A3907E03F800001B5C7FC38
007FFCEB1FE0213A7CB72A>I<EC3FC0903801FFF0010713FC90380FE03E90383F800790
387E001F49EB3F804848137F485AA2485A000FEC3F0049131E001F91C7FCA2485AA3127F
90C9FCEB01FC903807FF8039FF1E07E090383801F0496C7E01607F01E0137E497FA24914
8016C0151FA290C713E0A57EA56C7E16C0A2121FED3F807F000F15006C6C5B15FE6C6C5B
6C6C485A3900FE07F090383FFFC06D90C7FCEB03FC233A7DB72A>I<12301238123E003F
B612E0A316C05A168016000070C712060060140E5D151800E01438485C5D5DC712014A5A
92C7FC5C140E140C141C5CA25CA214F0495AA21303A25C1307A2130FA3495AA3133FA513
7FA96DC8FC131E233B7BB82A>I<EB03F8EB1FFF017F13C09038FC07F03901E001F84848
6C7E4848137C90C77E48141E000E141F001E80A3121FA27F5D01E0131E6C6C133E01FC13
3C6D5B6C6C6C5AECC1E06CEBF3C06C01FFC7FC6C5BEB3FFF6D13C081017F13F801F07F39
03E07FFE3907801FFF48486C1380481303003E6D13C0003CEB007F007C143F0078EC0FE0
00F814075A1503A21501A36C15C012781503007C15806CEC07006C5C6C6C131ED807E013
7C3903F803F0C6B55A013F1380D907FCC7FC233A7DB72A>I<EB03F8EB1FFF017F13C090
38FC07E03903F803F048486C7E48486C7E49137E121F48487FA2007F158090C7FCA248EC
1FC0A616E0A56C143FA27F123F001F147FA26C6C13FF3907E001DF0003149F3801F00339
00FC0F1FD93FFC13C0EB07F090C7FC153F1680A316005D000F147E487E486C5BA24A5A4A
5A49485A6C48485A001C495A260F807FC7FC3807FFFC000113F038003FC0233A7DB72A>
I<121C127FEAFF80A5EA7F00121CC7FCB2121C127FEAFF80A5EA7F00121C092479A317>
I<121C127FEAFF80A5EA7F00121CC7FCB2121C127F5A1380A4127F121D1201A412031300
A25A1206A2120E5A121812385A1260093479A317>I<007FB812F8B912FCA26C17F8CCFC
AE007FB812F8B912FCA26C17F836167B9F41>61 D<EB3FE03801FFFE3907C03F80390E00
0FC0003CEB07F000301303007014F8007C130100FE14FC7EA4127E003CEB03F8C7FCEC07
F0A2EC0FE0EC1F80EC3F00147E147C5C495A5C495A5CA249C7FCA31306AA90C8FCA8130E
EB3F80497EA56D5A010EC7FC1E3B7CBA27>63 D<1538A3157CA315FEA34A7EA34A6C7EA2
02077FEC063FA2020E7FEC0C1FA2021C7FEC180FA202387FEC3007A202707FEC6003A202
C07F1501A2D901807F81A249C77F167FA20106810107B6FCA24981010CC7121FA2496E7E
A3496E7EA3496E7EA213E0707E1201486C81D80FFC02071380B56C90B512FEA3373C7DBB
3E>65 D<B712E016FC16FF0001903980007FC06C90C7EA1FE0707E707E707EA2707EA283
A75F16035F4C5A4C5A4C5A4C5AEEFF8091B500FCC7FCA291C7EA7F80EE1FE0EE07F0707E
707E83707EA21880177F18C0A7188017FFA24C13005F16034C5AEE1FF8486DEB7FF0B812
C094C7FC16F832397DB83B>I<913A01FF800180020FEBE003027F13F8903A01FF807E07
903A03FC000F0FD90FF0EB039F4948EB01DFD93F80EB00FF49C8127F01FE153F12014848
151F4848150FA248481507A2485A1703123F5B007F1601A35B00FF93C7FCAD127F6DED01
80A3123F7F001F160318006C7E5F6C7E17066C6C150E6C6C5D00001618017F15386D6C5C
D91FE05C6D6CEB03C0D903FCEB0F80902701FF803FC7FC9039007FFFFC020F13F0020113
80313D7BBA3C>I<B712C016F816FE000190398001FF806C90C7EA3FE0EE0FF0EE03F870
7E707E177FA2EF3F8018C0171F18E0170F18F0A3EF07F8A418FCAC18F8A4EF0FF0A218E0
A2171F18C0EF3F80A2EF7F0017FE4C5A4C5AEE0FF0EE3FE0486DEBFF80B8C7FC16F816C0
36397DB83F>I<B812FCA30001903880000F6C90C71201EE007E173E171E170EA31706A3
17078316C0A394C7FCA31501A21503150F91B5FCA3EC000F15031501A21500A21860A318
E093C712C0A41701A3EF0380A21707A2170F173F177F486D903807FF00B9FCA333397DB8
39>I<B812F8A30001903880001F6C90C71201EE00FC177C173C171CA2170CA4170E1706
A2ED0180A21700A41503A21507151F91B5FCA3EC001F15071503A21501A692C8FCAD4813
C0B612C0A32F397DB836>I<DBFF8013C0020FEBF001023F13FC9139FF803F03903A03FC
000787D90FF0EB03CF4948EB00EF4948147F4948143F49C8121F485A4848150F48481507
A248481503A2485A1701123F5B007F1600A448481600AB93B6FCA26C7E9338007FE0EF3F
C0A2123F7F121FA26C7EA26C7EA26C7E6C7E6C6C157F6D7E6D6C14FF6D6C14EFD90FF8EB
03C7D903FEEB0783903A00FFC03F0191393FFFFC00020F01F0130002001380383D7CBA41
>I<B648B512FEA30001902680000313006C90C76C5AB3A491B6FCA391C71201B3A6486D
497EB648B512FEA337397DB83E>I<B612C0A3C6EBC0006D5AB3B3AD497EB612C0A31A39
7EB81E>I<013FB512E0A39039001FFC00EC07F8B3B3A3123FEA7F80EAFFC0A44A5A1380
D87F005B0070131F6C5C6C495A6C49C7FC380781FC3801FFF038007F80233B7DB82B>I<
B649B5FCA3000101809038007FF06C90C8EA3F80053EC7FC173C17385F5F4C5A4C5A4CC8
FC160E5E5E5E5E4B5AED0780030EC9FC5D153E157E15FF5C4A7F4A6C7E140E4A6C7E4A6C
7E14704A6C7E4A6C7E14804A6C7E6F7EA26F7F707EA2707E707EA2707EA2707E707EA270
7E707F8484486D497FB6011FEBFF80A339397DB841>I<B612E0A3000101C0C8FC6C90C9
FCB3AD1718A517381730A31770A317F0A216011603160FEE1FE0486D13FFB8FCA32D397D
B834>I<B5933807FFF86E5DA20001F0FC002600DFC0ED1BF8A2D9CFE01533A3D9C7F015
63A3D9C3F815C3A2D9C1FCEC0183A3D9C0FEEC0303A2027F1406A36E6C130CA36E6C1318
A26E6C1330A36E6C1360A26E6C13C0A3913901FC0180A3913900FE0300A2ED7F06A3ED3F
8CA2ED1FD8A3ED0FF0A3486C6D5A487ED80FFC6D48497EB500C00203B512F8A2ED018045
397DB84C>I<B5913807FFFE8080C69238007FE06EEC1F80D9DFF0EC0F001706EBCFF8EB
C7FCA2EBC3FEEBC1FFA201C07F6E7EA26E7E6E7E81140F6E7E8114036E7E168080ED7FC0
16E0153FED1FF0ED0FF8A2ED07FCED03FEA2ED01FF6F1386A2EE7FC6EE3FE6A2EE1FF6EE
0FFEA216071603A216011600A2177E486C153E487ED80FFC151EB500C0140EA217063739
7DB83E>I<EC03FF021F13E09138FE01FC903901F8007ED907E0EB1F8049486D7ED93F80
EB07F049C76C7E01FE6E7E48486E7E49157E0003167F4848ED3F80A24848ED1FC0A2001F
17E049150F003F17F0A3007F17F8491507A300FF17FCAC007F17F86D150FA3003F17F0A2
6C6CED1FE0A36C6CED3FC0000717806D157F000317006C6C15FEA26C6C4A5A017F4A5A6D
6C495A6D6C495AD907E0EB1F80D903F8017FC7FC903900FE01FC91381FFFE0020390C8FC
363D7BBA41>I<B712C016F816FE000190398001FF806C90C7EA3FC0EE0FE0EE07F0EE03
F817FC17FE1601A217FFA717FEA2EE03FCA2EE07F817F0EE0FE0EE3FC0923801FF0091B5
12FC16F091C9FCB3A5487FB6FCA330397DB839>I<B612FEEDFFE016F8000190388007FE
6C90C76C7EEE3FC0707E707E707EA2707EA283A65FA24C5AA24C5A4C5AEE3F8004FFC8FC
ED07FC91B512E05E9138000FF0ED03F8ED00FE82707E707EA2161F83A583A6F00180A217
F8160F1803486D01071400B66D6C5A04011306933800FE0ECAEA3FFCEF07F0393B7DB83D
>82 D<D90FF813C090383FFE0190B512813903F807E33907E000F74848137F4848133F48
C7121F003E140F007E1407A2007C140312FC1501A36C1400A37E6D14006C7E7F13F86CB4
7E6C13F8ECFF806C14E06C14F86C14FEC680013F1480010714C0EB007F020713E0EC007F
ED3FF0151F150FED07F8A200C01403A21501A37EA216F07E15036C15E06C14076C15C06C
140F6DEB1F80D8FBF0EB3F00D8F0FE13FE39E03FFFF8010F13E0D8C00190C7FC253D7CBA
2E>I<003FB812E0A3D9C003EB001F273E0001FE130348EE01F00078160000701770A300
601730A400E01738481718A4C71600B3B0913807FF80011FB612E0A335397DB83C>I<B6
903807FFFEA3000101809038007FE06C90C8EA1F80EF0F001706B3B2170E6D150C80171C
133F17186D6C14385F6D6C14F06D6C5C6D6C495A6D6CEB07806D6C49C7FC91387F807E91
381FFFF8020713E09138007F80373B7DB83E>I<B5D8FC07B5D8F001B5FCA30007902780
001FFEC7EA1FF86C48C7D80FF8EC07E000010307ED03C01B807F6C6F6C1500A26E5F017F
6E6C1406A280013F4A6C5CA280011F4A6D5BEE067FA26D6C010E6D5BEE0C3FA26D6C011C
6D5BEE181FA26D6C6F5BEE300FA26D6C6F485AEE6007A26D6C4CC7FC9338C003FCA20380
5D913B7F818001FE06A203C1150EDA3FC3C7EAFF0CA203E3151CDA1FE6EC7F98A215F6DA
0FFCEC3FF0A302075E4B141FA202035E4B140FA202015E4B1407A2020093C8FC4B80503B
7EB855>87 D<B500FE91383FFFE0A3000301E0913807FE00C649EC03F0017F6F5A606D6C
5D6D6C140395C7FC6D6C1406A26D6C5C6D6C141C17186D6C143817306D6D5B6E6C13E05F
91383FE0015F91381FF003DA0FF890C8FC1606913807FC0E160C913803FE1C913801FF18
5E6E13B016E0157F6F5AB3A24B7E023FB512C0A33B397FB83E>89
D<EAFFF8A4EAF000B3B3B3B3A3EAFFF8A40D5378BD17>91 D<EAFFF8A4EA0078B3B3B3B3
A3EAFFF8A40D537FBD17>93 D<EA01801203EA0700120E5A12181238123012701260A212
E05AA412CEEAFF8013C0A3127FA2EA3F80EA0E000A197AB917>96
D<EB1FE0EBFFFC3803E03F3907000F80390F8007E0486C6C7E13E06E7EA26E7E6C5A6C5A
C8FCA4147FEB07FFEB3FE0EBFE00EA03F8EA0FF0EA1FC0123F485A90C7FC160C12FEA314
01A26C13036CEB077C903980063E18383FC01E3A0FE0781FF03A03FFF00FE03A007F8007
C026277DA52A>I<EA03F012FFA3120F1203B0EC1FE0EC7FF89038F1E03E9039F3801F80
9039F7000FC001FEEB07E049EB03F049EB01F85BED00FCA216FEA2167E167FAA167E16FE
A216FC15016D14F8ED03F07F01EEEB07E001C6EB0FC09039C7801F00903881E07E903800
FFF8C7EA1FC0283B7EB92E>I<EB03FC90381FFF8090387E03E03901F80070484813F839
07E001FC380FC003A2EA1F80123F90380001F848EB00F01500A2127E12FEAA127E127FA2
6C14067F001F140E6D130C000F141C6C6C13386C6C13706C6C13E039007C07C090381FFF
00EB07F81F277DA525>I<ED0FC0EC03FFA3EC003F150FB0EB03F8EB1FFF90387E078F90
38F801EF3903F0007F4848133F4848131FA24848130F123F90C7FC5AA2127E12FEAA127E
127FA27EA26C6C131FA26C6C133F6C6C137F6C6CEBEFF03A01F801CFFF39007C078F9038
1FFE0FD907F813C0283B7DB92E>I<EB07F8EB1FFF90387C0FC03901F803E03903F001F0
D807E013F8380FC0004848137CA248C7127E153E5A153F127E12FEA3B7FCA248C8FCA512
7EA2127FA26C14037F001F14076C6C13060007140E6D131CD801F013386C6C137090387E
03E090381FFF80903803FC0020277EA525>I<147E903803FF8090380FC1E0EB1F879038
3F0FF0137EA213FCA23901F803C091C7FCADB512FCA3D801F8C7FCB3AB487E387FFFF8A3
1C3B7FBA19>I<ED03F090390FF00FF890393FFC3C3C9039F81F707C3901F00FE03903E0
07C03A07C003E010000FECF000A248486C7EA86C6C485AA200075C6C6C485A6D485A6D48
C7FC38073FFC38060FF0000EC9FCA4120FA213C06CB512C015F86C14FE6CECFF804815C0
3A0F80007FE048C7EA0FF0003E140348140116F8481400A56C1401007C15F06CEC03E000
3F1407D80F80EB0F80D807E0EB3F003901FC01FC39007FFFF0010790C7FC26387EA52A>
I<EA03F012FFA3120F1203B0EC0FF0EC3FFCECF03F9039F1C01F809039F3800FC0EBF700
13FE496D7EA25BA35BB3A3486C497EB500C1B51280A3293A7EB92E>I<EA0380EA0FE048
7EA56C5AEA0380C8FCAAEA03F012FFA312071203B3AA487EB512C0A312387EB717>I<EB
01C0EB07F0EB0FF8A5EB07F0EB01C090C7FCAAEB01F813FFA313071301B3B3A2123C127E
00FF13F01303A214E038FE07C0127C383C0F00EA0FFEEA03F8154984B719>I<EA03F012
FFA3120F1203B1913801FFFCA39138007FC01600157C15705D4A5A4A5A4AC7FC141E1438
147814FC13F1EBF3FEEBF73F01FE7FEBF81F496C7E8114076E7E6E7E811400157E157F81
1680ED1FC0486CEB3FF0B500C0B5FCA3283A7EB92C>I<EA03F012FFA3120F1203B3B3AD
487EB512C0A3123A7EB917>I<2703F00FF0EB1FE000FFD93FFCEB7FF8913AF03F01E07E
903BF1C01F83803F3D0FF3800FC7001F802603F70013CE01FE14DC49D907F8EB0FC0A249
5CA3495CB3A3486C496CEB1FE0B500C1B50083B5FCA340257EA445>I<3903F00FF000FF
EB3FFCECF03F9039F1C01F803A0FF3800FC03803F70013FE496D7EA25BA35BB3A3486C49
7EB500C1B51280A329257EA42E>I<EB03FE90380FFF8090383E03E09038F800F8484813
7C48487F48487F4848EB0F80001F15C090C712074815E0A2007EEC03F0A400FE15F8A900
7E15F0A2007F14076C15E0A26C6CEB0FC0000F15806D131F6C6CEB3F006C6C137EC66C13
F890387E03F090381FFFC0D903FEC7FC25277EA52A>I<3903F01FE000FFEB7FF89038F1
E07E9039F3801F803A0FF7000FC0D803FEEB07E049EB03F04914F849130116FC150016FE
A3167FAA16FEA3ED01FCA26DEB03F816F06D13076DEB0FE001F614C09039F7803F009038
F1E07E9038F0FFF8EC1FC091C8FCAB487EB512C0A328357EA42E>I<D903F813C090381F
FE0190387E07819038FC01C33903F000E3000714774848133749133F001F141F485A150F
48C7FCA312FEAA127FA37E6D131F121F6D133F120F6C6C137F6C6C13EF3901F801CF3900
7E078F90381FFE0FEB07F890C7FCABED1FE00203B5FCA328357DA42C>I<3807E01F00FF
EB7FC09038E1E3E09038E387F0380FE707EA03E613EE9038EC03E09038FC0080491300A4
5BB3A2487EB512F0A31C257EA421>I<EBFF03000313E7380F80FF381E003F487F487F00
707F12F0A2807EA27EB490C7FCEA7FE013FF6C13E06C13F86C7F00037FC67F01071380EB
007F141F00C0EB0FC01407A26C1303A37E15806C13077EEC0F00B4131E38F3C07C38E1FF
F038C03F801A277DA521>I<1318A51338A31378A313F8120112031207001FB5FCB6FCA2
D801F8C7FCB215C0A93800FC011580EB7C03017E13006D5AEB0FFEEB01F81A347FB220>
I<D803F0EB07E000FFEB01FFA3000FEB001F00031407B3A4150FA3151F12016D133F0000
EC77F86D9038E7FF8090383F03C790381FFF87903A03FC07E00029267EA42E>I<B53880
3FFEA33A0FF8000FF06C48EB07E00003EC03C06D148000011500A26C6C1306A26D130E01
7E130CA26D5BA2EC8038011F1330A26D6C5AA214E001075BA2903803F180A3D901FBC7FC
A214FF6D5AA2147CA31438A227257EA32C>I<B53A1FFFE03FFEA3260FF8009038000FF8
6C48017EEB03E018C00003023EEB0180A26C6C013FEB0300A36C6CEC8006156FA2017E90
38EFC00C15C7A2D93F016D5A15830281EBF038D91F831430150102C3EBF87090260FC600
1360A2D907E66D5A02EC137CA2D903FCEB7F804A133FA2010192C7FC4A7FA20100141E4A
130E0260130C37257EA33C>I<B538807FFFA33A03FE003FF00001EC1F80000092C7FC01
7E131C6D13186D6C5AECC070010F5B6D6C5AECF180EB03FB6DB4C8FC6D5AA2147F804A7E
8114CF903801C7E090380383F090380703F8EB0601496C7E011C137E49137F01787F496D
7E486C80000FEC3FF0D8FFFE90B51280A329247FA32C>I<B538803FFEA33A0FF8000FF0
6C48EB07C00003EC03806C7E16007F00001406A2017E5BA2137F6D5BA26D6C5AA2ECC070
010F1360A26D6C5AA214F101035BA2D901FBC7FCA214FF6D5AA2147CA31438A21430A214
701460A25CA2EA7C0100FE5B130391C8FC1306EAFC0EEA701C6C5AEA1FF0EA0FC027357E
A32C>I<003FB512FCA2EB8003D83E0013F8003CEB07F00038EB0FE012300070EB1FC0EC
3F800060137F150014FE495AA2C6485A495AA2495A495A495AA290387F000613FEA2485A
485A0007140E5B4848130C4848131CA24848133C48C7127C48EB03FC90B5FCA21F247EA3
25>I<B81280A2290280962A>I<BD12C0A25202809653>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fu cmbx12 14.4 22
/Fu 22 123 df<171F4D7E4D7EA24D7EA34C7FA24C7FA34C7FA34C7FA24C7FA34C808304
7F80167E8304FE804C7E03018116F8830303814C7E03078116E083030F814C7E031F8116
8083033F8293C77E4B82157E8403FE824B800201835D840203834B800207835D844AB87E
A24A83A3DA3F80C88092C97E4A84A2027E8202FE844A82010185A24A820103854A820107
85A24A82010F855C011F717FEBFFFCB600F8020FB712E0A55B547BD366>65
D<932601FFFCEC01C0047FD9FFC013030307B600F81307033F03FE131F92B8EA803F0203
DAE003EBC07F020F01FCC7383FF0FF023F01E0EC0FF94A01800203B5FC494848C9FC4901
F8824949824949824949824949824990CA7E494883A2484983485B1B7F485B481A3FA248
49181FA3485B1B0FA25AA298C7FC5CA2B5FCAE7EA280A2F307C07EA36C7FA21B0F6C6D19
80A26C1A1F6C7F1C006C6D606C6D187EA26D6C606D6D4C5A6D6D16036D6D4C5A6D6D4C5A
6D01FC4C5A6D6DEE7F806D6C6C6C4BC7FC6E01E0EC07FE020F01FEEC1FF80203903AFFE0
01FFF0020091B612C0033F93C8FC030715FCDB007F14E0040101FCC9FC525479D261>67
D<932601FFFCEC01C0047FD9FFC013030307B600F81307033F03FE131F92B8EA803F0203
DAE003EBC07F020F01FCC7383FF0FF023F01E0EC0FF94A01800203B5FC494848C9FC4901
F8824949824949824949824949824990CA7E494883A2484983485B1B7F485B481A3FA248
49181FA3485B1B0FA25AA298C8FC5CA2B5FCAE6C057FB712E0A280A36C94C7003FEBC000
A36C7FA36C7FA27E6C7FA26C7F6C7FA26D7E6D7F6D7F6D6D5E6D7F6D01FC93B5FC6D13FF
6D6C6D5C6E01F0EC07FB020F01FEEC1FF10203903AFFF001FFE0020091B6EAC07F033FEE
001F030703FC1307DB007F02E01301040149CAFC5B5479D26A>71
D<B8D8C003B8FCA5D8000701F8C9001FEBE000B3AE92BAFCA503F8C9121FB3B1B8D8C003
B8FCA560527CD169>I<93380FFFC00303B6FC031F15E092B712FC0203D9FC0013FF020F
01C0010F13C0023F90C7000313F0DA7FFC02007F494848ED7FFE4901E0ED1FFF49496F7F
49496F7F4990C96C7F49854948707F4948707FA24849717E48864A83481B804A83481BC0
A2481BE04A83A2481BF0A348497113F8A5B51AFCAF6C1BF86E5FA46C1BF0A26E5F6C1BE0
A36C6D4D13C0A26C6D4D1380A26C1B006C6D4D5A6E5E6C626D6C4C5B6D6D4B5B6D6D4B5B
6D6D4B5B6D6D4B5B6D6D4B90C7FC6D6D4B5A6D01FF02035B023F01E0011F13F0020F01FC
90B512C0020390B7C8FC020016FC031F15E0030392C9FCDB001F13E0565479D265>79
D<BAFC19F819FF1AE086D8000701F0C7001F13FC060113FF726C13807313C0070F13E01B
F0857313F81BFCA27313FEA41BFFA81BFEA31BFC61A21BF84F13F04F13E0614F13C04F13
004E485A061F5B92B812F01AC04FC7FC19E003F8CBFCB3AEB812C0A550527CD15C>I<EC
7FFF0107B512F0013F14FE90B77E48D9E00F7F2703FE000113F0486C6D7F6EEB3FFC4882
6E131F83707FA36C496D7FA26C90C7FC6C5AC9FCA6037FB5FC020FB6FC91B7FC01071487
013FEBF0074913803901FFFC004813F0485B485B485B4890C7FC5A5BA2485AA45EA26D5C
007F151D163D6C6C02797F6C6D01F113F86C9026C003E1EBFFE06C9026F81FC014F06C90
B5487EC6ED001F011F01FC010713E0010101E090C8FC3C387CB641>97
D<913801FFF8021FEBFF8091B612F0010315FC010F9038C00FFE903A1FFE0001FFD97FFC
491380D9FFF05B4817C048495B5C5A485BA2486F138091C7FC486F1300705A4892C8FC5B
A312FFAD127F7FA27EA2EF03E06C7F17076C6D15C07E6E140F6CEE1F806C6DEC3F006C6D
147ED97FFE5C6D6CEB03F8010F9038E01FF0010390B55A01001580023F49C7FC020113E0
33387CB63C>99 D<4DB47E0407B5FCA5EE001F1707B3A4913801FFE0021F13FC91B6FC01
0315C7010F9038E03FE74990380007F7D97FFC0101B5FC49487F4849143F484980485B83
485B5A91C8FC5AA3485AA412FFAC127FA36C7EA37EA26C7F5F6C6D5C7E6C6D5C6C6D49B5
FC6D6C4914E0D93FFED90FEFEBFF80903A0FFFC07FCF6D90B5128F0101ECFE0FD9003F13
F8020301C049C7FC41547CD24B>I<913803FFC0023F13FC49B6FC010715C04901817F90
3A3FFC007FF849486D7E49486D7E4849130F48496D7E48178048497F18C0488191C7FC48
17E0A248815B18F0A212FFA490B8FCA318E049CAFCA6127FA27F7EA218E06CEE01F06E14
037E6C6DEC07E0A26C6DEC0FC06C6D141F6C6DEC3F806D6CECFF00D91FFEEB03FE903A0F
FFC03FF8010390B55A010015C0021F49C7FC020113F034387CB63D>I<DA3FFF14FF0103
B5D8F00713C0010FDAFC1F13E0013FECFF7F90267FFC0F9038FF9FF09026FFE001EBF83F
48496C13E0484990387FF01F4890C7D83FF813E0489338FC0FC0F0078048486E6CC7FCA2
003F82A9001F5EA26C6C4A5AA26C5E6C6D495A6C6D495A6C6D485BDAFC0F5B4890B6C8FC
D803EF14FC01C314F02607C03F90C9FC91CBFCA2120FA37FA213F813FE90B7FC6C16F817
FF18C06C836C836C836D828448B9FC12074848C700031480D81FF8EC003F484815074848
6F13C083485A83A56D5D007F18806D5D003F18006C6C4B5AD80FFEED1FFC6C6C6CEC7FF8
6C01E049485A6C01FE011F5B6C6CB71280010F03FCC7FC010115E0D9000F01FCC8FC3C4F
7CB543>103 D<137F497E000313E0487FA2487FA76C5BA26C5BC613806DC7FC90C8FCAD
EB3FF0B5FCA512017EB3B3A6B612E0A51B547BD325>105 D<EB3FF0B5FCA512017EB3B3
B3B1B612F0A51C537BD225>108 D<D93FF0D91FFCEDFFE0B591B500C0010713FE030302
F0011F6D7E030F6E017F8092271FE07FFCD9FF037F922A3F001FFE01F8007F0003027C91
26FF03E080C602F06DD90780137FDAF1E0038FC77FDAF3C0159EDAF7806D01BC143F07FC
8102FFC75C4A5EA24A5EA44A5EB3ACB6D8F807B6D8C03FB512FEA567367BB570>I<D93F
F0EB1FFCB591B512C0030314F0030F8092391FE07FFC92393F001FFE0003027C80C602F0
7FDAF1E081ECF3C0DAF7807F8502FFC7FC5CA25CA45CB3ACB6D8F807B612C0A542367BB5
4B>I<913801FFE0021F13FE91B612C0010315F0010F9038807FFC903A1FFC000FFED97F
F86D6C7E49486D7F48496D7F48496D7F4A147F48834890C86C7EA24883A248486F7EA300
7F1880A400FF18C0AC007F1880A3003F18006D5DA26C5FA26C5F6E147F6C5F6C6D4A5A6C
6D495B6C6D495B6D6C495BD93FFE011F90C7FC903A0FFF807FFC6D90B55A010015C0023F
91C8FC020113E03A387CB643>I<903A3FF001FFE0B5010F13FE033FEBFFC092B612F002
F301017F913AF7F8007FFE0003D9FFE0EB1FFFC602806D7F92C76C7F4A824A6E7F4A6E7F
A2717FA285187F85A4721380AC1A0060A36118FFA2615F616E4A5BA26E4A5B6E4A5B6F49
5B6F4990C7FC03F0EBFFFC9126FBFE075B02F8B612E06F1480031F01FCC8FC030313C092
CBFCB1B612F8A5414D7BB54B>I<90397FE003FEB590380FFF80033F13E04B13F09238FE
1FF89139E1F83FFC0003D9E3E013FEC6ECC07FECE78014EF150014EE02FEEB3FFC5CEE1F
F8EE0FF04A90C7FCA55CB3AAB612FCA52F367CB537>114 D<903903FFF00F013FEBFE1F
90B7FC120348EB003FD80FF81307D81FE0130148487F4980127F90C87EA24881A27FA27F
01F091C7FC13FCEBFFC06C13FF15F86C14FF16C06C15F06C816C816C81C681013F158001
0F15C01300020714E0EC003F030713F015010078EC007F00F8153F161F7E160FA27E17E0
7E6D141F17C07F6DEC3F8001F8EC7F0001FEEB01FE9039FFC00FFC6DB55AD8FC1F14E0D8
F807148048C601F8C7FC2C387CB635>I<143EA6147EA414FEA21301A313031307A2130F
131F133F13FF5A000F90B6FCB8FCA426003FFEC8FCB3A9EE07C0AB011FEC0F8080A26DEC
1F0015806DEBC03E6DEBF0FC6DEBFFF86D6C5B021F5B020313802A4D7ECB34>I<D93FF8
913801FFC0B50207B5FCA50003ED001FC61607B3AE5FA35FA2017F5D173B177B6D6C14F3
DC01E313F06D6CD907C3EBFFC0903A0FFFC03F836D90B51203010114FE6D6C13F8020701
E091C7FC42377BB54B>I<001FB8FC1880A3912680007F130001FCC7B5FC01F0495B495D
49495B495B4B5B48C75C5D4B5B5F003E4A90C7FC92B5FC4A5B5E4A5B5CC7485B5E4A5B5C
4A5B93C8FC91B5FC495B5D4949EB0F805B495B5D495B49151F4949140092C7FC495A485E
485B5C485E485B4A5C48495B4815074849495A91C712FFB8FCA37E31357CB43C>122
D E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin

%%EndSetup
%%Page: 1 1
1 0 bop 550 315 a Fu(Genetic)45 b(Programming)h(Applied)f(to)g
(Compiler)1154 465 y(Heuristic)h(Optimization)1108 754
y Ft(Mark)27 b(Stephenson)1741 723 y Fs(1)1778 754 y
Ft(,)h(Una-Ma)n(y)e(O'Reilly)2492 723 y Fs(2)2529 754
y Ft(,)993 853 y(Martin)h(C.)h(Martin)1635 823 y Fs(2)1672
853 y Ft(,)g(and)f(Saman)g(Amarasinghe)2631 823 y Fs(1)1230
995 y Fr(1)1303 1027 y Fq(Lab)r(oratory)g(for)f(Computer)f(Science)1241
1087 y Fr(2)1314 1118 y Fq(Arti\014cial)i(In)n(telligence)f(Lab)r
(oratory)1257 1210 y(Massac)n(h)n(usetts)h(Inst.)f(of)g(T)-6
b(ec)n(hnology)1441 1301 y(Cam)n(bridge,)26 b(MA,)f(02139)740
1392 y Fp(f)p Fo(mstephen,saman)p Fp(g)p Fo(@cag.lcs.mi)q(t.edu)32
b Fp(f)p Fo(unamay,mcm)p Fp(g)p Fo(@ai.mit.edu)566 1638
y Fn(Abstract.)43 b Fq(Genetic)22 b(programming)e(\(GP\))i(has)g(a)g
(natural)g(nic)n(he)f(in)h(the)f(optimiza-)566 1729 y(tion)i(of)h
(small)f(but)f(high)h(pa)n(y)n(o\013)f(soft)n(w)n(are)j(heuristics.)f
(W)-6 b(e)22 b(use)h(GP)g(to)g(optimize)g(the)566 1820
y(priorit)n(y)h(functions)g(asso)r(ciated)i(with)e(t)n(w)n(o)h(w)n(ell)
g(kno)n(wn)e(compiler)h(heuristics:)h(pred-)566 1912
y(icated)33 b(h)n(yp)r(erblo)r(c)n(k)f(formation,)h(and)f(register)i
(allo)r(cation.)h(Our)d(system)f(ac)n(hiev)n(es)566 2003
y(impressiv)n(e)24 b(sp)r(eedups)g(o)n(v)n(er)g(a)g(standard)h
(baseline)g(for)g(b)r(oth)f(problems.)g(F)-6 b(or)24
b(h)n(yp)r(er-)566 2094 y(blo)r(c)n(k)j(selection,)h(application-sp)r
(eci\014c)f(heuristics)g(obtain)g(an)f(a)n(v)n(erage)h(sp)r(eedup)f(of)
566 2186 y(23\045)35 b(\(up)e(to)h(73\045\))g(for)h(the)e(applications)
j(in)d(our)h(suite.)h(By)e(ev)n(olving)h(the)g(com-)566
2277 y(piler's)26 b(heuristic)e(o)n(v)n(er)g(sev)n(eral)h(b)r(enc)n
(hmarks,)e(the)h(b)r(est)g(general-purp)r(ose)h(heuristic)566
2368 y(our)h(system)e(found)h(impro)n(v)n(es)g(the)g(predication)h
(algorithm)g(b)n(y)e(an)i(a)n(v)n(erage)g(of)g(25\045)566
2460 y(on)36 b(our)f(training)h(set,)g(and)f(9\045)g(on)h(a)f
(completely)g(unrelated)g(test)h(set.)f(W)-6 b(e)35 b(also)566
2551 y(impro)n(v)n(e)24 b(a)i(w)n(ell-studied)f(register)i(allo)r
(cation)g(heuristic.)f(On)f(a)n(v)n(erage,)h(our)g(system)566
2642 y(obtains)19 b(a)g(6\045)g(sp)r(eedup)f(when)h(it)f(sp)r
(ecializes)j(the)d(register)i(allo)r(cation)h(algorithm)e(for)566
2734 y(individual)k(applications.)h(The)e(general-purp)r(ose)i
(heuristic)e(for)i(register)f(allo)r(cation)566 2825
y(ac)n(hiev)n(es)j(a)g(3\045)g(impro)n(v)n(emen)n(t.)330
3018 y Fm(1)112 b(In)m(tro)s(duction)330 3205 y Ft(Genetic)29
b(programming)d(\(GP\))i([11])g(is)g(tan)n(talizing)g(b)r(ecause)g(it)g
(is)g(a)g(metho)r(d)h(for)f(searc)n(hing)330 3304 y(a)h(high)h
(dimensional,)g(large)e(space)h(of)h(executable)f(expressions.)f(GP)i
(is)g(widely)g(applicable)330 3404 y(b)r(ecause)d(its)g(represen)n
(tation,)e(a)i(directly)g Fl(exe)l(cutable)i(expr)l(ession)p
Ft(,)f(is)f(so)f(\015exible.)h(Koza)f([11])330 3504 y(argues)g(that)i
(most)f(problems)g(can)g(b)r(e)h(reform)n(ulated)f(to)g(accept)g
(program-st)n(yle)e(solutions.)455 3603 y(Y)-7 b(et,)21
b(ev)n(en)f(without)h(reform)n(ulation,)e(there)i(are)e(a)h(v)-5
b(ast)21 b(n)n(um)n(b)r(er)f(of)h(problems)f(for)g(whic)n(h)g(a)330
3703 y(program)e(or)i(co)r(delet)g(is)g(a)g Fl(dir)l(e)l(ct)h
Ft(solution.)f(Consider)f(substan)n(tially)h(sized)g(soft)n(w)n(are)f
(systems)330 3802 y(suc)n(h)35 b(as)f(compilers,)g(sc)n(hedulers,)g
(text)h(editors,)f(w)n(eb)h(cra)n(wlers,)e(and)i(in)n(telligen)n(t)g
(tutoring)330 3902 y(systems.)29 b(Curren)n(t)g(GP)g(kno)n(wledge)g
(and)g(practice)g(certainly)g(cannot)g(generate)f(suc)n(h)i(large)330
4002 y(scale)k(e\013orts.)g(Y)-7 b(et,)35 b(GP)f(can)g(act)g
(remedially)-7 b(.)34 b(F)-7 b(or)34 b(example,)g(Ry)n(an)f(et)i(al.)f
([18])g(used)g(GP)330 4101 y(to)g(con)n(v)n(ert)f(serial)g(co)r(de)h
(to)g(parallel.)f(There)g(w)n(as)g(a)h(sizeable)g(pa)n(y)n(o\013)f(in)h
(up)r(dating)g(legacy)330 4201 y(soft)n(w)n(are.)455
4301 y(When)25 b(large)f(scale)g(soft)n(w)n(are)g(systems)g(are)g(dev)n
(elop)r(ed,)h(they)g(inevitably)g(acquire)f(short-)330
4400 y(comings.)j(W)-7 b(e)28 b(b)r(eliev)n(e)f(that)h(GP)f(can)g
(address)g(man)n(y)f(problems)h(asso)r(ciated)f(with)j(complex)330
4500 y(systems{)e(either)h(at)f(dev)n(elopmen)n(t)h(time)g(or)f(later.)
g(Large)g(soft)n(w)n(are)f(systems)h(ha)n(v)n(e)g(`admit-)330
4599 y(ted')e(shortcomings)e(that)i(arise)e(from)h(necessit)n(y)-7
b(.)24 b(Real)h(w)n(orld)e(problems)h(of)g(complex)h(nature)330
4699 y(often)34 b(o\013er)f(NP-complete)g(sub-problems.)g(Since)h
(these)g(problems)e(demand)i(solutions)f(to)330 4799
y(b)r(e)39 b(deliv)n(ered)e(within)i(practical)e(time)i(limits,)f(the)h
(emplo)n(ymen)n(t)f(of)g(heuristics)g(is)g(neces-)330
4898 y(sary)-7 b(.)25 b(Heuristics,)g(b)n(y)h(de\014nition,)g(are)f
(supp)r(osed)h(to)g(b)r(e)g(go)r(o)r(d)f(enough,)g(but)i(not)f
(necessarily)330 4998 y(p)r(erfect.)455 5098 y(The)33
b(genesis)g(of)g(our)g(idea)g(for)g(using)g(GP)g(came)g(from)g
(dissatisfaction)g(with)h(compiler)330 5197 y(e\016ciency)k(and)g
(design,)g(com)n(bined)g(with)g(our)g(realization)e(that)j(compiler)e
(designers)g(are)330 5297 y(o)n(v)n(erwhelmed)27 b(with)h(coun)n(tless)
f(nonlinearly)g(complex)h(considerations.)e(W)-7 b(e)29
b(examined)f(dif-)330 5396 y(feren)n(t)36 b Fl(p)l(asses)g
Ft(within)g(a)g(compiler)f(and)g(their)h(heuristics.)f(W)-7
b(e)36 b(found)g(a)g(common,)f(easily)330 5496 y(learned)25
b(feature)h(in)h(the)f(heuristics)g(that)g(w)n(e)g(term)g(a)g(`priorit)
n(y)f(function'.)i(Put)f(simply)-7 b(,)27 b(pri-)330
5596 y(orit)n(y)j(functions)h(prioritize)f(the)i(options)e(a)n(v)-5
b(ailable)30 b(to)h(a)f(compiler)h(algorithm.)e(Could)i(GP)p
eop
%%Page: 2 2
2 1 bop 450 315 a Ft(generate)24 b(more)g(e\013ectiv)n(e)h(priorit)n(y)
e(functions)j(than)f(curren)n(tly)f(exist)g(in)i(compilers?)e(W)-7
b(e)25 b(use)450 415 y(T)-7 b(rimaran{)28 b(a)h(freely)g(do)n
(wnloadable)f(researc)n(h)f(compiler)i(and)g(sim)n(ulator{)f(to)i(answ)
n(er)e(that)450 515 y(question)g([19].)f(This)h(pap)r(er)g(o\013ers)f
(a)h(pro)r(of)f(of)h(concept:)g(w)n(e)g(use)g(genetic)f(programming)f
(to)450 614 y(optimize)g(the)g(priorit)n(y)f(functions)h(asso)r(ciated)
f(with)h(register)f(allo)r(cation)g(as)g(w)n(ell)h(as)f(branc)n(h)450
714 y(remo)n(v)-5 b(al)18 b(via)i(predication.)f(Our)g(con)n(ten)n
(tion)g(is)h(that)g(priorit)n(y)e(functions)j(are)d(most)i(certain)f
(to)450 814 y(also)26 b(lurk)h(in)h(heuristics)f(within)h(other)f
(similar)g(soft)n(w)n(are)e(systems.)i(Genetic)h(programming)450
913 y(is)36 b(eminen)n(tly)h(suited)f(to)g(optimizing)h(priorit)n(y)d
(functions)j(b)r(ecause)f(they)g(are)g(b)r(est)g(repre-)450
1013 y(sen)n(ted)25 b(in)h(GP)f(terms:)g(as)f(directly)h(executable)g
(expressions.)e(Plus,)i(GP)g(o\013ers)g(the)g(scalable)450
1112 y(means)i(of)h(searc)n(hing)d(through)i(priorit)n(y)g(function)h
(space.)450 1345 y Fm(2)112 b(Related)37 b(W)-9 b(ork)450
1511 y Ft(Both)35 b(GP[15])g(and)g(Grammatical)g(Ev)n(olution)f
(\(GRE\)[13])h(ha)n(v)n(e)f(b)r(een)i(used)g(to)f(optimize)450
1611 y(a)30 b(cac)n(hing)e(strategy)-7 b(.)29 b(A)h(cac)n(hing)f
(strategy)-7 b(,)29 b(in)h(essence,)g(has)f(a)g(priorit)n(y)g
(function.)i(It)f(m)n(ust)450 1710 y(determine)36 b(whic)n(h)g(program)
f(memory)g(lo)r(cations)g(to)h(assign)f(to)h(cac)n(he)g(or)f(mo)n(v)n
(e)g(to)h(main)450 1810 y(memory)i(in)g(order)f(to)h(minimize)h
(`misses'.)f(A)h(miss)f(o)r(ccurs)g(when)g(main)g(memory)g(m)n(ust)450
1910 y(b)r(e)31 b(accessed)e(rather)h(than)g(the)h(cac)n(he.)f(One)g(h)
n(uman)g(designed)g(priorit)n(y)f(function)i(is)g(Least)450
2009 y(Recen)n(tly)k(Used)h(\(LR)n(U\).)g(While)g(LR)n(U)g(is)g(in)n
(tuitiv)n(e,)f(results)g(ev)n(olv)n(ed)g(via)g(GP)g(and)g(GRE)450
2109 y(outp)r(erform)27 b(it.)575 2208 y(Man)n(y)32 b(researc)n(hers)f
(ha)n(v)n(e)i(applied)g(mac)n(hine-learning)f(metho)r(ds)i(to)f
(compilation,)g(and)450 2308 y(therefore,)24 b(only)h(the)g(most)g
(relev)-5 b(an)n(t)24 b(w)n(orks)f(are)h(cited)h(here.)g(By)f(ev)n
(olving)g(compiler)g(heuris-)450 2408 y(tics,)38 b(and)g(not)g(the)g
(applications)f(themselv)n(es,)g(w)n(e)h(need)g(only)f(apply)h(our)f
(pro)r(cess)g(once.)450 2507 y(This)32 b(con)n(trasts)e(with)i(Co)r(op)
r(er)f(et)h(al.)f(who)h(use)f(genetic)h(algorithms)e(\(GA\))j(to)e
(solv)n(e)g(com-)450 2607 y(pilation)j(phase)g(ordering)f(problems)g
([7])h(and)h(the)f(COGEN\(t\))h([10])f(compiler.)f(Calder)h(et)450
2707 y(al.)c(use)f(sup)r(ervised)h(learning)f(tec)n(hniques)g(to)h
(\014ne-tune)g(static)g(branc)n(h)f(prediction)h(heuris-)450
2806 y(tics)36 b([4].)g(Since)g(our)f(p)r(erformance)g(criteria)g(is)h
(based)f(on)h(execution)g(time)g(it)h(requires)d(an)450
2906 y(unsup)r(ervised)27 b(tec)n(hnique)h(suc)n(h)f(as)g(the)h(one)f
(w)n(e)g(presen)n(t)g(in)h(this)g(pap)r(er.)450 3138
y Fm(3)112 b(Compilation,)35 b(Heuristics)g(and)k(Priorit)m(y)34
b(F)-9 b(unctions)450 3304 y Ft(Compiler)25 b(writers)f(ha)n(v)n(e)h(a)
g(di\016cult)h(task.)f(They)g(are)g(exp)r(ected)h(to)f(create)f
(e\013ectiv)n(e)i(and)f(in-)450 3404 y(exp)r(ensiv)n(e)c(solutions)f
(to)i(NP-hard)e(problems)h(suc)n(h)g(as)f(instruction)i(sc)n(heduling)e
(and)i(register)450 3504 y(allo)r(cation)31 b(for)h(in)n(tractably)g
(complex)g(computer)g(arc)n(hitectures.)f(They)h(cop)r(e)g(b)n(y)h
(devising)450 3603 y(clev)n(er)d(heuristics)h(that)h(\014nd)f(go)r(o)r
(d)g(appro)n(ximate)e(solutions)i(for)g(a)g(large)e(class)i(of)g
(applica-)450 3703 y(tions.)575 3802 y(A)i(k)n(ey)f(insigh)n(t)g(in)h
(alleviating)e(this)i(situation)g(is)f(that)h(man)n(y)f(heuristics)h
(ha)n(v)n(e)e(a)h(fo)r(cal)450 3902 y(p)r(oin)n(t.)i(A)g(single)f
Fl(priority)43 b Ft(or)32 b Fl(c)l(ost)42 b Ft(function)34
b(often)g(dictates)g(the)g(e\016cacy)e(of)i(a)f(heuristic.)450
4002 y(A)28 b(priorit)n(y)d(function,)j(a)f(function)h(of)f(the)h
(factors)e(that)h(a\013ect)g(a)g(giv)n(en)g(problem,)f(measures)450
4101 y(the)i(relativ)n(e)e(v)-5 b(alue)28 b(or)f(w)n(eigh)n(t)f(of)i(c)
n(hoices)f(that)g(a)h(compiler)f(algorithm)f(can)h(mak)n(e.)575
4201 y(T)-7 b(ak)n(e)29 b(register)g(allo)r(cation,)g(for)h(example.)g
(When)g(a)g(graph)f(coloring)g(register)g(allo)r(cator)450
4301 y(cannot)f(successfully)f(color)g(an)h(in)n(terference)f(graph,)g
(it)i(`spills')f(a)g(v)-5 b(ariable)27 b(from)h(a)g(register)450
4400 y(to)36 b(memory)g(and)h(remo)n(v)n(es)d(it)j(from)g(the)f(graph.)
g(Cho)r(osing)g(an)g(appropriate)f(v)-5 b(ariable)35
b(to)450 4500 y(spill)i(is)f(crucial.)f(F)-7 b(or)36
b(man)n(y)g(allo)r(cators,)e(this)j(decision)f(is)g(handled)h(b)n(y)f
(a)g(single)f(priorit)n(y)450 4599 y(function.)25 b(Based)f(on)g(an)g
(ev)-5 b(aluation)24 b(of)g(relev)-5 b(an)n(t)24 b(data)g(\()p
Fl(e.g.)p Ft(,)i(n)n(um)n(b)r(er)e(of)g(references,)f(depth)450
4699 y(in)31 b(lo)r(op)f(nest,)h(etc.\),)g(the)f(allo)r(cator)f(in)n(v)
n(ok)n(es)g(its)h(priorit)n(y)g(function)h(to)f(assign)f(a)h(w)n(eigh)n
(t)g(to)450 4799 y(eac)n(h)i(uncolored)f(v)-5 b(ariable.)32
b(Examining)f(the)i(relativ)n(e)f(w)n(eigh)n(ts,)f(the)i(allo)r(cator)e
(determines)450 4898 y(whic)n(h)d(v)-5 b(ariable)26 b(to)i(spill.)575
4998 y(Compiler)i(writers)h(tediously)g(\014ne-tune)h(priorit)n(y)e
(functions)i(to)g(ac)n(hiev)n(e)e(suitable)h(p)r(er-)450
5098 y(formance)k([2].)h(Priorit)n(y)d(functions)k(are)d(widely)i(used)
g(and)g(tied)g(to)g(complicated)f(factors.)450 5197 y(A)30
b(non-exhaustiv)n(e)d(list)j(of)f(examples,)f(just)i(in)f(compilation,)
g(includes)g(list)h(sc)n(heduling)e([9],)450 5297 y(clustered)34
b(sc)n(heduling)h([14],)f(h)n(yp)r(erblo)r(c)n(k)f(formation)h([12],)g
(meld)h(sc)n(heduling)g([1],)f(mo)r(dulo)450 5396 y(sc)n(heduling)k
([17])g(and)g(register)f(allo)r(cation)h([6].)g(GP's)g(represen)n
(tation)f(app)r(ears)g(ideal)i(for)450 5496 y(impro)n(ving)27
b(priorit)n(y)f(functions.)i(W)-7 b(e)28 b(ha)n(v)n(e)f(tested)h(this)g
(observ)-5 b(ation)27 b(via)g(t)n(w)n(o)g(case)g(studies:)450
5596 y(predication)g(and)g(register)f(allo)r(cation.)p
eop
%%Page: 3 3
3 2 bop 330 315 a Fm(4)112 b(Predication)330 509 y Ft(Studies)25
b(sho)n(w)e(that)h(branc)n(h)g(instructions)f(accoun)n(t)h(for)f
(nearly)g(20\045)h(of)g(all)g(instructions)g(ex-)330
609 y(ecuted)h(in)h(a)e(program)f([16].)h(The)h(con)n(trol)f(dep)r
(endences)h(that)h(branc)n(h)e(instructions)g(imp)r(ose)330
708 y(decrease)j(execution)h(sp)r(eed)h(and)g(mak)n(e)e(compiler)h
(optimizations)g(di\016cult.)i(Moreo)n(v)n(er,)c(the)330
808 y(uncertain)n(t)n(y)f(surrounding)f(branc)n(hes)h(mak)n(es)f(it)j
(di\016cult)f(\(and)g(in)g(man)n(y)f(cases)g(imp)r(ossible\))330
908 y(to)h(parallelize)f(disjoin)n(t)h(paths)g(of)h(con)n(trol)e(\015o)
n(w.)g(The)i(data)e(and)h(con)n(trol)f(dep)r(endences)i(ma)n(y)330
1007 y(preclude)g(instruction)h(lev)n(el)f(parallelism.)455
1107 y(Unpredictable)38 b(branc)n(hes)f(are)h(also)g(incredibly)g
(costly)g(on)g(mo)r(dern)h(da)n(y)e(pro)r(cessors.)330
1207 y(The)c(P)n(en)n(tium)828 1204 y Fk(r)812 1207 y
Fj(\015)g Ft(4)g(arc)n(hitecture)g(in)n(v)-5 b(alidates)32
b(up)i(to)f(120)f(in-\015igh)n(t)h(instructions)g(when)h(it)330
1306 y(mispredicts.)f(When)h(a)e(branc)n(h)h(is)g(mispredicted,)g(not)g
(only)g(do)r(es)g(the)g(pro)r(cessor)e(ha)n(v)n(e)h(to)330
1406 y(n)n(ullify)e(incorrect)d(op)r(erations,)h(it)i(ma)n(y)e(ha)n(v)n
(e)g(to)h(in)n(v)-5 b(alidate)29 b(man)n(y)g(unrelated)g(instructions)
330 1505 y(follo)n(wing)e(the)h(branc)n(h)e(that)i(are)f(in)h(the)g
(pip)r(eline.)455 1605 y(The)38 b(shortcomings)f(of)h(branc)n(hing)f
(ha)n(v)n(e)g(led)i(arc)n(hitects)e(to)i(rejuv)n(enate)e
Fl(pr)l(e)l(dic)l(ation)p Ft(.)330 1705 y(Predication)21
b(allo)n(ws)g(a)h(pro)r(cessor)f(that)i(can)f(execute)g(and)h(issue)f
(more)f(than)i(one)f(instruction)330 1804 y(at)g(a)f(time)h(to)g(sim)n
(ultaneously)f(execute)g(the)h(tak)n(en)g(and)f(fall-through)g(paths)h
(of)f(con)n(trol)g(\015o)n(w.)330 1904 y(The)32 b(pro)r(cessor)e(n)n
(ulli\014es)i(all)g(instructions)f(in)i(the)f(incorrect)f(path.)h(A)g
(predicate)g(op)r(erand)330 2004 y(guards)27 b(the)i(execution)f(of)g
(ev)n(ery)g(instruction)g(to)g(ensure)g(only)g(correct)f(paths)h(mo)r
(dify)h(pro-)330 2103 y(cessor)d(state.)455 2203 y(T)-7
b(rimaran's)35 b(predication)i(algorithm)f(iden)n(ti\014es)h(co)r(de)g
Fl(r)l(e)l(gions)45 b Ft(that)37 b(are)f(suitable)i(for)330
2302 y(predication.)30 b(It)i(then)f(en)n(umerates)f(paths)h(\()p
Fl(i.e.)p Ft(,)i(sequences)e(of)g(instructions)f(that)h(it)h(m)n(ust)
330 2402 y(merge)23 b(in)n(to)g(a)g(predicated)h(h)n(yp)r(erblo)r(c)n
(k\).)f(Merging)f(dep)r(ends)i(on)g(the)g(compiler's)e(con\014dence)330
2502 y(that)k(a)f(path)h(is)f(pro)r(cessor)e(e\016cien)n(t.)j(The)g
(priorit)n(y)e(function)i(assigns)e(the)i(con\014dence)f(v)-5
b(alue)330 2601 y(of)28 b(a)f(path.)455 2701 y(T)-7 b(rimaran's)26
b(priorit)n(y)h(function)h(is)g(sho)n(wn)f(in)i(Equation)e(1.)g(In)i
(addition)f(to)f(considering)330 2801 y(the)32 b(probabilit)n(y)e(of)h
(path)g(execution,)g(this)g(priorit)n(y)f(function)i(p)r(enalizes)f
(paths)g(that)g(ha)n(v)n(e)330 2900 y(hazards)21 b(\()p
Fl(e.g.)p Ft(,)j(p)r(oin)n(ter)e(dereferences\),)g(relativ)n(ely)f
(large)g(dep)r(endence)i(heigh)n(t,)f(or)g(to)r(o)g(man)n(y)330
3000 y(instructions.)729 3199 y Fi(pr)r(ior)r(ity)1018
3211 y Fh(i)1069 3199 y Ft(=)h Fi(exec)p 1323 3199 25
4 v 30 w(r)r(atio)1530 3211 y Fh(i)1576 3199 y Fj(\001)c
Fi(h)1666 3211 y Fh(i)1712 3199 y Fj(\001)f Ft(\(2)p
Fi(:)p Ft(1)g Fj(\000)g Fi(d)p 2041 3199 V 30 w(r)r(atio)2248
3211 y Fh(i)2295 3199 y Fj(\000)g Fi(o)p 2423 3199 V
30 w(r)r(atio)2630 3211 y Fh(i)2658 3199 y Ft(\))c Fi(w)r(her)r(e)294
b Ft(\(1\))1090 3392 y Fg(h)1134 3400 y Ff(i)1182 3392
y Fq(=)1263 3277 y Fe(\032)1337 3346 y Fq(0)p Fg(:)p
Fq(25)79 b(:)e(if)26 b Fg(path)1871 3354 y Ff(i)1922
3346 y Fq(con)n(tains)h(a)f(hazard.)1435 3437 y(1)78
b(:)f(if)26 b Fg(path)1871 3445 y Ff(i)1922 3437 y Fq(is)h(hazard)e
(free.)630 3677 y Fg(d)p 675 3677 24 4 v 27 w(r)r(atio)866
3685 y Ff(i)914 3677 y Fq(=)1198 3629 y Fg(dep)p 1318
3629 V 26 w(heig)s(ht)1557 3637 y Ff(i)p 1005 3660 772
4 v 1005 3728 a Fq(max)1148 3736 y Ff(j)s Fr(=1)p Fd(!)p
Ff(N)1384 3728 y Fg(dep)p 1504 3728 24 4 v 27 w(heig)s(ht)1744
3736 y Ff(j)1786 3677 y Fg(;)131 b(o)p 1980 3677 V 28
w(r)r(atio)2172 3685 y Ff(i)2220 3677 y Fq(=)2503 3629
y Fg(num)p 2666 3629 V 28 w(ops)2801 3637 y Ff(i)p 2311
3660 710 4 v 2311 3728 a Fq(max)2453 3736 y Ff(j)s Fr(=1)p
Fd(!)p Ff(N)2690 3728 y Fg(num)p 2853 3728 24 4 v 28
w(ops)2988 3736 y Ff(j)455 3941 y Ft(The)29 b(v)-5 b(ariable)28
b Fi(exec)p 1106 3941 25 4 v 30 w(r)r(atio)p Ft(,)i(whic)n(h)f(is)g
(based)g(on)g(a)g(run)n(time)g(pro\014le,)g(is)g(the)h(probabilit)n(y)
330 4041 y(that)k(the)f(path)h(is)f(executed;)h Fi(num)p
1502 4041 V 29 w(ops)1647 4053 y Fh(i)1708 4041 y Ft(refers)e(to)i(the)
g(n)n(um)n(b)r(er)f(of)g(op)r(erations)f(in)i Fi(path)3280
4053 y Fh(i)3307 4041 y Ft(,)330 4140 y(and)27 b Fi(dep)p
620 4140 V 30 w(heig)s(ht)f Ft(is)i(the)g(exten)n(t)f(of)h(con)n(trol)e
(dep)r(endence.)330 4384 y Fc(4.1)94 b(Predication)32
b(Primitiv)m(es)330 4544 y Ft(In)26 b(addition)g(to)g(the)h(path)f
(prop)r(erties)f(used)h(in)h(Equation)e(1,)h(there)g(are)f(other)g
(salien)n(t)h(prop-)330 4644 y(erties)g(that)h(could)f(p)r(oten)n
(tially)h(distinguish)f(go)r(o)r(d)g(paths)g(from)h(useless)e(paths.)i
(W)-7 b(e)27 b(created)330 4743 y(a)j(GP)g(terminal)g(corresp)r(onding)
e(to)i(eac)n(h)f(prop)r(ert)n(y)-7 b(.)30 b(T)-7 b(ables)29
b(1)h(and)g(5)g(con)n(tain)f(lists)i(of)f(the)330 4843
y(primitiv)n(es)d(w)n(e)g(use.)330 5103 y Fm(5)112 b(Priorit)m(y-Based)
36 b(Coloring)f(Register)h(Allo)s(cation)330 5297 y Ft(The)26
b(gap)f(b)r(et)n(w)n(een)h(register)f(access)g(times)h(and)g(memory)f
(access)g(times)h(is)g(gro)n(wing.)e(There-)330 5396
y(fore,)36 b(register)e(allo)r(cation,)h(the)i(pro)r(cess)e(of)h
(assigning)e(v)-5 b(ariables)35 b(to)h(fast)g(registers,)e(is)i(an)330
5496 y(increasingly)28 b(imp)r(ortan)n(t)i(compiler)f(optimization.)g
(Man)n(y)g(register)g(allo)r(cation)f(algorithms)330
5596 y(use)33 b(cost)h(functions)f(to)h(determine)f(whic)n(h)h(v)-5
b(ariables)32 b(to)i(spill)f(when)h(spilling)g(is)f(required.)p
eop
%%Page: 4 4
4 3 bop 487 236 2927 4 v 485 327 4 92 v 499 300 a Fq(Prop)r(ert)n(y)p
1108 327 V 325 w(Description)p 3412 327 V 487 330 2927
4 v 487 347 V 485 530 4 183 v 499 411 a Fg(dep)p 619
411 24 4 v 26 w(heig)s(ht)p 1108 530 4 183 v 264 w Fq(The)23
b(maxim)n(um)c(instruction)k(dep)r(endence)f(heigh)n(t)g(o)n(v)n(er)h
(all)g(instructions)h(in)1122 502 y(path.)p 3412 530
V 487 533 2927 4 v 485 624 4 92 v 499 597 a Fg(num)p
662 597 24 4 v 27 w(ops)p 1108 624 4 92 v 326 w Fq(The)i(total)g(n)n
(um)n(b)r(er)e(of)i(instructions)g(in)g(the)f(path.)p
3412 624 V 487 628 2927 4 v 485 810 4 183 v 499 692 a
Fg(exec)p 653 692 24 4 v 26 w(r)r(atio)p 1108 810 4 183
v 279 w Fq(Ho)n(w)j(frequen)n(tly)f(this)h(path)g(is)g(executed)f
(compared)h(to)g(other)g(paths)g(con-)1122 783 y(sidered)e(\(from)f
(pro\014le\).)p 3412 810 V 487 814 2927 4 v 485 905 4
92 v 499 878 a Fg(num)p 662 878 24 4 v 27 w(br)r(anches)p
1108 905 4 92 v 132 w Fq(The)h(total)g(n)n(um)n(b)r(er)e(of)i(branc)n
(hes)g(in)f(the)g(path.)p 3412 905 V 487 908 2927 4 v
485 1091 4 183 v 499 972 a Fg(pr)r(edictabil)q(ity)p
1108 1091 V 168 w Fq(P)n(ath)f(predictabilit)n(y)h(obtained)f(b)n(y)g
(sim)n(ulating)g(a)h(branc)n(h)f(predictor)h(\(from)1122
1064 y(pro\014le\).)p 3412 1091 V 487 1094 2927 4 v 485
1277 4 183 v 499 1158 a Fg(av)s(g)p 624 1158 24 4 v 29
w(ops)p 763 1158 V 27 w(executed)p 1108 1277 4 183 v
40 w Fq(The)g(a)n(v)n(erage)h(n)n(um)n(b)r(er)d(of)i(instructions)h
(executed)e(in)h(the)g(path)f(\(from)h(pro-)1122 1249
y(\014le\).)p 3412 1277 V 487 1280 2927 4 v 485 1463
4 183 v 499 1344 a Fg(unsaf)8 b(e)p 752 1344 24 4 v 27
w(J)f(S)t(R)p 1108 1463 4 183 v 190 w Fq(If)29 b(the)f(path)h(con)n
(tains)g(a)g(subroutine)g(call)h(that)f(ma)n(y)e(ha)n(v)n(e)i
(side-e\013ects,)g(it)1122 1435 y(returns)c Fg(tr)r(ue)p
Fq(;)g(otherwise)i(it)f(returns)f Fg(f)8 b(al)q(se)p
Fq(.)p 3412 1463 V 487 1466 2927 4 v 485 1649 4 183 v
499 1530 a Fg(saf)g(e)p 662 1530 24 4 v 27 w(J)f(S)t(R)p
1108 1649 4 183 v 280 w Fq(If)23 b(the)g(path)f(con)n(tains)i(a)f
(side-e\013ect)h(free)f(subroutine)g(call,)i(it)e(returns)g
Fg(tr)r(ue)p Fq(;)1122 1621 y(otherwise)k(it)e(returns)h
Fg(f)8 b(al)q(se)p Fq(.)p 3412 1649 V 487 1652 2927 4
v 485 1835 4 183 v 499 1716 a Fg(mem)p 676 1716 24 4
v 26 w(haz)s(ar)r(d)p 1108 1835 4 183 v 183 w Fq(If)25
b(the)f(path)h(con)n(tains)g(an)g(unresolv)l(able)h(memory)d(access,)j
(it)f(returns)g Fg(tr)r(ue)p Fq(;)1122 1807 y(otherwise)i(it)e(returns)
h Fg(f)8 b(al)q(se)p Fq(.)p 3412 1835 V 487 1838 2927
4 v 485 2021 4 183 v 499 1902 a Fg(max)p 657 1902 24
4 v 26 w(dep)p 798 1902 V 27 w(heig)s(ht)p 1108 2021
4 183 v 84 w Fq(The)30 b(maxim)n(um)c(dep)r(endence)k(heigh)n(t)f(o)n
(v)n(er)h(all)h(paths)f(considered)g(for)h(h)n(y-)1122
1993 y(p)r(erblo)r(c)n(k)25 b(inclusion.)p 3412 2021
V 487 2024 2927 4 v 485 2207 4 183 v 499 2088 a Fg(total)p
662 2088 24 4 v 28 w(ops)p 1108 2207 4 183 v 326 w Fq(The)e(sum)f(of)h
(all)h(instructions)g(in)f(paths)g(considered)g(for)h(h)n(yp)r(erblo)r
(c)n(k)e(inclu-)1122 2179 y(sion.)p 3412 2207 V 487 2210
2927 4 v 485 2301 4 92 v 499 2274 a Fg(num)p 662 2274
24 4 v 27 w(paths)p 1108 2301 4 92 v 250 w Fq(Num)n(b)r(er)h(of)k
(paths)e(considered)h(for)h(h)n(yp)r(erblo)r(c)n(k)e(inclusion.)p
3412 2301 V 487 2305 2927 4 v 450 2407 a Fn(T)-7 b(able)31
b(1.)d(GP)33 b(T)-7 b(erminals)31 b(for)i(Predication)i(Exp)r(erimen)n
(ts)p Fq(.)28 b(These)g(prop)r(erties)h(ma)n(y)d(in\015u-)450
2498 y(ence)f(predication.)h(Some)f(are)g(extracted)g(from)g(pro\014le)
h(information)f(while)h(others)g(do)f(not)g(require)450
2590 y(program)32 b(execution.)g(W)-6 b(e)31 b(also)i(include)f(the)g
(min,)f(mean,)g(max,)g(and)g(standard)h(deviation)g(of)h(all)450
2681 y(paths)25 b(to)h(pro)n(vide)g(macroscopic)g(information.)450
2863 y Ft(F)-7 b(or)33 b(instance)h(in)g(priorit)n(y-based)d(coloring)h
(register)h(allo)r(cation,)f(the)i(priorit)n(y)f(function)h(is)450
2963 y(an)25 b(estimate)g(of)g(the)g(relativ)n(e)f(b)r(ene\014ts)i(of)f
(storing)f(a)g(giv)n(en)g(v)-5 b(ariable)2655 2933 y
Fs(3)2717 2963 y Ft(in)25 b(a)g(register)e([6].)i(The)450
3062 y(algorithm)33 b(then)i(assigns)d(v)-5 b(ariables)33
b(to)h(registers)f(in)h(priorit)n(y)f(order.)g(The)h(success)g(of)g
(the)450 3162 y(register)26 b(allo)r(cation)h(algorithm)f(dep)r(ends)i
(on)f(the)h(priorit)n(y)f(function.)575 3273 y(Priorit)n(y-based)35
b(coloring)i(\014rst)i(asso)r(ciates)e(a)h Fl(live)j(r)l(ange)k
Ft(with)39 b(ev)n(ery)e(v)-5 b(ariable.)38 b(This)450
3372 y(range)18 b(simply)i(denotes)g(the)g(p)r(ortion)f(of)h(co)r(de)f
(in)h(whic)n(h)g(a)f(v)-5 b(ariable)19 b(is)h Fl(live)p
Ft(.)g(More)f(sp)r(eci\014cally)-7 b(,)450 3472 y(a)40
b(liv)n(e)g(range)e(is)i(the)h(comp)r(osition)f(of)g(co)r(de)g(segmen)n
(ts)f(\(basic)h(blo)r(c)n(ks\),)g(through)f(whic)n(h)450
3572 y(the)c(asso)r(ciated)e(v)-5 b(ariable's)33 b(v)-5
b(alue)35 b(m)n(ust)f(b)r(e)h(preserv)n(ed.)e(The)i(algorithm)e(then)i
(prioritizes)450 3671 y(eac)n(h)29 b(liv)n(e)g(range)f(based)h(on)g
(the)h(estimated)f(execution)g(sa)n(vings)f(of)h(register)f(allo)r
(cating)h(the)450 3771 y(asso)r(ciated)d(v)-5 b(ariable:)1040
4016 y Fi(sav)s(ing)s(s)1327 4028 y Fh(i)1377 4016 y
Ft(=)22 b Fi(w)1523 4028 y Fh(i)1570 4016 y Fj(\001)d
Ft(\()p Fi(LD)r(sav)s(e)e Fj(\001)i Fi(uses)2161 4028
y Fh(i)2206 4016 y Ft(+)f Fi(S)5 b(T)12 b(sav)s(e)17
b Fj(\001)i Fi(def)9 b(s)2801 4028 y Fh(i)2828 4016 y
Ft(\))484 b(\(2\))1402 4286 y Fi(pr)r(ior)r(ity)s Ft(\()p
Fi(l)r(r)r Ft(\))25 b(=)1946 4162 y Fe(P)2034 4249 y
Fh(i)p Fb(2)p Fh(lr)2174 4225 y Fi(sav)s(ing)s(s)2461
4237 y Fh(i)p 1946 4267 542 4 v 2179 4343 a Fi(N)3344
4286 y Ft(\(3\))575 4504 y(Equation)k(2)h(is)g(used)g(to)h(compute)f
(the)h(sa)n(vings)e(of)h(eac)n(h)g(co)r(de)g(segmen)n(t.)g
Fi(LD)r(sav)s(e)f Ft(and)450 4604 y Fi(S)5 b(T)12 b(sav)s(e)20
b Ft(are)h(estimates)g(of)h(the)g(execution)f(time)h(sa)n(v)n(ed)f(b)n
(y)g(k)n(eeping)g(the)h(asso)r(ciated)e(v)-5 b(ariable)450
4704 y(in)21 b(a)f(register)f(for)i(references)e(and)i(de\014nitions)g
(resp)r(ectiv)n(ely)-7 b(.)19 b Fi(uses)2562 4716 y Fh(i)2610
4704 y Ft(and)h Fi(def)9 b(s)2935 4716 y Fh(i)2983 4704
y Ft(represen)n(t)20 b(the)450 4803 y(n)n(um)n(b)r(er)28
b(of)g(uses)g(and)g(de\014nitions)g(of)g(a)g(v)-5 b(ariable)27
b(in)h(co)r(de)g(segmen)n(t)f Fi(i)p Ft(.)h Fi(w)2815
4815 y Fh(i)2872 4803 y Ft(is)g(the)g(estimated)450 4903
y(execution)f(frequency)g(for)h(the)f(segmen)n(t.)575
5014 y(Equation)k(3)g(sums)h(the)h(sa)n(vings)d(o)n(v)n(er)g(the)j
Fi(N)40 b Ft(co)r(de)32 b(segmen)n(ts)f(that)i(comp)r(ose)e(the)h(liv)n
(e)450 5113 y(range.)g(Th)n(us,)i(this)g(priorit)n(y)f(function)h
(represen)n(ts)e(the)i(sa)n(vings)f(incurred)g(b)n(y)g(accessing)f(a)
450 5213 y(register)26 b(instead)i(of)f(resorting)f(to)h(main)h(memory)
-7 b(.)p 450 5328 473 4 v 473 5381 a Fr(3)533 5413 y
Fq(F)h(or)27 b(ease)g(of)h(explanation,)f(our)f(description)i(of)f
(priorit)n(y-based)f(register)i(allo)r(cation)h(is)e(not)g(pre-)533
5504 y(cisely)e(accurate.)g(A)e(single)i(v)l(ariable)g(ma)n(y)d
(actually)j(b)r(e)f(assigned)h(to)f(sev)n(eral)h(di\013eren)n(t)e
(registers.)533 5596 y(See)j([6])g(for)h(details.)p eop
%%Page: 5 5
5 4 bop 354 236 2927 4 v 352 327 4 92 v 366 300 a Fq(Prop)r(ert)n(y)p
976 327 V 325 w(Description)p 3279 327 V 354 330 2927
4 v 354 347 V 352 438 4 92 v 366 411 a Fg(spil)q(l)p
520 411 24 4 v 28 w(cost)p 976 438 4 92 v 313 w Fq(The)23
b(estimated)f(cost)i(of)f(spilling)h(this)f(range)h(to)f(memory)-6
b(.)21 b(See)h(Equation)h(2.)p 3279 438 V 354 442 2927
4 v 352 533 4 92 v 366 506 a Fg(r)r(eg)s(ion)p 593 506
24 4 v 27 w(w)r(eig)s(ht)p 976 533 4 92 v 143 w Fq(Num)n(b)r(er)h(of)i
(times)f(the)h(basic)g(blo)r(c)n(k)g(w)n(as)g(executed)f(\(from)g
(pro\014le\).)p 3279 533 V 354 536 2927 4 v 352 628 4
92 v 366 600 a Fg(l)q(iv)s(e)p 497 600 24 4 v 27 w(ops)p
976 628 4 92 v 358 w Fq(The)h(n)n(um)n(b)r(er)d(of)k(liv)n(e)f(op)r
(erations)h(in)e(the)g(blo)r(c)n(k.)p 3279 628 V 354
631 2927 4 v 352 722 4 92 v 366 695 a Fg(num)p 529 695
24 4 v 27 w(cal)q(l)q(s)p 976 722 4 92 v 280 w Fq(The)h(n)n(um)n(b)r
(er)d(of)k(pro)r(cedure)e(calls)j(in)d(a)h(basic)h(blo)r(c)n(k.)p
3279 722 V 354 726 2927 4 v 352 817 4 92 v 366 790 a
Fg(cal)q(l)q(ee)p 565 790 24 4 v 27 w(benef)8 b(it)p
976 817 4 92 v 152 w Fq(The)26 b(callee's)h(`b)r(ene\014t')f(of)g(allo)
r(cating)i(the)e(range.)p 3279 817 V 354 820 2927 4 v
352 912 4 92 v 366 884 a Fg(cal)q(l)q(er)p 566 884 24
4 v 29 w(benef)8 b(it)p 976 912 4 92 v 151 w Fq(The)26
b(caller's)h(`b)r(ene\014t')f(of)g(allo)r(cating)i(the)e(range.)p
3279 912 V 354 915 2927 4 v 352 1006 4 92 v 366 979 a
Fg(def)p 491 979 24 4 v 35 w(num)p 976 1006 4 92 v 317
w Fq(The)g(n)n(um)n(b)r(er)d(of)k(de\014nitions)e(in)h(the)f(blo)r(c)n
(k.)p 3279 1006 V 354 1010 2927 4 v 352 1101 4 92 v 366
1073 a Fg(use)p 487 1073 24 4 v 27 w(num)p 976 1101 4
92 v 322 w Fq(The)h(n)n(um)n(b)r(er)d(of)k(uses)f(in)f(the)h(blo)r(c)n
(k.)p 3279 1101 V 354 1104 2927 4 v 352 1287 4 183 v
366 1168 a Fg(S)t(T)11 b(sav)s(e)p 976 1287 V 363 w Fq(Estimate)34
b(of)h(the)e(execution)h(time)f(sa)n(v)n(ed)h(b)n(y)f(k)n(eeping)h(a)g
(de\014nition)g(in)f(a)989 1259 y(register.)p 3279 1287
V 354 1290 2927 4 v 352 1473 4 183 v 366 1354 a Fg(LD)r(sav)s(e)p
976 1473 V 353 w Fq(Estimate)j(of)g(the)f(execution)h(time)f(sa)n(v)n
(ed)g(b)n(y)g(k)n(eeping)g(a)h(reference)h(in)e(a)989
1445 y(register.)p 3279 1473 V 354 1476 2927 4 v 352
1659 4 183 v 366 1540 a Fg(has)p 492 1540 24 4 v 27 w(sing)s(l)q(e)p
727 1540 V 27 w(r)r(ef)p 976 1659 4 183 v 130 w Fq(If)k(the)f(blo)r(c)n
(k)h(has)g(a)g(single)h(reference,)g(return)f Fg(tr)r(ue)p
Fq(,)f(otherwise)i(return)989 1631 y Fg(f)8 b(al)q(se)p
Fq(.)p 3279 1659 V 354 1662 2927 4 v 352 1845 4 183 v
366 1726 a Fg(is)p 433 1726 24 4 v 27 w(pass)p 612 1726
V 27 w(thr)r(oug)s(h)p 976 1845 4 183 v 81 w Fq(If)24
b(the)f(n)n(um)n(b)r(er)e(of)k(liv)n(e)f(references)h(in)e(the)g(blo)r
(c)n(k)h(is)g(greater)h(than)e(0,)h(return)989 1817 y
Fg(tr)r(ue)p Fq(,)h(otherwise)i(return)e Fg(f)8 b(al)q(se)p
Fq(.)p 3279 1845 V 354 1848 2927 4 v 352 1939 4 92 v
366 1912 a Fg(r)r(ef)p 488 1912 24 4 v 35 w(op)p 592
1912 V 27 w(count)p 976 1939 4 92 v 187 w Fq(The)26 b(n)n(um)n(b)r(er)d
(of)k(references)g(in)e(the)h(blo)r(c)n(k.)p 3279 1939
V 354 1943 2927 4 v 352 2125 4 183 v 366 2007 a Fg(r)r(eg)p
483 2007 24 4 v 29 w(siz)s(e)p 976 2125 4 183 v 347 w
Fq(The)34 b(n)n(um)n(b)r(er)f(of)i(registers)h(a)n(v)l(ailable)g(for)f
(the)f(register)i(class)f(of)h(the)e(liv)n(e)989 2098
y(range.)p 3279 2125 V 354 2129 2927 4 v 352 2311 4 183
v 366 2193 a Fg(f)8 b(or)r(bidden)p 711 2193 24 4 v 27
w(r)r(eg)s(s)p 976 2311 4 183 v 107 w Fq(The)25 b(n)n(um)n(b)r(er)e(of)
j(registers)h(that)e(are)g(not)g(a)n(v)l(ailable)h(to)g(the)e(liv)n(e)i
(range)f(\(b)r(e-)989 2284 y(cause)h(it)g(in)n(terferes)g(with)g(an)g
(allo)r(cated)h(liv)n(e)f(range\).)p 3279 2311 V 354
2315 2927 4 v 352 2497 4 183 v 366 2379 a Fg(GP)11 b(R)q(;)h(F)f(P)g(R)
q(;)h(P)f(R)p 976 2497 V 81 w Fq(If)24 b(the)g(liv)n(e)g(range)h(b)r
(elongs)g(to)f(the)f(class)j(GPR,)e(FPR,)h(or)f(PR)g(resp)r(ectiv)n
(ely)-6 b(,)989 2470 y(return)25 b Fg(tr)r(ue)p Fq(,)g(otherwise)i
(return)e Fg(f)8 b(al)q(se)p Fq(.)p 3279 2497 V 354 2501
2927 4 v 699 2603 a Fn(T)-7 b(able)29 b(2.)c(GP)31 b(T)-7
b(erminals)29 b(for)h(register)h(allo)r(cation)i(exp)r(erimen)n(ts.)330
2814 y Fc(5.1)94 b(Register)31 b(Allo)s(cation)g(Primitiv)m(es)330
2978 y Ft(T)-7 b(rimaran's)22 b(register)f(allo)r(cation)h(heuristic)h
(essen)n(tially)f(w)n(orks)g(at)h(the)g(basic)g(blo)r(c)n(k)g(lev)n
(el.)f(T)-7 b(o)330 3077 y(impro)n(v)n(e)31 b(register)g(allo)r(cation)
g(w)n(e)h(ev)n(olv)n(ed)f(an)h(expression)e(to)i(replace)g(Equation)f
(2.)h(Since)330 3177 y(Equation)22 b(3)h(simply)h(sums)f(and)g
(normalizes)f(the)h(priorities)g(of)g(the)h(individual)f(basic)g(blo)r
(c)n(ks,)330 3277 y(w)n(e)34 b(lea)n(v)n(e)e(it)j(in)n(tact.)f(T)-7
b(able)33 b(2)h(sho)n(ws)f(the)h(quan)n(tities)g(w)n(e)g(used)g(as)f
(GP)h(terminals)f(for)h(the)330 3376 y(priorit)n(y-based)25
b(coloring)h(register)g(allo)r(cator.)330 3640 y Fm(6)112
b(Exp)s(erimen)m(tal)36 b(P)m(arameters)330 3837 y Fc(6.1)94
b(Infrastructure)330 4002 y Ft(Our)31 b(exp)r(erimen)n(tal)f
(infrastructure)h(is)g(built)h(up)r(on)f(T)-7 b(rimaran)30
b([19].)g(T)-7 b(rimaran)30 b(is)h(an)g(in)n(te-)330
4101 y(grated)36 b(compiler)f(and)i(sim)n(ulator)e(for)h(a)g
(parameterized)g(EPIC)f(\(Explicitly)i(P)n(arallel)d(In-)330
4201 y(struction)28 b(Computing\))g(arc)n(hitecture.)f(T)-7
b(rimaran's)26 b(compiler,)h(whic)n(h)h(is)g(called)f(IMP)-7
b(A)n(CT,)330 4301 y(p)r(erforms)40 b(co)r(de)h(pro\014ling.)g(T)-7
b(able)41 b(3)f(details)h(the)h(sp)r(eci\014c)f(arc)n(hitecture)f(o)n
(v)n(er)f(whic)n(h)i(w)n(e)330 4400 y(ev)n(olv)n(ed.)29
b(This)h(mo)r(del)h(is)f(similar)f(to)h(In)n(tel's)g(Itanium)h(arc)n
(hitecture.)e(W)-7 b(e)31 b(enabled)f(the)g(fol-)330
4500 y(lo)n(wing)22 b(T)-7 b(rimaran)22 b(compiler)h(optimizations:)g
(function)h(inlining,)f(lo)r(op)g(unrolling,)g(bac)n(k)n(edge)330
4599 y(coalescing,)i(acyclic)g(global)g(sc)n(heduling)h([5],)g(mo)r
(dulo)h(sc)n(heduling)e([20],)h(h)n(yp)r(erblo)r(c)n(k)f(forma-)330
4699 y(tion,)30 b(register)e(allo)r(cation,)h(mac)n(hine-sp)r(eci\014c)
g(p)r(eephole)h(optimization,)g(and)g(sev)n(eral)e(other)330
4799 y(classic)f(optimizations.)455 4898 y(W)-7 b(e)30
b(built)i(a)e(GP)g(lo)r(op)g(around)g(T)-7 b(rimaran)29
b(and)h(in)n(ternally)g(mo)r(di\014ed)h(IMP)-7 b(A)n(CT)30
b(b)n(y)g(re-)330 4998 y(placing)21 b(its)h(predication)g(priorit)n(y)e
(function)j(\(Equation)e(1\))h(with)g(our)g(GP)f(expression)g(parser)
330 5098 y(and)28 b(ev)-5 b(aluator.)27 b(The)h(predication)g
(algorithm)f(pro)n(vides)g(v)-5 b(ariable)27 b(bindings)h(for)g(the)g
(primi-)330 5197 y(tiv)n(es,)f(and)h(most)f(of)h(these)g(w)n(ere)e
(already)h(a)n(v)-5 b(ailable)26 b(in)i(IMP)-7 b(A)n(CT.)27
b(W)-7 b(e)29 b(mo)r(di\014ed)f(the)g(com-)330 5297 y(piler's)i
(pro\014ler)f(to)i(extract)e(branc)n(h)h(predictabilit)n(y)g
(statistics.)g(W)-7 b(e)31 b(added)f(the)h(minim)n(um,)330
5396 y(maxim)n(um,)d(mean,)g(and)h(standard)e(deviation)h(of)g(all)g
(path-sp)r(eci\014c)g(c)n(haracteristics,)e(whic)n(h)330
5496 y(together)c(encapsulate)h(some)g(global)f(kno)n(wledge.)g(In)h
(addition,)g(w)n(e)g(added)g(a)g(2-bit)g(dynamic)330
5596 y(branc)n(h)k(predictor)f(to)i(the)g(sim)n(ulator.)p
eop
%%Page: 6 6
6 5 bop 457 236 2987 4 v 455 327 4 92 v 469 300 a Fq(F)-6
b(eature)p 1198 327 V 490 w(Description)p 3442 327 V
457 330 2987 4 v 457 347 V 455 530 4 183 v 469 411 a(Registers)p
1198 530 V 439 w(64)36 b(general-purp)r(ose)g(registers,)h(64)f
(\015oating-p)r(oin)n(t)g(registers,)h(and)e(256)1212
502 y(predicate)p 3442 530 V 455 621 4 92 v 1198 621
V 1212 594 a(registers.)p 3442 621 V 457 624 2987 4 v
455 898 4 274 v 469 688 a(In)n(teger)25 b(units)p 1198
898 V 316 w(4)33 b(fully-pip)r(elined)f(units)h(with)f(1-cycle)h
(latencies,)i(except)d(for)h(m)n(ultiply)1212 780 y(instructions,)24
b(whic)n(h)g(require)f(3)h(cycles,)h(and)e(divide)g(instructions,)i
(whic)n(h)1212 871 y(require)g(8.)p 3442 898 V 457 902
2987 4 v 455 1084 4 183 v 469 966 a(Floating-p)r(oin)n(t)h(units)p
1198 1084 V 70 w(2)i(fully-pip)r(elined)g(units)f(with)h(3-cycle)g
(latencies,)i(except)d(for)i(divide)e(in-)1212 1057 y(structions,)f
(whic)n(h)g(require)f(8)h(cycles.)p 3442 1084 V 457 1088
2987 4 v 455 1362 4 274 v 469 1152 a(Memory)e(units)p
1198 1362 V 274 w(2)e(memory)e(units.)i(L1)g(cac)n(he)g(accesses)i(tak)
n(e)e(2)g(cycles,)h(L2)f(accesses)i(tak)n(e)d(7)1212
1243 y(cycles,)28 b(and)g(L3)g(accesses)i(require)e(35)g(cycles.)h
(Stores)f(are)h(bu\013ered,)e(and)1212 1334 y(th)n(us)e(require)g(1)h
(cycle.)p 3442 1362 V 457 1365 2987 4 v 455 1456 4 92
v 469 1429 a(Branc)n(h)f(unit)p 1198 1456 V 341 w(1)h(branc)n(h)f
(unit.)p 3442 1456 V 457 1460 2987 4 v 455 1551 4 92
v 469 1523 a(Branc)n(h)g(prediction)p 1198 1551 V 141
w(2-bit)c(branc)n(h)f(predictor)h(with)h(a)f(5-cycle)h(branc)n(h)e
(misprediction)h(p)r(enalt)n(y)-6 b(.)p 3442 1551 V 457
1554 2987 4 v 984 1696 a Fn(T)f(able)29 b(3.)c(Characteristics)32
b(of)e(the)g(EPIC)g(arc)n(hitecture.)575 1805 y Ft(Similarly)-7
b(,)41 b(to)h(study)g(register)e(allo)r(cation)h(w)n(e)h(mo)r(di\014ed)
g(T)-7 b(rimaran's)40 b(Elcor)h(register)450 1905 y(allo)r(cator)34
b(b)n(y)i(replacing)f(its)i(priorit)n(y)d(function)j(\(Equation)f(2\))g
(with)g(another)g(expression)450 2005 y(parser)29 b(and)h(ev)-5
b(aluator.)29 b(T)-7 b(o)30 b(more)f(e\013ectiv)n(ely)h(stress)f(the)i
(register)e(allo)r(cator,)f(w)n(e)i(only)g(use)450 2104
y(32)d(general-purp)r(ose)e(registers)h(and)h(32)g(\015oating-p)r(oin)n
(t)f(registers.)450 2348 y Fc(6.2)94 b(GP)33 b(Run)e(P)m(arameters)450
2508 y Ft(F)-7 b(or)27 b(eac)n(h)g(run)g(of)h(50)f(generations,)f(the)i
(initial)f(p)r(opulation)h(consists)f(of)g(399)g(randomly)f(ini-)450
2608 y(tialized)f(expressions,)f(as)g(w)n(ell)h(as)g(T)-7
b(rimaran's)23 b(original)h(priorit)n(y)g(function)h(\(Equation)g(1)g
(for)450 2708 y(h)n(yp)r(erblo)r(c)n(k)20 b(formation,)h(and)g
(Equation)f(2)h(for)g(register)f(allo)r(cation\).)g(T)-7
b(ournamen)n(t)21 b(selection)450 2807 y(with)h(a)g(tournamen)n(t)f
(size)h(of)g(sev)n(en)f(is)h(used.)g(W)-7 b(e)22 b Fl(r)l(andomly)31
b Ft(replace)21 b(22\045)g(of)h(the)g(p)r(opulation)450
2907 y(ev)n(ery)i(generation)h(with)h(o\013spring)f(adapted)g(b)n(y)h
(m)n(utation)f(and)h(crosso)n(v)n(er.)c(Roughly)k(5\045)f(of)450
3007 y(the)31 b(o\013spring)f(are)g(m)n(utated,)h(and)g(the)h
(remainder)d(result)i(from)g(crosso)n(v)n(er.)c(Only)k(the)g
Fl(sin-)450 3106 y(gle)j Ft(b)r(est)28 b(expression)e(is)h(guaran)n
(teed)f(surviv)-5 b(al.)27 b(In)g(addition)g(to)h(the)f(sp)r(ecialized)
h(primitiv)n(es)450 3206 y(in)34 b(T)-7 b(able)34 b(1)f(and)g(T)-7
b(able)34 b(2,)f(w)n(e)h(add)f(the)i(standard)d(arithmetic)i(and)g(b)r
(o)r(olean)f(logical)f(and)450 3305 y(comparison)26 b(primitiv)n(es)h
(listed)h(in)g(T)-7 b(ables)27 b(4)g(and)g(5.)p 457 3451
V 455 3542 4 92 v 469 3515 a Fq(Real-V)-6 b(alued)24
b(F)-6 b(unction)p 1978 3542 V 796 w(Represen)n(tation)p
3442 3542 V 457 3546 2987 4 v 457 3562 V 455 3654 4 92
v 469 3626 a Fg(R)q(eal)628 3634 y Fr(1)678 3626 y Fq(+)17
b Fg(R)q(eal)914 3634 y Fr(2)p 1978 3654 V 1992 3626
a Fq(\(add)25 b Fg(R)q(eal)2330 3634 y Fr(1)2389 3626
y Fg(R)q(eal)2548 3634 y Fr(2)2581 3626 y Fq(\))p 3442
3654 V 457 3657 2987 4 v 455 3748 4 92 v 469 3721 a Fg(R)q(eal)628
3729 y Fr(1)678 3721 y Fp(\000)17 b Fg(R)q(eal)914 3729
y Fr(2)p 1978 3748 V 1992 3721 a Fq(\(sub)25 b Fg(R)q(eal)2322
3729 y Fr(1)2381 3721 y Fg(R)q(eal)2540 3729 y Fr(2)2573
3721 y Fq(\))p 3442 3748 V 457 3752 2987 4 v 455 3843
4 92 v 469 3816 a Fg(R)q(eal)628 3824 y Fr(1)678 3816
y Fp(\001)17 b Fg(R)q(eal)875 3824 y Fr(2)p 1978 3843
V 1992 3816 a Fq(\(m)n(ul)24 b Fg(R)q(eal)2332 3824 y
Fr(1)2391 3816 y Fg(R)q(eal)2550 3824 y Fr(2)2584 3816
y Fq(\))p 3442 3843 V 457 3846 2987 4 v 455 4046 4 200
v 469 3850 a Fe(\032)542 3919 y Fg(R)q(eal)701 3927 y
Fr(1)735 3919 y Fg(=R)q(eal)932 3927 y Fr(2)1043 3919
y Fq(:)77 b(if)p Fg(R)q(eal)1344 3927 y Fr(2)1399 3919
y Fp(6)p Fq(=)21 b(0)927 4010 y(0)78 b(:)f(if)26 b Fg(R)q(eal)1370
4018 y Fr(2)1425 4010 y Fq(=)21 b(0)p 1978 4046 V 1992
3965 a(\(div)k Fg(R)q(eal)2311 3973 y Fr(1)2370 3965
y Fg(R)q(eal)2529 3973 y Fr(2)2562 3965 y Fq(\))p 3442
4046 V 457 4049 2987 4 v 455 4142 4 94 v 469 4055 a Fp(p)p
532 4055 193 4 v 532 4115 a Fg(R)q(eal)691 4123 y Fr(1)p
1978 4142 4 94 v 1992 4115 a Fq(\(sqrt)g Fg(R)q(eal)2337
4123 y Fr(1)2370 4115 y Fq(\))p 3442 4142 V 457 4146
2987 4 v 455 4345 4 200 v 469 4149 a Fe(\032)542 4218
y Fg(R)q(eal)701 4226 y Fr(1)812 4218 y Fq(:)77 b(if)q
Fg(B)t(ool)1114 4226 y Fr(1)542 4309 y Fg(R)q(eal)701
4317 y Fr(2)812 4309 y Fq(:)g(if)26 b(not)p Fg(B)t(ool)1250
4317 y Fr(1)p 1978 4345 V 1992 4264 a Fq(\(tern)f Fg(B)t(ool)2343
4272 y Fr(1)2403 4264 y Fg(R)q(eal)2562 4272 y Fr(1)2621
4264 y Fg(R)q(eal)2780 4272 y Fr(2)2814 4264 y Fq(\))p
3442 4345 V 457 4348 2987 4 v 455 4547 4 200 v 469 4351
a Fe(\032)542 4420 y Fg(R)q(eal)701 4428 y Fr(1)752 4420
y Fp(\001)17 b Fg(R)q(eal)949 4428 y Fr(2)1060 4420 y
Fq(:)77 b(if)q Fg(B)t(ool)1362 4428 y Fr(1)790 4512 y
Fg(R)q(eal)949 4520 y Fr(2)1060 4512 y Fq(:)g(if)26 b(not)p
Fg(B)t(ool)1498 4520 y Fr(1)p 1978 4547 V 1992 4466 a
Fq(\(cm)n(ul)e Fg(B)t(ool)2366 4474 y Fr(1)2426 4466
y Fg(R)q(eal)2585 4474 y Fr(1)2644 4466 y Fg(R)q(eal)2803
4474 y Fr(2)2837 4466 y Fq(\))p 3442 4547 V 457 4551
2987 4 v 455 4642 4 92 v 469 4615 a(Returns)g(real)j(constan)n(t)e
Fg(K)p 1978 4642 V 708 w Fq(\(rconst)g Fg(K)5 b Fq(\))p
3442 4642 V 457 4645 2987 4 v 455 4737 4 92 v 469 4709
a(Returns)24 b(real)j(v)l(alue)e(of)i Fg(ar)r(g)g Fq(from)e(en)n
(vironmen)n(t)p 1978 4737 V 55 w(\(rarg)h Fg(ar)r(g)s
Fq(\))p 3442 4737 V 457 4740 2987 4 v 636 4882 a Fn(T)-7
b(able)28 b(4.)e(General)k(real-v)-5 b(alued)31 b(functions)g(included)
g(in)f(the)f(primitiv)n(e)i(set.)450 5236 y Fc(6.3)94
b(Ev)-5 b(aluation)450 5396 y Ft(The)31 b(results)e(presen)n(ted)h(in)h
(this)g(pap)r(er)f(use)g(total)g(execution)h(time)g(\(rep)r(orted)f(b)n
(y)g(the)h(T)-7 b(ri-)450 5496 y(maran)31 b(system\))h(for)f(either)h
(one)f(or)g(t)n(w)n(o)g(sets)h(of)g(input)g(data)g(to)f(assign)g
(\014tness.)h(This)g(ap-)450 5596 y(proac)n(h)c(rew)n(ards)g(the)i
(optimization)f(of)g(frequen)n(tly)h(executed)f(pro)r(cedures,)g(and)g
(therefore,)p eop
%%Page: 7 7
7 6 bop 337 236 2987 4 v 335 327 4 92 v 349 300 a Fq(Bo)r(olean-V)-6
b(alued)26 b(F)-6 b(unction)p 1858 327 V 676 w(Represen)n(tation)p
3322 327 V 337 330 2987 4 v 337 347 V 335 438 4 92 v
349 411 a Fg(B)t(ool)508 419 y Fr(1)568 411 y Fq(and)25
b Fg(B)t(ool)876 419 y Fr(2)p 1858 438 V 1872 411 a Fq(\(and)g
Fg(B)t(ool)2210 419 y Fr(1)2270 411 y Fg(B)t(ool)2429
419 y Fr(2)2464 411 y Fq(\))p 3322 438 V 337 442 2987
4 v 335 533 4 92 v 349 506 a Fg(B)t(ool)508 514 y Fr(1)568
506 y Fq(or)h Fg(B)t(ool)821 514 y Fr(2)p 1858 533 V
1872 506 a Fq(\(or)g Fg(B)t(ool)2155 514 y Fr(1)2215
506 y Fg(B)t(ool)2374 514 y Fr(2)2409 506 y Fq(\))p 3322
533 V 337 536 2987 4 v 335 628 4 92 v 349 600 a(not)f
Fg(B)t(ool)644 608 y Fr(1)p 1858 628 V 1872 600 a Fq(\(not)g
Fg(B)t(ool)2197 608 y Fr(1)2232 600 y Fq(\))p 3322 628
V 337 631 2987 4 v 335 722 4 92 v 349 695 a Fg(R)q(eal)508
703 y Fr(1)562 695 y Fg(<)c(R)q(eal)802 703 y Fr(2)p
1858 722 V 1872 695 a Fq(\(lt)k Fg(R)q(eal)2137 703 y
Fr(1)2196 695 y Fg(R)q(eal)2355 703 y Fr(2)2389 695 y
Fq(\))p 3322 722 V 337 726 2987 4 v 335 817 4 92 v 349
790 a Fg(R)q(eal)508 798 y Fr(1)562 790 y Fg(>)c(R)q(eal)802
798 y Fr(2)p 1858 817 V 1872 790 a Fq(\(gt)k Fg(R)q(eal)2154
798 y Fr(1)2213 790 y Fg(R)q(eal)2372 798 y Fr(2)2406
790 y Fq(\))p 3322 817 V 337 820 2987 4 v 335 912 4 92
v 349 884 a Fg(R)q(eal)508 892 y Fr(1)562 884 y Fq(=)c
Fg(R)q(eal)802 892 y Fr(2)p 1858 912 V 1872 884 a Fq(\(eq)k
Fg(R)q(eal)2161 892 y Fr(1)2220 884 y Fg(R)q(eal)2379
892 y Fr(2)2412 884 y Fq(\))p 3322 912 V 337 915 2987
4 v 335 1006 4 92 v 349 979 a(Returns)f(Bo)r(olean)p
1858 1006 V 964 w(\(b)r(const)h Fp(f)p Fg(tr)r(ue;)13
b(f)8 b(al)q(se)p Fp(g)p Fq(\))p 3322 1006 V 335 1098
V 349 1070 a(constan)n(t)25 b Fp(f)p Fg(tr)r(ue;)13 b(f)8
b(al)q(se)p Fp(g)p 1858 1098 V 3322 1098 V 337 1101 2987
4 v 335 1284 4 183 v 349 1165 a Fq(Returns)29 b(Bo)r(olean)k(v)l(alue)d
(of)h Fg(ar)r(g)i Fq(from)d(en)n(viron-)349 1256 y(men)n(t)p
1858 1284 V 1872 1165 a(\(barg)c Fg(ar)r(g)s Fq(\))p
3322 1284 V 337 1287 2987 4 v 330 1428 a Fn(T)-7 b(able)24
b(5.)d(General)k(purp)r(ose)g(GP)g(primitiv)n(es.)d Fq(Both)f(exp)r
(erimen)n(ts)f(use)h(the)g(primitiv)n(es)g(sho)n(wn)330
1520 y(in)26 b(this)f(table.)330 1718 y Ft(it)39 b(ma)n(y)f(b)r(e)i
(slo)n(w)e(to)g(con)n(v)n(erge)f(up)r(on)i(general-purp)r(ose)d
(solutions.)j(Ho)n(w)n(ev)n(er,)d(when)j(one)330 1818
y(w)n(an)n(ts)27 b(to)h(sp)r(ecialize)f(a)g(compiler)g(for)h(a)f(giv)n
(en)g(program,)f(this)i(ev)-5 b(aluation)27 b(of)h(\014tness)g(w)n
(orks)330 1917 y(extremely)e(w)n(ell.)g(Our)f(system)h(rew)n(ards)e
Fl(p)l(arsimony)35 b Ft(b)n(y)26 b(selecting)g(the)h(smaller)e(of)h(t)n
(w)n(o)f(oth-)330 2017 y(erwise)i(equally)g(\014t)h(expressions)e([11,)
g(p.)i(109].)455 2117 y(Our)e(exp)r(erimen)n(ts)g(select)h(training)f
(and)h(testing)g(programs)d(from)j(a)f(suite)h(of)g(24)f(b)r(enc)n(h-)
330 2216 y(marks)34 b(listed)i(in)g(T)-7 b(able)35 b(6.)g(W)-7
b(e)36 b(run)f(GP)g(on)g(nine)h(b)r(enc)n(hmarks)e(to)h(examine)g(sp)r
(ecialized)330 2316 y(predication)h(priorit)n(y)g(functions)h(and)f
(six)h(b)r(enc)n(hmarks)f(for)g(register)g(allo)r(cation)f(priorit)n(y)
330 2416 y(functions.)455 2515 y(T)-7 b(o)28 b(\014nd)i(a)f
(general-purp)r(ose)d(priorit)n(y)i(function)i(\()p Fl(i.e.)p
Ft(,)h(a)e(function)h(that)f(w)n(orks)f(w)n(ell)h(for)330
2615 y(m)n(ultiple)i(programs\),)e(w)n(e)h(run)h(GP)f(on)h(a)f(set)h
(of)f(`training')g(programs,)f(eac)n(h)h(with)h(one)f(set)330
2715 y(of)i(input)g(data.)f(T)-7 b(o)32 b(a)n(v)n(oid)e(the)i
(computational)f(exp)r(ense)h(of)f(a)h(large)e(training)h(set,)h(w)n(e)
f(use)330 2814 y(dynamic)j(subset)h(selection)f(\(DSS\))i([8].)f(DSS)g
(essen)n(tially)f(selects)g(di\013eren)n(t)h(subsets)f(\(size)330
2914 y(4,5,)29 b(or)h(6\))g(of)g(the)g(b)r(enc)n(hmark)f(training)h
(set)g(that)g(is)g(used)g(for)g(\014tness)g(ev)-5 b(aluation.)30
b(Subset)330 3014 y(selection)f(is)g(based)g(on)g(ho)n(w)f(p)r(o)r
(orly)h(the)g(curren)n(t)g(b)r(est)g(expression)f(p)r(erforms.)h(Th)n
(us,)g(hard)330 3113 y(to)e(optimize)h(training)e(b)r(enc)n(hmarks)h
(are)f(more)h(lik)n(ely)g(to)g(app)r(ear)f(in)i(the)g(training)f(set.)g
(The)330 3213 y(training)35 b(set)g(consists)g(of)g(t)n(w)n(elv)n(e)f
(and)i(eigh)n(t)f(b)r(enc)n(hmarks)f(for)h(predication)f(and)i
(register)330 3312 y(allo)r(cation,)27 b(resp)r(ectiv)n(ely)-7
b(.)455 3412 y(W)g(e)32 b(presen)n(t)g(the)h(b)r(est)g(results)f(of)h
(all)f(runs)g(completed)h(to)f(date.)g(This)h(illustrates)f(our)330
3512 y(fo)r(cus)f(on)g(application)f(p)r(erformance.)g(W)-7
b(e)31 b(used)g(the)g(recognized)f(b)r(enc)n(hmarks)g(in)h(T)-7
b(able)30 b(6)330 3611 y(to)25 b(ev)-5 b(aluate)24 b(ev)n(olv)n(ed)g
(priorit)n(y)f(functions.)i(The)g(set)g(includes)g(all)g(of)g(the)g(T)
-7 b(rimaran)23 b(certi\014ed)330 3711 y(b)r(enc)n(hmarks)763
3681 y Fs(4)827 3711 y Ft([19])k(and)g(most)h(of)f(the)h(Mediab)r(enc)n
(h)g(b)r(enc)n(hmarks.)330 3977 y Fm(7)112 b(Results)330
4177 y Fc(7.1)94 b(Predication:)32 b(Sp)s(ecialized)f(Priorit)m(y)h(F)
-8 b(unctions)330 4344 y Ft(Sp)r(ecialized)28 b(heuristics)f(are)g
(created)g(b)n(y)g(optimizing)h(a)f(priorit)n(y)g(function)h(for)f(a)g
(particular)330 4444 y(b)r(enc)n(hmark)35 b(ev)-5 b(aluated)35
b(with)h(one)g(set)f(of)h(input)g(data.)f(Figure)g(1)g(sho)n(ws)g(that)
h(GP)f(is)h(ex-)330 4543 y(tremely)24 b(e\013ectiv)n(e)g(on)g(this)h
(basis.)e(The)i(dark)e(bar)h(sho)n(ws)f(the)h(sp)r(eedup)h(of)f(eac)n
(h)g(b)r(enc)n(hmark,)330 4643 y(o)n(v)n(er)30 b(T)-7
b(rimaran's)31 b(baseline)g(heuristic,)h(when)h(run)f(with)g(the)h
(same)e(data)h(on)g(whic)n(h)g(it)g(w)n(as)330 4743 y(trained.)i(The)h
(ligh)n(t)f(bar)g(sho)n(ws)f(the)i(sp)r(eedup)f(when)h(alternate)f
(input)h(data)f(is)g(used.)h(W)-7 b(e)330 4842 y(obtain)27
b(an)h(a)n(v)n(erage)c(sp)r(eedup)k(of)g(23\045)f(\(up)h(to)f(73\045\))
h(for)f(our)g(ev)-5 b(aluation)26 b(suite.)455 4942 y(As)j(w)n(e)h(w)n
(ould)f(exp)r(ect,)h(in)g(most)g(cases)f(the)h(sp)r(eedup)g(on)g(the)g
(training)f(data)g(is)h(greater)330 5042 y(than)h(that)h(ac)n(hiev)n
(ed)e(on)h(the)g(test)h(data.)e(The)h(alternate)g(input)h(data)e(lik)n
(ely)h(exercises)f(dif-)330 5141 y(feren)n(t)d(paths)h(of)f(con)n(trol)
g(\015o)n(w|paths)g(whic)n(h)g(ma)n(y)g(ha)n(v)n(e)f(b)r(een)i(un)n
(used)g(during)f(training.)455 5241 y(In)k(most)h(runs,)f(the)h
Fl(initial)41 b Ft(p)r(opulation)32 b(con)n(tains)f(at)g(least)g(one)g
(expression)g(that)g(out-)330 5341 y(p)r(erforms)26 b(the)h(baseline.)f
(This)g(means)g(that)h(b)n(y)f(simply)h(creating)e(and)h(testing)h(399)
e(random)330 5440 y(expressions,)h(w)n(e)h(w)n(ere)g(able)g(to)h
(\014nd)g(a)f(priorit)n(y)f(function)j(that)f(outp)r(erformed)f(T)-7
b(rimaran's)p 330 5510 473 4 v 353 5564 a Fr(4)413 5596
y Fq(W)h(e)25 b(could)h(not)g(get)g(134.p)r(erl)h(to)f(execute)f
(correctly)-6 b(,)26 b(though)g([19])h(certi\014ed)e(it.)p
eop
%%Page: 8 8
8 7 bop 485 236 2905 4 v 483 327 4 92 v 497 300 a Fq(Benc)n(hmark)p
979 327 V 115 w(Suite)p 1475 327 V 325 w(Description)p
3388 327 V 485 330 2905 4 v 485 347 V 483 438 4 92 v
497 411 a(co)r(drle4)p 979 438 V 255 w(See)26 b([3])p
1475 438 V 279 w(RLE)f(t)n(yp)r(e)g(4)h(enco)r(der/deco)r(der.)p
3388 438 V 483 530 V 497 502 a(deco)r(drle4)p 979 530
V 1475 530 V 3388 530 V 485 533 2905 4 v 483 624 4 92
v 497 597 a(h)n(u\013)p 631 597 24 4 v 26 w(enc)p 979
624 4 92 v 229 w(See)g([3])p 1475 624 V 279 w(A)f(Hu\013man)f(enco)r
(der/deco)r(der.)p 3388 624 V 483 716 V 497 688 a(h)n(u\013)p
631 688 24 4 v 26 w(dec)p 979 716 4 92 v 1475 716 V 3388
716 V 485 719 2905 4 v 483 810 4 92 v 497 783 a(djp)r(eg)p
979 810 V 312 w(Mediab)r(enc)n(h)p 1475 810 V 93 w(Lossy)i(still)h
(image)f(decompressor.)p 3388 810 V 485 814 2905 4 v
483 905 4 92 v 497 878 a(g721enco)r(de)p 979 905 V 115
w(Mediab)r(enc)n(h)p 1475 905 V 93 w(CCITT)h(v)n(oice)p
3388 905 V 483 996 V 497 969 a(g721deco)r(de)p 979 996
V 1475 996 V 611 w(compressor/decompressor.)p 3388 996
V 485 1000 2905 4 v 483 1091 4 92 v 497 1064 a(mp)r(eg2dec)p
979 1091 V 164 w(Mediab)r(enc)n(h)p 1475 1091 V 93 w(Lossy)f(video)g
(decompressor.)p 3388 1091 V 485 1094 2905 4 v 483 1186
4 92 v 497 1158 a(rasta)p 979 1186 V 329 w(Mediab)r(enc)n(h)p
1475 1186 V 93 w(Sp)r(eec)n(h)f(recognition)i(application.)p
3388 1186 V 485 1189 2905 4 v 483 1280 4 92 v 497 1253
a(ra)n(w)n(caudio)p 979 1280 V 159 w(Mediab)r(enc)n(h)p
1475 1280 V 93 w(Adaptiv)n(e)e(di\013eren)n(tial)h(pulse)g(co)r(de)p
3388 1280 V 483 1372 V 497 1344 a(ra)n(wdaudio)p 979
1372 V 1475 1372 V 644 w(mo)r(dulation)f(audio)h(enco)r(der/deco)r
(der.)p 3388 1372 V 485 1375 2905 4 v 483 1466 4 92 v
497 1439 a(toast)p 979 1466 V 329 w(Mediab)r(enc)n(h)p
1475 1466 V 93 w(Sp)r(eec)n(h)f(transco)r(der.)p 3388
1466 V 485 1469 2905 4 v 483 1561 4 92 v 497 1533 a(unepic)p
979 1561 V 277 w(Mediab)r(enc)n(h)p 1475 1561 V 93 w(Exp)r(erimen)n
(tal)g(image)h(decompressor.)p 3388 1561 V 485 1564 2905
4 v 483 1655 4 92 v 497 1628 a(085.cc1)p 979 1655 V 254
w(SPEC92)p 1475 1655 V 218 w(gcc)g(C)g(compiler.)p 3388
1655 V 485 1659 2905 4 v 483 1750 4 92 v 497 1723 a(052.alvinn)p
979 1750 V 153 w(SPEC92)p 1475 1750 V 218 w(Single-precision)h(neural)f
(net)n(w)n(ork)f(training.)p 3388 1750 V 485 1753 2905
4 v 483 1845 4 92 v 497 1817 a(179.art)p 979 1845 V 262
w(SPEC2000)p 1475 1845 V 142 w(A)g(neural)h(net)n(w)n(ork-based)f
(image)h(recognition)h(algorithm.)p 3388 1845 V 485 1848
2905 4 v 483 1939 4 92 v 497 1912 a(osdemo)p 979 1939
V 247 w(Mediab)r(enc)n(h)p 1475 1939 V 93 w(P)n(art)f(of)g(a)g(3-D)g
(graphics)g(library)-6 b(.)p 3388 1939 V 483 2031 V 497
2003 a(mipmap)p 979 2031 V 220 w(Mediab)r(enc)n(h)p 1475
2031 V 93 w(similar)26 b(to)g(Op)r(enGL.)p 3388 2031
V 485 2034 2905 4 v 483 2125 4 92 v 497 2098 a(129.compress)p
979 2125 V 56 w(SPEC95)p 1475 2125 V 218 w(In-memory)d(\014le)i
(compressor)h(and)p 3388 2125 V 483 2217 V 979 2217 V
1475 2217 V 1488 2189 a(decompressor.)p 3388 2217 V 485
2220 2905 4 v 483 2403 4 183 v 497 2284 a(023.eqn)n(tott)p
979 2403 V 116 w(SPEC92)p 1475 2403 V 218 w(Creates)32
b(a)e(truth)g(table)h(from)f(a)h(logical)h(represen)n(tation)f(of)g(a)
1488 2375 y(Bo)r(olean)c(equation.)p 3388 2403 V 485
2406 2905 4 v 483 2497 4 92 v 497 2470 a(132.ijp)r(eg)p
979 2497 V 199 w(SPEC95)p 1475 2497 V 218 w(JPEG)g(compressor)f(and)p
3388 2497 V 483 2589 V 979 2589 V 1475 2589 V 1488 2561
a(decompressor.)p 3388 2589 V 485 2592 2905 4 v 483 2683
4 92 v 497 2656 a(130.li)p 979 2683 V 318 w(SPEC95)p
1475 2683 V 218 w(Lisp)g(in)n(terpreter.)p 3388 2683
V 485 2687 2905 4 v 483 2778 4 92 v 497 2751 a(124.m88ksim)p
979 2778 V 62 w(SPEC95)p 1475 2778 V 218 w(Pro)r(cessor)i(sim)n
(ulator.)p 3388 2778 V 485 2781 2905 4 v 483 2873 4 92
v 497 2845 a(147.v)n(ortex)p 979 2873 V 148 w(SPEC95)p
1475 2873 V 218 w(An)d(ob)t(ject)h(orien)n(ted)g(database.)p
3388 2873 V 485 2876 2905 4 v 450 2978 a Fn(T)-7 b(able)34
b(6.)d(Benc)n(hmarks)j(used)p Fq(.)c(The)h(set)f(includes)h
(applications)h(from)e(the)g(Sp)r(ecIn)n(t,)g(Sp)r(ecFP)-6
b(,)450 3069 y(Mediab)r(enc)n(h)26 b(b)r(enc)n(hmark)e(suites,)i(and)g
(a)g(few)g(miscellaneous)h(programs.)450 3260 y Ft(for)21
b(the)h(giv)n(en)f(b)r(enc)n(hmark)g(and)h(input)h(data.)e(In)h(man)n
(y)f(cases,)g(GP)g(\014nds)h(a)g(sup)r(erior)e(priorit)n(y)450
3359 y(function)27 b(quic)n(kly)-7 b(,)26 b(and)g(\014nds)h(only)f
(marginal)f(impro)n(v)n(emen)n(ts)g(as)g(the)i(ev)n(olution)f(con)n
(tin)n(ues.)450 3459 y(In)36 b(fact,)f(the)h(baseline)f(priorit)n(y)f
(function)i(is)f(often)h(quic)n(kly)e(obscured)h(b)n(y)g(GP-generated)
450 3559 y(expressions.)25 b(Note,)i(ho)n(w)n(ev)n(er,)d(that)j(h)n
(uman)f(designed)g(priorit)n(y)g(functions)g(ma)n(y)g(ha)n(v)n(e)g(b)r
(een)450 3658 y(designed)h(for)g(more)g(generalit)n(y)f(than)i(can)f(b)
r(e)h(ev)-5 b(aluated)27 b(in)h(our)f(in)n(v)n(estigativ)n(e)f(setup.)
575 3758 y(Once)f(GP)g(has)h(homed)f(in)h(on)g(a)f(fairly)g(go)r(o)r(d)
g(solution,)h(the)g(searc)n(h)e(space)h(and)h(op)r(erator)450
3858 y(dynamics)31 b(are)f(suc)n(h)h(that)g(most)g(o\013spring)f(will)h
(b)r(e)h(w)n(orse,)d(some)i(will)g(b)r(e)h(equal)e(and)h(v)n(ery)450
3957 y(few)40 b(turn)g(out)g(to)g(b)r(e)g(b)r(etter.)g(This)g(seems)f
(indicativ)n(e)h(of)g(a)f(steep)h(hill)g(in)g(the)h(solution)450
4057 y(space.)32 b(In)h(addition,)f(m)n(ultiple)h(runs)g(yield)f(only)g
(min)n(uscule)h(di\013erences)f(in)h(p)r(erformance.)450
4157 y(This)f(migh)n(t)f(indicate)h(the)g(searc)n(h)e(space)h
(\(determined)i(b)n(y)e(our)g(primitiv)n(e)g(set\))h(has)g(man)n(y)450
4256 y(p)r(ossible)27 b(solutions)g(asso)r(ciated)f(with)i(a)g(giv)n
(en)e(\014tness.)450 4507 y Fc(7.2)94 b(Predication:)32
b(Finding)f(General)h(Purp)s(ose)f(Priorit)m(y)h(F)-8
b(unctions)450 4675 y Ft(W)h(e)21 b(divided)f(the)h(b)r(enc)n(hmarks)e
(in)i(T)-7 b(able)20 b(6)g(in)n(to)g(t)n(w)n(o)f(exclusiv)n(e)h(sets)
2619 4645 y Fs(5)2656 4675 y Ft(:)g(a)g(12)f(elemen)n(t)i(training)450
4775 y(set,)k(and)g(a)g(12)f(elemen)n(t)h(test)h(set.)f(W)-7
b(e)25 b(then)h(applied)f(the)g(resulting)g(priorit)n(y)f(function)h
(to)g(all)450 4874 y(12)h(b)r(enc)n(hmarks)g(in)h(the)g(test)g(set.)g
(Since)g(the)h(b)r(enc)n(hmarks)e(in)h(the)g(test)g(set)g(are)f(not)h
(related)450 4974 y(to)32 b(the)g(b)r(enc)n(hmarks)f(in)h(the)g
(training)g(set,)g(this)g(is)g(a)f(measure)g(of)h(the)g(priorit)n(y)f
(function's)450 5074 y(generalit)n(y)-7 b(.)575 5174
y(Figure)32 b(2)h(sho)n(ws)f(the)h(results)f(of)h(applying)g(the)g
(single)g(b)r(est)g(priorit)n(y)f(function)i(to)f(the)450
5273 y(b)r(enc)n(hmarks)f(in)i(the)g(training)f(set.)g(The)h(dark)e
(bar)h(asso)r(ciated)f(with)i(eac)n(h)e(b)r(enc)n(hmark)h(is)450
5373 y(the)g(sp)r(eedup)g(o)n(v)n(er)e(T)-7 b(rimaran's)31
b(base)h(heuristic)g(when)h(the)g(training)f(input)h(data)g(is)f(used.)
p 450 5444 473 4 v 473 5498 a Fr(5)533 5529 y Fs(W)-5
b(e)23 b(c)n(hose)f(to)i(train)f(mostly)g(on)g(Mediab)r(enc)n(h)e
(applications)h(b)r(ecause)f(they)i(compile)e(and)i(run)g(faster)g
(than)g(the)533 5596 y(Sp)r(ec)e(b)r(enc)n(hmarks.)f(Ho)n(w)n(ev)n(er,)
i(w)n(e)g(randomly)f(c)n(hose)h(t)n(w)n(o)h(Sp)r(ec)e(b)r(enc)n(hmarks)
f(for)i(added)f(co)n(v)n(erage.)p eop
%%Page: 9 9
9 8 bop 767 1669 a @beginspecial 81 @llx 63 @lly 747
@urx 513 @ury 2551 @rwi @clip @setspecial
%%BeginDocument: ./figs/figure1.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (predication_spec.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2)
%%CreationDate: (D:20030116135624-05'00')
%%For: (mstephen)
%%DocumentData: Clean7Bit
%%BoundingBox: 81 63 747 513
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
81 63 moveto 747 63 lineto 747 513 lineto 81 513 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
81 63 665 449 rectclip
[ 0 -1 1 0 18 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font ABMLAP+Arial
11 dict begin
/FontName /ABMLAP+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1320 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d898870164
1dba6c5defb41d909040a164fdb0a088fefa45fff299b57b0e194251a4a8
b9cf3bc1815fd2c5ba06e651f9d7799098b4541de9c35043282b335f2de1
7def94eec0695fa30f7aaa5574cd9d280a8b4d225396feeeafb4b20c3fcc
9f12e751228b7464328a957a71c1d6fc11ef53a8f692024ab80f5e0d7623
62b42a462a2bf96d5a0db86097e421e5cb8c7d7a0900e6cfd70978f26b60
122332f14359637710d630381bc4f9c629fd5be208af03ab6a69f0ba40b9
a2> ND 
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f733e1cd354b07630
213f625adb3ae8b5aa6a51c1055a59d5f55e13f6cd6e1d9a82c372ef809e
0ee864af865bf5dd5f7dae9a46388470afbd9e2e8c39b7ea4fc9ab800d6e
8ab2edc1e3d36e194904842b1236ff6f70f88f5551621a9fa448c516e732
df410d140d211e3fe0becb6d0a54202b80a6977f> ND 
/seven 
<10bf317048559e9c292b4762aa54ba120b5bb6d9743398f6558de0cda9ce
72c94d95b651df1bda9b63361a928dc3b98c779dfd157220ceb78b8ebeab
638d0f6753cf0f10ef> ND 
/nine 
<10bf317047276c49b9c0f950eed45ca9abbead4f9a337d9778d52804f095
e0959c13860a3969943ef1a12c3ee6c45422162d204a6f0d8cdc2d4e75b5
67f1b01796340d6df61e18c819464639606becbe4894a8ef149ed72054cf
28ee583aeb880d27fff9e2fa582b760e67cbad4f844afdb68b34f85c1a95
a0e8285de8ad462405443a57e05fe3bbb3d2281adc779f19070fa98342c5
c2c2ec79e83ff4803e54082ff002fd18e3d25566d6e2d40f56cc659c4866
84f0030ca9d50085195745fdce82f2f52a9ae7ae7227879d15b08026dcde
5aab87db399da6bb3c6e8f68808a93> ND 
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac54cb2fa3a278c1c5e8b8e0184d
7cbeaa35d4ddaa02f35f83f589e53f609414a1e8dd86a2916a5d28875546
282a3c313b2605b04804> ND 
/T 
<10bf317050d9560b3cb54d581860f439ad72a17a69c33f00af1e6fc67c4b
afccfda0> ND 
/underscore 
<10bf31708ee791b2da218e69d97bd547a4d26ba7404ea4bc55> ND 
/a 
<10bf31705d64e193f685fe465eb14b2f9aa41e82540f554b50893fe63efd
4692fb4fc721a117ec78b6e9515c29fcb60e3aee68a6df1c3946e2cf738d
cda3e29fd055085b4d27d1a9d3bf0581a4eb2a1ee52161275aad552d9745
cae2527ba314929e16b3adcf63fbfe5b600507b479eb6bac8dbf57f9ea61
cf0c38792d951ff40006e32bfab335adbde18dd700c5843625ec18424a1a
470a3d82d751a36d8b4a69f1f5fb08cfc2b94ed2658b49c9985bc490581e
62f221617e1b4bb61c6dcc9e8e61b29e5f74c69c328c213bfddbc217436d
81d1dfe6a13e1cac30c3fa16cb4e265d8db4217e880afbaeb0227e92e214
5534c463a18baaf155fa6678668091a696c5190fde> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f67877e80be643ef8
5a01cff57f62859595ad9c2a1ef16f4c22144c6fc4d200f23642de52d57f
47e47c78a8b6713f5cb6dcd4a475047f70e7386f0baddd9f1c37f1598f60
1bc5b6005acf2115ed4aa52ed6ed621e5045f115e6c8ed146247e81ce086
3c881ef71e6e234403d5f37c528c6ebb0616bbdc05a29ca9d830ed27448f
> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/f 
<10bf31706629561882b73d5b02cebd16b0942e445fbe6e3232b3823cbdb2
63dcf8e5b5846268df4eba2210bb667f400c46f76ed43d4b268aed98cf98
689dff659a93d69b1917cc1e5f49aadef7d4b3b6109675927aeb98089c> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987
c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e
6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e
7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df
3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3
e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b
5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 
/h 
<10bf31703f932f5ecb68c849e33d1fed17c766a03dcb89fd4259247501b2
92adfc2297be69c7091e34ced000096d0ca29850717d0ee8abe567011317
96a4072dab7df40090735d5712990fb13b0847093cc929cc1cd64c87dd80
565b94c081eb> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79e55a006319a903b4934e0296676
bb7a5df970714192f29a85860f4cb191aa4b83ebc5b58328ecf58ed9d6ff
d0d3a63dd21733d64450e3abce2a149390b0894b2fb0fce1ee78d045f446
04c31c787e13fdae7e79785a1956f734ed54b976e123646b63ce5bee0b68
59b26a26c2ad993325ab7bd77cdd1be893a8ccd1451854fed772889a0d7d
7791ac97d81ac7> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3483c7b936ed6e6cf91cffcbd
a815b8df60ae150c20432c17a46c0682480f6226770a8905e960aec3fe5e
934f4cc994b08abf0fc9d432168086e4> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
/v 
<10bf31706ae07dd17dfbac8a1ae33180eda67f1c12c0170124c5b65d6008
42ef910f621d12aef7aac075b848d0659b626414ef71a4> ND 
/w 
<10bf31707c6251ab9dc02dac0cfe6b2ad0a1717407cbd63b737120f851f4
8bf643a435f165b7893dd828fd2da9e1185df5d44f0e3e41505c0548c1d2
65fe2f6b93f7702905dcf1946733a5e23d> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/ABMLAP+Arial findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 55 /seven put
dup 57 /nine put
dup 65 /A put
dup 84 /T put
dup 95 /underscore put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 160 /space put
pop
%%EndResource
[/N15/ABMLAP+Arial 1 TZ
%%BeginResource: font ABMKKP+Arial,Bold
11 dict begin
/FontName /ABMKKP+Arial,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1320 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/period 
<10bf317021cc67b2bc301f516a49c5d2eaf38d05e04c6bb061> ND 
/one 
<10bf317028182169f7f13730e09770e210fcfa2d271bc92d4342c903256c
6dd594be31116a507d9e9bf7a06f7b02cb638869b9> ND 
/two 
<10bf3170560f9ea7e16bf7693df0cb4f75611840d7a72974788dc612e04a
7d391fa4118f20c60ca0210831c4216daf82822fd8577427332b85b36191
bafa300362603f7ac5486d82f6744735bd9aea952436a54773d0a34c3025
802ed04fffcb4fa74d75ac70e802cddfdbd6346360b0b1acf15e7ef6f0dd
ea8a6108bc3278173c6d152ded71a3f7dba5eefbc64d9c815a4795> ND 
/three 
<10bf3170435d0d440860530d539ff91fbeb84b45ccc7a1133230e64e009e
0c490ad4a8c72e30c66b9d7da2ebb61201fd5dbcf58b0c0488dc2a377321
5f26e0f7b61ae06bbd548a7c70db3930bb70d925be0576849d7017235523
559a7bd33c2b1cf718bf0b01521a2da1ae141319b8a7b7648826982192c9
9cac43d499c3346f8ae704779f7b332be818bd1aedb27938b45cc4303b57
6f7b6048a80721796cf703217479afeb4946fccc211036e97d76c144b665
49f485406b5a21bfa9b3b6ddd1fb25f39a00f379> ND 
/four 
<10bf31706c4c139ade6f8bf362e1c7a16dbcd949f520c66a4ee068301011
5c84fd3458c85a1ed0da84b737ec75e38936c9e254983ec49c73b3d2f1ea
186a33> ND 
/five 
<10bf317045bac03cbb36d436f7d39d6a14b5d4927fa1207089e9bb93285a
8a89fc87d0321f2870a2d7b1738d7f6f7c0a6dc828de6c5cacb5b2cd49e5
affe133d3a4281edfd13fbeaf4bb7b2bac2c239fe074efab974ff5c1a7d9
09cc004d88dae324a0c297547d69551cd69163ec55c49d6dc108adda14c4
40493fc655bef7d1c3df7be9f8747641> ND 
/S 
<10bf31705d65c0900ab6f1dec202feebed63a391e8923b6171e4bd9a9891
3483f7e18f03f81efeea9ec6e499086f29e069b330e0714349bdbde86411
119421305eb3ccf831a419f2b1b383ae283eef31cd6ab17d35e046224edf
8d334c91b8f3410ce0b754cf25ffc38b1c45008fedcc6fb476440d278757
5aef3183071e560db2a44ec14079a58ceb82879a9f1a9b4e9fcabb16df58
24675d0a68f72691cd9980f0d6d9adcd3e204eaf9c302558bc548ec6583d
8e097a247d483ed52d9f91d7ca0feb01513c1c9a868c4cf1c92a6751c828
3f7c6f8c290f25> ND 
/d 
<10bf317046e845f3cc81de7a4b8a8a1b3fe3a86a2a74eb0ce101ae9ff9ea
ca0b0d6152bab57b5a1a20451eca1d8bce22d8934498cbe1f50790f6dd2f
9d5a0cab606ce69313bb3e4094a370b8d3856d24b15d355e84c7c481bc80
d07358154d4cee4bac791720fabdb39630005823af359d78acbc47e52e70
c34626a827ae2272bde1c4ecc0359b7e45162ac0> ND 
/e 
<10bf3170599a82aebce2d0d9cd696e2d2232ae83b1d98ff884add96e0282
26fcd2cbd306888649029fbc75f18f771bf21f4d5f53f71cd70d56907fb2
0780ae57f65359db4c49ca929cb86ae96dd2f43742f720ffcefc0d1d3194
c72a55a6bfcf26d975c031741b09b969ea0410af02ae1e13b6c1d337a6b3
96eba6c714d73f9b5d2c2499a66a60f107d1dad4da56ef> ND 
/p 
<10bf31703d364b58d236360a3109f388a509dc9806d07d5bc445174ad942
7c9600246e60ea62f48529a60136f844b413bd7834b903aeb5ec3a65352a
708c943d46c286b502a39b69aec9bc15c2a1798b51edb224db01e94ff1eb
dbf1e97f7f79a2c4ac7f7ccc29f5a1c29ed2d05ed3e5ff111a8b097f8d17
72a84cce0bcd066f78e2de698d38b96a99a99313e7a6639d82> ND 
/u 
<10bf317022f1ca2cc2a22c3ff97c1232bc55839582d9c5ff7e86bfa4508d
4c6c2a32b8a91c23bc7417819a6d61bb6c4ffa588f9ea417cfc189ff4ca4
86806cfbdc09b2f0ef54b54c53e50d4afcfcb2df030b19aa33138b0a422d
d58054461b41c9166e86f2fb1f6b43052b68dc3202c1cc> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/ABMKKP+Arial,Bold findfont /Encoding get
dup 0 /.notdef put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 83 /S put
dup 100 /d put
dup 101 /e put
dup 112 /p put
dup 117 /u put
pop
%%EndResource
[/N13/ABMKKP+Arial,Bold 1 TZ
false setSA
n
94.8 726.3 330.6 -601.2 re
1 1 1 setrgbcolor
f
q
n
378.18 125.1 0.0599976 601.2 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
378.18 125.1 m
378.18 726.3 l
0 0 0  setrgbcolor
S
Q
q
n
330.96 125.1 0.0599976 601.2 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
330.96 125.1 m
330.96 726.3 l
0 0 0  setrgbcolor
S
Q
q
n
283.74 125.1 0.0599976 601.2 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
283.74 125.1 m
283.74 726.3 l
0 0 0  setrgbcolor
S
Q
q
n
236.46 125.1 0.0599976 601.2 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
236.46 125.1 m
236.46 726.3 l
0 0 0  setrgbcolor
S
Q
q
n
189.24 125.1 0.0599976 601.2 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
189.24 125.1 m
189.24 726.3 l
0 0 0  setrgbcolor
S
Q
q
n
142.02 125.1 0.0599976 601.2 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
142.02 125.1 m
142.02 726.3 l
0 0 0  setrgbcolor
S
Q
q
n
94.8 125.1 0.0599976 601.2 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
94.8 125.1 m
94.8 726.3 l
0 0 0  setrgbcolor
S
Q
q
n
72 54 467.04 683.04 re
107.1 206.34 20.46 246.54 re
eoclip
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
94.8 125.1 330.6 601.2 re
0 0 0  setrgbcolor
S
Q
1 J
0 j
0.960007 w
10 M
[] 0 d
n
114.66 137.94 310.74 17.16 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
0 0 0  setrgbcolor
S
n
286.56 198.06 138.84 17.16 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
274.26 258.18 151.14 17.16 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
330 318.3 95.4 17.16 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
325.26 378.42 100.14 17.16 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
314.88 438.54 110.52 17.16 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
230.82 498.66 194.58 17.16 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
322.44 558.78 102.96 17.16 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
316.8 618.9 108.6 17.16 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
279.54 679.02 145.86 17.16 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
318.18 155.16 107.22 17.1 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
290.16 215.28 135.24 17.1 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
294.78 275.4 130.62 17.1 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
330.66 335.52 94.74 17.1 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
325.02 395.64 100.38 17.1 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
330.96 455.76 94.44 17.1 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
309.54 515.88 115.86 17.1 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
324.48 576 100.92 17.1 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
262.08 636.12 163.32 17.1 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
309.54 696.24 115.86 17.1 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
0.0599976 w
n
94.8 125.1 m
425.4 125.1 l
425.4 120.54 m
425.4 125.1 l
378.18 120.54 m
378.18 125.1 l
330.96 120.54 m
330.96 125.1 l
283.74 120.54 m
283.74 125.1 l
236.46 120.54 m
236.46 125.1 l
189.24 120.54 m
189.24 125.1 l
142.02 120.54 m
142.02 125.1 l
94.8 120.54 m
94.8 125.1 l
425.4 125.1 m
425.4 726.3 l
429.96 125.1 m
425.4 125.1 l
429.96 185.22 m
425.4 185.22 l
429.96 245.34 m
425.4 245.34 l
429.96 305.46 m
425.4 305.46 l
429.96 365.58 m
425.4 365.58 l
429.96 425.7 m
425.4 425.7 l
429.96 485.82 m
425.4 485.82 l
429.96 545.94 m
425.4 545.94 l
429.96 606.06 m
425.4 606.06 l
429.96 666.18 m
425.4 666.18 l
429.96 726.3 m
425.4 726.3 l
S
1 1 1  setrgbcolor
306.48 691.2 m
/N13 -12 Tf
(1.54)
[-6.66724 -3.33124 -6.66724 -6.66724 ] pdfxs
336.48 708.42 m
(1.23)
[-6.66724 -3.33124 -6.66724 -6.66724 ] pdfxs
0 0 0  setrgbcolor
430.2 105.66 m
/N15 [0 14.76 -14.76 0 0 0] Tf
(0) show
382.98 93.3605 m
(0.5) show
335.76 105.66 m
(1) show
288.539 93.3605 m
(1.5) show
241.259 105.66 m
(2) show
194.039 93.3605 m
(2.5) show
146.818 105.66 m
(3) show
99.5981 93.3605 m
(3.5) show
529.38 159.84 m
/N15 -14.76 Tf
(129) show
(.c)
[-4.10778 -7.3845 ] pdfxs
(o) show
(m)
[-12.2995 ] pdfxs
(p) show
(r)
[-4.91947 ] pdfxs
(e) show
(ss)
[-7.3845 -7.3845 ] pdfxs
517.979 219.96 m
(g721encode)
[-8.21691 -8.21691 -8.21691 -8.21691 -8.21691 -8.21691 -7.39036 -8.21691 -8.21691 -8.21691 ] pdfxs
517.979 280.081 m
(g721decode)
[-8.21691 -8.21691 -8.21691 -8.21691 -8.21691 -8.21691 -7.39036 -8.21691 -8.21691 -8.21691 ] pdfxs
493.259 340.201 m
(hu) show
(ff)
[-4.10778 -4.10778 ] pdfxs
(_de) show
(c) show
493.259 400.321 m
(hu) show
(ff)
[-4.10778 -4.10778 ] pdfxs
(_en) show
(c) show
503.999 460.442 m
(rawcaudio)
[-4.92668 -8.21826 -10.6682 -7.39171 -8.21826 -8.21826 -8.21826 -3.28821 -8.21826 ] pdfxs
504.838 520.562 m
(rawdaudio)
[-4.92826 -8.21984 -10.6698 -8.21984 -8.21984 -8.21984 -8.21984 -3.28978 -8.21984 ] pdfxs
468.598 580.682 m
(t)
[-4.10485 ] pdfxs
(oas) show
(t) show
505.618 640.803 m
(mpeg2dec)
[-12.3053 -8.21691 -8.21691 -8.21691 -8.21691 -8.21691 -8.21691 -7.39036 ] pdfxs
491.637 700.923 m
(Average)
[-9.85223 -7.38743 -8.21399 -4.9224 -8.21399 -8.21399 -8.21399 ] pdfxs
291.238 83.4034 m
/N13 -14.76 Tf
(Speedup)
[-9.83895 -9.01239 -8.2007 -8.2007 -9.01239 -9.01239 -9.01239 ] pdfxs
n
107.16 452.82 20.4 -246.42 re
1 1 1  setrgbcolor
f
n
107.1 206.34 20.46 246.48 re
0 0 0  setrgbcolor
S
0.960007 w
n
113.34 210.78 9.06 9.06 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
122.88 223.32 m
/N15 [0 14.76 -14.76 0 0 0] Tf
(Train data set) show
n
113.34 320.28 9.06 9.06 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
122.88 332.82 m
(Alternate data set) show
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 330 1843 a Fn(Fig.)15 b(1.)21 b(GP)26 b(Ev)n(olv)n(ed)d
(Sp)r(ecialized)k(Predication)h(Priorit)n(y)f(F)-7 b(unctions.)22
b Fq(Dark)f(colored)i(bars)330 1935 y(indicate)f(sp)r(eedup)f(o)n(v)n
(er)h(T)-6 b(rimaran's)22 b(baseline)g(heuristic)g(when)g(using)g(the)f
(same)g(input)g(data)h(set)g(on)330 2026 y(whic)n(h)28
b(the)f(sp)r(ecialized)j(priorit)n(y)d(function)h(w)n(as)h(trained.)f
(The)g(ligh)n(t)g(colored)h(bars)f(sho)n(w)h(sp)r(eedup)330
2117 y(when)d(alternate)g(input)f(data)h(w)n(as)g(tested.)330
2415 y Ft(This)d(data)f(set)g(yields)h(a)f(44\045)g(impro)n(v)n(emen)n
(t.)f(The)i(ligh)n(t)g(bar)e(sho)n(ws)h(results)g(when)h(alternate)330
2514 y(input)28 b(data)g(is)f(used.)h(The)f(o)n(v)n(erall)f(impro)n(v)n
(emen)n(t)g(for)h(this)h(set)g(is)f(25\045.)455 2619
y(It)41 b(is)h(in)n(teresting)f(that,)h(on)f(a)n(v)n(erage,)e(the)j
(general-purp)r(ose)d(priorit)n(y)h(function)i(out-)330
2719 y(p)r(erforms)33 b(the)h(application-sp)r(eci\014c)f(priorit)n(y)f
(function)j(for)e(the)h(alternate)f(data)g(set.)h(The)330
2819 y(general-purp)r(ose)24 b(solution)i(is)g(less)g(susceptible)h(to)
f(v)-5 b(ariations)25 b(in)i(input)g(data)f(precisely)g(b)r(e-)330
2918 y(cause)h(it)h(is)f(more)g(generally)f(applicable.)455
3023 y(Figure)31 b(3)h(sho)n(ws)f(ho)n(w)g(w)n(ell)h(the)h(b)r(est)g
(general)d(purp)r(ose)i(priorit)n(y)f(function)i(p)r(erformed)330
3123 y(on)25 b(the)h(test)g(set.)f(The)h(a)n(v)n(erage)c(sp)r(eedup)k
(o)n(v)n(er)e(the)i(test)f(set)h(is)f(9\045.)g(In)h(three)f(cases)f
(\(unepic,)330 3223 y(023.eqn)n(tott,)g(and)i(085.cc1\))e(T)-7
b(rimaran's)24 b(baseline)h(heuristic)h(marginally)e(outp)r(erforms)h
(the)330 3322 y(GP-generated)33 b(priorit)n(y)g(function.)i(F)-7
b(or)33 b(the)i(remaining)e(b)r(enc)n(hmarks,)h(the)h(heuristic)f(our)
330 3422 y(system)27 b(found)h(is)g(b)r(etter.)330 3698
y Fc(7.3)94 b(Register)31 b(Allo)s(cation:)f(Sp)s(ecialized)h(Priorit)m
(y)h(F)-8 b(unctions)330 3891 y Ft(Figures)24 b(4)g(sho)n(ws)f(sp)r
(eedups)h(obtained)g(b)n(y)h(sp)r(ecializing)e(the)i(T)-7
b(rimaran)23 b(register)g(allo)r(cator's)330 3991 y(priorit)n(y)f
(function)i(for)f(sp)r(eci\014c)h(b)r(enc)n(hmarks.)e(The)i(dark)f(bar)
f(asso)r(ciated)g(with)i(eac)n(h)f(b)r(enc)n(h-)330 4090
y(mark)j(represen)n(ts)g(the)h(sp)r(eedup)h(obtained)f(b)n(y)f(using)h
(the)h(same)e(input)i(data)f(that)g(w)n(as)f(used)330
4190 y(to)d(sp)r(ecialize)f(the)i(heuristic.)e(The)h(ligh)n(t)g(bar)f
(sho)n(ws)g(the)h(sp)r(eedup)g(when)h(an)e(alternate)g(input)330
4290 y(data)i(set)g(is)g(used.)g(GP)f(ev)n(olv)n(ed)g(register)g(allo)r
(cation)g(functions)h(that)g(impro)n(v)n(e)f(the)h(heuristic)330
4389 y(describ)r(ed)j(in)h(Section)g(5)f(b)n(y)g(up)h(to)g(13\045.)455
4494 y(Once)c(again,)g(it)h(mak)n(es)f(sense)g(that)h(the)h(relativ)n
(e)d(p)r(erformance)h(on)h(training)f(input)i(data)330
4594 y(is)f(b)r(etter)g(than)g(that)g(ac)n(hiev)n(ed)e(on)i(the)g
(alternate)f(input)h(data.)g(In)g(con)n(trast)e(to)i(predication,)330
4694 y(ho)n(w)n(ev)n(er,)g(with)i(register)e(allo)r(cation,)h(w)n(e)h
(see)f(that)h(the)g(di\013erence)g(b)r(et)n(w)n(een)g(the)g(t)n(w)n(o)f
(is)h(less)330 4793 y(pronounced.)34 b(This)g(is)h(lik)n(ely)f(b)r
(ecause)g(predication)g(is)g(extremely)h(data-driv)n(en)e(and)h(th)n
(us)330 4893 y(vulnerable)20 b(to)h(div)n(erse)f(input)h(data.)g(An)g
(examination)f(of)h(the)g(general-purp)r(ose)e(predication)330
4992 y(heuristic)g(rev)n(eals)d(t)n(w)n(o)i(dynamic)h(factors)f(\()p
Fi(exec)p 1856 4992 25 4 v 29 w(r)r(atio)i Ft(and)e Fi(pr)r(edictabil)r
(ity)s Ft(\))f(that)i(are)f(critical)330 5092 y(comp)r(onen)n(ts)27
b(in)h(the)g(h)n(yp)r(erblo)r(c)n(k)e(decision)i(pro)r(cess.)455
5197 y(Figure)33 b(5)h(plots)g(the)h(b)r(est)g(individual's)f(sp)r
(eedup)h(o)n(v)n(er)d(generations.)h(The)h(fairly)g(con-)330
5297 y(stan)n(t)d(impro)n(v)n(emen)n(t)f(in)i(sp)r(eedup)f(o)n(v)n(er)f
(sev)n(eral)f(generations)h(seems)h(to)g(suggest)f(that)i(this)330
5396 y(problem)i(is)g(harder)f(to)h(optimize)h(than)f(predication.)g
(Additionally)-7 b(,)34 b(unlik)n(e)g(the)h(predica-)330
5496 y(tion)24 b(algorithm,)f(the)i(baseline)f(heuristic)g(w)n(as)f(t)n
(ypically)g(retained)h(\()p Fl(i.e.)p Ft(,)i(it)f(remained)e(in)i(the)
330 5596 y(p)r(opulation\))j(for)f(sev)n(eral)f(generations.)p
eop
%%Page: 10 10
10 9 bop 1005 1517 a @beginspecial 81 @llx 63 @lly 756
@urx 522 @ury 2267 @rwi @clip @setspecial
%%BeginDocument: ./figs/figure2.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (training.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2)
%%CreationDate: (D:20030116141612-05'00')
%%For: (mstephen)
%%DocumentData: Clean7Bit
%%BoundingBox: 81 63 756 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
81 63 moveto 756 63 lineto 756 522 lineto 81 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
81 63 675 459 rectclip
[ 0 -1 1 0 18 603.36 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font BDOJPK+Arial
11 dict begin
/FontName /BDOJPK+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1320 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d898870164
1dba6c5defb41d909040a164fdb0a088fefa45fff299b57b0e194251a4a8
b9cf3bc1815fd2c5ba06e651f9d7799098b4541de9c35043282b335f2de1
7def94eec0695fa30f7aaa5574cd9d280a8b4d225396feeeafb4b20c3fcc
9f12e751228b7464328a957a71c1d6fc11ef53a8f692024ab80f5e0d7623
62b42a462a2bf96d5a0db86097e421e5cb8c7d7a0900e6cfd70978f26b60
122332f14359637710d630381bc4f9c629fd5be208af03ab6a69f0ba40b9
a2> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f733e1cd354b07630
213f625adb3ae8b5aa6a51c1055a59d5f55e13f6cd6e1d9a82c372ef809e
0ee864af865bf5dd5f7dae9a46388470afbd9e2e8c39b7ea4fc9ab800d6e
8ab2edc1e3d36e194904842b1236ff6f70f88f5551621a9fa448c516e732
df410d140d211e3fe0becb6d0a54202b80a6977f> ND 
/seven 
<10bf317048559e9c292b4762aa54ba120b5bb6d9743398f6558de0cda9ce
72c94d95b651df1bda9b63361a928dc3b98c779dfd157220ceb78b8ebeab
638d0f6753cf0f10ef> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/nine 
<10bf317047276c49b9c0f950eed45ca9abbead4f9a337d9778d52804f095
e0959c13860a3969943ef1a12c3ee6c45422162d204a6f0d8cdc2d4e75b5
67f1b01796340d6df61e18c819464639606becbe4894a8ef149ed72054cf
28ee583aeb880d27fff9e2fa582b760e67cbad4f844afdb68b34f85c1a95
a0e8285de8ad462405443a57e05fe3bbb3d2281adc779f19070fa98342c5
c2c2ec79e83ff4803e54082ff002fd18e3d25566d6e2d40f56cc659c4866
84f0030ca9d50085195745fdce82f2f52a9ae7ae7227879d15b08026dcde
5aab87db399da6bb3c6e8f68808a93> ND 
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac54cb2fa3a278c1c5e8b8e0184d
7cbeaa35d4ddaa02f35f83f589e53f609414a1e8dd86a2916a5d28875546
282a3c313b2605b04804> ND 
/T 
<10bf317050d9560b3cb54d581860f439ad72a17a69c33f00af1e6fc67c4b
afccfda0> ND 
/underscore 
<10bf31708ee791b2da218e69d97bd547a4d26ba7404ea4bc55> ND 
/a 
<10bf31705d64e193f685fe465eb14b2f9aa41e82540f554b50893fe63efd
4692fb4fc721a117ec78b6e9515c29fcb60e3aee68a6df1c3946e2cf738d
cda3e29fd055085b4d27d1a9d3bf0581a4eb2a1ee52161275aad552d9745
cae2527ba314929e16b3adcf63fbfe5b600507b479eb6bac8dbf57f9ea61
cf0c38792d951ff40006e32bfab335adbde18dd700c5843625ec18424a1a
470a3d82d751a36d8b4a69f1f5fb08cfc2b94ed2658b49c9985bc490581e
62f221617e1b4bb61c6dcc9e8e61b29e5f74c69c328c213bfddbc217436d
81d1dfe6a13e1cac30c3fa16cb4e265d8db4217e880afbaeb0227e92e214
5534c463a18baaf155fa6678668091a696c5190fde> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f67877e80be643ef8
5a01cff57f62859595ad9c2a1ef16f4c22144c6fc4d200f23642de52d57f
47e47c78a8b6713f5cb6dcd4a475047f70e7386f0baddd9f1c37f1598f60
1bc5b6005acf2115ed4aa52ed6ed621e5045f115e6c8ed146247e81ce086
3c881ef71e6e234403d5f37c528c6ebb0616bbdc05a29ca9d830ed27448f
> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/f 
<10bf31706629561882b73d5b02cebd16b0942e445fbe6e3232b3823cbdb2
63dcf8e5b5846268df4eba2210bb667f400c46f76ed43d4b268aed98cf98
689dff659a93d69b1917cc1e5f49aadef7d4b3b6109675927aeb98089c> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987
c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e
6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e
7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df
3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3
e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b
5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 
/h 
<10bf31703f932f5ecb68c849e33d1fed17c766a03dcb89fd4259247501b2
92adfc2297be69c7091e34ced000096d0ca29850717d0ee8abe567011317
96a4072dab7df40090735d5712990fb13b0847093cc929cc1cd64c87dd80
565b94c081eb> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/k 
<10bf31703f936777fb99983a11586419ce72aadc44a2aa69d19b91e9f126
e6f5aabcb4381bf8bfee294b80bae1d888f1314da01fbe02> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79e55a006319a903b4934e0296676
bb7a5df970714192f29a85860f4cb191aa4b83ebc5b58328ecf58ed9d6ff
d0d3a63dd21733d64450e3abce2a149390b0894b2fb0fce1ee78d045f446
04c31c787e13fdae7e79785a1956f734ed54b976e123646b63ce5bee0b68
59b26a26c2ad993325ab7bd77cdd1be893a8ccd1451854fed772889a0d7d
7791ac97d81ac7> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3483c7b936ed6e6cf91cffcbd
a815b8df60ae150c20432c17a46c0682480f6226770a8905e960aec3fe5e
934f4cc994b08abf0fc9d432168086e4> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
/v 
<10bf31706ae07dd17dfbac8a1ae33180eda67f1c12c0170124c5b65d6008
42ef910f621d12aef7aac075b848d0659b626414ef71a4> ND 
/w 
<10bf31707c6251ab9dc02dac0cfe6b2ad0a1717407cbd63b737120f851f4
8bf643a435f165b7893dd828fd2da9e1185df5d44f0e3e41505c0548c1d2
65fe2f6b93f7702905dcf1946733a5e23d> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/BDOJPK+Arial findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 65 /A put
dup 84 /T put
dup 95 /underscore put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 160 /space put
pop
%%EndResource
[/N15/BDOJPK+Arial 1 TZ
%%BeginResource: font BDOJOI+Arial,Bold
11 dict begin
/FontName /BDOJOI+Arial,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1320 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/period 
<10bf317021cc67b2bc301f516a49c5d2eaf38d05e04c6bb061> ND 
/one 
<10bf317028182169f7f13730e09770e210fcfa2d271bc92d4342c903256c
6dd594be31116a507d9e9bf7a06f7b02cb638869b9> ND 
/two 
<10bf3170560f9ea7e16bf7693df0cb4f75611840d7a72974788dc612e04a
7d391fa4118f20c60ca0210831c4216daf82822fd8577427332b85b36191
bafa300362603f7ac5486d82f6744735bd9aea952436a54773d0a34c3025
802ed04fffcb4fa74d75ac70e802cddfdbd6346360b0b1acf15e7ef6f0dd
ea8a6108bc3278173c6d152ded71a3f7dba5eefbc64d9c815a4795> ND 
/four 
<10bf31706c4c139ade6f8bf362e1c7a16dbcd949f520c66a4ee068301011
5c84fd3458c85a1ed0da84b737ec75e38936c9e254983ec49c73b3d2f1ea
186a33> ND 
/five 
<10bf317045bac03cbb36d436f7d39d6a14b5d4927fa1207089e9bb93285a
8a89fc87d0321f2870a2d7b1738d7f6f7c0a6dc828de6c5cacb5b2cd49e5
affe133d3a4281edfd13fbeaf4bb7b2bac2c239fe074efab974ff5c1a7d9
09cc004d88dae324a0c297547d69551cd69163ec55c49d6dc108adda14c4
40493fc655bef7d1c3df7be9f8747641> ND 
/S 
<10bf31705d65c0900ab6f1dec202feebed63a391e8923b6171e4bd9a9891
3483f7e18f03f81efeea9ec6e499086f29e069b330e0714349bdbde86411
119421305eb3ccf831a419f2b1b383ae283eef31cd6ab17d35e046224edf
8d334c91b8f3410ce0b754cf25ffc38b1c45008fedcc6fb476440d278757
5aef3183071e560db2a44ec14079a58ceb82879a9f1a9b4e9fcabb16df58
24675d0a68f72691cd9980f0d6d9adcd3e204eaf9c302558bc548ec6583d
8e097a247d483ed52d9f91d7ca0feb01513c1c9a868c4cf1c92a6751c828
3f7c6f8c290f25> ND 
/d 
<10bf317046e845f3cc81de7a4b8a8a1b3fe3a86a2a74eb0ce101ae9ff9ea
ca0b0d6152bab57b5a1a20451eca1d8bce22d8934498cbe1f50790f6dd2f
9d5a0cab606ce69313bb3e4094a370b8d3856d24b15d355e84c7c481bc80
d07358154d4cee4bac791720fabdb39630005823af359d78acbc47e52e70
c34626a827ae2272bde1c4ecc0359b7e45162ac0> ND 
/e 
<10bf3170599a82aebce2d0d9cd696e2d2232ae83b1d98ff884add96e0282
26fcd2cbd306888649029fbc75f18f771bf21f4d5f53f71cd70d56907fb2
0780ae57f65359db4c49ca929cb86ae96dd2f43742f720ffcefc0d1d3194
c72a55a6bfcf26d975c031741b09b969ea0410af02ae1e13b6c1d337a6b3
96eba6c714d73f9b5d2c2499a66a60f107d1dad4da56ef> ND 
/p 
<10bf31703d364b58d236360a3109f388a509dc9806d07d5bc445174ad942
7c9600246e60ea62f48529a60136f844b413bd7834b903aeb5ec3a65352a
708c943d46c286b502a39b69aec9bc15c2a1798b51edb224db01e94ff1eb
dbf1e97f7f79a2c4ac7f7ccc29f5a1c29ed2d05ed3e5ff111a8b097f8d17
72a84cce0bcd066f78e2de698d38b96a99a99313e7a6639d82> ND 
/u 
<10bf317022f1ca2cc2a22c3ff97c1232bc55839582d9c5ff7e86bfa4508d
4c6c2a32b8a91c23bc7417819a6d61bb6c4ffa588f9ea417cfc189ff4ca4
86806cfbdc09b2f0ef54b54c53e50d4afcfcb2df030b19aa33138b0a422d
d58054461b41c9166e86f2fb1f6b43052b68dc3202c1cc> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/BDOJOI+Arial,Bold findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 53 /five put
dup 83 /S put
dup 100 /d put
dup 101 /e put
dup 112 /p put
dup 117 /u put
dup 160 /space put
pop
%%EndResource
[/N13/BDOJOI+Arial,Bold 1 TZ
q
n
381.18 135.3 0.0599976 597.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
381.18 135.3 m
381.18 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
332.82 135.3 0.0599976 597.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
332.82 135.3 m
332.82 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
284.46 135.3 0.0599976 597.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
284.46 135.3 m
284.46 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
236.1 135.3 0.0599976 597.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
236.1 135.3 m
236.1 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
187.74 135.3 0.0599976 597.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
187.74 135.3 m
187.74 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
139.38 135.3 0.0599976 597.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
139.38 135.3 m
139.38 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
91.02 135.3 0.0599976 597.72 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
false setSA
n
91.02 135.3 m
91.02 733.02 l
0 0 0 setrgbcolor
S
Q
q
n
72 54 467.04 683.04 re
100.26 203.46 24.42 300 re
eoclip
n
1 J
0 j
0.960007 w
10 M
[] 0 d
false setSA
n
91.02 135.3 338.52 597.72 re
0.501999 0.501999 0.501999 setrgbcolor
S
Q
1 J
0 j
0.960007 w
10 M
[] 0 d
false setSA
n
226.32 142.44 203.22 15.78 re
q
0.199997 0.199997 0.199997 setrgbcolor
eofill
Q
0 0 0 setrgbcolor
S
n
332.82 188.4 96.72 15.84 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
281.64 234.42 147.9 15.78 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
298.56 280.38 130.98 15.78 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
247.56 326.34 181.98 15.84 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
340.14 372.36 89.4 15.78 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
329.28 418.32 100.26 15.78 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
320.22 464.28 109.32 15.78 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
314.88 510.24 114.66 15.84 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
127.14 556.26 302.4 15.78 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
331.26 602.22 98.28 15.78 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
331.98 648.18 97.56 15.84 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
290.16 694.2 139.38 15.78 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
233.16 158.28 196.38 15.78 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
332.7 204.3 96.84 15.78 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
283.98 250.26 145.56 15.78 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
299.4 296.22 130.14 15.78 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
312.54 342.24 117 15.78 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
332.82 388.2 96.72 15.78 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
330.72 434.16 98.82 15.78 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
263.76 480.12 165.78 15.78 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
333.48 526.14 96.06 15.78 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
320.04 572.1 109.5 15.78 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
331.14 618.06 98.4 15.78 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
332.52 664.08 97.02 15.78 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
n
308.88 710.04 120.66 15.78 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
0.0599976 w
n
91.02 135.3 m
429.54 135.3 l
429.54 129.54 m
429.54 135.3 l
381.18 129.54 m
381.18 135.3 l
332.82 129.54 m
332.82 135.3 l
284.46 129.54 m
284.46 135.3 l
236.1 129.54 m
236.1 135.3 l
187.74 129.54 m
187.74 135.3 l
139.38 129.54 m
139.38 135.3 l
91.02 129.54 m
91.02 135.3 l
429.54 135.3 m
429.54 733.02 l
434.1 135.3 m
429.54 135.3 l
434.1 181.26 m
429.54 181.26 l
434.1 227.28 m
429.54 227.28 l
434.1 273.24 m
429.54 273.24 l
434.1 319.2 m
429.54 319.2 l
434.1 365.22 m
429.54 365.22 l
434.1 411.18 m
429.54 411.18 l
434.1 457.14 m
429.54 457.14 l
434.1 503.1 m
429.54 503.1 l
434.1 549.12 m
429.54 549.12 l
434.1 595.08 m
429.54 595.08 l
434.1 641.04 m
429.54 641.04 l
434.1 687.06 m
429.54 687.06 l
434.1 733.02 m
429.54 733.02 l
S
1 1 1  setrgbcolor
322.92 706.62 m
/N13 -14.76 Tf
(1) show
(.)
[-4.10778 ] pdfxs
(44) show
345.481 724.26 m
(1) show
(.)
[-4.10778 ] pdfxs
(25) show
0 0 0  setrgbcolor
435.78 95.52 m
/N15 [0 18.48 -18.48 0 0 0] Tf
(0.0) show
387.42 95.52 m
(0.5) show
339.059 95.52 m
(1.0) show
290.699 95.52 m
(1.5) show
242.339 95.52 m
(2.0) show
193.979 95.52 m
(2.5) show
145.618 95.52 m
(3.0) show
97.2582 95.52 m
(3.5) show
505.68 162.96 m
/N15 -14.76 Tf
(decodrle4)
[-8.21691 -8.21691 -7.39036 -8.21691 -8.21691 -4.92533 -3.28686 -8.21691 -8.21691 ] pdfxs
489.24 208.92 m
(codrle4)
[-7.39036 -8.21691 -8.21691 -4.92533 -3.28686 -8.21691 -8.21691 ] pdfxs
522.12 254.94 m
(g721decode)
[-8.21691 -8.21691 -8.21691 -8.21691 -8.21691 -8.21691 -7.39036 -8.21691 -8.21691 -8.21691 ] pdfxs
522.12 300.9 m
(g721encode)
[-8.21691 -8.21691 -8.21691 -8.21691 -8.21691 -8.21691 -7.39036 -8.21691 -8.21691 -8.21691 ] pdfxs
508.98 346.859 m
(rawdaudio)
[-4.92826 -8.21984 -10.6698 -8.21984 -8.21984 -8.21984 -8.21984 -3.28978 -8.21984 ] pdfxs
508.14 392.88 m
(rawcaudio)
[-4.92668 -8.21826 -10.6682 -7.39171 -8.21826 -8.21826 -8.21826 -3.28821 -8.21826 ] pdfxs
472.74 438.839 m
(t)
[-4.10485 ] pdfxs
(oas) show
(t) show
509.76 484.799 m
(mpeg2dec)
[-12.3053 -8.21691 -8.21691 -8.21691 -8.21691 -8.21691 -8.21691 -7.39036 ] pdfxs
528.599 530.819 m
(124.m88ksim)
[-8.21241 -8.21241 -8.21241 -4.10913 -12.3008 -8.21241 -8.21241 -7.38585 -7.38585 -3.28235 -12.3008 
] pdfxs
533.519 576.779 m
(129.compress)
[-8.21241 -8.21241 -8.21241 -4.10913 -7.38585 -8.21241 -12.3008 -8.21241 -4.92082 -8.21241 -7.38585 
-7.38585 ] pdfxs
497.398 622.738 m
(huff_enc)
[-8.21241 -8.21241 -4.10913 -4.10913 -8.21241 -8.21241 -8.21241 -7.38585 ] pdfxs
497.398 668.759 m
(huff_dec)
[-8.21241 -8.21241 -4.10913 -4.10913 -8.21241 -8.21241 -8.21241 -7.38585 ] pdfxs
495.777 714.718 m
(Average)
[-9.85223 -7.38743 -8.21399 -4.9224 -8.21399 -8.21399 -8.21399 ] pdfxs
298.86 84 m
/N13 -18.24 Tf
(Speedup)
[-12.1787 -11.1573 -10.1542 -10.1542 -11.1573 -11.1573 -11.1573 ] pdfxs
n
100.32 503.4 24.36 -299.88 re
1 1 1  setrgbcolor
f
n
100.26 203.46 24.42 299.94 re
0 0 0  setrgbcolor
S
0.960007 w
n
107.76 208.68 11.22 11.22 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
119.46 224.22 m
/N15 [0 18 -18 0 0 0] Tf
(Train data set) show
n
107.76 342.12 11.22 11.22 re
q
0.753006 0.753006 0.753006  setrgbcolor
eofill
Q
S
119.46 357.66 m
(Alternate data set) show
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 450 1692 a Fn(Fig.)15 b(2.)22 b(GP)28 b(P)n(erformance)e
(with)i(General)f(Purp)r(ose)h(Predication)h(Priorit)n(y)g(F)-7
b(unctions.)450 1783 y Fq(T)h(raining)23 b(on)f(m)n(ultiple)f(b)r(enc)n
(hmarks.)g(A)g Fa(single)28 b Fq(priorit)n(y)22 b(function)g(w)n(as)h
(obtained)f(b)n(y)f(training)i(o)n(v)n(er)450 1874 y(all)28
b(the)e(b)r(enc)n(hmarks)f(in)i(this)g(graph.)g(The)g(dark)f(bars)h
(represen)n(t)g(sp)r(eedups)f(obtained)h(b)n(y)f(running)450
1966 y(the)h(giv)n(en)h(b)r(enc)n(hmark)e(on)h(the)h(same)f(data)h
(that)g(w)n(as)g(used)g(to)g(train)g(the)f(priorit)n(y)h(function.)g
(The)450 2057 y(ligh)n(t)e(bars)g(corresp)r(ond)g(to)g(an)g(alternate)g
(data)g(set.)1005 3423 y @beginspecial 81 @llx 63 @lly
747 @urx 513 @ury 2267 @rwi @clip @setspecial
%%BeginDocument: ./figs/figure3.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (predication_gp.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2)
%%CreationDate: (D:20030117124248-05'00')
%%For: (mstephen)
%%DocumentData: Clean7Bit
%%BoundingBox: 81 63 747 513
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
81 63 moveto 747 63 lineto 747 513 lineto 81 513 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
81 63 665 449 rectclip
[ 0 -1 1 0 18 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font OEMDLL+Arial
11 dict begin
/FontName /OEMDLL+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1320 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d898870164
1dba6c5defb41d909040a164fdb0a088fefa45fff299b57b0e194251a4a8
b9cf3bc1815fd2c5ba06e651f9d7799098b4541de9c35043282b335f2de1
7def94eec0695fa30f7aaa5574cd9d280a8b4d225396feeeafb4b20c3fcc
9f12e751228b7464328a957a71c1d6fc11ef53a8f692024ab80f5e0d7623
62b42a462a2bf96d5a0db86097e421e5cb8c7d7a0900e6cfd70978f26b60
122332f14359637710d630381bc4f9c629fd5be208af03ab6a69f0ba40b9
a2> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f733e1cd354b07630
213f625adb3ae8b5aa6a51c1055a59d5f55e13f6cd6e1d9a82c372ef809e
0ee864af865bf5dd5f7dae9a46388470afbd9e2e8c39b7ea4fc9ab800d6e
8ab2edc1e3d36e194904842b1236ff6f70f88f5551621a9fa448c516e732
df410d140d211e3fe0becb6d0a54202b80a6977f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/seven 
<10bf317048559e9c292b4762aa54ba120b5bb6d9743398f6558de0cda9ce
72c94d95b651df1bda9b63361a928dc3b98c779dfd157220ceb78b8ebeab
638d0f6753cf0f10ef> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac54cb2fa3a278c1c5e8b8e0184d
7cbeaa35d4ddaa02f35f83f589e53f609414a1e8dd86a2916a5d28875546
282a3c313b2605b04804> ND 
/S 
<10bf31704ab370a8a6c235279ed6c2ccfc716fa1295d141c34dd24f95c73
82e11c724a74e86021432ff58ab0f9585559c2cc7a3fe0720eadda5eee3e
cb055c76e8d7f22cfddbcfbe4ee1a562282b307d86efef90d9a8c71c96ab
9543712fa6240508ea1f38536804c47dfcc21f777c873fc11b7e20f7a228
b35e8d75f100a7da6082feb065d087853344b8bf00df7291cc74173d8c17
2964ca635a4e981f1604dc10d454f452e70073d386bcbe3ed4c09e72aa02
e7eb1e382ccb2fe70e1e9e3084e7824b4261723bffe42f4fc72d36ddcdd9
e884d10e18a55004b6149a9b0c7ead4b42afa8906a80deea322a930f4d91
ac35a6e6186e5d082f09> ND 
/a 
<10bf31705d64e193f685fe465eb14b2f9aa41e82540f554b50893fe63efd
4692fb4fc721a117ec78b6e9515c29fcb60e3aee68a6df1c3946e2cf738d
cda3e29fd055085b4d27d1a9d3bf0581a4eb2a1ee52161275aad552d9745
cae2527ba314929e16b3adcf63fbfe5b600507b479eb6bac8dbf57f9ea61
cf0c38792d951ff40006e32bfab335adbde18dd700c5843625ec18424a1a
470a3d82d751a36d8b4a69f1f5fb08cfc2b94ed2658b49c9985bc490581e
62f221617e1b4bb61c6dcc9e8e61b29e5f74c69c328c213bfddbc217436d
81d1dfe6a13e1cac30c3fa16cb4e265d8db4217e880afbaeb0227e92e214
5534c463a18baaf155fa6678668091a696c5190fde> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f67877e80be643ef8
5a01cff57f62859595ad9c2a1ef16f4c22144c6fc4d200f23642de52d57f
47e47c78a8b6713f5cb6dcd4a475047f70e7386f0baddd9f1c37f1598f60
1bc5b6005acf2115ed4aa52ed6ed621e5045f115e6c8ed146247e81ce086
3c881ef71e6e234403d5f37c528c6ebb0616bbdc05a29ca9d830ed27448f
> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987
c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e
6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e
7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df
3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3
e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b
5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/j 
<10bf3170af4c4e03cb099088e1548d44a53dbade2c858e7043672d28af7a
255a52c1fc5961ee26822ea9a234df911035f9c353cbc5b83b929a71f6d2
1b26fffa3fa0b8fccdceb1472f97c84f0973818dc194> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79e55a006319a903b4934e0296676
bb7a5df970714192f29a85860f4cb191aa4b83ebc5b58328ecf58ed9d6ff
d0d3a63dd21733d64450e3abce2a149390b0894b2fb0fce1ee78d045f446
04c31c787e13fdae7e79785a1956f734ed54b976e123646b63ce5bee0b68
59b26a26c2ad993325ab7bd77cdd1be893a8ccd1451854fed772889a0d7d
7791ac97d81ac7> ND 
/q 
<10bf31705c36af5cef64feff3875e93eaf63e864fd70bb6a233352105e24
3a5cd4f03912d5acd21f32af0f91c1a9946998d2b523bf278ed7e760296f
82ab85e13d34ee43890ecb71199ab005d452eb9982133856fef3006dcdc9
47bf3adb9d4a6a991e8aff21b2bb5591c29aca63e8bcc0429c71b550be84
f5817c08976f9f682b468226026818eeaa8d92033b36d7291e> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3483c7b936ed6e6cf91cffcbd
a815b8df60ae150c20432c17a46c0682480f6226770a8905e960aec3fe5e
934f4cc994b08abf0fc9d432168086e4> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
/v 
<10bf31706ae07dd17dfbac8a1ae33180eda67f1c12c0170124c5b65d6008
42ef910f621d12aef7aac075b848d0659b626414ef71a4> ND 
/x 
<10bf317060ff640a97f40d52fc73b98a64469b3f084ceb61cbde39a670a8
6bdd66d38d792d8bbe1de58b050ff75d7a6d9ab8ab83f71f1130ffc9a46b
7d934ffb8ab93375fd62539cb08006> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/OEMDLL+Arial findfont /Encoding get
dup 0 /.notdef put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 65 /A put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
pop
%%EndResource
[/N15/OEMDLL+Arial 1 TZ
%%BeginResource: font OEMDLJ+Arial,Bold
11 dict begin
/FontName /OEMDLJ+Arial,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1320 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/period 
<10bf317021cc67b2bc301f516a49c5d2eaf38d05e04c6bb061> ND 
/zero 
<10bf317047276c49b0d576f188d46ae965fd1ee754bf887206fb36232fbb
89f30bf7d7ccc04b68096e51e4fa383bd83a62a12254967c97fccef8f682
660584deed9a81b43cbb2c7b7968da901e3ae8e83e66419f304294be518a
c53bdfb87ba841dcf049e90378ca4bf02bb8502cda53c68c5e2344ff3039
a6b7677199a113d4a1df9615bbdd894af0ddf69e08437253bed3648332ae
c1e0f4e1525f1c1a3191b7b4ff> ND 
/one 
<10bf317028182169f7f13730e09770e210fcfa2d271bc92d4342c903256c
6dd594be31116a507d9e9bf7a06f7b02cb638869b9> ND 
/nine 
<10bf3170599a82ae97e466601e5f82e740a08f997218e30ce923542a1795
66f12b1b389002c628ce7f4dfc475549ebbceb20a69c90a116ba9877413a
91eea8edaf36f7a6c7176d858cefcd9a396bf8b5067c1b63148fbc06dc1c
3436a0b4a094a70dc1067dec799850b087d0623bba21834c3034f76fc491
7c0a4f617e96ce044c0841537ce874b23238cc7d15dc81416e1ef9922e11
e36742b051fbe97a7af85556f0a8a0f27895dd059895b58625194d9d7836
17ddfafea05d> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/OEMDLJ+Arial,Bold findfont /Encoding get
dup 0 /.notdef put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 57 /nine put
pop
%%EndResource
[/N13/OEMDLJ+Arial,Bold 1 TZ
false setSA
n
76.02 733.02 459.06 -675 re
1 1 1 setrgbcolor
f
q
n
380.46 136.68 0.0599976 588.42 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
380.46 136.68 m
380.46 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
340.2 136.68 0.0599976 588.42 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
340.2 136.68 m
340.2 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
299.88 136.68 0.0599976 588.42 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
299.88 136.68 m
299.88 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
259.62 136.68 0.0599976 588.42 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
259.62 136.68 m
259.62 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
219.36 136.68 0.0599976 588.42 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
219.36 136.68 m
219.36 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
179.1 136.68 0.0599976 588.42 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
179.1 136.68 m
179.1 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
138.78 136.68 0.0599976 588.42 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
138.78 136.68 m
138.78 725.1 l
0 0 0  setrgbcolor
S
Q
q
n
98.52 136.68 0.0599976 588.42 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
98.52 136.68 m
98.52 725.1 l
0 0 0  setrgbcolor
S
Q
1 J
0 j
0.960007 w
10 M
[] 0 d
n
98.52 136.68 322.2 588.42 re
0.501999 0.501999 0.501999  setrgbcolor
S
n
224.04 150.24 196.68 18.06 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
0 0 0  setrgbcolor
S
q
n
136.44 190.08 284.28 28.98 re
W
n
n
141.84 195.48 278.88 18.12 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
Q
n
202.86 240.78 217.86 18.06 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
219.54 286.02 201.18 18.12 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
q
n
174 325.92 246.72 28.92 re
W
n
n
179.4 331.32 241.32 18.06 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
Q
n
219.36 376.56 201.36 18.06 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
187.8 421.8 232.92 18.12 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
228.06 467.1 192.66 18.06 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
199.2 512.34 221.52 18.06 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
189.84 557.58 230.88 18.12 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
218.1 602.88 202.62 18.06 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
212.28 648.12 208.44 18.12 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
201.84 693.42 218.88 18.06 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
0.0599976 w
n
98.52 136.68 m
420.72 136.68 l
420.72 131.04 m
420.72 136.68 l
380.46 131.04 m
380.46 136.68 l
340.2 131.04 m
340.2 136.68 l
299.88 131.04 m
299.88 136.68 l
259.62 131.04 m
259.62 136.68 l
219.36 131.04 m
219.36 136.68 l
179.1 131.04 m
179.1 136.68 l
138.78 131.04 m
138.78 136.68 l
98.52 131.04 m
98.52 136.68 l
420.72 136.68 m
420.72 725.1 l
426.36 136.68 m
420.72 136.68 l
426.36 181.92 m
420.72 181.92 l
426.36 227.22 m
420.72 227.22 l
426.36 272.46 m
420.72 272.46 l
426.36 317.76 m
420.72 317.76 l
426.36 363 m
420.72 363 l
426.36 408.24 m
420.72 408.24 l
426.36 453.54 m
420.72 453.54 l
426.36 498.78 m
420.72 498.78 l
426.36 544.02 m
420.72 544.02 l
426.36 589.32 m
420.72 589.32 l
426.36 634.56 m
420.72 634.56 l
426.36 679.86 m
420.72 679.86 l
426.36 725.1 m
420.72 725.1 l
S
n
205.74 711.3 27.72 -17.76 re
f
1 1 1  setrgbcolor
233.46 706.74 m
/N13 -14.28 Tf
(1.09)
[-7.92115 -3.95132 -7.92115 -7.92115 ] pdfxs
0 0 0  setrgbcolor
426.78 97.86 m
/N15 [0 18 -18 0 0 0] Tf
(0.0) show
386.52 97.86 m
(0.2) show
346.259 97.86 m
(0.4) show
305.939 97.86 m
(0.6) show
265.678 97.86 m
(0.8) show
225.418 97.86 m
(1.0) show
185.157 97.86 m
(1.2) show
144.837 97.86 m
(1.4) show
104.577 97.86 m
(1.6) show
487.62 165.06 m
/N15 -18 Tf
(unepic)
[-10.0187 -10.0187 -10.0187 -10.0187 -4.00644 -9.01071 ] pdfxs
478.62 210.36 m
(djpeg)
[-10.0187 -4.00644 -10.0187 -10.0187 -10.0187 ] pdfxs
474.539 255.6 m
(r) show
(a)
[-10.0061 ] pdfxs
(st) show
(a) show
524.579 300.839 m
(023.eqntott) show
507.659 346.14 m
(132.ijpeg)
[-10.0171 -10.0171 -10.0171 -5.01306 -4.00479 -4.00479 -10.0171 -10.0171 -10.0171 ] pdfxs
516.659 391.379 m
(052.alvinn)
[-10.0151 -10.0151 -10.0151 -5.01114 -10.0151 -4.00287 -9.00714 -4.00287 -10.0151 -10.0151 ] pdfxs
518.58 436.68 m
(147) show
(.)
[-5.00592 ] pdfxs
(vor) show
(t)
[-5.00592 ] pdfxs
(ex) show
497.579 481.919 m
(085.cc1) show
455.519 527.159 m
(art)
[-10.0151 -6.00101 -5.01114 ] pdfxs
477.599 572.459 m
(130.li)
[-10.0171 -10.0171 -10.0171 -5.01306 -4.00479 -4.00479 ] pdfxs
498.6 617.699 m
(osdemo)
[-10.0151 -9.00714 -10.0151 -10.0151 -15.001 -10.0151 ] pdfxs
498.6 662.938 m
(mipmap)
[-15.0046 -4.00644 -10.0187 -15.0046 -10.0187 -10.0187 ] pdfxs
501.601 708.239 m
(Av)
[-12.0114 -9.00549 ] pdfxs
(e) show
(r)
[-5.99936 ] pdfxs
(age) show
295.681 86.3982 m
(S)
[-12.0114 ] pdfxs
(peedup) show
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 450 3597 a Fn(Fig.)15 b(3.)23 b(GP)k(P)n(erformance)h
(with)f(General)h(Purp)r(ose)g(Predication)i(Priorit)n(y)f(F)-7
b(unctions)p Fq(.)450 3688 y(Cross)24 b(v)l(alidation)g(of)g(the)e
(general-purp)r(ose)i(priorit)n(y)f(function.)g(The)g(b)r(est)g
(priorit)n(y)g(function)g(found)450 3780 y(b)n(y)i(training)h(on)g(the)
f(b)r(enc)n(hmarks)f(in)i(Figure)g(2)g(is)g(applied)g(to)g(the)f(b)r
(enc)n(hmarks)f(in)i(this)g(graph.)450 4071 y Fc(7.4)94
b(Register)31 b(Allo)s(cation:)f(General)i(Purp)s(ose)f(Priorit)m(y)h
(F)-8 b(unctions)450 4248 y Ft(Just)30 b(as)g(w)n(e)g(did)h(in)g
(Section)g(7.2,)e(w)n(e)h(divide)h(our)f(b)r(enc)n(hmarks)f(in)n(to)i
(a)f(training)g(set)g(and)g(a)450 4348 y(test)e(set)714
4318 y Fs(6)751 4348 y Ft(.)575 4450 y(The)20 b(b)r(enc)n(hmarks)g(in)g
(Figure)g(6)g(sho)n(w)g(the)h(training)f(set)g(for)g(this)h(exp)r
(erimen)n(t.)f(The)h(\014gure)450 4549 y(also)26 b(sho)n(ws)f(the)j
(results)e(of)h(applying)f(the)h(b)r(est)h(priorit)n(y)d(function)j
(\(from)f(our)f(DSS)h(run\))g(to)450 4649 y(all)f(the)h(b)r(enc)n
(hmarks)e(in)i(the)g(set.)f(The)g(dark)g(bar)f(asso)r(ciated)g(with)i
(eac)n(h)f(b)r(enc)n(hmark)f(is)i(the)450 4749 y(sp)r(eedup)36
b(o)n(v)n(er)e(T)-7 b(rimaran's)34 b(base)h(heuristic)g(when)h(using)f
(the)h(training)f(input)i(data.)e(The)450 4848 y(a)n(v)n(erage)26
b(for)j(this)h(data)e(set)i(is)f(3\045.)g(The)g(ligh)n(t)g(bar)g(sho)n
(ws)f(results)h(when)g(alternate)f(data)h(is)450 4948
y(used.)f(An)g(a)n(v)n(erage)c(sp)r(eedup)k(of)g(3\045)f(is)h(also)e
(attained)i(with)g(this)g(data.)575 5050 y(Figure)g(7)h(sho)n(ws)e(the)
j(test)f(set)g(for)g(this)g(exp)r(erimen)n(t.)g(The)g(\014gure)g(sho)n
(ws)e(the)j(sp)r(eedups)450 5149 y(\(o)n(v)n(er)k(T)-7
b(rimaran's)34 b(baseline\))i(ac)n(hiev)n(ed)f(b)n(y)g(applying)g(the)i
(single)e(b)r(est)h(priorit)n(y)f(function)450 5249 y(to)d(all)g(the)g
(b)r(enc)n(hmarks.)f(Ev)n(en)h(though)f(w)n(e)h(trained)g(on)g(a)f
(32-register)f(mac)n(hine,)h(w)n(e)h(also)p 450 5328
473 4 v 473 5381 a Fr(6)533 5413 y Fq(This)22 b(exp)r(erimen)n(t)d
(uses)j(smaller)f(test)g(and)g(training)h(sets)g(due)e(to)h
(preexisting)h(bugs)f(in)g(T)-6 b(rimaran.)533 5504 y(It)24
b(do)r(es)g(not)g(correctly)h(compile)f(sev)n(eral)h(of)f(our)g(b)r
(enc)n(hmarks)f(when)h(targeting)h(a)f(mac)n(hine)g(with)533
5596 y(32)i(registers.)p eop
%%Page: 11 11
11 10 bop 754 1700 a @beginspecial 72 @llx 63 @lly 737
@urx 522 @ury 2551 @rwi @clip @setspecial
%%BeginDocument: ./figs/figure4.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (regalloc.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2)
%%CreationDate: (D:20030117123800-05'00')
%%For: (mstephen)
%%DocumentData: Clean7Bit
%%BoundingBox: 72 63 737 522
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
72 63 moveto 737 63 lineto 737 522 lineto 72 522 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
72 63 665 459 rectclip
[ 0 -1 1 0 8.64 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font OAGAEO+Arial
11 dict begin
/FontName /OAGAEO+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1320 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f733e1cd354b07630
213f625adb3ae8b5aa6a51c1055a59d5f55e13f6cd6e1d9a82c372ef809e
0ee864af865bf5dd5f7dae9a46388470afbd9e2e8c39b7ea4fc9ab800d6e
8ab2edc1e3d36e194904842b1236ff6f70f88f5551621a9fa448c516e732
df410d140d211e3fe0becb6d0a54202b80a6977f> ND 
/seven 
<10bf317048559e9c292b4762aa54ba120b5bb6d9743398f6558de0cda9ce
72c94d95b651df1bda9b63361a928dc3b98c779dfd157220ceb78b8ebeab
638d0f6753cf0f10ef> ND 
/nine 
<10bf317047276c49b9c0f950eed45ca9abbead4f9a337d9778d52804f095
e0959c13860a3969943ef1a12c3ee6c45422162d204a6f0d8cdc2d4e75b5
67f1b01796340d6df61e18c819464639606becbe4894a8ef149ed72054cf
28ee583aeb880d27fff9e2fa582b760e67cbad4f844afdb68b34f85c1a95
a0e8285de8ad462405443a57e05fe3bbb3d2281adc779f19070fa98342c5
c2c2ec79e83ff4803e54082ff002fd18e3d25566d6e2d40f56cc659c4866
84f0030ca9d50085195745fdce82f2f52a9ae7ae7227879d15b08026dcde
5aab87db399da6bb3c6e8f68808a93> ND 
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac54cb2fa3a278c1c5e8b8e0184d
7cbeaa35d4ddaa02f35f83f589e53f609414a1e8dd86a2916a5d28875546
282a3c313b2605b04804> ND 
/T 
<10bf317050d9560b3cb54d581860f439ad72a17a69c33f00af1e6fc67c4b
afccfda0> ND 
/underscore 
<10bf31708ee791b2da218e69d97bd547a4d26ba7404ea4bc55> ND 
/a 
<10bf31705d64e193f685fe465eb14b2f9aa41e82540f554b50893fe63efd
4692fb4fc721a117ec78b6e9515c29fcb60e3aee68a6df1c3946e2cf738d
cda3e29fd055085b4d27d1a9d3bf0581a4eb2a1ee52161275aad552d9745
cae2527ba314929e16b3adcf63fbfe5b600507b479eb6bac8dbf57f9ea61
cf0c38792d951ff40006e32bfab335adbde18dd700c5843625ec18424a1a
470a3d82d751a36d8b4a69f1f5fb08cfc2b94ed2658b49c9985bc490581e
62f221617e1b4bb61c6dcc9e8e61b29e5f74c69c328c213bfddbc217436d
81d1dfe6a13e1cac30c3fa16cb4e265d8db4217e880afbaeb0227e92e214
5534c463a18baaf155fa6678668091a696c5190fde> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f67877e80be643ef8
5a01cff57f62859595ad9c2a1ef16f4c22144c6fc4d200f23642de52d57f
47e47c78a8b6713f5cb6dcd4a475047f70e7386f0baddd9f1c37f1598f60
1bc5b6005acf2115ed4aa52ed6ed621e5045f115e6c8ed146247e81ce086
3c881ef71e6e234403d5f37c528c6ebb0616bbdc05a29ca9d830ed27448f
> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/f 
<10bf31706629561882b73d5b02cebd16b0942e445fbe6e3232b3823cbdb2
63dcf8e5b5846268df4eba2210bb667f400c46f76ed43d4b268aed98cf98
689dff659a93d69b1917cc1e5f49aadef7d4b3b6109675927aeb98089c> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987
c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e
6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e
7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df
3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3
e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b
5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 
/h 
<10bf31703f932f5ecb68c849e33d1fed17c766a03dcb89fd4259247501b2
92adfc2297be69c7091e34ced000096d0ca29850717d0ee8abe567011317
96a4072dab7df40090735d5712990fb13b0847093cc929cc1cd64c87dd80
565b94c081eb> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79e55a006319a903b4934e0296676
bb7a5df970714192f29a85860f4cb191aa4b83ebc5b58328ecf58ed9d6ff
d0d3a63dd21733d64450e3abce2a149390b0894b2fb0fce1ee78d045f446
04c31c787e13fdae7e79785a1956f734ed54b976e123646b63ce5bee0b68
59b26a26c2ad993325ab7bd77cdd1be893a8ccd1451854fed772889a0d7d
7791ac97d81ac7> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3483c7b936ed6e6cf91cffcbd
a815b8df60ae150c20432c17a46c0682480f6226770a8905e960aec3fe5e
934f4cc994b08abf0fc9d432168086e4> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
/v 
<10bf31706ae07dd17dfbac8a1ae33180eda67f1c12c0170124c5b65d6008
42ef910f621d12aef7aac075b848d0659b626414ef71a4> ND 
/w 
<10bf31707c6251ab9dc02dac0cfe6b2ad0a1717407cbd63b737120f851f4
8bf643a435f165b7893dd828fd2da9e1185df5d44f0e3e41505c0548c1d2
65fe2f6b93f7702905dcf1946733a5e23d> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/OAGAEO+Arial findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 53 /five put
dup 55 /seven put
dup 57 /nine put
dup 65 /A put
dup 84 /T put
dup 95 /underscore put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 160 /space put
pop
%%EndResource
[/N15/OAGAEO+Arial 1 TZ
%%BeginResource: font OAGACM+Arial,Bold
11 dict begin
/FontName /OAGACM+Arial,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1320 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/period 
<10bf317021cc67b2bc301f516a49c5d2eaf38d05e04c6bb061> ND 
/zero 
<10bf317047276c49b0d576f188d46ae965fd1ee754bf887206fb36232fbb
89f30bf7d7ccc04b68096e51e4fa383bd83a62a12254967c97fccef8f682
660584deed9a81b43cbb2c7b7968da901e3ae8e83e66419f304294be518a
c53bdfb87ba841dcf049e90378ca4bf02bb8502cda53c68c5e2344ff3039
a6b7677199a113d4a1df9615bbdd894af0ddf69e08437253bed3648332ae
c1e0f4e1525f1c1a3191b7b4ff> ND 
/one 
<10bf317028182169f7f13730e09770e210fcfa2d271bc92d4342c903256c
6dd594be31116a507d9e9bf7a06f7b02cb638869b9> ND 
/six 
<10bf317047276c4999812b7a58c0572e6389f25a493cb50dd70351626cc6
677e41da6002a25ccd83eb879220f1bc9ec49e34f0a95c5563d62d2d3c67
7e7c51052e3f8f20b1a6cb020fff107774ea9002a9fc904e7bc7f5d9b128
7ee966600e4e14d3e81950544387475dc2df7bded8d1fd6f65f14436d6d3
412de54a2b4d22c27c387de4cbd77eed536038a5eb6fa3506f61d4aa5d88
fa83602ba166c3d588bfbd81466cb552670a0c10abf1fa1f55b49bb8a5b6
39b4f6cde0263c5e> ND 
/eight 
<10bf317046e8724abbe2ac86c2cf7a78841eb5dc770ebb4ea1c4f512adc0
68d936ac596c6ecfbe3787453f4392126716012c4cec7f853ce00610d660
7ccbc9a011f1907068667d76381354d3dcd2e184502b830d50f1e64b289e
c1f74623e41eab46feb846ffd0abef7cae881f0a23d0ec8568c75fd44e2c
ee4891dc68682d7fc50a733d4e515af54a916e6168114cd1c5ca9699d453
f46dee4a35d724771d4c51530925c3bec4596d2cd147f1113c1bd5eed190
05ff2c81249c3fa7df02b428c80039e3f2c7d59ef90c10534c69c0d5d424
dc28a7f8b441cc0de9ae5e026189841f6379b27057318d3711fc7969d51d
c63d14f7f5df0e8b48> ND 
/S 
<10bf31705d65c0900ab6f1dec202feebed63a391e8923b6171e4bd9a9891
3483f7e18f03f81efeea9ec6e499086f29e069b330e0714349bdbde86411
119421305eb3ccf831a419f2b1b383ae283eef31cd6ab17d35e046224edf
8d334c91b8f3410ce0b754cf25ffc38b1c45008fedcc6fb476440d278757
5aef3183071e560db2a44ec14079a58ceb82879a9f1a9b4e9fcabb16df58
24675d0a68f72691cd9980f0d6d9adcd3e204eaf9c302558bc548ec6583d
8e097a247d483ed52d9f91d7ca0feb01513c1c9a868c4cf1c92a6751c828
3f7c6f8c290f25> ND 
/d 
<10bf317046e845f3cc81de7a4b8a8a1b3fe3a86a2a74eb0ce101ae9ff9ea
ca0b0d6152bab57b5a1a20451eca1d8bce22d8934498cbe1f50790f6dd2f
9d5a0cab606ce69313bb3e4094a370b8d3856d24b15d355e84c7c481bc80
d07358154d4cee4bac791720fabdb39630005823af359d78acbc47e52e70
c34626a827ae2272bde1c4ecc0359b7e45162ac0> ND 
/e 
<10bf3170599a82aebce2d0d9cd696e2d2232ae83b1d98ff884add96e0282
26fcd2cbd306888649029fbc75f18f771bf21f4d5f53f71cd70d56907fb2
0780ae57f65359db4c49ca929cb86ae96dd2f43742f720ffcefc0d1d3194
c72a55a6bfcf26d975c031741b09b969ea0410af02ae1e13b6c1d337a6b3
96eba6c714d73f9b5d2c2499a66a60f107d1dad4da56ef> ND 
/p 
<10bf31703d364b58d236360a3109f388a509dc9806d07d5bc445174ad942
7c9600246e60ea62f48529a60136f844b413bd7834b903aeb5ec3a65352a
708c943d46c286b502a39b69aec9bc15c2a1798b51edb224db01e94ff1eb
dbf1e97f7f79a2c4ac7f7ccc29f5a1c29ed2d05ed3e5ff111a8b097f8d17
72a84cce0bcd066f78e2de698d38b96a99a99313e7a6639d82> ND 
/u 
<10bf317022f1ca2cc2a22c3ff97c1232bc55839582d9c5ff7e86bfa4508d
4c6c2a32b8a91c23bc7417819a6d61bb6c4ffa588f9ea417cfc189ff4ca4
86806cfbdc09b2f0ef54b54c53e50d4afcfcb2df030b19aa33138b0a422d
d58054461b41c9166e86f2fb1f6b43052b68dc3202c1cc> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/OAGACM+Arial,Bold findfont /Encoding get
dup 0 /.notdef put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 54 /six put
dup 56 /eight put
dup 83 /S put
dup 100 /d put
dup 101 /e put
dup 112 /p put
dup 117 /u put
pop
%%EndResource
[/N13/OAGACM+Arial,Bold 1 TZ
false setSA
n
76.02 733.02 459.06 -675 re
1 1 1 setrgbcolor
f
q
n
366.72 132.66 0.0599976 593.64 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
366.72 132.66 m
366.72 726.3 l
0 0 0  setrgbcolor
S
Q
q
n
310.98 132.66 0.0599976 593.64 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
310.98 132.66 m
310.98 726.3 l
0 0 0  setrgbcolor
S
Q
q
n
255.3 132.66 0.0599976 593.64 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
255.3 132.66 m
255.3 726.3 l
0 0 0  setrgbcolor
S
Q
q
n
199.56 132.66 0.0599976 593.64 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
199.56 132.66 m
199.56 726.3 l
0 0 0  setrgbcolor
S
Q
q
n
143.88 132.66 0.0599976 593.64 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
143.88 132.66 m
143.88 726.3 l
0 0 0  setrgbcolor
S
Q
q
n
88.14 132.66 0.0599976 593.64 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
88.14 132.66 m
88.14 726.3 l
0 0 0  setrgbcolor
S
Q
q
n
72 54 467.04 683.04 re
98.4 190.68 20.46 266.28 re
eoclip
n
1 J
0 j
0.960007 w
10 M
[] 0 d
n
88.14 132.66 334.26 593.64 re
0.501999 0.501999 0.501999  setrgbcolor
S
Q
q
n
148.14 145.44 274.26 35.04 re
W
n
1 J
0 j
0.960007 w
10 M
[] 0 d
n
153.54 150.84 268.86 24.18 re
q
0 0 0  setrgbcolor
eofill
Q
0 0 0  setrgbcolor
S
Q
q
n
172.26 230.22 250.14 35.04 re
W
n
1 J
0 j
0.960007 w
10 M
[] 0 d
n
177.66 235.62 244.74 24.18 re
q
0 0 0  setrgbcolor
eofill
Q
0 0 0  setrgbcolor
S
Q
1 J
0 j
0.960007 w
10 M
[] 0 d
n
255.3 320.46 167.1 24.18 re
q
0 0 0  setrgbcolor
eofill
Q
0 0 0  setrgbcolor
S
q
n
169.86 399.84 252.54 35.04 re
W
n
n
175.26 405.24 247.14 24.18 re
q
eofill
Q
S
Q
n
308.4 490.08 114 24.18 re
q
eofill
Q
S
n
286.86 574.86 135.54 24.18 re
q
eofill
Q
S
n
226.2 659.7 196.2 24.18 re
q
eofill
Q
S
n
184.02 175.08 238.38 24.12 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
211.5 259.86 210.9 24.18 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
300.66 344.7 121.74 24.12 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
q
n
161.76 424.08 260.64 35.04 re
W
n
n
167.16 429.48 255.24 24.18 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
Q
n
310.68 514.32 111.72 24.12 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
296.76 599.1 125.64 24.18 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
245.1 683.94 177.3 24.12 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
0.0599976 w
n
88.14 132.66 m
422.4 132.66 l
422.4 128.1 m
422.4 132.66 l
366.72 128.1 m
366.72 132.66 l
310.98 128.1 m
310.98 132.66 l
255.3 128.1 m
255.3 132.66 l
199.56 128.1 m
199.56 132.66 l
143.88 128.1 m
143.88 132.66 l
88.14 128.1 m
88.14 132.66 l
422.4 132.66 m
422.4 726.3 l
426.96 132.66 m
422.4 132.66 l
426.96 217.44 m
422.4 217.44 l
426.96 302.28 m
422.4 302.28 l
426.96 387.06 m
422.4 387.06 l
426.96 471.9 m
422.4 471.9 l
426.96 556.68 m
422.4 556.68 l
426.96 641.52 m
422.4 641.52 l
426.96 726.3 m
422.4 726.3 l
S
n
230.22 680.94 28.74 -18.3 re
f
1 1 1  setrgbcolor
258.96 676.26 m
/N13 -14.76 Tf
(1) show
(.)
[-4.10778 ] pdfxs
(08) show
277.86 700.5 m
(1) show
(.)
[-4.10778 ] pdfxs
(06) show
0 0 0  setrgbcolor
427.2 100.92 m
/N15 [0 14.76 -14.76 0 0 0] Tf
(0.9) show
371.519 92.7002 m
(0.95) show
315.78 113.219 m
(1) show
260.099 92.7002 m
(1.05) show
204.36 100.92 m
(1.1) show
148.679 92.7002 m
(1.15) show
92.9394 100.92 m
(1.2) show
502.62 179.76 m
/N15 -14.76 Tf
(mpeg2dec)
[-12.3053 -8.21691 -8.21691 -8.21691 -8.21691 -8.21691 -8.21691 -7.39036 ] pdfxs
500.999 264.54 m
(rawcaudio)
[-4.92668 -8.21826 -10.6682 -7.39171 -8.21826 -8.21826 -8.21826 -3.28821 -8.21826 ] pdfxs
526.379 349.38 m
(129) show
(.c)
[-4.10778 -7.3845 ] pdfxs
(o) show
(m)
[-12.2995 ] pdfxs
(p) show
(r)
[-4.91947 ] pdfxs
(e) show
(ss)
[-7.3845 -7.3845 ] pdfxs
490.258 434.16 m
(hu) show
(ff)
[-4.10778 -4.10778 ] pdfxs
(_en) show
(c) show
490.258 518.94 m
(hu) show
(ff)
[-4.10778 -4.10778 ] pdfxs
(_de) show
(c) show
514.978 603.781 m
(g721decode)
[-8.21691 -8.21691 -8.21691 -8.21691 -8.21691 -8.21691 -7.39036 -8.21691 -8.21691 -8.21691 ] pdfxs
488.638 688.56 m
(Average)
[-9.85223 -7.38743 -8.21399 -4.9224 -8.21399 -8.21399 -8.21399 ] pdfxs
286.377 82.741 m
/N13 -14.76 Tf
(Speedup)
[-9.83895 -9.01239 -8.2007 -8.2007 -9.01239 -9.01239 -9.01239 ] pdfxs
n
98.46 456.9 20.4 -266.16 re
1 1 1  setrgbcolor
f
n
98.4 190.68 20.46 266.22 re
0 0 0  setrgbcolor
S
0.960007 w
n
104.64 195.12 9.06 9.06 re
q
eofill
Q
S
114.18 207.66 m
/N15 [0 14.76 -14.76 0 0 0] Tf
(Training data set) show
n
104.64 324.36 9.06 9.06 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
114.18 336.9 m
(Alternate data set) show
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 330 1754 a Fn(Fig.)15 b(4.)22 b(GP)28 b(P)n(erformance)e
(on)h(Sp)r(ecialized)i(Register)e(Allo)r(cation)j(Priorit)n(y)f(F)-7
b(unctions.)330 1846 y Fq(The)36 b(dark)f(colored)i(bars)f(are)h(sp)r
(eedups)e(using)h(the)g(same)f(data)h(set)g(on)g(whic)n(h)g(the)f(sp)r
(ecialized)330 1937 y(priorit)n(y)30 b(function)h(w)n(as)g(trained.)g
(The)g(ligh)n(t)f(colored)i(bars)e(are)h(sp)r(eedups)f(that)g(use)h(an)
f(alternate)330 2028 y(data)c(set.)885 3388 y @beginspecial
81 @llx 63 @lly 756 @urx 513 @ury 2267 @rwi @clip @setspecial
%%BeginDocument: ./figs/figure5.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (regalloc1.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2)
%%CreationDate: (D:20021115230113-05'00')
%%For: (mstephen)
%%DocumentData: Clean7Bit
%%BoundingBox: 81 63 756 513
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
81 63 moveto 756 63 lineto 756 513 lineto 81 513 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
81 63 675 449 rectclip
[ 0 -1 1 0 18 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font IMCKFC+Arial,Bold
11 dict begin
/FontName /IMCKFC+Arial,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1320 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/G 
<10bf317049853377a7c14408213f8cb0d7a0c9f167e5d8c5ab81d02a6368
40fe7690a6220dd951ed1475afe94af1dca8cd00af32527ccdb4443a6f1b
0f1d9f948f41689d552617fbb202a848e943cafeef773c524f107cecac26
dd1073fd79085c0ccd4cc17b02b3c84d6937bb8c88ee0f58f0488cae3848
b481c280d21ec8fe3faf9183edbd586a23518efaddb855a9de63fa94b398
a92d1943acefbb9697> ND 
/S 
<10bf31705d65c0900ab6f1dec202feebed63a391e8923b6171e4bd9a9891
3483f7e18f03f81efeea9ec6e499086f29e069b330e0714349bdbde86411
119421305eb3ccf831a419f2b1b383ae283eef31cd6ab17d35e046224edf
8d334c91b8f3410ce0b754cf25ffc38b1c45008fedcc6fb476440d278757
5aef3183071e560db2a44ec14079a58ceb82879a9f1a9b4e9fcabb16df58
24675d0a68f72691cd9980f0d6d9adcd3e204eaf9c302558bc548ec6583d
8e097a247d483ed52d9f91d7ca0feb01513c1c9a868c4cf1c92a6751c828
3f7c6f8c290f25> ND 
/a 
<10bf31705d64e193f644676913533d4f242b6181368ed1350652c8cb7a6f
e958f60841a88d1088c20f893090b458ae087d16aa8691f1ae44882b0528
d32f3e9827d4294992e18a57652ae7d531994f09c8f3899ddffaad39408b
1529cb6c6e94b8c5c36f6038811d22f304b6662d870ece2886bb4e9f799a
c37faedbf994154341e467f29126a4c489a05c6fef9ee5143f581ea41499
e4aecea25c0711d5cc7b9f01a37e7c0b7e59d5ee83c610a480921138ec2c
f957d766614f6ccaa7ceb4e20fd6f9ac362e8c090b1abb9485ee8c51fdeb
7fc72063a72ab3373c0c6872cf9ba20b3513a2189f8a98cd5a1ee87742> ND 
/d 
<10bf317046e845f3cc81de7a4b8a8a1b3fe3a86a2a74eb0ce101ae9ff9ea
ca0b0d6152bab57b5a1a20451eca1d8bce22d8934498cbe1f50790f6dd2f
9d5a0cab606ce69313bb3e4094a370b8d3856d24b15d355e84c7c481bc80
d07358154d4cee4bac791720fabdb39630005823af359d78acbc47e52e70
c34626a827ae2272bde1c4ecc0359b7e45162ac0> ND 
/e 
<10bf3170599a82aebce2d0d9cd696e2d2232ae83b1d98ff884add96e0282
26fcd2cbd306888649029fbc75f18f771bf21f4d5f53f71cd70d56907fb2
0780ae57f65359db4c49ca929cb86ae96dd2f43742f720ffcefc0d1d3194
c72a55a6bfcf26d975c031741b09b969ea0410af02ae1e13b6c1d337a6b3
96eba6c714d73f9b5d2c2499a66a60f107d1dad4da56ef> ND 
/i 
<10bf317021cc67b2bc312fc6a7ad37016808b8c74342617d801906e8ad23
4c7210637a5c2e2ea339f24d0c> ND 
/n 
<10bf31702094fda2efce4110428b7f86f5f2073cab682ca78d0dc97da563
e3301b964801f725812f64cb67abc1e242f6d8dcd921f1fbf9e05fee92c3
cf16b5bf6083337a59bf026de7fa548a247b8bde12c672aa0ba0501ccc35
fcca587d7573f11dfc32a2ac31516847d39fb276060c6171da> ND 
/o 
<10bf317041f0d680f4930f6b0672f7536ce2eb70a2366463cc9006c590f6
6bbb22b4a706eff4a93c95880cecbbf82d6e623efa721926a49ba75b71ef
97d0e3d8c35761734c54d6d734cb61cf4c4d7050d90fa115600d26f47050
dfb8739452ed0059ffdca41c137f0b71425a690a4da83dcf8abcf17c206e
c5eff5dd0d7b85b999c37123dfb769cd075b5a162cb33d72426c> ND 
/p 
<10bf31703d364b58d236360a3109f388a509dc9806d07d5bc445174ad942
7c9600246e60ea62f48529a60136f844b413bd7834b903aeb5ec3a65352a
708c943d46c286b502a39b69aec9bc15c2a1798b51edb224db01e94ff1eb
dbf1e97f7f79a2c4ac7f7ccc29f5a1c29ed2d05ed3e5ff111a8b097f8d17
72a84cce0bcd066f78e2de698d38b96a99a99313e7a6639d82> ND 
/r 
<10bf31703f93f6c49808fdd8544fecb184adc28a087f99360dbfdf8b0375
9b819135c930698375e13c34125773b22d251f861dc05246608ab0d559df
442670f87f9615eabcaf25ab4b613b44e059b394bfb9> ND 
/t 
<10bf3170688ce4cb1d2f5bf487137bec8ecb87b4485146ce17824d997ac5
95ab4afb2e80a065a802ee3f010bb37eac91d0f6ed42677aa9dde7e1ad01
769b95b971dec6d1669588801bb2fb04109e79e9771f019783524f2f268e
35dce126a03e55d028a6951cc9b40e649071f577> ND 
/u 
<10bf317022f1ca2cc2a22c3ff97c1232bc55839582d9c5ff7e86bfa4508d
4c6c2a32b8a91c23bc7417819a6d61bb6c4ffa588f9ea417cfc189ff4ca4
86806cfbdc09b2f0ef54b54c53e50d4afcfcb2df030b19aa33138b0a422d
d58054461b41c9166e86f2fb1f6b43052b68dc3202c1cc> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/IMCKFC+Arial,Bold findfont /Encoding get
dup 0 /.notdef put
dup 71 /G put
dup 83 /S put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 117 /u put
pop
%%EndResource
[/N26/IMCKFC+Arial,Bold 1 TZ
%%BeginResource: font IMCKDA+Arial
11 dict begin
/FontName /IMCKDA+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1320 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d898870164
1dba6c5defb41d909040a164fdb0a088fefa45fff299b57b0e194251a4a8
b9cf3bc1815fd2c5ba06e651f9d7799098b4541de9c35043282b335f2de1
7def94eec0695fa30f7aaa5574cd9d280a8b4d225396feeeafb4b20c3fcc
9f12e751228b7464328a957a71c1d6fc11ef53a8f692024ab80f5e0d7623
62b42a462a2bf96d5a0db86097e421e5cb8c7d7a0900e6cfd70978f26b60
122332f14359637710d630381bc4f9c629fd5be208af03ab6a69f0ba40b9
a2> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f733e1cd354b07630
213f625adb3ae8b5aa6a51c1055a59d5f55e13f6cd6e1d9a82c372ef809e
0ee864af865bf5dd5f7dae9a46388470afbd9e2e8c39b7ea4fc9ab800d6e
8ab2edc1e3d36e194904842b1236ff6f70f88f5551621a9fa448c516e732
df410d140d211e3fe0becb6d0a54202b80a6977f> ND 
/seven 
<10bf317048559e9c292b4762aa54ba120b5bb6d9743398f6558de0cda9ce
72c94d95b651df1bda9b63361a928dc3b98c779dfd157220ceb78b8ebeab
638d0f6753cf0f10ef> ND 
/underscore 
<10bf31708ee791b2da218e69d97bd547a4d26ba7404ea4bc55> ND 
/a 
<10bf31705d64e193f685fe465eb14b2f9aa41e82540f554b50893fe63efd
4692fb4fc721a117ec78b6e9515c29fcb60e3aee68a6df1c3946e2cf738d
cda3e29fd055085b4d27d1a9d3bf0581a4eb2a1ee52161275aad552d9745
cae2527ba314929e16b3adcf63fbfe5b600507b479eb6bac8dbf57f9ea61
cf0c38792d951ff40006e32bfab335adbde18dd700c5843625ec18424a1a
470a3d82d751a36d8b4a69f1f5fb08cfc2b94ed2658b49c9985bc490581e
62f221617e1b4bb61c6dcc9e8e61b29e5f74c69c328c213bfddbc217436d
81d1dfe6a13e1cac30c3fa16cb4e265d8db4217e880afbaeb0227e92e214
5534c463a18baaf155fa6678668091a696c5190fde> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f67877e80be643ef8
5a01cff57f62859595ad9c2a1ef16f4c22144c6fc4d200f23642de52d57f
47e47c78a8b6713f5cb6dcd4a475047f70e7386f0baddd9f1c37f1598f60
1bc5b6005acf2115ed4aa52ed6ed621e5045f115e6c8ed146247e81ce086
3c881ef71e6e234403d5f37c528c6ebb0616bbdc05a29ca9d830ed27448f
> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/f 
<10bf31706629561882b73d5b02cebd16b0942e445fbe6e3232b3823cbdb2
63dcf8e5b5846268df4eba2210bb667f400c46f76ed43d4b268aed98cf98
689dff659a93d69b1917cc1e5f49aadef7d4b3b6109675927aeb98089c> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987
c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e
6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e
7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df
3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3
e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b
5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 
/h 
<10bf31703f932f5ecb68c849e33d1fed17c766a03dcb89fd4259247501b2
92adfc2297be69c7091e34ced000096d0ca29850717d0ee8abe567011317
96a4072dab7df40090735d5712990fb13b0847093cc929cc1cd64c87dd80
565b94c081eb> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79e55a006319a903b4934e0296676
bb7a5df970714192f29a85860f4cb191aa4b83ebc5b58328ecf58ed9d6ff
d0d3a63dd21733d64450e3abce2a149390b0894b2fb0fce1ee78d045f446
04c31c787e13fdae7e79785a1956f734ed54b976e123646b63ce5bee0b68
59b26a26c2ad993325ab7bd77cdd1be893a8ccd1451854fed772889a0d7d
7791ac97d81ac7> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3483c7b936ed6e6cf91cffcbd
a815b8df60ae150c20432c17a46c0682480f6226770a8905e960aec3fe5e
934f4cc994b08abf0fc9d432168086e4> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
/w 
<10bf31707c6251ab9dc02dac0cfe6b2ad0a1717407cbd63b737120f851f4
8bf643a435f165b7893dd828fd2da9e1185df5d44f0e3e41505c0548c1d2
65fe2f6b93f7702905dcf1946733a5e23d> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/IMCKDA+Arial findfont /Encoding get
dup 0 /.notdef put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 55 /seven put
dup 95 /underscore put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 117 /u put
dup 119 /w put
pop
%%EndResource
[/N24/IMCKDA+Arial 1 TZ
false setSA
n
92.7 724.68 386.82 -597.66 re
1 1 1 setrgbcolor
f
q
n
415.02 127.02 0.0599976 597.66 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
415.02 127.02 m
415.02 724.68 l
0.753006 0.753006 0.753006  setrgbcolor
S
Q
q
n
350.58 127.02 0.0599976 597.66 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
350.58 127.02 m
350.58 724.68 l
0.753006 0.753006 0.753006  setrgbcolor
S
Q
q
n
92.46 127.02 387.3 597.66 re
207.42 610.32 100.8 97.26 re
eoclip
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
286.08 127.02 m
286.08 724.68 l
221.64 127.02 m
221.64 724.68 l
0.753006 0.753006 0.753006  setrgbcolor
S
Q
q
n
157.14 127.02 0.0599976 597.66 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
157.14 127.02 m
157.14 724.68 l
0.753006 0.753006 0.753006  setrgbcolor
S
Q
q
n
92.7 127.02 0.0599976 597.66 re
W
n
1 J
1 j
0.0599976 w
10 M
[] 0 d
n
92.7 127.02 m
92.7 724.68 l
0.753006 0.753006 0.753006  setrgbcolor
S
Q
q
n
72 54 467.04 683.04 re
207.42 610.32 100.8 97.26 re
eoclip
n
1 J
0 j
0.960007 w
10 M
[] 0 d
n
92.7 127.02 386.82 597.66 re
0.501999 0.501999 0.501999  setrgbcolor
S
Q
1 J
0 j
0.0599976 w
10 M
[] 0 d
n
92.7 127.02 m
479.52 127.02 l
479.52 123.3 m
479.52 127.02 l
415.02 123.3 m
415.02 127.02 l
350.58 123.3 m
350.58 127.02 l
286.08 123.3 m
286.08 127.02 l
221.64 123.3 m
221.64 127.02 l
157.14 123.3 m
157.14 127.02 l
92.7 123.3 m
92.7 127.02 l
479.52 127.02 m
479.52 724.68 l
483.24 127.02 m
479.52 127.02 l
483.24 186.78 m
479.52 186.78 l
483.24 246.54 m
479.52 246.54 l
483.24 306.3 m
479.52 306.3 l
483.24 366.06 m
479.52 366.06 l
483.24 425.88 m
479.52 425.88 l
483.24 485.64 m
479.52 485.64 l
483.24 545.4 m
479.52 545.4 l
483.24 605.16 m
479.52 605.16 l
483.24 664.92 m
479.52 664.92 l
483.24 724.68 m
479.52 724.68 l
0 0 0  setrgbcolor
S
1 j
0.960007 w
n
479.52 127.02 m
307.08 138.96 l
298.14 150.9 l
147.12 174.84 l
135.18 258.48 l
117 306.3 l
116.34 533.4 l
115.8 557.34 l
115.2 617.1 l
115.2 724.68 l
S
n
479.52 127.02 m
277.86 138.96 l
272.82 174.84 l
170.94 198.72 l
170.94 724.68 l
479.52 127.02 m
475.56 138.96 l
470.1 174.84 l
462.6 186.78 l
438.36 198.72 l
424.08 294.36 l
423.66 413.88 l
423.66 724.68 l
0.501999 0.501999 0.501999  setrgbcolor
S
n
479.52 127.02 m
444.42 138.96 l
443.46 150.9 l
423.18 162.9 l
414.96 174.84 l
414.48 186.78 l
411.72 198.72 l
405.6 210.72 l
397.32 258.48 l
377.64 306.3 l
359.94 330.24 l
355.62 425.88 l
351.66 509.52 l
350.64 557.34 l
350.64 724.68 l
479.52 127.02 m
322.8 138.96 l
272.7 162.9 l
266.16 186.78 l
264.12 198.72 l
257.88 222.66 l
234.3 258.48 l
227.94 270.48 l
227.7 354.12 l
185.1 390 l
173.58 461.7 l
165.42 497.58 l
165.42 724.68 l
0.587997 0.587997 0.587997  setrgbcolor
S
n
479.52 127.02 m
479.34 138.96 l
477.36 198.72 l
476.82 246.54 l
474.18 330.24 l
474.12 461.7 l
473.94 485.64 l
473.82 545.4 l
473.82 724.68 l
0 0 0  setrgbcolor
S
q
n
475.98 123.54 7.02002 7.02 re
W
n
n
479.46 129.96 m
477.84 129.96 476.52 128.58 476.52 126.96 c
476.52 125.34 477.84 124.02 479.46 124.02 c
481.08 124.02 482.46 125.34 482.46 126.96 c
482.46 128.58 481.08 129.96 479.46 129.96 c
h
S
Q
n
307.02 141.9 m
305.4 141.9 304.08 140.52 304.08 138.9 c
304.08 137.28 305.4 135.96 307.02 135.96 c
308.64 135.96 310.02 137.28 310.02 138.9 c
310.02 140.52 308.64 141.9 307.02 141.9 c
h
298.08 153.84 m
296.46 153.84 295.14 152.46 295.14 150.84 c
295.14 149.22 296.46 147.9 298.08 147.9 c
299.7 147.9 301.08 149.22 301.08 150.84 c
301.08 152.46 299.7 153.84 298.08 153.84 c
h
147.06 177.78 m
145.44 177.78 144.12 176.4 144.12 174.78 c
144.12 173.16 145.44 171.84 147.06 171.84 c
148.68 171.84 150.06 173.16 150.06 174.78 c
150.06 176.4 148.68 177.78 147.06 177.78 c
h
135.12 261.42 m
133.5 261.42 132.18 260.04 132.18 258.42 c
132.18 256.8 133.5 255.48 135.12 255.48 c
136.74 255.48 138.12 256.8 138.12 258.42 c
138.12 260.04 136.74 261.42 135.12 261.42 c
h
116.94 309.24 m
115.32 309.24 114 307.86 114 306.24 c
114 304.62 115.32 303.3 116.94 303.3 c
118.56 303.3 119.94 304.62 119.94 306.24 c
119.94 307.86 118.56 309.24 116.94 309.24 c
h
116.82 345.12 m
115.2 345.12 113.88 343.74 113.88 342.12 c
113.88 340.5 115.2 339.18 116.82 339.18 c
118.44 339.18 119.82 340.5 119.82 342.12 c
119.82 343.74 118.44 345.12 116.82 345.12 c
h
116.34 512.46 m
114.72 512.46 113.4 511.08 113.4 509.46 c
113.4 507.84 114.72 506.52 116.34 506.52 c
117.96 506.52 119.34 507.84 119.34 509.46 c
119.34 511.08 117.96 512.46 116.34 512.46 c
h
116.28 536.34 m
114.66 536.34 113.34 534.96 113.34 533.34 c
113.34 531.72 114.66 530.4 116.28 530.4 c
117.9 530.4 119.28 531.72 119.28 533.34 c
119.28 534.96 117.9 536.34 116.28 536.34 c
h
115.74 560.28 m
114.12 560.28 112.8 558.9 112.8 557.28 c
112.8 555.66 114.12 554.34 115.74 554.34 c
117.36 554.34 118.74 555.66 118.74 557.28 c
118.74 558.9 117.36 560.28 115.74 560.28 c
h
115.14 620.04 m
113.52 620.04 112.2 618.66 112.2 617.04 c
112.2 615.42 113.52 614.1 115.14 614.1 c
116.76 614.1 118.14 615.42 118.14 617.04 c
118.14 618.66 116.76 620.04 115.14 620.04 c
h
115.14 727.62 m
113.52 727.62 112.2 726.24 112.2 724.62 c
112.2 723 113.52 721.68 115.14 721.68 c
116.76 721.68 118.14 723 118.14 724.62 c
118.14 726.24 116.76 727.62 115.14 727.62 c
h
S
q
n
475.98 123.54 7.02002 7.08 re
W
n
n
476.52 127.02 m
482.52 130.02 l
482.52 124.02 l
476.52 127.02 l
h
0.501999 0.501999 0.501999  setrgbcolor
S
Q
n
274.86 138.96 m
280.86 141.96 l
280.86 135.96 l
274.86 138.96 l
h
269.82 174.84 m
275.82 177.84 l
275.82 171.84 l
269.82 174.84 l
h
167.94 198.72 m
173.94 201.72 l
173.94 195.72 l
167.94 198.72 l
h
0.501999 0.501999 0.501999  setrgbcolor
S
q
n
167.4 721.14 7.14 7.08002 re
W
n
n
167.94 724.68 m
173.94 727.68 l
173.94 721.68 l
167.94 724.68 l
h
S
Q
n
476.52 127.02 m
482.52 130.02 l
482.52 124.02 l
476.52 127.02 l
h
q
eofill
Q
S
n
472.56 138.96 m
478.56 141.96 l
478.56 135.96 l
472.56 138.96 l
h
q
eofill
Q
S
n
467.1 174.84 m
473.1 177.84 l
473.1 171.84 l
467.1 174.84 l
h
q
eofill
Q
S
n
459.6 186.78 m
465.6 189.78 l
465.6 183.78 l
459.6 186.78 l
h
q
eofill
Q
S
n
435.36 198.72 m
441.36 201.72 l
441.36 195.72 l
435.36 198.72 l
h
q
eofill
Q
S
n
421.08 294.36 m
427.08 297.36 l
427.08 291.36 l
421.08 294.36 l
h
q
eofill
Q
S
n
420.66 413.88 m
426.66 416.88 l
426.66 410.88 l
420.66 413.88 l
h
q
eofill
Q
S
n
420.66 545.4 m
426.66 548.4 l
426.66 542.4 l
420.66 545.4 l
h
q
eofill
Q
S
n
420.66 724.68 m
426.66 727.68 l
426.66 721.68 l
420.66 724.68 l
h
q
eofill
Q
S
n
479.46 129.96 m
477.84 129.96 476.52 128.58 476.52 126.96 c
476.52 125.34 477.84 124.02 479.46 124.02 c
481.08 124.02 482.46 125.34 482.46 126.96 c
482.46 128.58 481.08 129.96 479.46 129.96 c
h
q
eofill
Q
0.587997 0.587997 0.587997  setrgbcolor
S
n
444.36 141.9 m
442.74 141.9 441.42 140.52 441.42 138.9 c
441.42 137.28 442.74 135.96 444.36 135.96 c
445.98 135.96 447.36 137.28 447.36 138.9 c
447.36 140.52 445.98 141.9 444.36 141.9 c
h
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
443.4 153.84 m
441.78 153.84 440.46 152.46 440.46 150.84 c
440.46 149.22 441.78 147.9 443.4 147.9 c
445.02 147.9 446.4 149.22 446.4 150.84 c
446.4 152.46 445.02 153.84 443.4 153.84 c
h
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
423.12 165.84 m
421.5 165.84 420.18 164.46 420.18 162.84 c
420.18 161.22 421.5 159.9 423.12 159.9 c
424.74 159.9 426.12 161.22 426.12 162.84 c
426.12 164.46 424.74 165.84 423.12 165.84 c
h
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
414.9 177.78 m
413.28 177.78 411.96 176.4 411.96 174.78 c
411.96 173.16 413.28 171.84 414.9 171.84 c
416.52 171.84 417.9 173.16 417.9 174.78 c
417.9 176.4 416.52 177.78 414.9 177.78 c
h
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
414.42 189.72 m
412.8 189.72 411.48 188.34 411.48 186.72 c
411.48 185.1 412.8 183.78 414.42 183.78 c
416.04 183.78 417.42 185.1 417.42 186.72 c
417.42 188.34 416.04 189.72 414.42 189.72 c
h
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
411.66 201.66 m
410.04 201.66 408.72 200.28 408.72 198.66 c
408.72 197.04 410.04 195.72 411.66 195.72 c
413.28 195.72 414.66 197.04 414.66 198.66 c
414.66 200.28 413.28 201.66 411.66 201.66 c
h
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
405.54 213.66 m
403.92 213.66 402.6 212.28 402.6 210.66 c
402.6 209.04 403.92 207.72 405.54 207.72 c
407.16 207.72 408.54 209.04 408.54 210.66 c
408.54 212.28 407.16 213.66 405.54 213.66 c
h
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
397.26 261.42 m
395.64 261.42 394.32 260.04 394.32 258.42 c
394.32 256.8 395.64 255.48 397.26 255.48 c
398.88 255.48 400.26 256.8 400.26 258.42 c
400.26 260.04 398.88 261.42 397.26 261.42 c
h
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
377.58 309.24 m
375.96 309.24 374.64 307.86 374.64 306.24 c
374.64 304.62 375.96 303.3 377.58 303.3 c
379.2 303.3 380.58 304.62 380.58 306.24 c
380.58 307.86 379.2 309.24 377.58 309.24 c
h
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
359.88 333.18 m
358.26 333.18 356.94 331.8 356.94 330.18 c
356.94 328.56 358.26 327.24 359.88 327.24 c
361.5 327.24 362.88 328.56 362.88 330.18 c
362.88 331.8 361.5 333.18 359.88 333.18 c
h
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
355.56 428.82 m
353.94 428.82 352.62 427.44 352.62 425.82 c
352.62 424.2 353.94 422.88 355.56 422.88 c
357.18 422.88 358.56 424.2 358.56 425.82 c
358.56 427.44 357.18 428.82 355.56 428.82 c
h
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
351.6 512.46 m
349.98 512.46 348.66 511.08 348.66 509.46 c
348.66 507.84 349.98 506.52 351.6 506.52 c
353.22 506.52 354.6 507.84 354.6 509.46 c
354.6 511.08 353.22 512.46 351.6 512.46 c
h
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
350.58 560.28 m
348.96 560.28 347.64 558.9 347.64 557.28 c
347.64 555.66 348.96 554.34 350.58 554.34 c
352.2 554.34 353.58 555.66 353.58 557.28 c
353.58 558.9 352.2 560.28 350.58 560.28 c
h
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
n
350.58 727.62 m
348.96 727.62 347.64 726.24 347.64 724.62 c
347.64 723 348.96 721.68 350.58 721.68 c
352.2 721.68 353.58 723 353.58 724.62 c
353.58 726.24 352.2 727.62 350.58 727.62 c
h
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
q
n
475.98 123.54 4.14001 4.08 re
W
n
n
479.52 127.02 m
476.52 124.02 l
0.501999 0.501999 0.501999  setrgbcolor
S
Q
q
n
478.98 126.48 4.02002 4.14 re
W
n
n
479.52 127.02 m
482.52 130.02 l
0.501999 0.501999 0.501999  setrgbcolor
S
Q
q
n
478.98 123.54 4.02002 4.08 re
W
n
n
479.52 127.02 m
482.52 124.02 l
0.501999 0.501999 0.501999  setrgbcolor
S
Q
n
479.52 127.02 m
476.52 130.02 l
479.52 127.02 m
476.52 127.02 l
0.501999 0.501999 0.501999  setrgbcolor
S
q
n
478.98 126.48 4.02002 1.14 re
W
n
n
479.52 127.02 m
482.52 127.02 l
S
Q
n
322.8 138.96 m
319.8 135.96 l
322.8 138.96 m
325.8 141.96 l
322.8 138.96 m
325.8 135.96 l
322.8 138.96 m
319.8 141.96 l
322.8 138.96 m
319.8 138.96 l
322.8 138.96 m
325.8 138.96 l
272.7 162.9 m
269.7 159.9 l
272.7 162.9 m
275.7 165.9 l
272.7 162.9 m
275.7 159.9 l
272.7 162.9 m
269.7 165.9 l
272.7 162.9 m
269.7 162.9 l
272.7 162.9 m
275.7 162.9 l
266.16 186.78 m
263.16 183.78 l
266.16 186.78 m
269.16 189.78 l
266.16 186.78 m
269.16 183.78 l
266.16 186.78 m
263.16 189.78 l
266.16 186.78 m
263.16 186.78 l
266.16 186.78 m
269.16 186.78 l
264.12 198.72 m
261.12 195.72 l
264.12 198.72 m
267.12 201.72 l
264.12 198.72 m
267.12 195.72 l
264.12 198.72 m
261.12 201.72 l
264.12 198.72 m
261.12 198.72 l
264.12 198.72 m
267.12 198.72 l
257.88 222.66 m
254.88 219.66 l
257.88 222.66 m
260.88 225.66 l
257.88 222.66 m
260.88 219.66 l
257.88 222.66 m
254.88 225.66 l
257.88 222.66 m
254.88 222.66 l
257.88 222.66 m
260.88 222.66 l
234.3 258.48 m
231.3 255.48 l
234.3 258.48 m
237.3 261.48 l
234.3 258.48 m
237.3 255.48 l
234.3 258.48 m
231.3 261.48 l
234.3 258.48 m
231.3 258.48 l
234.3 258.48 m
237.3 258.48 l
227.94 270.48 m
224.94 267.48 l
227.94 270.48 m
230.94 273.48 l
227.94 270.48 m
230.94 267.48 l
227.94 270.48 m
224.94 273.48 l
227.94 270.48 m
224.94 270.48 l
227.94 270.48 m
230.94 270.48 l
227.7 354.12 m
224.7 351.12 l
227.7 354.12 m
230.7 357.12 l
227.7 354.12 m
230.7 351.12 l
227.7 354.12 m
224.7 357.12 l
227.7 354.12 m
224.7 354.12 l
227.7 354.12 m
230.7 354.12 l
185.1 390 m
182.1 387 l
185.1 390 m
188.1 393 l
185.1 390 m
188.1 387 l
185.1 390 m
182.1 393 l
185.1 390 m
182.1 390 l
185.1 390 m
188.1 390 l
173.58 461.7 m
170.58 458.7 l
173.58 461.7 m
176.58 464.7 l
173.58 461.7 m
176.58 458.7 l
173.58 461.7 m
170.58 464.7 l
173.58 461.7 m
170.58 461.7 l
173.58 461.7 m
176.58 461.7 l
165.42 497.58 m
162.42 494.58 l
165.42 497.58 m
168.42 500.58 l
165.42 497.58 m
168.42 494.58 l
165.42 497.58 m
162.42 500.58 l
S
n
165.42 497.58 m
162.42 497.58 l
165.42 497.58 m
168.42 497.58 l
165.42 724.68 m
162.42 721.68 l
S
q
n
164.88 724.14 4.14 4.08002 re
W
n
n
165.42 724.68 m
168.42 727.68 l
S
Q
n
165.42 724.68 m
168.42 721.68 l
S
q
n
161.88 724.14 4.14 4.08002 re
W
n
n
165.42 724.68 m
162.42 727.68 l
S
Q
n
165.42 724.68 m
162.42 724.68 l
165.42 724.68 m
168.42 724.68 l
S
q
n
475.5 123.54 4.62 4.08 re
W
n
n
479.52 127.02 m
476.04 123.54 l
0 0 0  setrgbcolor
S
Q
q
n
478.98 126.48 4.02002 4.62 re
W
n
n
479.52 127.02 m
483 130.5 l
0 0 0  setrgbcolor
S
Q
q
n
478.98 123.54 4.02002 4.08 re
W
n
n
479.52 127.02 m
483 123.54 l
0 0 0  setrgbcolor
S
Q
n
479.52 127.02 m
476.04 130.5 l
479.34 138.96 m
475.86 135.48 l
0 0 0  setrgbcolor
S
q
n
478.8 138.42 4.20001 4.62 re
W
n
n
479.34 138.96 m
482.82 142.44 l
S
Q
q
n
478.8 134.94 4.20001 4.62 re
W
n
n
479.34 138.96 m
482.82 135.48 l
S
Q
n
479.34 138.96 m
475.86 142.44 l
477.36 198.72 m
473.88 195.24 l
477.36 198.72 m
480.84 202.2 l
477.36 198.72 m
480.84 195.24 l
477.36 198.72 m
473.88 202.2 l
476.82 246.54 m
473.34 243.06 l
476.82 246.54 m
480.3 250.02 l
476.82 246.54 m
480.3 243.06 l
476.82 246.54 m
473.34 250.02 l
474.18 330.24 m
470.7 326.76 l
474.18 330.24 m
477.66 333.72 l
474.18 330.24 m
477.66 326.76 l
474.18 330.24 m
470.7 333.72 l
474.12 461.7 m
470.64 458.22 l
474.12 461.7 m
477.6 465.18 l
474.12 461.7 m
477.6 458.22 l
474.12 461.7 m
470.64 465.18 l
473.94 485.64 m
470.46 482.16 l
473.94 485.64 m
477.42 489.12 l
473.94 485.64 m
477.42 482.16 l
473.94 485.64 m
470.46 489.12 l
473.82 545.4 m
470.34 541.92 l
473.82 545.4 m
477.3 548.88 l
473.82 545.4 m
477.3 541.92 l
473.82 545.4 m
470.34 548.88 l
473.82 557.34 m
470.34 553.86 l
473.82 557.34 m
477.3 560.82 l
473.82 557.34 m
477.3 553.86 l
473.82 557.34 m
470.34 560.82 l
473.82 724.68 m
470.34 721.2 l
S
q
n
473.28 724.14 4.62 4.08002 re
W
n
n
473.82 724.68 m
477.3 728.16 l
S
Q
n
473.82 724.68 m
477.3 721.2 l
S
q
n
469.8 724.14 4.62 4.08002 re
W
n
n
473.82 724.68 m
470.34 728.16 l
S
Q
483.3 111.24 m
/N24 [0 12 -12 0 0 0] Tf
(1) show
418.8 87.8999 m
(1.025) show
354.36 94.5598 m
(1.05) show
289.86 87.8999 m
(1.075) show
225.42 101.22 m
(1.1) show
160.92 87.8999 m
(1.125) show
96.4802 94.5598 m
(1.15) show
500.76 123.72 m
(05)
[59.7576 56.3976 ] pdfys
(1) show
(0)
[53.0844 ] pdfys
(1) show
(5)
[53.0844 ] pdfys
(2) show
(0)
[53.1444 ] pdfys
(2) show
(5)
[53.0844 ] pdfys
(3) show
(0)
[53.0844 ] pdfys
(3) show
(5)
[53.0844 ] pdfys
(4) show
(0)
[53.0844 ] pdfys
(4) show
(5)
[53.0844 ] pdfys
(50) show
521.1 394.14 m
/N26 [0 12 -12 0 0 0] Tf
(Generation) show
311.4 79.68 m
/N26 -12 Tf
(Speedup)
[-7.99072 -7.31873 -6.65881 -6.65881 -7.31873 -7.31873 -7.31873 ] pdfxs
n
207.48 707.52 100.74 -97.14 re
1 1 1  setrgbcolor
f
0.0599976 w
n
207.42 610.32 100.8 97.2 re
0 0 0  setrgbcolor
S
0.960007 w
n
216.12 614.04 m
216.12 636.06 l
216.06 627.96 m
214.44 627.96 213.12 626.58 213.12 624.96 c
213.12 623.34 214.44 622.02 216.06 622.02 c
217.68 622.02 219.06 623.34 219.06 624.96 c
219.06 626.58 217.68 627.96 216.06 627.96 c
h
S
220.2 638.82 m
/N24 [0 11.76 -11.76 0 0 0] Tf
(mpeg2dec) show
n
232.92 614.04 m
232.92 636.06 l
229.92 625.02 m
235.92 628.02 l
235.92 622.02 l
229.92 625.02 l
h
0.501999 0.501999 0.501999  setrgbcolor
S
0 0 0  setrgbcolor
237 638.82 m
(rawcaudio) show
n
249.72 614.04 m
249.72 636.06 l
0.501999 0.501999 0.501999  setrgbcolor
S
n
246.72 625.02 m
252.72 628.02 l
252.72 622.02 l
246.72 625.02 l
h
q
eofill
Q
S
0 0 0  setrgbcolor
253.8 638.82 m
(g721decode) show
n
266.52 614.04 m
266.52 636.06 l
0.587997 0.587997 0.587997  setrgbcolor
S
n
266.46 627.96 m
264.84 627.96 263.52 626.58 263.52 624.96 c
263.52 623.34 264.84 622.02 266.46 622.02 c
268.08 622.02 269.46 623.34 269.46 624.96 c
269.46 626.58 268.08 627.96 266.46 627.96 c
h
q
0.501999 0.501999 0.501999  setrgbcolor
eofill
Q
S
0 0 0  setrgbcolor
270.6 638.82 m
(compress) show
n
283.32 614.04 m
283.32 636.06 l
0.587997 0.587997 0.587997  setrgbcolor
S
n
283.32 625.02 m
280.32 622.02 l
283.32 625.02 m
286.32 628.02 l
283.32 625.02 m
286.32 622.02 l
283.32 625.02 m
280.32 628.02 l
283.32 625.02 m
280.32 625.02 l
283.32 625.02 m
286.32 625.02 l
0.501999 0.501999 0.501999  setrgbcolor
S
0 0 0  setrgbcolor
287.4 638.82 m
(huff_enc) show
n
300.12 614.04 m
300.12 636.06 l
300.12 625.02 m
296.64 621.54 l
300.12 625.02 m
303.6 628.5 l
300.12 625.02 m
303.6 621.54 l
300.12 625.02 m
296.64 628.5 l
S
304.2 638.82 m
(huff_dec) show
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 330 3563 a Fn(Fig.)15 b(5.)35 b(GP)42 b(Ev)n(olution)h(on)
e(Sp)r(ecialized)j(Register)e(Allo)r(cation)i(Priorit)n(y)g(F)-7
b(unctions.)330 3654 y Fq(This)20 b(\014gure)g(graphs)g(\014tness)f(o)n
(v)n(er)g(generations.)i(Unlik)n(e)e(the)g(h)n(yp)r(erblo)r(c)n(k)g
(selection)i(ev)n(olution,)f(these)330 3745 y(\014tnesses)26
b(con)n(v)n(erge)g(slo)n(wly)-6 b(.)330 4032 y Ft(apply)20
b(the)h(priorit)n(y)f(function)h(to)f(a)h(64-register)c(mac)n(hine.)k
(It)g(is)f(in)n(teresting)g(that)h(the)g(learned)330
4132 y(priorit)n(y)g(function)h(is)g(not)h(only)e(stable)h(across)e(b)r
(enc)n(hmarks,)h(it)i(is)f(also)f(stable)h(across)e(similar)330
4231 y(platforms.)330 4498 y Fm(8)112 b(Conclusions)330
4699 y Ft(W)-7 b(e)26 b(used)g(GP)g(in)g(a)g(straigh)n(tforw)n(ard)d
(fashion)i(to)h(optimize)g(priorit)n(y)f(functions)h(in)h(compiler)330
4799 y(heuristics)39 b(and)h(observ)n(ed)e(impressiv)n(e)g(results)h
(that)h(impro)n(v)n(e)f(on)g(existing)g(ones.)g(These)330
4898 y(results)30 b(are)g(v)-5 b(aluable)31 b(to)g(the)g(compiler)g
(dev)n(elopmen)n(t)f(comm)n(unit)n(y)h(b)r(ecause)f(the)i(sp)r(eedup)
330 4998 y(comes)27 b(in)h(co)r(de)g(sections)f(that)h(are)e
(di\016cult)j(to)f(hand-optimize)f(b)r(ecause)g(of)h(nonlinearities)330
5098 y(within)40 b(the)f(compiler)f(as)g(w)n(ell)h(as)f(o)n(v)n
(erwhelming)f(complexit)n(y)h(in)h(the)g(target)f(pro)r(cessor)330
5197 y(arc)n(hitecture.)d(GP)h(is)g(esp)r(ecially)f(appropriate)g(for)g
(this)i(application)e(b)r(ecause)h(it)g(o\013ers)f(a)330
5297 y(con)n(v)n(enien)n(t)19 b(represen)n(tation;)e(priorit)n(y)i
(functions)h(are)e(executable)h(expressions.)f(In)i(addition,)330
5396 y(GP)g(pro)n(v)n(ed)f(capable)g(of)i(searc)n(hing)d(the)j
(solution)f(space)f(of)h(the)h(t)n(w)n(o)f(compiler)f(problems)h(that)
330 5496 y(w)n(e)f(in)n(v)n(estigated)g(in)h(this)g(pap)r(er.)f(In)h
(general,)e(GP)h(is)h(v)-5 b(aluable)19 b(to)h(the)g(compiler)f(dev)n
(elopmen)n(t)330 5596 y(comm)n(unit)n(y)27 b(b)r(ecause)g(priorit)n(y)g
(functions)h(are)e(prev)-5 b(alen)n(t)27 b(in)h(compiler)f(heuristics.)
p eop
%%Page: 12 12
12 11 bop 1005 1407 a @beginspecial 117 @llx 63 @lly
783 @urx 477 @ury 2267 @rwi @clip @setspecial
%%BeginDocument: ./figs/figure6.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (regalloc_train.xls)
%%Version: 1 4
%%Creator: (PScript5.dll Version 5.2)
%%CreationDate: (D:20030117213035Z)
%%For: (mstephen)
%%DocumentData: Clean7Bit
%%BoundingBox: 117 63 783 477
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
117 63 moveto 783 63 lineto 783 477 lineto 117 477 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
117 63 665 413 rectclip
[ 0 -1 1 0 54 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font LFEPNL+Arial
11 dict begin
/FontName /LFEPNL+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1320 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f733e1cd354b07630
213f625adb3ae8b5aa6a51c1055a59d5f55e13f6cd6e1d9a82c372ef809e
0ee864af865bf5dd5f7dae9a46388470afbd9e2e8c39b7ea4fc9ab800d6e
8ab2edc1e3d36e194904842b1236ff6f70f88f5551621a9fa448c516e732
df410d140d211e3fe0becb6d0a54202b80a6977f> ND 
/seven 
<10bf317048559e9c292b4762aa54ba120b5bb6d9743398f6558de0cda9ce
72c94d95b651df1bda9b63361a928dc3b98c779dfd157220ceb78b8ebeab
638d0f6753cf0f10ef> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/nine 
<10bf317047276c49b9c0f950eed45ca9abbead4f9a337d9778d52804f095
e0959c13860a3969943ef1a12c3ee6c45422162d204a6f0d8cdc2d4e75b5
67f1b01796340d6df61e18c819464639606becbe4894a8ef149ed72054cf
28ee583aeb880d27fff9e2fa582b760e67cbad4f844afdb68b34f85c1a95
a0e8285de8ad462405443a57e05fe3bbb3d2281adc779f19070fa98342c5
c2c2ec79e83ff4803e54082ff002fd18e3d25566d6e2d40f56cc659c4866
84f0030ca9d50085195745fdce82f2f52a9ae7ae7227879d15b08026dcde
5aab87db399da6bb3c6e8f68808a93> ND 
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac54cb2fa3a278c1c5e8b8e0184d
7cbeaa35d4ddaa02f35f83f589e53f609414a1e8dd86a2916a5d28875546
282a3c313b2605b04804> ND 
/T 
<10bf317050d9560b3cb54d581860f439ad72a17a69c33f00af1e6fc67c4b
afccfda0> ND 
/underscore 
<10bf31708ee791b2da218e69d97bd547a4d26ba7404ea4bc55> ND 
/a 
<10bf31705d64e193f685fe465eb14b2f9aa41e82540f554b50893fe63efd
4692fb4fc721a117ec78b6e9515c29fcb60e3aee68a6df1c3946e2cf738d
cda3e29fd055085b4d27d1a9d3bf0581a4eb2a1ee52161275aad552d9745
cae2527ba314929e16b3adcf63fbfe5b600507b479eb6bac8dbf57f9ea61
cf0c38792d951ff40006e32bfab335adbde18dd700c5843625ec18424a1a
470a3d82d751a36d8b4a69f1f5fb08cfc2b94ed2658b49c9985bc490581e
62f221617e1b4bb61c6dcc9e8e61b29e5f74c69c328c213bfddbc217436d
81d1dfe6a13e1cac30c3fa16cb4e265d8db4217e880afbaeb0227e92e214
5534c463a18baaf155fa6678668091a696c5190fde> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f67877e80be643ef8
5a01cff57f62859595ad9c2a1ef16f4c22144c6fc4d200f23642de52d57f
47e47c78a8b6713f5cb6dcd4a475047f70e7386f0baddd9f1c37f1598f60
1bc5b6005acf2115ed4aa52ed6ed621e5045f115e6c8ed146247e81ce086
3c881ef71e6e234403d5f37c528c6ebb0616bbdc05a29ca9d830ed27448f
> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/f 
<10bf31706629561882b73d5b02cebd16b0942e445fbe6e3232b3823cbdb2
63dcf8e5b5846268df4eba2210bb667f400c46f76ed43d4b268aed98cf98
689dff659a93d69b1917cc1e5f49aadef7d4b3b6109675927aeb98089c> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987
c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e
6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e
7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df
3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3
e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b
5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 
/h 
<10bf31703f932f5ecb68c849e33d1fed17c766a03dcb89fd4259247501b2
92adfc2297be69c7091e34ced000096d0ca29850717d0ee8abe567011317
96a4072dab7df40090735d5712990fb13b0847093cc929cc1cd64c87dd80
565b94c081eb> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79e55a006319a903b4934e0296676
bb7a5df970714192f29a85860f4cb191aa4b83ebc5b58328ecf58ed9d6ff
d0d3a63dd21733d64450e3abce2a149390b0894b2fb0fce1ee78d045f446
04c31c787e13fdae7e79785a1956f734ed54b976e123646b63ce5bee0b68
59b26a26c2ad993325ab7bd77cdd1be893a8ccd1451854fed772889a0d7d
7791ac97d81ac7> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3483c7b936ed6e6cf91cffcbd
a815b8df60ae150c20432c17a46c0682480f6226770a8905e960aec3fe5e
934f4cc994b08abf0fc9d432168086e4> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
/v 
<10bf31706ae07dd17dfbac8a1ae33180eda67f1c12c0170124c5b65d6008
42ef910f621d12aef7aac075b848d0659b626414ef71a4> ND 
/w 
<10bf31707c6251ab9dc02dac0cfe6b2ad0a1717407cbd63b737120f851f4
8bf643a435f165b7893dd828fd2da9e1185df5d44f0e3e41505c0548c1d2
65fe2f6b93f7702905dcf1946733a5e23d> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/LFEPNL+Arial findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 53 /five put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 65 /A put
dup 84 /T put
dup 95 /underscore put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 160 /space put
pop
%%EndResource
[/N15/LFEPNL+Arial 1 TZ
%%BeginResource: font LFEPMJ+Arial,Bold
11 dict begin
/FontName /LFEPMJ+Arial,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1320 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/period 
<10bf317021cc67b2bc301f516a49c5d2eaf38d05e04c6bb061> ND 
/zero 
<10bf317047276c49b0d576f188d46ae965fd1ee754bf887206fb36232fbb
89f30bf7d7ccc04b68096e51e4fa383bd83a62a12254967c97fccef8f682
660584deed9a81b43cbb2c7b7968da901e3ae8e83e66419f304294be518a
c53bdfb87ba841dcf049e90378ca4bf02bb8502cda53c68c5e2344ff3039
a6b7677199a113d4a1df9615bbdd894af0ddf69e08437253bed3648332ae
c1e0f4e1525f1c1a3191b7b4ff> ND 
/one 
<10bf317028182169f7f13730e09770e210fcfa2d271bc92d4342c903256c
6dd594be31116a507d9e9bf7a06f7b02cb638869b9> ND 
/three 
<10bf3170435d0d440860530d539ff91fbeb84b45ccc7a1133230e64e009e
0c490ad4a8c72e30c66b9d7da2ebb61201fd5dbcf58b0c0488dc2a377321
5f26e0f7b61ae06bbd548a7c70db3930bb70d925be0576849d7017235523
559a7bd33c2b1cf718bf0b01521a2da1ae141319b8a7b7648826982192c9
9cac43d499c3346f8ae704779f7b332be818bd1aedb27938b45cc4303b57
6f7b6048a80721796cf703217479afeb4946fccc211036e97d76c144b665
49f485406b5a21bfa9b3b6ddd1fb25f39a00f379> ND 
/S 
<10bf31705d65c0900ab6f1dec202feebed63a391e8923b6171e4bd9a9891
3483f7e18f03f81efeea9ec6e499086f29e069b330e0714349bdbde86411
119421305eb3ccf831a419f2b1b383ae283eef31cd6ab17d35e046224edf
8d334c91b8f3410ce0b754cf25ffc38b1c45008fedcc6fb476440d278757
5aef3183071e560db2a44ec14079a58ceb82879a9f1a9b4e9fcabb16df58
24675d0a68f72691cd9980f0d6d9adcd3e204eaf9c302558bc548ec6583d
8e097a247d483ed52d9f91d7ca0feb01513c1c9a868c4cf1c92a6751c828
3f7c6f8c290f25> ND 
/d 
<10bf317046e845f3cc81de7a4b8a8a1b3fe3a86a2a74eb0ce101ae9ff9ea
ca0b0d6152bab57b5a1a20451eca1d8bce22d8934498cbe1f50790f6dd2f
9d5a0cab606ce69313bb3e4094a370b8d3856d24b15d355e84c7c481bc80
d07358154d4cee4bac791720fabdb39630005823af359d78acbc47e52e70
c34626a827ae2272bde1c4ecc0359b7e45162ac0> ND 
/e 
<10bf3170599a82aebce2d0d9cd696e2d2232ae83b1d98ff884add96e0282
26fcd2cbd306888649029fbc75f18f771bf21f4d5f53f71cd70d56907fb2
0780ae57f65359db4c49ca929cb86ae96dd2f43742f720ffcefc0d1d3194
c72a55a6bfcf26d975c031741b09b969ea0410af02ae1e13b6c1d337a6b3
96eba6c714d73f9b5d2c2499a66a60f107d1dad4da56ef> ND 
/p 
<10bf31703d364b58d236360a3109f388a509dc9806d07d5bc445174ad942
7c9600246e60ea62f48529a60136f844b413bd7834b903aeb5ec3a65352a
708c943d46c286b502a39b69aec9bc15c2a1798b51edb224db01e94ff1eb
dbf1e97f7f79a2c4ac7f7ccc29f5a1c29ed2d05ed3e5ff111a8b097f8d17
72a84cce0bcd066f78e2de698d38b96a99a99313e7a6639d82> ND 
/u 
<10bf317022f1ca2cc2a22c3ff97c1232bc55839582d9c5ff7e86bfa4508d
4c6c2a32b8a91c23bc7417819a6d61bb6c4ffa588f9ea417cfc189ff4ca4
86806cfbdc09b2f0ef54b54c53e50d4afcfcb2df030b19aa33138b0a422d
d58054461b41c9166e86f2fb1f6b43052b68dc3202c1cc> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/LFEPMJ+Arial,Bold findfont /Encoding get
dup 0 /.notdef put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 51 /three put
dup 83 /S put
dup 100 /d put
dup 101 /e put
dup 112 /p put
dup 117 /u put
pop
%%EndResource
[/N13/LFEPMJ+Arial,Bold 1 TZ
false setSA
n
75.96 733.08 459.24 -675.12 re
1 1 1 setrgbcolor
f
n
126.96 726.48 295.8 -594.24 re
f
q
n
373.44 132.24 0.119995 594.24 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
n
373.44 132.24 m
373.44 726.48 l
0 0 0  setrgbcolor
S
Q
q
n
324.12 132.24 0.119995 594.24 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
n
324.12 132.24 m
324.12 726.48 l
0 0 0  setrgbcolor
S
Q
q
n
274.92 132.24 0.119995 594.24 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
n
274.92 132.24 m
274.92 726.48 l
0 0 0  setrgbcolor
S
Q
q
n
225.6 132.24 0.119995 594.24 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
n
225.6 132.24 m
225.6 726.48 l
0 0 0  setrgbcolor
S
Q
q
n
176.28 132.24 0.119995 594.24 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
n
176.28 132.24 m
176.28 726.48 l
0 0 0  setrgbcolor
S
Q
q
n
126.96 132.24 0.119995 594.24 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
n
126.96 132.24 m
126.96 726.48 l
0 0 0  setrgbcolor
S
Q
q
n
72 54 467.04 683.04 re
143.28 207.84 20.76 245.88 re
eoclip
n
1 J
1 j
0.119995 w
10 M
[] 0 d
n
126.96 132.24 295.8 594.24 re
0.753006 0.753006 0.753006  setrgbcolor
S
Q
1 J
0 j
0.960007 w
10 M
[] 0 d
n
244.56 146.4 178.2 18.72 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
0 0 0  setrgbcolor
S
n
257.4 212.4 165.36 18.72 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
261 278.4 161.76 18.84 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
184.56 344.52 238.2 18.72 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
274.32 410.52 148.44 18.72 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
310.8 476.52 111.96 18.72 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
274.92 542.52 147.84 18.84 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
q
n
165.6 602.64 257.16 30.84 re
W
n
n
171.6 608.64 251.16 18.72 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
Q
n
247.44 674.64 175.32 18.72 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
255.84 165.24 166.92 18.72 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
262.2 231.24 160.56 18.72 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
255.6 297.36 167.16 18.72 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
q
n
170.4 357.36 252.36 30.84 re
W
n
n
176.4 363.36 246.36 18.72 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
Q
n
274.56 429.36 148.2 18.72 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
282 495.36 140.76 18.72 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
274.8 561.48 147.96 18.72 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
183.96 627.48 238.8 18.72 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
245.64 693.48 177.12 18.72 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
0.119995 w
n
126.96 132.24 m
422.76 132.24 l
422.76 127.68 m
422.76 132.24 l
373.44 127.68 m
373.44 132.24 l
324.12 127.68 m
324.12 132.24 l
274.92 127.68 m
274.92 132.24 l
225.6 127.68 m
225.6 132.24 l
176.28 127.68 m
176.28 132.24 l
126.96 127.68 m
126.96 132.24 l
422.76 132.24 m
422.76 726.48 l
427.32 132.24 m
422.76 132.24 l
427.32 198.24 m
422.76 198.24 l
427.32 264.24 m
422.76 264.24 l
427.32 330.36 m
422.76 330.36 l
427.32 396.36 m
422.76 396.36 l
427.32 462.36 m
422.76 462.36 l
427.32 528.36 m
422.76 528.36 l
427.32 594.48 m
422.76 594.48 l
427.32 660.48 m
422.76 660.48 l
427.32 726.48 m
422.76 726.48 l
S
1 1 1  setrgbcolor
279 689.28 m
/N13 -11.76 Tf
(1.03)
[-6.59849 -3.24219 -6.59849 -6.59849 ] pdfxs
277.199 709.32 m
(1.03)
[-6.59849 -3.24219 -6.59849 -6.59849 ] pdfxs
0 0 0  setrgbcolor
427.56 92.52 m
/N15 [0 14.76 -14.76 0 0 0] Tf
(0.85) show
378.239 100.679 m
(0.9) show
328.919 92.52 m
(0.95) show
279.719 112.92 m
(1) show
230.399 92.52 m
(1.05) show
181.078 100.679 m
(1.1) show
131.757 92.52 m
(1.15) show
526.44 170.04 m
/N15 -14.76 Tf
(129.compress)
[-8.16669 -8.16669 -8.16669 -4.06341 -7.4405 -8.15783 -12.2551 -8.16669 -4.8751 -8.16669 -7.4405 
-7.34013 ] pdfxs
514.8 236.039 m
(g721decode)
[-8.15791 -8.15791 -8.15791 -8.15791 -8.15791 -8.15791 -7.44057 -8.15791 -8.15791 -8.15791 ] pdfxs
514.8 302.16 m
(g721encode)
[-8.15791 -8.15791 -8.15791 -8.15791 -8.15791 -8.15791 -7.44057 -8.15791 -8.15791 -8.15791 ] pdfxs
490.321 368.159 m
(huff_enc)
[-8.16534 -8.16534 -4.06206 -4.06206 -8.16534 -8.16534 -8.16534 -7.33878 ] pdfxs
490.321 434.158 m
(huff_dec)
[-8.16534 -8.16534 -4.06206 -4.06206 -8.16534 -8.16534 -8.16534 -7.33878 ] pdfxs
500.761 500.158 m
(rawcaudio)
[-4.89132 -8.18291 -10.6328 -7.44048 -8.18291 -8.18291 -8.18291 -3.25285 -8.18291 ] pdfxs
501.481 566.157 m
(rawdaudio)
[-4.88254 -8.17412 -10.6241 -8.17412 -8.17412 -8.17412 -8.17412 -3.24406 -8.17412 ] pdfxs
502.561 632.277 m
(mpeg2dec)
[-12.2447 -8.15633 -8.15633 -8.15633 -8.15633 -8.15633 -8.15633 -7.32977 ] pdfxs
488.641 698.276 m
(Average)
[-9.81665 -7.4404 -8.1784 -4.88682 -8.1784 -8.1784 -8.1784 ] pdfxs
305.881 82.5575 m
/N13 -14.76 Tf
(Speedup)
[-9.82115 -8.9946 -8.18291 -8.18291 -8.9946 -8.9946 -8.9946 ] pdfxs
n
143.4 453.6 20.64 -245.64 re
1 1 1  setrgbcolor
f
n
143.28 207.84 20.76 245.76 re
0 0 0  setrgbcolor
S
0.960007 w
n
149.64 212.28 9 9 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
159.12 224.88 m
/N15 [0 14.76 -14.76 0 0 0] Tf
(Train data set) show
n
149.64 321.48 9 9 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
159.12 334.08 m
(Alternate data set) show
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 450 1582 a Fn(Fig.)15 b(6.)36 b(GP)43 b(P)n(erformance)g
(with)g(General)g(Purp)r(ose)g(Register)g(Allo)r(cation)j(Priorit)n(y)
450 1673 y(F)-7 b(unctions)p Fq(.)20 b(T)-6 b(raining)21
b(on)e(m)n(ultiple)f(b)r(enc)n(hmarks.)h(Our)f(DSS)h(ev)n(olution)g
(trained)g(on)h(all)g(the)f(b)r(enc)n(h-)450 1764 y(marks)26
b(in)g(this)h(\014gure.)f(The)h(single)h(b)r(est)e(priorit)n(y)h
(function)g(w)n(as)g(applied)g(to)f(all)i(the)e(b)r(enc)n(hmarks.)450
1856 y(The)g(dark)f(bars)g(represen)n(t)h(sp)r(eedups)f(obtained)g(b)n
(y)g(running)g(the)g(giv)n(en)g(b)r(enc)n(hmark)f(on)h(the)g(same)450
1947 y(data)c(that)g(w)n(as)h(used)e(to)i(train)f(the)f(priorit)n(y)h
(function.)h(The)f(ligh)n(t)g(bars)h(corresp)r(ond)f(to)g(an)g
(alternate)450 2038 y(data)26 b(set.)1005 3401 y @beginspecial
117 @llx 63 @lly 783 @urx 477 @ury 2267 @rwi @clip @setspecial
%%BeginDocument: ./figs/figure7.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: (regalloc_gp.xls)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2)
%%CreationDate: (D:20030117143122-05'00')
%%For: (mstephen)
%%DocumentData: Clean7Bit
%%BoundingBox: 117 63 783 477
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
117 63 moveto 783 63 lineto 783 477 lineto 117 477 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
117 63 665 413 rectclip
[ 0 -1 1 0 54 594 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font EICJEK+Arial
11 dict begin
/FontName /EICJEK+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1320 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/parenleft 
<10bf31703a9458c05db7ba7a58bcd7a2c9e91ffe666d66d67924090fad2e
914020d503aadf9240d9b1c6a63953b30ccff5415597f5a6c26fdee68dec
bc331692c1b3543bfce7c82b9d704f4fab4f> ND 
/parenright 
<10bf31703a9458c05d79d3ca9c0e25cc2a0b35ceb7dd46fb51adbfd88390
4d8bf636baa28a31c262d1a3078da5849c1c2b98c958c72994f2c3f78ea4
d099458941ceee627e3f06f9f9a16a1d0c> ND 
/hyphen 
<10bf31705995db6ed81c8e93e5d1d568f767c41aee4b2647d0> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d898870164
1dba6c5defb41d909040a164fdb0a088fefa45fff299b57b0e194251a4a8
b9cf3bc1815fd2c5ba06e651f9d7799098b4541de9c35043282b335f2de1
7def94eec0695fa30f7aaa5574cd9d280a8b4d225396feeeafb4b20c3fcc
9f12e751228b7464328a957a71c1d6fc11ef53a8f692024ab80f5e0d7623
62b42a462a2bf96d5a0db86097e421e5cb8c7d7a0900e6cfd70978f26b60
122332f14359637710d630381bc4f9c629fd5be208af03ab6a69f0ba40b9
a2> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f733e1cd354b07630
213f625adb3ae8b5aa6a51c1055a59d5f55e13f6cd6e1d9a82c372ef809e
0ee864af865bf5dd5f7dae9a46388470afbd9e2e8c39b7ea4fc9ab800d6e
8ab2edc1e3d36e194904842b1236ff6f70f88f5551621a9fa448c516e732
df410d140d211e3fe0becb6d0a54202b80a6977f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/seven 
<10bf317048559e9c292b4762aa54ba120b5bb6d9743398f6558de0cda9ce
72c94d95b651df1bda9b63361a928dc3b98c779dfd157220ceb78b8ebeab
638d0f6753cf0f10ef> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/nine 
<10bf317047276c49b9c0f950eed45ca9abbead4f9a337d9778d52804f095
e0959c13860a3969943ef1a12c3ee6c45422162d204a6f0d8cdc2d4e75b5
67f1b01796340d6df61e18c819464639606becbe4894a8ef149ed72054cf
28ee583aeb880d27fff9e2fa582b760e67cbad4f844afdb68b34f85c1a95
a0e8285de8ad462405443a57e05fe3bbb3d2281adc779f19070fa98342c5
c2c2ec79e83ff4803e54082ff002fd18e3d25566d6e2d40f56cc659c4866
84f0030ca9d50085195745fdce82f2f52a9ae7ae7227879d15b08026dcde
5aab87db399da6bb3c6e8f68808a93> ND 
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac54cb2fa3a278c1c5e8b8e0184d
7cbeaa35d4ddaa02f35f83f589e53f609414a1e8dd86a2916a5d28875546
282a3c313b2605b04804> ND 
/R 
<10bf31702819c97bfff21764697e50774ba74072e0daf25a84b5ab81ce67
f36424a8f4f31afdf4de9e5912f7a5ba0ce90948b990647285d2500d6d57
ef6e940fb321e739e33f71f0994fb0b96bf3e18815066ca201f1578cce2a
71a0a57bc87021521bfe1b691fde6e9063a575e47bf725cfd1c0afa40b0c
a839a6c28bfd0b7f0f7469b4cf16ee3c7a54706ea2da49ba1db858f3c370
3042b60d2181c6c1afb0bef5eb> ND 
/S 
<10bf31704ab370a8a6c235279ed6c2ccfc716fa1295d141c34dd24f95c73
82e11c724a74e86021432ff58ab0f9585559c2cc7a3fe0720eadda5eee3e
cb055c76e8d7f22cfddbcfbe4ee1a562282b307d86efef90d9a8c71c96ab
9543712fa6240508ea1f38536804c47dfcc21f777c873fc11b7e20f7a228
b35e8d75f100a7da6082feb065d087853344b8bf00df7291cc74173d8c17
2964ca635a4e981f1604dc10d454f452e70073d386bcbe3ed4c09e72aa02
e7eb1e382ccb2fe70e1e9e3084e7824b4261723bffe42f4fc72d36ddcdd9
e884d10e18a55004b6149a9b0c7ead4b42afa8906a80deea322a930f4d91
ac35a6e6186e5d082f09> ND 
/a 
<10bf31705d64e193f685fe465eb14b2f9aa41e82540f554b50893fe63efd
4692fb4fc721a117ec78b6e9515c29fcb60e3aee68a6df1c3946e2cf738d
cda3e29fd055085b4d27d1a9d3bf0581a4eb2a1ee52161275aad552d9745
cae2527ba314929e16b3adcf63fbfe5b600507b479eb6bac8dbf57f9ea61
cf0c38792d951ff40006e32bfab335adbde18dd700c5843625ec18424a1a
470a3d82d751a36d8b4a69f1f5fb08cfc2b94ed2658b49c9985bc490581e
62f221617e1b4bb61c6dcc9e8e61b29e5f74c69c328c213bfddbc217436d
81d1dfe6a13e1cac30c3fa16cb4e265d8db4217e880afbaeb0227e92e214
5534c463a18baaf155fa6678668091a696c5190fde> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f67877e80be643ef8
5a01cff57f62859595ad9c2a1ef16f4c22144c6fc4d200f23642de52d57f
47e47c78a8b6713f5cb6dcd4a475047f70e7386f0baddd9f1c37f1598f60
1bc5b6005acf2115ed4aa52ed6ed621e5045f115e6c8ed146247e81ce086
3c881ef71e6e234403d5f37c528c6ebb0616bbdc05a29ca9d830ed27448f
> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987
c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e
6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e
7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df
3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3
e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b
5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/j 
<10bf3170af4c4e03cb099088e1548d44a53dbade2c858e7043672d28af7a
255a52c1fc5961ee26822ea9a234df911035f9c353cbc5b83b929a71f6d2
1b26fffa3fa0b8fccdceb1472f97c84f0973818dc194> ND 
/k 
<10bf31703f936777fb99983a11586419ce72aadc44a2aa69d19b91e9f126
e6f5aabcb4381bf8bfee294b80bae1d888f1314da01fbe02> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79e55a006319a903b4934e0296676
bb7a5df970714192f29a85860f4cb191aa4b83ebc5b58328ecf58ed9d6ff
d0d3a63dd21733d64450e3abce2a149390b0894b2fb0fce1ee78d045f446
04c31c787e13fdae7e79785a1956f734ed54b976e123646b63ce5bee0b68
59b26a26c2ad993325ab7bd77cdd1be893a8ccd1451854fed772889a0d7d
7791ac97d81ac7> ND 
/q 
<10bf31705c36af5cef64feff3875e93eaf63e864fd70bb6a233352105e24
3a5cd4f03912d5acd21f32af0f91c1a9946998d2b523bf278ed7e760296f
82ab85e13d34ee43890ecb71199ab005d452eb9982133856fef3006dcdc9
47bf3adb9d4a6a991e8aff21b2bb5591c29aca63e8bcc0429c71b550be84
f5817c08976f9f682b468226026818eeaa8d92033b36d7291e> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3483c7b936ed6e6cf91cffcbd
a815b8df60ae150c20432c17a46c0682480f6226770a8905e960aec3fe5e
934f4cc994b08abf0fc9d432168086e4> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
/v 
<10bf31706ae07dd17dfbac8a1ae33180eda67f1c12c0170124c5b65d6008
42ef910f621d12aef7aac075b848d0659b626414ef71a4> ND 
/x 
<10bf317060ff640a97f40d52fc73b98a64469b3f084ceb61cbde39a670a8
6bdd66d38d792d8bbe1de58b050ff75d7a6d9ab8ab83f71f1130ffc9a46b
7d934ffb8ab93375fd62539cb08006> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/EICJEK+Arial findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 65 /A put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 160 /space put
dup 173 /hyphen put
pop
%%EndResource
[/N15/EICJEK+Arial 1 TZ
%%BeginResource: font EICJDI+Arial,Bold
11 dict begin
/FontName /EICJDI+Arial,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1320 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/period 
<10bf317021cc67b2bc301f516a49c5d2eaf38d05e04c6bb061> ND 
/zero 
<10bf317047276c49b0d576f188d46ae965fd1ee754bf887206fb36232fbb
89f30bf7d7ccc04b68096e51e4fa383bd83a62a12254967c97fccef8f682
660584deed9a81b43cbb2c7b7968da901e3ae8e83e66419f304294be518a
c53bdfb87ba841dcf049e90378ca4bf02bb8502cda53c68c5e2344ff3039
a6b7677199a113d4a1df9615bbdd894af0ddf69e08437253bed3648332ae
c1e0f4e1525f1c1a3191b7b4ff> ND 
/one 
<10bf317028182169f7f13730e09770e210fcfa2d271bc92d4342c903256c
6dd594be31116a507d9e9bf7a06f7b02cb638869b9> ND 
/two 
<10bf3170560f9ea7e16bf7693df0cb4f75611840d7a72974788dc612e04a
7d391fa4118f20c60ca0210831c4216daf82822fd8577427332b85b36191
bafa300362603f7ac5486d82f6744735bd9aea952436a54773d0a34c3025
802ed04fffcb4fa74d75ac70e802cddfdbd6346360b0b1acf15e7ef6f0dd
ea8a6108bc3278173c6d152ded71a3f7dba5eefbc64d9c815a4795> ND 
/three 
<10bf3170435d0d440860530d539ff91fbeb84b45ccc7a1133230e64e009e
0c490ad4a8c72e30c66b9d7da2ebb61201fd5dbcf58b0c0488dc2a377321
5f26e0f7b61ae06bbd548a7c70db3930bb70d925be0576849d7017235523
559a7bd33c2b1cf718bf0b01521a2da1ae141319b8a7b7648826982192c9
9cac43d499c3346f8ae704779f7b332be818bd1aedb27938b45cc4303b57
6f7b6048a80721796cf703217479afeb4946fccc211036e97d76c144b665
49f485406b5a21bfa9b3b6ddd1fb25f39a00f379> ND 
/S 
<10bf31705d65c0900ab6f1dec202feebed63a391e8923b6171e4bd9a9891
3483f7e18f03f81efeea9ec6e499086f29e069b330e0714349bdbde86411
119421305eb3ccf831a419f2b1b383ae283eef31cd6ab17d35e046224edf
8d334c91b8f3410ce0b754cf25ffc38b1c45008fedcc6fb476440d278757
5aef3183071e560db2a44ec14079a58ceb82879a9f1a9b4e9fcabb16df58
24675d0a68f72691cd9980f0d6d9adcd3e204eaf9c302558bc548ec6583d
8e097a247d483ed52d9f91d7ca0feb01513c1c9a868c4cf1c92a6751c828
3f7c6f8c290f25> ND 
/d 
<10bf317046e845f3cc81de7a4b8a8a1b3fe3a86a2a74eb0ce101ae9ff9ea
ca0b0d6152bab57b5a1a20451eca1d8bce22d8934498cbe1f50790f6dd2f
9d5a0cab606ce69313bb3e4094a370b8d3856d24b15d355e84c7c481bc80
d07358154d4cee4bac791720fabdb39630005823af359d78acbc47e52e70
c34626a827ae2272bde1c4ecc0359b7e45162ac0> ND 
/e 
<10bf3170599a82aebce2d0d9cd696e2d2232ae83b1d98ff884add96e0282
26fcd2cbd306888649029fbc75f18f771bf21f4d5f53f71cd70d56907fb2
0780ae57f65359db4c49ca929cb86ae96dd2f43742f720ffcefc0d1d3194
c72a55a6bfcf26d975c031741b09b969ea0410af02ae1e13b6c1d337a6b3
96eba6c714d73f9b5d2c2499a66a60f107d1dad4da56ef> ND 
/p 
<10bf31703d364b58d236360a3109f388a509dc9806d07d5bc445174ad942
7c9600246e60ea62f48529a60136f844b413bd7834b903aeb5ec3a65352a
708c943d46c286b502a39b69aec9bc15c2a1798b51edb224db01e94ff1eb
dbf1e97f7f79a2c4ac7f7ccc29f5a1c29ed2d05ed3e5ff111a8b097f8d17
72a84cce0bcd066f78e2de698d38b96a99a99313e7a6639d82> ND 
/u 
<10bf317022f1ca2cc2a22c3ff97c1232bc55839582d9c5ff7e86bfa4508d
4c6c2a32b8a91c23bc7417819a6d61bb6c4ffa588f9ea417cfc189ff4ca4
86806cfbdc09b2f0ef54b54c53e50d4afcfcb2df030b19aa33138b0a422d
d58054461b41c9166e86f2fb1f6b43052b68dc3202c1cc> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/EICJDI+Arial,Bold findfont /Encoding get
dup 0 /.notdef put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 83 /S put
dup 100 /d put
dup 101 /e put
dup 112 /p put
dup 117 /u put
pop
%%EndResource
[/N13/EICJDI+Arial,Bold 1 TZ
false setSA
n
75.96 733.08 459.24 -675.12 re
1 1 1 setrgbcolor
f
n
126.96 726.48 300.84 -594.24 re
f
q
n
377.64 132.24 0.119995 594.24 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
n
377.64 132.24 m
377.64 726.48 l
0 0 0  setrgbcolor
S
Q
q
n
327.48 132.24 0.119995 594.24 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
n
327.48 132.24 m
327.48 726.48 l
0 0 0  setrgbcolor
S
Q
q
n
277.44 132.24 0.119995 594.24 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
n
277.44 132.24 m
277.44 726.48 l
0 0 0  setrgbcolor
S
Q
q
n
227.28 132.24 0.119995 594.24 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
n
227.28 132.24 m
227.28 726.48 l
0 0 0  setrgbcolor
S
Q
q
n
177.12 132.24 0.119995 594.24 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
n
177.12 132.24 m
177.12 726.48 l
0 0 0  setrgbcolor
S
Q
q
n
126.96 132.24 0.119995 594.24 re
W
n
1 J
1 j
0.119995 w
10 M
[] 0 d
n
126.96 132.24 m
126.96 726.48 l
0 0 0  setrgbcolor
S
Q
q
n
72 54 467.04 683.04 re
142.44 185.04 20.76 297.48 re
eoclip
n
1 J
0 j
0.960007 w
10 M
[] 0 d
n
126.96 132.24 300.84 594.24 re
0.501999 0.501999 0.501999  setrgbcolor
S
Q
1 J
0 j
0.960007 w
10 M
[] 0 d
n
331.56 143.76 96.24 15.36 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
0 0 0  setrgbcolor
S
n
304.92 197.76 122.88 15.36 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
306.6 251.76 121.2 15.36 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
303.48 305.88 124.32 15.36 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
324 359.88 103.8 15.36 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
308.64 413.88 119.16 15.36 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
328.08 467.88 99.72 15.36 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
260.16 521.88 167.64 15.36 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
303.24 575.88 124.56 15.36 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
286.92 630 140.88 15.36 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
305.76 684 122.04 15.36 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
n
310.32 159.24 117.48 15.24 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
303.36 213.24 124.44 15.24 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
288.48 267.24 139.32 15.36 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
q
n
178.2 315.36 249.6 27.36 re
W
n
n
184.2 321.36 243.6 15.24 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
Q
n
315.24 375.36 112.56 15.24 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
302.28 429.36 125.52 15.24 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
321.96 483.36 105.84 15.24 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
286.92 537.36 140.88 15.24 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
289.56 591.36 138.24 15.36 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
321.84 645.48 105.96 15.24 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
n
292.44 699.48 135.36 15.24 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
0.119995 w
n
126.96 132.24 m
427.8 132.24 l
427.8 127.68 m
427.8 132.24 l
377.64 127.68 m
377.64 132.24 l
327.48 127.68 m
327.48 132.24 l
277.44 127.68 m
277.44 132.24 l
227.28 127.68 m
227.28 132.24 l
177.12 127.68 m
177.12 132.24 l
126.96 127.68 m
126.96 132.24 l
427.8 132.24 m
427.8 726.48 l
432.36 132.24 m
427.8 132.24 l
432.36 186.24 m
427.8 186.24 l
432.36 240.24 m
427.8 240.24 l
432.36 294.36 m
427.8 294.36 l
432.36 348.36 m
427.8 348.36 l
432.36 402.36 m
427.8 402.36 l
432.36 456.36 m
427.8 456.36 l
432.36 510.36 m
427.8 510.36 l
432.36 564.36 m
427.8 564.36 l
432.36 618.48 m
427.8 618.48 l
432.36 672.48 m
427.8 672.48 l
432.36 726.48 m
427.8 726.48 l
S
1 1 1  setrgbcolor
337.08 696.36 m
/N13 -11.76 Tf
(1.02)
[-6.59849 -3.24219 -6.59849 -6.59849 ] pdfxs
322.56 712.32 m
(1.03)
[-6.59849 -3.24219 -6.59849 -6.59849 ] pdfxs
0 0 0  setrgbcolor
432.6 100.68 m
/N15 [0 14.76 -14.76 0 0 0] Tf
(0.9) show
382.44 92.5207 m
(0.95) show
332.279 112.92 m
(1) show
282.24 92.5207 m
(1.05) show
232.079 100.68 m
(1.1) show
181.919 92.5207 m
(1.15) show
131.758 100.68 m
(1.2) show
503.52 164.04 m
/N15 -14.76 Tf
(decodrle4)
[-8.16534 -8.16534 -7.44063 -8.16534 -8.16534 -4.87375 -3.23528 -8.16534 -8.16534 ] pdfxs
487.2 218.039 m
(codrle4)
[-7.44048 -8.16962 -8.16962 -4.87803 -3.23956 -8.16962 -8.16962 ] pdfxs
526.439 272.039 m
(124.m88ksim)
[-8.16083 -8.16083 -8.16083 -4.05756 -12.2492 -8.16083 -8.16083 -7.44055 -7.44055 -3.23668 -12.2492 
] pdfxs
482.279 326.159 m
(unepic)
[-8.16083 -8.16083 -8.16083 -8.16083 -3.23078 -7.33428 ] pdfxs
474.959 380.159 m
(djpeg)
[-8.16083 -3.23078 -8.16083 -8.16083 -8.16083 ] pdfxs
512.4 434.158 m
(023.eqntott)
[-8.16669 -8.16669 -8.16669 -4.06341 -8.16669 -8.16669 -8.16669 -4.06341 -8.16669 -4.06341 -4.06341 
] pdfxs
498.599 488.157 m
(132.ijpeg)
[-8.16218 -8.16218 -8.16218 -4.05891 -3.23213 -3.23213 -8.16218 -8.16218 -8.16218 ] pdfxs
507.359 542.156 m
(147.vortex)
[-8.17119 -8.17119 -8.17119 -4.06792 -7.44058 -8.15791 -4.87961 -4.06792 -8.17119 -7.34464 ] pdfxs
490.559 596.277 m
(085.cc1)
[-8.16534 -8.16534 -8.16534 -4.06206 -7.44063 -7.44063 -8.16534 ] pdfxs
474 650.276 m
(130.li)
[-8.16534 -8.16534 -8.16534 -4.06206 -3.23528 -3.23528 ] pdfxs
493.68 704.276 m
(Average)
[-9.81665 -7.4404 -8.1784 -4.88682 -8.1784 -8.1784 -8.1784 ] pdfxs
308.4 82.5566 m
/N13 -14.76 Tf
(Speedup)
[-9.82115 -8.9946 -8.18291 -8.18291 -8.9946 -8.9946 -8.9946 ] pdfxs
n
142.56 482.4 20.64 -297.24 re
1 1 1  setrgbcolor
f
n
142.44 185.04 20.76 297.36 re
0 0 0  setrgbcolor
S
0.960007 w
n
148.8 189.48 9 9 re
q
0.199997 0.199997 0.199997  setrgbcolor
eofill
Q
S
158.28 202.08 m
/N15 [0 14.76 -14.76 0 0 0] Tf
(Speedup \(32-Regs\)) show
n
148.8 337.08 9 9 re
q
0.587997 0.587997 0.587997  setrgbcolor
eofill
Q
S
158.28 349.68 m
(Speedup \(64-Regs\)) show
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF

%%EndDocument
 @endspecial 450 3575 a Fn(Fig.)15 b(7.)36 b(GP)43 b(P)n(erformance)g
(with)g(General)g(Purp)r(ose)g(Register)g(Allo)r(cation)j(Priorit)n(y)
450 3667 y(F)-7 b(unctions)p Fq(.)33 b(Cross)h(v)l(alidation)f(of)g
(the)f(general-purp)r(ose)h(priorit)n(y)f(function.)h(The)g(b)r(est)f
(priorit)n(y)450 3758 y(function)c(found)f(b)n(y)g(the)h(DSS)e(run)h
(is)i(applied)f(to)g(the)f(b)r(enc)n(hmarks)f(in)i(this)g(graph.)g
(Results)g(from)450 3849 y(t)n(w)n(o)e(target)g(arc)n(hitectures)h(are)
f(sho)n(wn.)575 4002 y Ft(Our)i(results)g(suggest)f(that)i(GP)g
(o\013ers)f(b)r(oth)h(great)e(p)r(oten)n(tial)i(and)f(con)n(v)n
(enience)g(in)h(the)450 4102 y(nic)n(he)34 b(of)g(optimizing)h
(isolatable,)e(smaller-sized)f(co)r(de)j(sections)e(that)i(p)r(erform)f
(heuristics)450 4201 y(within)28 b(a)f(larger)f(soft)n(w)n(are)g
(system)h(base.)450 4583 y Fm(9)112 b(F)-9 b(uture)38
b(W)-9 b(ork)450 4898 y Ft(W)i(e)25 b(ha)n(v)n(e)f(presen)n(ted)g(our)g
(researc)n(h)f(as)h(a)h(pro)r(of)f(of)h(concept)f(and)h(as)f(suc)n(h,)h
(to)g(deriv)n(e)e(general)450 4998 y(conclusions,)30
b(w)n(e)g(ha)n(v)n(e)g(used)h(a)f(v)n(ery)g(standard)f(\(`o\013)j(the)f
(shelf)6 b('\))32 b(v)n(ersion)d(of)i(GP)f(in)h(terms)450
5098 y(of)i(op)r(erators)e(and)i(the)h(selection)f(algorithm)f(used.)h
(W)-7 b(e)34 b(ha)n(v)n(e)e(not)h(added)g(an)n(y)g(`b)r(ells)g(and)450
5197 y(whistles')c(that)g(migh)n(t)f(o\013er)h(more)e(impro)n(v)n(emen)
n(t.)h(In)h(order)e(to)i(impro)n(v)n(e)e(the)i(results)f(for)g(a)450
5297 y(sp)r(eci\014c)i(compiler,)g(w)n(e)f(m)n(ust)i(striv)n(e)e(to)h
(b)r(etter)g(understand)g(our)f(system.)h(T)-7 b(o)30
b(this)g(end)g(w)n(e)450 5396 y(plan)22 b(to)f(study)h(the)g(priorit)n
(y)f(functions')h(\014tness)g(landscap)r(es)f(via)g(hillclim)n(bing,)h
(simplify)g(and)450 5496 y(b)r(etter)34 b(understand)g(the)g(GP)f(ev)n
(olv)n(ed)g(expressions,)f(and)h(conduct)h(additional)f(runs)h(with)450
5596 y(some)27 b(parameter)f(exp)r(erimen)n(tation.)p
eop
%%Page: 13 13
13 12 bop 330 315 a Fm(References)368 506 y Fq(1.)43
b(S.)21 b(G.)h(Abraham,)f(V.)g(Kathail,)i(and)e(B.)h(L.)g(Deitric)n(h.)
27 b(Meld)22 b(Sc)n(heduling:)g(Relaxing)f(Sc)n(heduling)470
598 y(Constain)n(ts)g(Across)g(Region)f(Boundaries.)26
b(In)20 b Fa(Pr)l(o)l(c)l(e)l(e)l(dings)k(of)e(the)i(29th)f(A)n(nnual)g
(International)470 689 y(Symp)l(osium)k(on)h(Micr)l(o)l(ar)l(chite)l
(ctur)l(e)j(\(MICR)n(O-29\))p Fq(,)c(pages)f(308{321,)j(1996.)368
780 y(2.)43 b(D.)20 b(Bernstein,)h(D.)g(Goldin,)g(and)f(M.)h(G.)g(et.)g
(al.)27 b(Spill)20 b(Co)r(de)i(Minimization)f(T)-6 b(ec)n(hniques)20
b(for)h(Op-)470 872 y(timizing)j(Compilers.)34 b(In)24
b Fa(Pr)l(o)l(c)l(e)l(e)l(dings)k(of)f(the)g(SIGPLAN)g('89)f(Confer)l
(enc)l(e)i(on)f(Pr)l(o)l(gr)l(amming)470 963 y(L)l(anguage)i(Design)f
(and)g(Implementation)p Fq(,)e(pages)h(258{263,)h(1989.)368
1054 y(3.)43 b(D.)c(Bourgin.)75 b Fa(http://hpux.u-aizu.ac.jp/hpp)l
(d/hpux/L)l(anguages/)q(c)l(o)l(de)m(cs-)q(1.0/)p Fq(.)80
b(Losslessy)470 1146 y(compression)26 b(sc)n(hemes.)368
1237 y(4.)43 b(B.)31 b(Calder,)h(D.)f(G.)g(ad)g(Mic)n(hael)h(Jones,)g
(D.)f(Lindsa)n(y)-6 b(,)31 b(J.)g(Martin,)h(M.)f(Mozer,)i(and)d(B.)i
(Zorn.)470 1328 y(Evidence-Based)23 b(Static)h(Branc)n(h)f(Prediction)h
(Using)g(Mac)n(hine)g(Learning.)31 b(In)23 b Fa(A)n(CM)i(T)-6
b(r)l(ansac-)470 1420 y(tions)28 b(on)g(Pr)l(o)l(gr)l(amming)g(L)l
(anguages)i(and)e(Systems)h(\(T)-6 b(oPL)l(aS-19\))p
Fq(,)28 b(v)n(olume)c(19,)j(1997.)368 1511 y(5.)43 b(P)-6
b(.)25 b(Chang,)i(D.)f(La)n(v)n(ery)-6 b(,)25 b(S.)g(Mahlk)n(e,)h(W.)g
(Chen,)g(and)g(W.)g(Hwu.)34 b(The)26 b(Imp)r(ortance)e(of)j(Prepass)470
1602 y(Co)r(de)20 b(Sc)n(heduling)e(for)i(Sup)r(erscalar)g(and)f(Sup)r
(erpip)r(elined)f(pro)r(cessors.)26 b(In)19 b Fa(IEEE)i(T)-6
b(r)l(ansactions)470 1694 y(on)27 b(Computers)p Fq(,)h(v)n(olume)d(44,)
h(pages)h(353{370,)i(Marc)n(h)d(1995.)368 1785 y(6.)43
b(F.)30 b(C.)g(Cho)n(w)g(and)g(J.)g(L.)g(Hennessey)-6
b(.)45 b(The)30 b(Priorit)n(y-Based)g(Coloring)i(Appro)r(c)n(h)c(to)i
(Register)470 1876 y(Allo)r(cation.)i(In)22 b Fa(A)n(CM)j(T)-6
b(r)l(ansactions)28 b(on)d(Pr)l(o)l(gr)l(amming)i(L)l(anguages)g(and)f
(Systems)g(\(T)-6 b(oPL)l(aS-)470 1968 y(12\))p Fq(,)26
b(pages)h(501{536,)i(1990.)368 2059 y(7.)43 b(K.)32 b(Co)r(op)r(er,)h
(P)-6 b(.)32 b(Sc)n(heilk)n(e,)g(and)g(D.)g(Subramanian.)51
b(Optimizing)32 b(for)g(Reduced)f(Co)r(de)i(Space)470
2150 y(using)i(Genetic)h(Algorithms.)63 b(In)34 b Fa(L)l(anguages,)k
(Compilers,)e(T)-6 b(o)l(ols)37 b(for)f(Emb)l(e)l(dde)l(d)i(Systems)p
Fq(,)470 2242 y(pages)26 b(1{9,)h(1999.)368 2333 y(8.)43
b(C.)20 b(Gathercole.)26 b Fa(A)n(n)d(Investigation)g(of)f(Sup)l
(ervise)l(d)i(L)l(e)l(arning)f(in)f(Genetic)i(Pr)l(o)l(gr)l(amming)p
Fq(.)h(PhD)470 2424 y(thesis,)h(Univ)n(ersit)n(y)f(of)h(Edin)n(burgh,)f
(1998.)368 2516 y(9.)43 b(P)-6 b(.)31 b(B.)g(Gibb)r(ons)g(and)g(S.)g
(S.)f(Muc)n(hnic)n(k.)50 b(E\016cien)n(t)31 b(Instruction)f(Sc)n
(heduling)g(for)i(a)f(Pip)r(elined)470 2607 y(Arc)n(hitecture.)k(In)25
b Fa(Pr)l(o)l(c)l(e)l(e)l(dings)30 b(of)e(the)g(A)n(CM)g(Symp)l(osium)g
(on)g(Compiler)g(Construction)p Fq(,)g(v)n(ol-)470 2698
y(ume)c(21,)j(pages)f(11{16,)i(1986.)330 2790 y(10.)43
b(G.)28 b(W.)h(Grew)n(al)h(and)d(C.)i(T.)g(Wilson.)43
b(Mappping)29 b(Reference)f(Co)r(de)h(to)g(Irregular)g(DSPs)f(with)470
2881 y(the)e(Retargetable,)j(Optimizing)e(Compiler)g(COGEN\(T\).)40
b(In)26 b Fa(International)k(Symp)l(osium)g(on)470 2972
y(Micr)l(o)l(ar)l(chite)l(ctur)l(e)p Fq(,)f(v)n(olume)c(34,)h(pages)h
(192{202,)h(2001.)330 3064 y(11.)43 b(J.)38 b(Koza.)73
b Fa(Genetic)40 b(Pr)l(o)l(gr)l(amming:)f(On)g(the)h(Pr)l(o)l(gr)l
(amming)g(of)f(Computers)h(by)g(Me)l(ans)f(of)470 3155
y(Natur)l(al)28 b(Sele)l(ction)p Fq(.)36 b(The)25 b(MIT)i(Press,)g
(1992.)330 3246 y(12.)43 b(S.)35 b(A.)h(Mahlk)n(e.)65
b Fa(Exploiting)38 b(instruction)g(level)f(p)l(ar)l(al)t(lelism)f(in)h
(the)h(pr)l(esenc)l(e)h(of)d(br)l(anches)p Fq(.)470 3337
y(PhD)h(thesis,)h(Univ)n(ersit)n(y)e(of)j(Illinois)f(at)g
(Urbana-Champaign,)f(Departmen)n(t)f(of)i(Electrical)470
3429 y(and)25 b(Computer)g(Engineering,)i(1996.)330 3520
y(13.)43 b(M.)20 b(O'Neill)g(and)f(C.)h(Ry)n(an.)j(Automatic)c
(generation)h(of)g(cac)n(hing)g(algorithms.)25 b(In)19
b(K.)g(Miettinen,)470 3611 y(M.)38 b(M.)g(Mk)n(el,)h(P)-6
b(.)37 b(Neittaanmki,)g(and)h(J.)g(P)n(eriaux,)g(editors,)h
Fa(Evolutionary)h(A)n(lgorithms)f(in)470 3703 y(Engine)l(ering)24
b(and)h(Computer)g(Scienc)l(e)p Fq(,)e(pages)f(127{134,)j(Jyvskyl,)c
(Finland,)i(30)f(Ma)n(y)g(-)f(3)h(June)470 3794 y(1999.)27
b(John)f(Wiley)g(&)f(Sons.)330 3885 y(14.)43 b(E.)29
b(Ozer,)g(S.)g(Banerjia,)i(and)e(T.)h(Con)n(te.)44 b(Uni\014ed)28
b(Assign)i(and)e(Sc)n(hedule:)h(A)f(New)i(Approac)n(h)470
3977 y(to)25 b(Sc)n(heduling)h(for)g(Clustered)g(Register)h(Filee)f
(Microarc)n(hitectures.)330 4068 y(15.)43 b(N.)29 b(P)n(aterson)h(and)g
(M.)g(Liv)n(esey)-6 b(.)45 b(Ev)n(olving)30 b(cac)n(hing)g(algorithms)g
(in)g(C)g(b)n(y)e(genetic)i(program-)470 4159 y(ming.)c(In)20
b(J.)i(R.)e(Koza,)i(K.)f(Deb,)g(M.)g(Dorigo,)i(D.)e(B.)g(F)-6
b(ogel,)23 b(M.)e(Garzon,)h(H.)f(Iba,)g(and)g(R.)f(L.)i(Ri-)470
4251 y(olo,)e(editors,)f Fa(Genetic)j(Pr)l(o)l(gr)l(amming)g(1997:)g
(Pr)l(o)l(c)l(e)l(e)l(dings)h(of)e(the)h(Se)l(c)l(ond)g(A)n(nnual)f
(Confer)l(enc)l(e)p Fq(,)470 4342 y(pages)26 b(262{267,)j(Stanford)d
(Univ)n(ersit)n(y)-6 b(,)24 b(CA,)i(USA,)f(13-16)i(July)e(1997.)j
(Morgan)f(Kaufmann.)330 4433 y(16.)43 b(D.)38 b(P)n(atterson)g(and)g
(J.)h(Hennessy)-6 b(.)70 b Fa(Computer)40 b(Ar)l(chite)l(ctur)l(e:)i(A)
c(Quantitative)j(Appr)l(o)l(ach)p Fq(.)470 4525 y(Morgan)27
b(Kaufmann,)d(1995.)330 4616 y(17.)43 b(B.)f(R.)g(Rau.)83
b(Iterativ)n(e)42 b(Mo)r(dulo)i(Sc)n(heduling:)d(An)h(Algorithm)f(for)i
(Soft)n(w)n(are)h(Pip)r(elining)470 4707 y(Lo)r(ops.)56
b(In)32 b Fa(Pr)l(o)l(c)l(e)l(e)l(dings)k(of)d(the)i(27th)g(A)n(nnual)f
(International)h(Symp)l(osium)f(on)h(Micr)l(o)l(ar)l(chi-)470
4799 y(te)l(ctur)l(e)30 b(\(MICR)n(O-24\))p Fq(,)c(No)n(v)n(em)n(b)r
(er)e(1994.)330 4890 y(18.)43 b(C.)37 b(Ry)n(an)e(and)h(P)-6
b(.)36 b(W)-6 b(alsh.)66 b(Automatic)36 b(con)n(v)n(ersion)g(of)i
(programs)e(from)g(serial)i(to)e(parallel)470 4981 y(using)24
b(genetic)g(programming)g(-)f(the)h(paragen)g(system.)31
b(In)23 b Fa(Pr)l(o)l(c)l(e)l(e)l(dings)28 b(of)e(ParCo'95)p
Fq(.)f(North-)470 5073 y(Holland,)h(1995.)330 5164 y(19.)43
b(T)-6 b(rimaran.)34 b Fa(http://www.trimar)l(an.or)l(g)p
Fq(.)330 5255 y(20.)43 b(N.)23 b(W)-6 b(arter.)31 b Fa(Mo)l(dulo)25
b(Sche)l(duling)i(with)e(Isomorphic)h(Contr)l(ol)h(T)-6
b(r)l(ansformations)p Fq(.)32 b(PhD)23 b(thesis,)470
5347 y(Univ)n(ersit)n(y)i(of)j(Illinois)g(at)e(Urbana-Champaign,)h
(Departmen)n(t)e(of)i(Electrical)h(and)f(Computer)470
5438 y(Engineering,)g(1993.)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
