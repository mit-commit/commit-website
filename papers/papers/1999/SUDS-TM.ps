%!PS-Adobe-2.0
%%Creator: dvipsk 5.66a Copyright 1986-97 Radical Eye Software (www.radicaleye.com)
%%Title: main.dvi
%%Pages: 9
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Times-Roman Courier Helvetica Times-Italic Times-Bold
%%EndComments
%DVIPSCommandLine: dvips -f main.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 1999.04.05:1608
%%BeginProcSet: texc.pro
%!
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR[matrix currentmatrix{dup dup round sub abs 0.00001 lt{round}if}
forall round exch round exch]setmatrix}N /@landscape{/isls true N}B
/@manualfeed{statusdict /manualfeed true put}B /@copies{/#copies X}B
/FMat[1 0 0 -1 0 0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{
/nn 8 dict N nn begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N
string /base X array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N
end dup{/foo setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{
/sf 1 N /fntrx FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]
N df-tail}B /E{pop nn dup definefont setfont}B /ch-width{ch-data dup
length 5 sub get}B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{
128 ch-data dup length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub
get 127 sub}B /ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data
dup type /stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N
/rc 0 N /gp 0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup
/base get 2 index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx
0 ch-xoff ch-yoff ch-height sub ch-xoff ch-width add ch-yoff
setcachedevice ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff
.1 sub]/id ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N
/cp 0 N{rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id
gp get /gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp
add /cp X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add
/gp X adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{
dup 255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1
adv}B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2
idiv S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore userdict
/eop-hook known{eop-hook}if showpage}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{dup length product length le{dup length product
exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}
ifelse end{{gsave TR -.1 .1 TR 1 1 scale rulex ruley false RMat{BDot}
imagemask grestore}}{{gsave TR -.1 .1 TR rulex ruley scale 1 1 false
RMat{BDot}imagemask grestore}}ifelse B /QV{gsave newpath transform round
exch round exch itransform moveto rulex 0 rlineto 0 ruley neg rlineto
rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta 0 N /tail{dup
/delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}B /c{-4 M}B /d{
-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{3 M}B /k{4 M}B
/w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p -1 w}B /q{p 1 w}
B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{3 2 roll p a}B
/bos{/SS save N}B /eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: 8r.enc
% @@psencodingfile@{
%   author = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry",
%   version = "0.6",
%   date = "22 June 1996",
%   filename = "8r.enc",
%   email = "kb@@mail.tug.org",
%   address = "135 Center Hill Rd. // Plymouth, MA 02360",
%   codetable = "ISO/ASCII",
%   checksum = "119     662    4424",
%   docstring = "Encoding for TrueType or Type 1 fonts to be used with TeX."
% @}
% 
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% 
% (4) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available.
% 
% (5) hyphen appears twice for compatibility with both ASCII and Windows.
% 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /.notdef /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /.notdef
  /breve /minus /.notdef 
% These are the only two remaining unencoded characters, so may as
% well include them.
  /Zcaron /zcaron 
% 0x10
 /caron /dotlessi 
% (unusual TeX characters available in, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl 
 /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef
 % very contentious; it's so painful not having quoteleft and quoteright
 % at 96 and 145 that we move the things normally found there down to here.
 /grave /quotesingle 
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /.notdef /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /.notdef /.notdef /.notdef
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /.notdef /.notdef /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin /rf{findfont dup length 1 add dict begin{1 index /FID ne 2
index /UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type /integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics /Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont /setfont cvx]cvx def}def /ObliqueSlant
{dup sin S cos div neg}B /SlantFont{4 index mul add}def /ExtendFont{3 -1
roll mul exch}def /ReEncodeFont{/Encoding exch def}def end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 40258437 52099154 1000 600 600 (main.dvi)
@start /Fa 133[26 29 29 44 29 33 18 26 26 1[33 33 33
48 18 29 1[18 33 33 18 29 33 29 33 33 9[55 41 1[37 33
41 1[41 48 44 55 37 2[22 48 48 41 41 48 44 41 41 6[22
33 2[33 33 33 33 33 33 33 2[22 17 2[22 22 40[{
TeXBase1Encoding ReEncodeFont}56 66.4176 /Times-Italic
rf /Fb 105[33 27[29 33 33 48 33 33 18 26 22 33 33 33
33 52 18 33 18 18 33 33 22 29 33 29 33 29 3[22 1[22 41
48 1[63 48 48 41 37 44 48 37 48 48 59 41 48 26 22 48
48 37 41 48 44 44 48 6[18 33 33 33 33 33 33 33 33 33
33 1[17 22 17 2[22 22 36[37 37 2[{TeXBase1Encoding ReEncodeFont}72
66.4176 /Times-Roman rf
%DVIPSBitmapFont: Fc cmsy9 9 2
/Fc 2 22 df<0060153000F815F86C1401007EEC03F06CEC07E06C6CEB0FC06C6CEB1F80
6C6CEB3F006C6C137E6C6C5B6C6C485A90387E03F06D485A90381F8FC090380FDF806DB4
C7FC6D5A6D5AA2497E497E90380FDF8090381F8FC090383F07E090387E03F0496C7E4848
6C7E4848137E48487F4848EB1F804848EB0FC048C7EA07E0007EEC03F048EC01F8481400
00601530252475A43C>2 D<127012FCB4FCEA7FC0EA1FF0EA07FCEA01FF38007FC0EB1F
F0EB07FCEB01FF9038007FC0EC1FF0EC07FCEC01FF9138007FC0ED1FF0ED07FCED01FF92
38007FC0EE1FF0EE07FCEE01FEA2EE07FCEE1FF0EE7FC0923801FF00ED07FCED1FF0ED7F
C04A48C7FCEC07FCEC1FF0EC7FC04948C8FCEB07FCEB1FF0EB7FC04848C9FCEA07FCEA1F
F0EA7FC048CAFC12FC1270CBFCAC007FB712FCB812FEA26C16FC2F3E7AB03C>21
D E
%EndDVIPSBitmapFont
/Fd 135[45 45 1[45 45 45 45 1[45 45 45 45 45 1[45 45
45 2[45 45 45 45 45 6[45 2[45 10[45 1[45 1[45 6[45 19[45
45[{TeXBase1Encoding ReEncodeFont}26 74.7198 /Courier
rf
%DVIPSBitmapFont: Fe cmmi9 9 4
/Fe 4 111 df<1307D90FC01338011F147C16FC5CA2013F1301A202005BA2491303A201
7E5CA201FE1307A2495CA20001140FA2495C17800003021F13C016C149EC8180A20007EC
3F836D017F130016034B5A3A0FFC03CF869039FE070F8E9039DFFE07FC9039C3F801F0D8
1FC0C9FCA25BA2123FA290CAFCA25AA2127EA212FEA25A12382A327FA02E>22
D<171C177EEE01FEEE07FCEE1FF0EE7FC0923801FF00ED07FCED1FF0ED7FC04A48C7FCEC
07FCEC1FF0EC7FC04948C8FCEB07FCEB1FF0EB7FC04848C9FCEA07FCEA1FF0EA7FC048CA
FCA2EA7FC0EA1FF0EA07FCEA01FF38007FC0EB1FF0EB07FCEB01FF9038007FC0EC1FF0EC
07FCEC01FF9138007FC0ED1FF0ED07FCED01FF9238007FC0EE1FF0EE07FCEE01FEEE007E
171C2F2E7AA93C>60 D<D801E001FEEB07F03C07F803FF801FFC3C0E3E0F07E0783F001C
903B3C03F1E01F803C181F7001F3800F003801E0EBF70026303FC001FE14C01270006001
805B02005B0303141FD8E07F4A1480EA407E12000307143F01FE1700495C60030F147E12
01494A13FEF0FC04031F150E00030401130C49028013F8191C033F01031318000717F049
02001438050113704B15E0000F933800F1C049017EEC7F80D80380011CEC1E003F227EA0
44>109 D<D801E013FE3A07F803FF803A0E3E0F07E0001C90383C03F039181F70010038
13E026303FC07F12700060138014001503D8E07F5CEA407E1200150701FE5C5B150F5E12
0149131FEE8080EE81C00003023F13804914011603037F13000007147E495CED3E0E5E00
0FEC1E3849EB0FF0D80380EB03C02A227EA02E>I E
%EndDVIPSBitmapFont
/Ff 134[50 3[55 2[44 2[50 55 83 28 2[28 55 2[44 1[44
1[50 12[66 55 5[94 66 1[50 39 5[72 9[50 2[50 50 3[50
1[28 25 33 25 44[{TeXBase1Encoding ReEncodeFont}27 99.6264
/Times-Bold rf /Fg 134[33 1[50 1[37 21 29 29 1[37 37
37 54 21 33 1[21 37 37 21 33 37 33 1[37 11[54 1[37 46
13[54 22[25 45[{TeXBase1Encoding ReEncodeFont}25 74.7198
/Times-Italic rf /Fh 107[33 33 24[33 37 37 54 37 37 21
29 25 37 37 37 37 58 21 37 21 21 37 37 25 33 37 33 37
33 3[25 1[25 46 1[54 71 54 54 46 42 50 1[42 54 54 66
46 54 29 25 54 54 42 46 54 50 50 54 3[42 2[21 37 37 37
37 37 37 37 37 37 37 21 19 25 19 2[25 25 25 1[62 33[42
42 2[{TeXBase1Encoding ReEncodeFont}76 74.7198 /Times-Roman
rf /Fi 134[45 45 66 1[51 25 45 30 1[51 51 51 76 20 45
1[20 51 51 25 51 51 45 51 51 11[66 1[61 66 4[76 3[25
2[56 61 66 66 1[61 10[51 51 51 51 51 51 2[25 46[{
TeXBase1Encoding ReEncodeFont}39 90.9091 /Helvetica rf
/Fj 138[55 55 55 55 3[55 55 55 55 1[55 2[55 55 55 55
1[55 32[55 17[55 46[{TeXBase1Encoding ReEncodeFont}16
90.9091 /Courier rf /Fk 133[40 2[66 2[25 35 30 2[45 45
71 25 45 25 25 45 45 1[40 45 1[45 40 12[56 51 5[81 56
2[30 1[66 51 2[61 61 66 7[45 5[45 45 45 45 1[23 30 23
44[{TeXBase1Encoding ReEncodeFont}36 90.9091 /Times-Roman
rf /Fl 134[60 2[60 60 33 47 40 1[60 60 60 93 33 2[33
60 1[40 53 60 53 1[53 11[86 1[66 2[66 2[106 8[86 9[33
58[{TeXBase1Encoding ReEncodeFont}24 119.552 /Times-Roman
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin

%%EndSetup
%%Page: 1 1
1 0 bop 306 79 a Fl(SUDS:)32 b(Primiti)m(v)n(e)f(Mechanisms)e(for)g
(Memory)h(Dependence)g(Speculation)899 304 y Fk(Matthe)n(w)24
b(Frank,)f(C.)g(Andras)h(Moritz,)g(Benjamin)g(Greenw)o(ald,)1196
417 y(Saman)g(Amarasinghe)h(and)f(Anant)g(Agarw)o(al)1763
530 y(MIT)-8 b(-LCS)1518 643 y(Cambridge,)24 b(MA)e(02139)1450
756 y Fj(mfrank@lcs.mit)o(.e)o(du)-152 1061 y Fi(Abstr)o(act)-152
1222 y Fh(As)h(VLSI)f(chip)i(sizes)f(and)h(densities)f(increase,)i(it)d
(becomes)j(possible)f(to)-152 1305 y(put)15 b(man)o(y)h(processing)g
(elements)f(on)g(a)g(single)g(chip)g(and)g(connect)h(them)f(to-)-152
1388 y(gether)i(with)e(a)h(lo)n(w)g(latenc)o(y)h(communication)g(netw)o
(ork.)23 b(In)16 b(this)g(paper)h(we)-152 1471 y(propose)24
b(a)f(softw)o(are)g(system,)g Fg(SUDS)g Fh(\(Softw)o(are)f(Un-Do)h
(System\),)g(that)-152 1554 y(le)n(v)o(erages)k(these)f(resources)h
(using)f(speculation)h(to)f(e)o(xploit)g(parallelism)-152
1637 y(in)20 b(inte)o(ger)f(programs)i(with)e(man)o(y)h(data)g
(dependences.)28 b(W)-6 b(e)19 b(demonstrate)-152 1720
y(that)d(in)g(order)g(to)g(achie)n(v)o(e)h(parallel)f(speedups)h(a)f
(speculation)h(system)g(must)-152 1803 y(deli)n(v)o(er)24
b(memory)g(request)g(latencies)g(lo)n(wer)f(than)h(about)g(30)g(c)o
(ycles.)37 b(W)-6 b(e)-152 1886 y(gi)n(v)o(e)24 b(a)f(cost)g(breakdo)n
(wn)i(for)e(our)g(current)h(w)o(orking)g(implementation)g(of)-152
1969 y(SUDS)16 b(that)h(has)g(a)g(memory)h(request)f(latenc)o(y)h(that)
f(is)f(nearly)i(able)f(to)g(meet)-152 2052 y(this)i(goal.)-40
2135 y(In)k(addition,)h(we)e(identify)h(the)g(three)f(primiti)n(v)o(e)h
(runtime)g(operations)-152 2218 y(that)29 b(are)h(necessary)g(to)f(ef)n
(\002ciently)h(parallelize)f(these)g(programs.)56 b(The)-152
2301 y(subsystems)24 b(include)g(\(1\))f(a)g(f)o(ast)g(communication)h
(path)g(for)f(true)g(depen-)-152 2384 y(dences)30 b(within)d(the)i
(program,)i(\(2\))d(a)g(method)h(for)f(renaming)h(v)n(ariables)-152
2467 y(that)e(ha)o(v)o(e)h(anti)f(and)g(output)h(dependences)i(and)e
(\(3\))f(a)g(memory)h(depen-)-152 2550 y(dence)19 b(speculation)g
(mechanism)g(to)f(guarantee)h(that)f(parallel)g(accesses)h(to)-152
2633 y(global)24 b(data)g(structures)f(don')o(t)h(violate)f(sequential)
h(program)g(semantics.)-152 2716 y(W)-6 b(e)17 b(\002nd)g(that)f(these)
i(three)f(subsystems)h(do)f(not)g(interact,)g(so)g(that)g(the)o(y)g
(can)-152 2799 y(be)j(implemented)g(separately)-5 b(.)25
b(Each)19 b(subsystem)h(is)f(then)h(simple)f(enough)-152
2882 y(that)24 b(it)g(can)h(be)f(b)o(uilt)g(in)g(softw)o(are)h(using)g
(only)g(minimal)f(hardw)o(are)h(sup-)-152 2965 y(port.)e(In)c(this)g
(paper)g(we)g(focus)g(on)g(the)g(memory)g(dependence)i(subsystem)-152
3048 y(and)h(demonstrate)g(that)f(it)g(can)g(be)h(implemented)g(using)g
(a)f(simple)g(b)o(ut)g(ef-)-152 3131 y(fecti)n(v)o(e)e(lo)n(w-cost)g
(protocol.)-152 3362 y Fi(1)91 b(Introduction)-152 3522
y Fh(As)19 b(we)g(mo)o(v)o(e)h(to)n(w)o(ards)g(the)f(technology)i(that)
e(will)f(permit)i(a)f(billion)g(tran-)-152 3605 y(sistors)f(on)g(a)g
(chip,)g(computer)g(architects)g(need)h(to)e(f)o(ace)h(three)g(con)m(v)
o(er)o(ging)-152 3688 y(forces.)49 b(These)28 b(include)g(the)g(need)g
(to)f(k)o(eep)i(internal)e(chip)h(wires)f(short)-152
3771 y(so)21 b(that)g(clock)g(speed)h(will)e(scale)h(with)f(feature)h
(size,)g(the)g(economic)h(con-)-152 3854 y(straints)17
b(of)h(quickly)g(v)o(erifying)g(ne)n(w)g(designs,)h(and)f(changing)h
(application)-152 3937 y(w)o(orkloads)j(that)d(emphasize)i
(stream-based)g(multimedia)g(computations.)-152 4020
y(A)i(Ra)o(w)g(machine)h([22,)f(37])g(is)g(a)f(softw)o(are-e)o(xposed)j
(VLSI)d(architecture)-152 4103 y(comprising)29 b(a)e(mesh-connected)j
(set)d(of)h(tiles)f(each)h(with)f(a)g(processing)-152
4186 y(element)22 b(and)f(a)g(portion)g(of)g(the)g(on-chip)h(memory)-5
b(.)30 b(These)21 b(architectures)-152 4269 y(require)k(only)f(short)h
(wires,)f(are)g(much)h(simpler)f(to)g(design)h(than)f(today')l(s)-152
4352 y(superscalars,)h(and)f(pro)o(vide)h(ef)n(\002cient)e(parallelism)
g(for)g(multimedia)h(and)-152 4435 y(signal)c(processing)g
(applications.)-40 4518 y(In)26 b(this)g(paper)g(we)g(propose)h(SUDS)d
(\(Softw)o(are)i(Un-Do)g(System\),)h(a)-152 4601 y(softw)o(are)21
b(system)f(that)g(pro)o(vides)i(runtime)e(support)h(for)f
(parallelizing)h(in-)-152 4684 y(te)o(ger)27 b(programs)g(on)g(Ra)o(w)f
(processors.)47 b(Unlik)o(e)27 b(multimedia)g(and)g(DSP)-152
4767 y(applications,)22 b(which)f(can)f(be)h(easily)g(parallelized)f
(because)i(the)o(y)f(tend)g(to)258 5194 y Ff(MIT/LCS)26
b(T)-9 b(echnical)26 b(Memo,)547 5288 y(LCS-TM-591,)494
5383 y(J)o(anuary)f(6,)f(1999.)2040 1061 y Fh(contain)31
b(fe)n(w)e(dependences,)35 b(inte)o(ger)30 b(programs)g(are)g
(characterized)h(by)2040 1144 y(ha)o(ving)19 b(a)f(lar)o(ge)g(number)i
(of)e(dependences)j(at)d(all)g(le)n(v)o(els.)23 b(In)18
b(order)h(to)f(par)o(-)2040 1227 y(allelize)f(an)h(inte)o(ger)g
(program)g(the)g(system)g(must)g(pro)o(vide)g(runtime)g(mech-)2040
1310 y(anisms)j(for)g(dealing)h(with)f(these)g(dependences.)31
b(In)21 b(this)g(paper)h(we)f(char)o(-)2040 1393 y(acterize)g(the)h
(problems)g(with)f(dependences)i(and)f(e)o(xamine)g(mechanisms)2040
1476 y(for)h(handling)h(them.)35 b(W)-6 b(e)22 b(propose)i(di)n(viding)
g(the)f(runtime)g(dependence-)2040 1559 y(handling)g(system)f(into)f
(three)h(subsystems,)h(each)g(of)e(which)h(can)g(then)g(be)2040
1642 y(addressed)27 b(using)g(simple)f(softw)o(are)g(mechanisms)h(on)g
(a)f(Ra)o(w)f(architec-)2040 1725 y(ture.)2152 1808 y(Three)e
(subsystems)g(are)g(required)g(because)h(dependences)h(constrain)2040
1891 y(parallelism)d(in)g(three)g(dif)n(ferent)g(w)o(ays.)33
b(Most)22 b(importantly)-5 b(,)23 b(the)f(true)g(de-)2040
1975 y(pendences)31 b(in)d(the)h(program)g(form)g(a)f(critical)g(path)h
(that)g(must)f(be)h(pro-)2040 2058 y(cessed)c(sequentially)-5
b(.)40 b(In)24 b(addition,)i(reuse)e(of)g(static)g(v)n(ariable)h(names)
f(in)2040 2141 y(the)31 b(program)g(causes)h(write-after)o(-read)d(and)
j(write-after)o(-write)c(depen-)2040 2224 y(dences)k(at)f(runtime.)60
b(Finally)-5 b(,)34 b(there)d(are)g Fg(potential)h Fh(dependence)h
(arcs)2040 2307 y(in)24 b(the)f(program)i(that)f(are)f(caused)i(by)f
(random)h(accesses)f(to)g(global)g(data)2040 2390 y(structures.)53
b(These)29 b(dependences)j(may)d(or)g(may)g(not)g(e)o(xist)g(at)f
(runtime)2040 2473 y(gi)n(v)o(en)23 b(the)f(input)h(data)f(to)g(the)h
(program,)g(and)g(the)f(e)o(xistence)h(of)f(a)g(depen-)2040
2556 y(dence)e(arc)f(can)g(only)h(be)f(determined)h(at)f(runtime.)2152
2639 y(SUDS)k(parallelizes)h(code)i(using)e(a)h(technique)g(similar)f
(to)g(the)g(Mul-)2040 2722 y(tiscalar)e(architecture)g([9,)g(31)q(].)32
b(In)22 b(SUDS)f(each)h(loop)h(is)f(parallelized)g(by)2040
2805 y(c)o(yclically)i(distrib)o(uting)g(loop)g(iterations)g(across)g
(the)g(system')l(s)g(process-)2040 2888 y(ing)30 b(elements.)56
b(In)30 b(order)h(to)e(simplify)h(the)g(runtime)g(protocols)h(SUDS)2040
2971 y(breaks)25 b(the)g(e)o(x)o(ecution)h(of)e(the)h(program)g(into)g
Fg(c)o(hunks)p Fh(.)41 b(The)24 b(processing)2040 3054
y(elements)k(each)h(run)f(a)g(single)g(iteration)f(of)h(the)g(chunk)h
(in)f(parallel)g(and)2040 3137 y(then)g(all)f(the)h(nodes)h
(synchronize.)51 b(T)m(rue)28 b(dependences)i(between)f(loop)2040
3220 y(iterations)23 b(are)g(forw)o(arded)h(in)f(just)g(a)g(fe)n(w)g(c)
o(ycles)g(using)h(the)f(mesh)g(inter)o(-)2040 3303 y(connect)d(between)
g(neighboring)h(processing)f(elements.)2152 3386 y(SUDS)15
b(tak)o(es)i(a)g(softw)o(are)g(intensi)n(v)o(e)g(approach)h(to)e
(renaming)h(anti)g(and)2040 3469 y(output)27 b(dependences.)46
b(A)25 b(compiler)h(is)f(used)i(to)f(perform)g(pri)n(v)n(atization)2040
3552 y(analysis)c(on)g(all)f(loop)i(v)n(ariables.)31
b(Those)22 b(that)g(are)f(found)i(to)e(be)h(pri)n(v)n(atiz-)2040
3635 y(able)17 b(are)f(placed)i(on)f(a)f(special)h(local)g(stack.)22
b(The)17 b(runtime)f(system)h(creates)2040 3718 y(a)e(lo)n(w-cost)g
(cactus)h(stack)f(by)g(simply)h(allo)n(wing)f(each)h(processing)g
(element)2040 3801 y(to)j(b)o(uild)g(a)g(pri)n(v)n(ate)g(cop)o(y)h(of)f
(the)g(local)g(stack)g(in)g(its)f(o)n(wn)i(local)f(memory)-5
b(.)2152 3884 y(Finally)g(,)22 b(SUDS)f(can)h(speculate)h(across)f
(memory)h(dependences)i(that)2040 3967 y(can)e(not)g(be)g(analyzed)h
(at)f(compile)g(time.)34 b(SUDS)22 b(dedicates)h(a)g(subset)g(of)2040
4050 y(the)18 b(system)g(elements)g(to)g(act)g(as)f(\223speculati)n(v)o
(e)i(memories\224.)24 b(All)17 b(memory)2040 4133 y(requests)26
b(are)e(sent)h(through)h(these)g(nodes.)41 b(The)25 b(speculati)n(v)o
(e)h(memories)2040 4216 y(v)n(alidate)i(the)g(dependence)j
(speculations)e(and)f(hold)h(a)f(log)g(of)g(write)f(re-)2040
4299 y(quests)e(which)g(can)g(be)g(rolled)g(back)g(in)g(the)g(case)g
(of)f(a)h(mis-speculation.)2040 4382 y(In)18 b(order)g(to)g(simplify)g
(the)g(v)n(alidation)h(and)g(speculation)g(protocols)g(SUDS)2040
4465 y(occasionally)25 b(synchronizes)g(all)e(the)h(nodes.)37
b(In)24 b(the)f(results)h(section)g(we)2040 4548 y(sho)n(w)j(that)e
(this)h(additional)h(synchronization)g(results)f(in)g(only)h(minimal)
2040 4631 y(load-imbalance)20 b(o)o(v)o(erheads.)2152
4714 y(This)g(paper)i(mak)o(es)f(tw)o(o)g(contrib)o(utions.)29
b(First,)19 b(we)i(sho)n(w)g(encourag-)2040 4797 y(ing)h(empirical)g
(results)f(that)h(indicate)g(that)f(with)g(a)h(reasonable)h(engineer)o
(-)2040 4880 y(ing)d(ef)n(fort)g(softw)o(are)f(based)i(speculation)g
(systems)f(might)g(achie)n(v)o(e)g(paral-)2040 4963 y(lel)c(speedups.)
24 b(In)17 b(addition)g(we)f(demonstrate)i(ho)n(w)f(to)g(b)o(uild)f(a)h
(simple,)f(yet)2040 5046 y(ef)n(fecti)n(v)o(e,)j(lo)n(w-cost)h(memory)g
(dependence)i(speculation)e(protocol.)25 b(This)2040
5129 y(simple)g(protocol)h(is)f(made)h(possible)g(because)g(we)f
(separate)h(the)f(depen-)2040 5212 y(dence)e(handling)g(problem)f(into)
g(three)f(primiti)n(v)o(e)h(subproblems,)h(each)f(of)2040
5295 y(which)d(can)h(be)f(implemented)h(independently)h(of)e(the)g
(others.)1922 5627 y(1)p eop
%%Page: 2 2
2 1 bop -40 -69 a Fh(The)27 b(rest)f(of)h(this)f(paper)i(is)e(or)o
(ganized)h(as)g(follo)n(ws.)46 b(The)27 b(ne)o(xt)g(sec-)-152
14 y(tion)18 b(describes)h(the)f(programming)h(model)f(that)g(SUDS)e
(supports)j(and)g(the)-152 97 y(basic)h(hardw)o(are)g(and)f(compiler)h
(support)g(required)g(by)f(SUDS.)f(Section)g(3)-152 180
y(describes)23 b(the)f(techniques)h(SUDS)e(uses)h(to)g(forw)o(ard)h
(true)e(dependences,)-152 263 y(rename)32 b(f)o(alse)e(dependences)k
(and)d(speculate)g(across)h(potential)f(depen-)-152 346
y(dences.)40 b(Section)24 b(4)g(contains)h(both)g(a)f(detailed)g(cost)g
(breakdo)n(wn)i(of)f(the)-152 429 y(basic)g(mechanisms,)i(and)e(an)g
(empirical)g(study)g(of)f(ho)n(w)h(memory)h(laten-)-152
512 y(cies)c(af)n(fect)g(the)f(a)o(v)n(ailable)h(parallelism.)31
b(Section)22 b(5)g(compares)g(SUDS)f(to)-152 596 y(pre)n(vious)h
(memory)e(dependence)j(speculation)e(systems.)27 b(Section)20
b(6)g(con-)-152 679 y(cludes.)-152 909 y Fi(2)91 b(Suppor)t(t)23
b(f)m(or)j(SUDS)-152 1069 y Fh(SUDS)g(parallelizes)g(loops)h(by)g(c)o
(yclically)g(distrib)o(uting)f(the)h(loop)g(itera-)-152
1153 y(tions)c(across)h(the)f(system')l(s)g(processing)i(elements.)36
b(The)23 b(main)g(focus)h(of)-152 1236 y(this)e(paper)g(is)f(the)h
(runtime)f(support)i(that)e(SUDS)f(pro)o(vides)j(for)e(handling)-152
1319 y(data)27 b(dependences,)j(described)d(in)f(Section)g(3.)44
b(In)26 b(this)g(section)h(we)e(de-)-152 1402 y(scribe)i(the)f(en)m
(vironment)h(in)f(which)h(SUDS)d(runs.)45 b(The)26 b(parallelization)
-152 1485 y(system)18 b(is)f(based)h(on)g(the)f(assumption)i(that)e
(the)h(underlying)h(hardw)o(are)f(in-)-152 1568 y(cludes)g(certain)f
(mechanisms.)24 b(Primarily)16 b(these)h(include)g(the)g(assumption)
-152 1651 y(that)23 b(it)g(pro)o(vides)h(a)f(MIMD)h(lik)o(e)f(parallel)
g(programming)i(model,)f(where)-152 1734 y(there)i(are)f(multiple)g
(threads)h(running)g(in)f(parallel)g(and)h(communicating)-152
1817 y(using)e(message)g(passing.)36 b(The)23 b(particular)g(hardw)o
(are)h(for)f(which)g(SUDS)-152 1900 y(is)c(tar)o(geted)g(is)f
(discussed)i(in)f(Section)g(2.1.)-40 1983 y(The)i(parallelization)g
(model)g(that)f(our)h(system)g(supports)h(is)e(based)h(on)-152
2066 y(loops.)32 b(In)22 b(the)g(current)g(v)o(ersion)g(of)g(our)g
(system,)g(the)g(programmer)h(is)e(re-)-152 2149 y(sponsible)g(for)e
(identifying)g(which)h(loops)g(the)f(system)g(should)i(attempt)e(to)
-152 2232 y(parallelize.)33 b(This)22 b(is)g(done)h(by)g(marking)g(the)
g(loops)g(in)f(the)g(source)h(code.)-152 2315 y(The)29
b(parallelization)g(techniques)i(we)d(use)i(w)o(ork)f(with)g(an)o(y)g
(loop,)j(e)n(v)o(en)-152 2398 y(\223do-across\224)18
b(loops,)f(loops)g(with)f(loop)h(carried)f(dependences,)j(loops)e(with)
-152 2481 y(non-tri)n(vial)g(e)o(xit)g(conditions)g(and)g(loops)h(with)
e(internal)g(control)h(\003o)n(w)-5 b(.)23 b(The)-152
2564 y(system)17 b(will)f(attempt)g(to)g(parallelize)h(an)o(y)g(loop)g
(e)n(v)o(en)g(if)f(the)h(loop)g(contains)-152 2647 y(no)26
b(a)o(v)n(ailable)f(parallelism)f(due)i(to)f(data)g(or)g(control)g
(dependences.)44 b(Our)-152 2730 y(future)26 b(plans)f(include)h(a)f
(system)h(to)f(automatically)h(identify)f(loops)h(that)-152
2813 y(are)19 b(lik)o(ely)g(to)g(contain)h(signi\002cant)f(amounts)h
(of)f(parallelism.)-40 2896 y(A)31 b(potential)g(performance)h
(limitation)e(of)h(our)g(system)g(is)f(that)h(the)-152
2979 y(compiler)c(does)g(not)f(currently)h(do)f(renaming)h(on)g(global)
f(scalars.)45 b(This)-152 3062 y(can)20 b(se)n(v)o(erely)f(limit)f(the)
h(a)o(v)n(ailable)h(parallelism)e(in)h(programs)h(written)f(us-)-152
3145 y(ing)f(programming)h(styles)e(that)h(communicate)g(e)o(xtensi)n
(v)o(ely)h(using)f(global)-152 3228 y(v)n(ariables.)32
b(W)-6 b(e)21 b(discuss)h(this)f(limitation)g(in)g(more)h(detail)f(in)g
(Section)h(3.4.)-152 3311 y(F)o(or)e(the)g(programs)h(we)f(in)m(v)o
(estigate)g(in)g(this)g(paper)m(,)h(which)f(are)g(written)g(in)-152
3394 y(an)k(\223object-oriented\224)i(programming)f(style,)f(we)g(ha)o
(v)o(e)g(not)g(had)g(a)g(prob-)-152 3477 y(lem)g(with)f(this)h
(limitation.)37 b(W)-6 b(e)23 b(are)h(currently)g(w)o(orking)h(on)f(a)g
(compiler)-152 3560 y(algorithm)g(that)g(uses)g(the)f(results)h(of)g
(an)f(e)o(xisting)h(pointer)g(analysis)g(sys-)-152 3643
y(tem)d(to)f(perform)h(compiler)g(renaming)h(e)n(v)o(en)f(for)g
(programs)h(that)e(rely)h(e)o(x-)-152 3726 y(clusi)n(v)o(ely)f(on)f
(global)h(v)n(ariables.)-152 3948 y Fi(2.1)91 b(Ra)n(w)24
b(machines)-152 4082 y Fh(The)17 b(hardw)o(are)h(we)f(are)g(tar)o
(geting)h(is)e(a)h(highly)h(parallel)f(single)g(chip)h(VLSI)-152
4165 y(architecture.)33 b(The)23 b(processor)g(as)f(a)g(whole)g(is)g
(made)h(up)g(of)f(an)g(intercon-)-152 4248 y(nected)28
b(set)e(of)h(tiles)e(\(Figure)i(1\).)46 b(Each)27 b(tile)e(contains)j
(a)e(simple)h(RISC-)-152 4331 y(lik)o(e)c(pipeline,)g(instruction)g
(and)g(data)f(memories)h(and)g(is)f(interconnected)-152
4414 y(with)c(other)h(tiles)f(o)o(v)o(er)h(a)f(pipelined,)h
(point-to-point)h(mesh)f(netw)o(ork.)24 b(The)-152 4497
y(netw)o(ork)d(interf)o(ace)g(is)e(inte)o(grated)i(directly)f(into)g
(the)g(processor)h(pipeline,)-152 4580 y(so)f(that)f(the)h(compiler)g
(can)g(place)g(communication)h(instructions)f(directly)-152
4663 y(into)31 b(the)f(code.)58 b(The)30 b(softw)o(are)g(can)h(then)g
(transfer)f(data)h(between)g(the)-152 4746 y(re)o(gister)f(\002les)f
(on)i(tw)o(o)f(neighboring)i(tiles)d(in)h(just)g(4)g(c)o(ycles.)57
b(Designs)-152 4829 y(of)26 b(this)g(type)g(ha)o(v)o(e)g(been)h(called)
f Fg(Raw)g(ar)m(c)o(hitectur)m(es)h Fh(because)g(the)o(y)g(e)o(x-)-152
4912 y(pose)d(control)g(of)f(all)f(of)h(the)h(communication)g
(resources)g(directly)g(to)f(the)-152 4995 y(compiler)d([22,)f(37].)-40
5078 y(This)g(architecture)g(is)g(e)o(xcellent)g(for)f(signal)i
(processing)g(applications)-152 5161 y(because)g(it)f(pro)o(vides)g
(enormous)i(amounts)e(of)g(compute)h(bandwidth,)g(and)-152
5244 y(man)o(y)27 b(independent)h(memory)f(ports.)45
b(A)26 b(Ra)o(w)f(machine)i(also)g(pro)o(vides)2136 -152
y
 14208860 8951580 6183485 17103257 36114186 36114186 startTexFig
 2136 -152 a
%%BeginDocument: figs/raw_machine.idraw
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: idraw
%%DocumentFonts: Helvetica-Bold Helvetica Times-Bold
%%Pages: 1
%%BoundingBox: 94 260 549 549
%%EndComments

%%BeginIdrawPrologue
/arrowhead {
0 begin
transform originalCTM itransform
/taily exch def
/tailx exch def
transform originalCTM itransform
/tipy exch def
/tipx exch def
/dy tipy taily sub def
/dx tipx tailx sub def
/angle dx 0 ne dy 0 ne or { dy dx atan } { 90 } ifelse def
gsave
originalCTM setmatrix
tipx tipy translate
angle rotate
newpath
arrowHeight neg arrowWidth 2 div moveto
0 0 lineto
arrowHeight neg arrowWidth 2 div neg lineto
patternNone not {
originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def
/padtail brushWidth 2 div def
tipx tipy translate
angle rotate
padtip 0 translate
arrowHeight padtip add padtail add arrowHeight div dup scale
arrowheadpath
ifill
} if
brushNone not {
originalCTM setmatrix
tipx tipy translate
angle rotate
arrowheadpath
istroke
} if
grestore
end
} dup 0 9 dict put def

/arrowheadpath {
newpath
arrowHeight neg arrowWidth 2 div moveto
0 0 lineto
arrowHeight neg arrowWidth 2 div neg lineto
} def

/leftarrow {
0 begin
y exch get /taily exch def
x exch get /tailx exch def
y exch get /tipy exch def
x exch get /tipx exch def
brushLeftArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def

/rightarrow {
0 begin
y exch get /tipy exch def
x exch get /tipx exch def
y exch get /taily exch def
x exch get /tailx exch def
brushRightArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def

%%EndIdrawPrologue

/arrowHeight 10 def
/arrowWidth 5 def

/IdrawDict 53 dict def
IdrawDict begin

/reencodeISO {
dup dup findfont dup length dict begin
{ 1 index /FID ne { def }{ pop pop } ifelse } forall
/Encoding ISOLatin1Encoding def
currentdict end definefont
} def

/ISOLatin1Encoding [
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
/parenleft/parenright/asterisk/plus/comma/minus/period/slash
/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon
/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N
/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright
/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m
/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/dotlessi/grave/acute/circumflex/tilde/macron/breve
/dotaccent/dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut
/ogonek/caron/space/exclamdown/cent/sterling/currency/yen/brokenbar
/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot
/hyphen/registered/macron/degree/plusminus/twosuperior/threesuperior
/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine
/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute
/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis
/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave
/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex
/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis
/yacute/thorn/ydieresis
] def
/Helvetica-Bold reencodeISO def
/Helvetica reencodeISO def
/Times-Bold reencodeISO def

/none null def
/numGraphicParameters 17 def
/stringLimit 65535 def

/Begin {
save
numGraphicParameters dict begin
} def

/End {
end
restore
} def

/SetB {
dup type /nulltype eq {
pop
false /brushRightArrow idef
false /brushLeftArrow idef
true /brushNone idef
} {
/brushDashOffset idef
/brushDashArray idef
0 ne /brushRightArrow idef
0 ne /brushLeftArrow idef
/brushWidth idef
false /brushNone idef
} ifelse
} def

/SetCFg {
/fgblue idef
/fggreen idef
/fgred idef
} def

/SetCBg {
/bgblue idef
/bggreen idef
/bgred idef
} def

/SetF {
/printSize idef
/printFont idef
} def

/SetP {
dup type /nulltype eq {
pop true /patternNone idef
} {
dup -1 eq {
/patternGrayLevel idef
/patternString idef
} {
/patternGrayLevel idef
} ifelse
false /patternNone idef
} ifelse
} def

/BSpl {
0 begin
storexyn
newpath
n 1 gt {
0 0 0 0 0 0 1 1 true subspline
n 2 gt {
0 0 0 0 1 1 2 2 false subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 2 copy false subspline
} if
n 2 sub dup n 1 sub dup 2 copy 2 copy false subspline
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Circ {
newpath
0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
} def

/CBSpl {
0 begin
dup 2 gt {
storexyn
newpath
n 1 sub dup 0 0 1 1 2 2 true subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 0 0 false subspline
n 2 sub dup n 1 sub dup 0 0 1 1 false subspline
patternNone not { ifill } if
brushNone not { istroke } if
} {
Poly
} ifelse
end
} dup 0 4 dict put def

/Elli {
0 begin
newpath
4 2 roll
translate
scale
0 0 1 0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 1 dict put def

/Line {
0 begin
2 storexyn
newpath
x 0 get y 0 get moveto
x 1 get y 1 get lineto
brushNone not { istroke } if
0 0 1 1 leftarrow
0 0 1 1 rightarrow
end
} dup 0 4 dict put def

/MLine {
0 begin
storexyn
newpath
n 1 gt {
x 0 get y 0 get moveto
1 1 n 1 sub {
/i exch def
x i get y i get lineto
} for
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Poly {
3 1 roll
newpath
moveto
-1 add
{ lineto } repeat
closepath
patternNone not { ifill } if
brushNone not { istroke } if
} def

/Rect {
0 begin
/t exch def
/r exch def
/b exch def
/l exch def
newpath
l b moveto
l t lineto
r t lineto
r b lineto
closepath
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 4 dict put def

/Text {
ishow
} def

/idef {
dup where { pop pop pop } { exch def } ifelse
} def

/ifill {
0 begin
gsave
patternGrayLevel -1 ne {
fgred bgred fgred sub patternGrayLevel mul add
fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor
eofill
} {
eoclip
originalCTM setmatrix
pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def
/h t b sub ceiling cvi def
/imageByteWidth w 8 div ceiling cvi def
/imageHeight h def
bgred bggreen bgblue setrgbcolor
eofill
fgred fggreen fgblue setrgbcolor
w 0 gt h 0 gt and {
l w add b translate w neg h scale
w h true [w 0 0 h neg 0 h] { patternproc } imagemask
} if
} ifelse
grestore
end
} dup 0 8 dict put def

/istroke {
gsave
brushDashOffset -1 eq {
[] 0 setdash
1 setgray
} {
brushDashArray brushDashOffset setdash
fgred fggreen fgblue setrgbcolor
} ifelse
brushWidth setlinewidth
originalCTM setmatrix
stroke
grestore
} def

/ishow {
0 begin
gsave
fgred fggreen fgblue setrgbcolor
/fontDict printFont printSize scalefont dup setfont def
/descender fontDict begin 0 [FontBBox] 1 get FontMatrix end
transform exch pop def
/vertoffset 1 printSize sub descender sub def {
0 vertoffset moveto show
/vertoffset vertoffset printSize sub def
} forall
grestore
end
} dup 0 3 dict put def
/patternproc {
0 begin
/patternByteLength patternString length def
/patternHeight patternByteLength 8 mul sqrt cvi def
/patternWidth patternHeight def
/patternByteWidth patternWidth 8 idiv def
/imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def
/imageMaxHeight imageByteMaxLength imageByteWidth idiv patternHeight idiv
patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store
/imageString imageByteWidth imageMaxHeight mul patternByteWidth add string def
0 1 imageMaxHeight 1 sub {
/y exch def
/patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def
0 patternByteWidth imageByteWidth 1 sub {
/x exch def
imageString imageRow x add patternRowString putinterval
} for
} for
imageString
end
} dup 0 12 dict put def

/min {
dup 3 2 roll dup 4 3 roll lt { exch } if pop
} def

/max {
dup 3 2 roll dup 4 3 roll gt { exch } if pop
} def

/midpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 x1 add 2 div
y0 y1 add 2 div
end
} dup 0 4 dict put def

/thirdpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 2 mul x1 add 3 div
y0 2 mul y1 add 3 div
end
} dup 0 4 dict put def

/subspline {
0 begin
/movetoNeeded exch def
y exch get /y3 exch def
x exch get /x3 exch def
y exch get /y2 exch def
x exch get /x2 exch def
y exch get /y1 exch def
x exch get /x1 exch def
y exch get /y0 exch def
x exch get /x0 exch def
x1 y1 x2 y2 thirdpoint
/p1y exch def
/p1x exch def
x2 y2 x1 y1 thirdpoint
/p2y exch def
/p2x exch def
x1 y1 x0 y0 thirdpoint
p1x p1y midpoint
/p0y exch def
/p0x exch def
x2 y2 x3 y3 thirdpoint
p2x p2y midpoint
/p3y exch def
/p3x exch def
movetoNeeded { p0x p0y moveto } if
p1x p1y p2x p2y p3x p3y curveto
end
} dup 0 17 dict put def

/storexyn {
/n exch def
/y n array def
/x n array def
n 1 sub -1 0 {
/i exch def
y i 3 2 roll put
x i 3 2 roll put
} for
} def

/SSten {
fgred fggreen fgblue setrgbcolor
dup true exch 1 0 0 -1 0 6 -1 roll matrix astore
} def

/FSten {
dup 3 -1 roll dup 4 1 roll exch
newpath
0 0 moveto
dup 0 exch lineto
exch dup 3 1 roll exch lineto
0 lineto
closepath
bgred bggreen bgblue setrgbcolor
eofill
SSten
} def

/Rast {
exch dup 3 1 roll 1 0 0 -1 0 6 -1 roll matrix astore
} def

%%EndProlog

%I Idraw 10 Grid 8 8 

%%Page: 1 1

Begin
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.799705 0 0 0.799705 0 0 ] concat
/originalCTM matrix currentmatrix def

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 1 0 0 1 187 27 ] concat

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.848558 -0.529101 0.529101 0.848558 -209.237 61.5208 ] concat
%I
257 639 335 654 Rect
End

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.627119 0 0 0.627119 144.101 178.227 ] concat

Begin %I MLine
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.460478 0.00461056 -0.00488141 0.434928 169.289 421.089 ] concat
%I 8
178 165
242 165
258 149
274 165
338 165
306 101
210 101
178 165
8 MLine
%I 1
End

Begin %I Rect
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ -0.456464 0 0 -0.904242 625.776 1033.76 ] concat
%I
380 391 604 615 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.921007 0 0 0.869904 47.0602 134.772 ] concat
%I
220 300 306 358 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.921007 0 0 0.869904 45.2182 259.168 ] concat
%I
220 300 306 358 Rect
End

Begin %I Rect
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.460504 0 0 0.434952 63.6383 411.836 ] concat
%I
380 391 604 615 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1.02058 0 0 0.845399 29.5361 139.293 ] concat
%I
178 222 361 291 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.898544 0 0 0.966886 51.6652 53.0742 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.898544 0 0 0.168861 53.0355 201.786 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.119482 0 0 0.882156 518.531 129.865 ] concat
%I
178 222 361 291 Rect
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
1 SetP
%I t
[ 0.562022 0 0 0.530837 268.693 201.74 ] concat
%I
348 295 160 160 Elli
End

Begin %I Rect
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 2.81968e-17 0.434952 -0.460504 2.66322e-17 698.673 245.249 ] concat
%I
218 445 442 557 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.854755 -0 -0 0.802905 73.1837 146.241 ] concat
%I
161 149 572 679 Rect
End

End %I eop

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f -*-helvetica-bold-r-normal-*-14-*-*-*-*-*-*-*
Helvetica-Bold 14 SetF
%I t
[ 1 0 0 1 311 575 ] concat
%I
[
(IMEM)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f -*-helvetica-bold-r-normal-*-14-*-*-*-*-*-*-*
Helvetica-Bold 14 SetF
%I t
[ 1 0 0 1 373 561 ] concat
%I
[
(DMEM)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f -*-helvetica-bold-r-normal-*-14-*-*-*-*-*-*-*
Helvetica-Bold 14 SetF
%I t
[ 1 0 0 1 305 528 ] concat
%I
[
(REGS)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f -*-helvetica-bold-r-normal-*-14-*-*-*-*-*-*-*
Helvetica-Bold 14 SetF
%I t
[ 1 0 0 1 313 486 ] concat
%I
[
(ALU)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f -*-helvetica-bold-r-normal-*-14-*-*-*-*-*-*-*
Helvetica-Bold 14 SetF
%I t
[ 1 0 0 1 309 449 ] concat
%I
[
(CL)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f -*-helvetica-bold-r-normal-*-14-*-*-*-*-*-*-*
Helvetica-Bold 14 SetF
%I t
[ 1 0 0 1 424 431 ] concat
%I
[
(SMEM)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f -*-helvetica-bold-r-normal-*-14-*-*-*-*-*-*-*
Helvetica-Bold 14 SetF
%I t
[ 1 0 0 1 408 384 ] concat
%I
[
(SWITCH)
] Text
End

End %I eop

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 1 0 0 1 -16 -80 ] concat

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t u

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.202073 0 0 0.202073 325.145 343.604 ] concat

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.92494 0 0 0.712121 -123.562 225.156 ] concat
%I
178 222 361 291 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.867558 -87.0844 133.414 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.164366 -85.9075 261.984 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.153929 0 0 0.743623 304.758 217.078 ] concat
%I
178 222 361 291 Rect
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
1 SetP
%I t
[ 0.482702 0 0 0.455918 99.3134 274.726 ] concat
%I
348 295 160 160 Elli
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.73412 0 0 0.689588 -68.6029 227.06 ] concat
%I
161 149 572 679 Rect
End

End %I eop

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.202073 0 0 0.202073 259.633 343.604 ] concat

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.92494 0 0 0.712121 -123.562 225.156 ] concat
%I
178 222 361 291 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.867558 -87.0844 133.414 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.164366 -85.9075 261.984 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.153929 0 0 0.743623 304.758 217.078 ] concat
%I
178 222 361 291 Rect
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
1 SetP
%I t
[ 0.482702 0 0 0.455918 99.3134 274.726 ] concat
%I
348 295 160 160 Elli
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.73412 0 0 0.689588 -68.6029 227.06 ] concat
%I
161 149 572 679 Rect
End

End %I eop

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.202073 0 0 0.202073 194.122 343.604 ] concat

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.92494 0 0 0.712121 -123.562 225.156 ] concat
%I
178 222 361 291 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.867558 -87.0844 133.414 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.164366 -85.9075 261.984 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.153929 0 0 0.743623 304.758 217.078 ] concat
%I
178 222 361 291 Rect
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
1 SetP
%I t
[ 0.482702 0 0 0.455918 99.3134 274.726 ] concat
%I
348 295 160 160 Elli
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.73412 0 0 0.689588 -68.6029 227.06 ] concat
%I
161 149 572 679 Rect
End

End %I eop

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.202073 0 0 0.202073 128.61 343.604 ] concat

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.92494 0 0 0.712121 -123.562 225.156 ] concat
%I
178 222 361 291 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.867558 -87.0844 133.414 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.164366 -85.9075 261.984 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.153929 0 0 0.743623 304.758 217.078 ] concat
%I
178 222 361 291 Rect
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
1 SetP
%I t
[ 0.482702 0 0 0.455918 99.3134 274.726 ] concat
%I
348 295 160 160 Elli
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.73412 0 0 0.689588 -68.6029 227.06 ] concat
%I
161 149 572 679 Rect
End

End %I eop

End %I eop

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 1 0 0 1 0.000169277 78.7099 ] concat

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.202073 0 0 0.202073 325.145 343.604 ] concat

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.92494 0 0 0.712121 -123.562 225.156 ] concat
%I
178 222 361 291 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.867558 -87.0844 133.414 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.164366 -85.9075 261.984 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.153929 0 0 0.743623 304.758 217.078 ] concat
%I
178 222 361 291 Rect
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
1 SetP
%I t
[ 0.482702 0 0 0.455918 99.3134 274.726 ] concat
%I
348 295 160 160 Elli
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.73412 0 0 0.689588 -68.6029 227.06 ] concat
%I
161 149 572 679 Rect
End

End %I eop

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.202073 0 0 0.202073 259.633 343.604 ] concat

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.92494 0 0 0.712121 -123.562 225.156 ] concat
%I
178 222 361 291 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.867558 -87.0844 133.414 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.164366 -85.9075 261.984 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.153929 0 0 0.743623 304.758 217.078 ] concat
%I
178 222 361 291 Rect
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
1 SetP
%I t
[ 0.482702 0 0 0.455918 99.3134 274.726 ] concat
%I
348 295 160 160 Elli
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.73412 0 0 0.689588 -68.6029 227.06 ] concat
%I
161 149 572 679 Rect
End

End %I eop

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.202073 0 0 0.202073 194.122 343.604 ] concat

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.92494 0 0 0.712121 -123.562 225.156 ] concat
%I
178 222 361 291 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.867558 -87.0844 133.414 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.164366 -85.9075 261.984 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.153929 0 0 0.743623 304.758 217.078 ] concat
%I
178 222 361 291 Rect
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
1 SetP
%I t
[ 0.482702 0 0 0.455918 99.3134 274.726 ] concat
%I
348 295 160 160 Elli
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.73412 0 0 0.689588 -68.6029 227.06 ] concat
%I
161 149 572 679 Rect
End

End %I eop

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.202073 0 0 0.202073 128.61 343.604 ] concat

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.92494 0 0 0.712121 -123.562 225.156 ] concat
%I
178 222 361 291 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.867558 -87.0844 133.414 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.164366 -85.9075 261.984 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.153929 0 0 0.743623 304.758 217.078 ] concat
%I
178 222 361 291 Rect
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
1 SetP
%I t
[ 0.482702 0 0 0.455918 99.3134 274.726 ] concat
%I
348 295 160 160 Elli
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.73412 0 0 0.689588 -68.6029 227.06 ] concat
%I
161 149 572 679 Rect
End

End %I eop

End %I eop

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 1 0 0 1 0.00015831 157.42 ] concat

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.202073 0 0 0.202073 325.145 343.604 ] concat

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.92494 0 0 0.712121 -123.562 225.156 ] concat
%I
178 222 361 291 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.867558 -87.0844 133.414 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.164366 -85.9075 261.984 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.153929 0 0 0.743623 304.758 217.078 ] concat
%I
178 222 361 291 Rect
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
1 SetP
%I t
[ 0.482702 0 0 0.455918 99.3134 274.726 ] concat
%I
348 295 160 160 Elli
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.73412 0 0 0.689588 -68.6029 227.06 ] concat
%I
161 149 572 679 Rect
End

End %I eop

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.202073 0 0 0.202073 259.633 343.604 ] concat

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.92494 0 0 0.712121 -123.562 225.156 ] concat
%I
178 222 361 291 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.867558 -87.0844 133.414 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.164366 -85.9075 261.984 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.153929 0 0 0.743623 304.758 217.078 ] concat
%I
178 222 361 291 Rect
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
1 SetP
%I t
[ 0.482702 0 0 0.455918 99.3134 274.726 ] concat
%I
348 295 160 160 Elli
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.73412 0 0 0.689588 -68.6029 227.06 ] concat
%I
161 149 572 679 Rect
End

End %I eop

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.202073 0 0 0.202073 194.122 343.604 ] concat

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.92494 0 0 0.712121 -123.562 225.156 ] concat
%I
178 222 361 291 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.867558 -87.0844 133.414 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.164366 -85.9075 261.984 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.153929 0 0 0.743623 304.758 217.078 ] concat
%I
178 222 361 291 Rect
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
1 SetP
%I t
[ 0.482702 0 0 0.455918 99.3134 274.726 ] concat
%I
348 295 160 160 Elli
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.73412 0 0 0.689588 -68.6029 227.06 ] concat
%I
161 149 572 679 Rect
End

End %I eop

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.202073 0 0 0.202073 128.61 343.604 ] concat

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.92494 0 0 0.712121 -123.562 225.156 ] concat
%I
178 222 361 291 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.867558 -87.0844 133.414 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.164366 -85.9075 261.984 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.153929 0 0 0.743623 304.758 217.078 ] concat
%I
178 222 361 291 Rect
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
1 SetP
%I t
[ 0.482702 0 0 0.455918 99.3134 274.726 ] concat
%I
348 295 160 160 Elli
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.73412 0 0 0.689588 -68.6029 227.06 ] concat
%I
161 149 572 679 Rect
End

End %I eop

End %I eop

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 1 0 0 1 0.000169754 236.13 ] concat

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.202073 0 0 0.202073 325.145 343.604 ] concat

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.92494 0 0 0.712121 -123.562 225.156 ] concat
%I
178 222 361 291 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.867558 -87.0844 133.414 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.164366 -85.9075 261.984 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.153929 0 0 0.743623 304.758 217.078 ] concat
%I
178 222 361 291 Rect
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
1 SetP
%I t
[ 0.482702 0 0 0.455918 99.3134 274.726 ] concat
%I
348 295 160 160 Elli
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.73412 0 0 0.689588 -68.6029 227.06 ] concat
%I
161 149 572 679 Rect
End

End %I eop

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.202073 0 0 0.202073 259.633 343.604 ] concat

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.92494 0 0 0.712121 -123.562 225.156 ] concat
%I
178 222 361 291 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.867558 -87.0844 133.414 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.164366 -85.9075 261.984 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.153929 0 0 0.743623 304.758 217.078 ] concat
%I
178 222 361 291 Rect
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
1 SetP
%I t
[ 0.482702 0 0 0.455918 99.3134 274.726 ] concat
%I
348 295 160 160 Elli
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.73412 0 0 0.689588 -68.6029 227.06 ] concat
%I
161 149 572 679 Rect
End

End %I eop

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.202073 0 0 0.202073 194.122 343.604 ] concat

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.92494 0 0 0.712121 -123.562 225.156 ] concat
%I
178 222 361 291 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.867558 -87.0844 133.414 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.164366 -85.9075 261.984 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.153929 0 0 0.743623 304.758 217.078 ] concat
%I
178 222 361 291 Rect
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
1 SetP
%I t
[ 0.482702 0 0 0.455918 99.3134 274.726 ] concat
%I
348 295 160 160 Elli
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.73412 0 0 0.689588 -68.6029 227.06 ] concat
%I
161 149 572 679 Rect
End

End %I eop

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.202073 0 0 0.202073 128.61 343.604 ] concat

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.92494 0 0 0.712121 -123.562 225.156 ] concat
%I
178 222 361 291 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.867558 -87.0844 133.414 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.771729 0 0 0.164366 -85.9075 261.984 ] concat
%I
451 367 531 661 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.153929 0 0 0.743623 304.758 217.078 ] concat
%I
178 222 361 291 Rect
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
1 SetP
%I t
[ 0.482702 0 0 0.455918 99.3134 274.726 ] concat
%I
348 295 160 160 Elli
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 0.73412 0 0 0.689588 -68.6029 227.06 ] concat
%I
161 149 572 679 Rect
End

End %I eop

End %I eop

End %I eop

Begin %I Line
%I b 65535
3 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 -0 -0 1 12 84 ] concat
%I
329 446 443 470 Line
%I 1
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 -0 -0 1 340 294 ] concat
%I
125 251 144 267 Rect
End

Begin %I Rect
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 -0 -0 1 340 294 ] concat
%I
242 127 263 142 Rect
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f -*-helvetica-medium-r-normal-*-12-*-*-*-*-*-*-*
Helvetica 12 SetF
%I t
[ 1 0 0 1 469 556 ] concat
%I
[
(PC)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f -*-helvetica-medium-r-normal-*-12-*-*-*-*-*-*-*
Helvetica 12 SetF
%I t
[ 1 0 0 1 585 433 ] concat
%I
[
(PC)
] Text
End

Begin %I BSpl
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 -0 -0 1 340 294 ] concat
%I 4
132 267
132 297
138 304
140 305
4 BSpl
%I 1
End

Begin %I BSpl
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 -0 -0 1 340 294 ] concat
%I 4
250 142
251 169
261 174
267 173
4 BSpl
%I 1
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f -*-helvetica-bold-r-normal-*-14-*-*-*-*-*-*-*
Helvetica-Bold 14 SetF
%I t
[ 1 0 0 1 260 618 ] concat
%I
[
(RawTile)
] Text
End

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 1 0 0 1 -97 -26 ] concat

Begin %I BSpl
%I b 65535
3 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1.00285 -0 -0 1.00285 180.496 225.682 ] concat
%I 8
172 450
173 474
174 474
173 464
177 462
182 463
182 470
181 475
8 BSpl
%I 1
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f -*-times-bold-r-normal-*-14-*-*-*-*-*-*-*
Times-Bold 14 SetF
%I t
[ 1.82222 0 0 1.82222 302.322 708.344 ] concat
%I
[
(Raw  P)
] Text
End

End %I eop

End %I eop

showpage

%%Trailer

end

%%EndDocument

 endTexFig
 2040 1148 a Fh(Figure)20 b(1:)25 b(Ra)o(w)p Fe(\026)p
Fh(P)19 b(composition.)26 b(The)20 b(system)g(is)f(made)i(up)f(of)g
(multiple)2040 1231 y(tiles.)56 b(Each)30 b(tile)f(contains)i(a)f
(processor)h(pipeline)f(with)g(an)g(inte)o(grated)2040
1314 y(netw)o(ork)20 b(interf)o(ace)f(and)h(instruction)f(and)h(data)f
(memories.)2040 1548 y(three)28 b(features)f(that)g(are)h(in)m(v)n
(aluable)g(for)f(b)o(uilding)h(a)f(dependence)j(han-)2040
1631 y(dling)24 b(system.)36 b(First,)23 b(the)g(lo)n(w)g(latenc)o(y)h
(communication)h(path)f(between)2040 1714 y(tiles)j(is)g(important)g
(for)g(transferring)h(true-dependences)i(that)d(lie)g(along)2040
1797 y(the)d(critical)f(path.)39 b(Second,)26 b(the)e(independent)i
(control)e(on)h(each)g(tile)e(al-)2040 1880 y(lo)n(ws)g(each)h
(processing)g(element)f(to)g(be)h(in)m(v)o(olv)o(ed)f(in)g(a)g(dif)n
(ferent)g(part)g(of)2040 1963 y(the)f(computation.)33
b(In)21 b(particular)m(,)h(some)g(tiles)f(can)i(be)f(dedicated)g(to)g
(per)o(-)2040 2046 y(forming)d(memory)h(dependence)h(speculation)f
(while)e(other)h(tiles)f(actually)2040 2129 y(perform)25
b(computation)h(for)f(the)g(application.)41 b(Finally)-5
b(,)26 b(the)f(man)o(y)g(inde-)2040 2212 y(pendent)d(memory)g(ports)f
(a)o(v)n(ailable)g(on)g(a)g(Ra)o(w)f(machine)i(allo)n(w)f(the)g(high)
2040 2295 y(bandwidth)h(required)f(for)g(supporting)h(both)f(a)f
(cactus)h(stack)g(and)h(parallel)2040 2378 y(access)e(to)e(global)i
(data)f(structures.)2040 2609 y Fi(3)91 b(Design)2040
2769 y Fh(This)21 b(section)i(describes)f(the)g(design)g(of)g(the)g
(SUDS)e(system.)32 b(Achie)n(ving)2040 2852 y(the)20
b(best)h(total)e(system)i(performance)g(requires)g(e)o(xposing)g
(enough)h(appli-)2040 2935 y(cation)28 b(parallelism)g(to)f(use)h(all)f
(of)h(the)g(system)g(resources)g(while)g(mini-)2040 3018
y(mizing)g(o)o(v)o(erheads)h(in)f(the)g(runtime)g(system.)49
b(W)-6 b(e)28 b(ha)o(v)o(e)g(achie)n(v)o(ed)h(this)2040
3101 y(goal)d(using)h(a)f(number)g(of)g(techniques.)45
b(First,)26 b(we)g(ha)o(v)o(e)g(tried)f(to)h(do)g(as)2040
3184 y(much)21 b(w)o(ork)h(in)e(the)h(compiler)g(as)f(possible)i(to)e
(relie)n(v)o(e)h(unnecessary)h(run-)2040 3267 y(time)j(costs.)44
b(F)o(or)25 b(e)o(xample,)i(most)f(of)g(the)f(w)o(ork)h(of)g(memory)g
(renaming)2040 3350 y(in)h(our)g(system)g(is)g(done)h(in)f(the)g
(compiler)l(.)47 b(In)27 b(addition,)i(when)e(choos-)2040
3433 y(ing)18 b(protocols)h(we)e(ha)o(v)o(e)h(leaned)g(to)n(w)o(ards)h
(those)f(that)f(ha)o(v)o(e)h(lo)n(w)g(o)o(v)o(erhead)2040
3516 y(per)25 b(in)m(v)o(ocation,)h(rather)f(than)f(those)h(that)g(e)o
(xpose)g(the)g(most)g(application)2040 3599 y(parallelism.)d(Finally)-5
b(,)16 b(we)f(ha)o(v)o(e)h(found)h(that)e(the)h(handling)h(of)e(data)h
(depen-)2040 3682 y(dences)j(can)g(be)f(di)n(vided)i(into)e(three)g
(primiti)n(v)o(e)g(runtime)h(operations,)g(f)o(ast-)2040
3765 y(forw)o(arding)29 b(of)f(true)g(dependences,)33
b(renaming)c(of)f(f)o(alse)g(dependences,)2040 3848 y(and)33
b(memory)h(dependence)g(speculation)g(for)e(potential)h(dependences.)
2040 3931 y(The)20 b(separation)h(of)f(renaming)g(from)g(memory)h
(dependence)h(speculation)2040 4014 y(has)d(e)o(xposed)i(man)o(y)e
(simpli\002cations)g(in)g(the)g(underlying)h(system.)2040
4236 y Fi(3.1)90 b(Chunk)24 b(based)g(w)o(or)q(k)i(distr)q(ib)n(ution)
2040 4370 y Fh(The)k(SUDS)e(system)i(partitions)g(the)g(processing)h
(elements)f(of)g(the)g(un-)2040 4453 y(derlying)f(hardw)o(are)f(system)
g(into)g(tw)o(o)g(groups.)51 b(Some)27 b(portion)i(of)e(the)2040
4536 y(elements)e(are)g(dedicated)i(as)e Fg(compute)g
Fh(nodes.)43 b(The)25 b(rest)f(are)h(dedicated)2040 4619
y(as)e Fg(memory)h Fh(nodes.)36 b(One)24 b(of)f(the)g(compute)h(nodes)g
(is)f(designated)h(as)f(the)2040 4702 y Fg(master)17
b Fh(node,)g(the)g(rest)f(are)g(designated)i(as)f Fg(work)o(er)o(s)g
Fh(and)g(sit)f(in)g(a)h(dispatch)2040 4785 y(loop)g(w)o(aiting)f(for)g
(commands)i(from)e(the)g(master)l(.)22 b(The)17 b(master)f(node)h(is)f
(re-)2040 4868 y(sponsible)k(for)f(running)h(all)e(the)h(sequential)h
(code.)2152 4951 y(When)25 b(a)f(parallel)g(loop)h(is)f(encountered)i
(the)e(master)g(is)g(responsible)2040 5034 y(for)k(telling)g(all)g(the)
h(w)o(ork)o(ers)g(which)g(loop)g(to)f(run.)52 b(Each)28
b(of)h(the)f(com-)2040 5117 y(pute)20 b(nodes)h(is)e(responsible)i(for)
f(running)h(a)e(single)h(iteration)g(of)f(the)h(loop.)2040
5200 y(W)-6 b(e)21 b(call)f(the)i(set)e(of)h(iterations)g(running)i(in)
e(parallel)f(a)h Fg(c)o(hunk)p Fh(.)31 b(The)21 b(com-)2040
5283 y(pute)i(nodes)g(each)g(run)f(a)g(single)h(loop)g(iteration,)f
(and)h(then)f(all)g(the)g(nodes)2040 5366 y(synchronize)j(through)g
(the)f(master)f(node.)38 b(While)23 b(this)g(synchronization)1922
5627 y(2)p eop
%%Page: 3 3
3 2 bop 491 452 a
 22876238 32680349 2565488 3946905 35982622 51309772 startTexFig
 491 452 a
%%BeginDocument: figs/code_diag.epsi
%!PS-Adobe-2.0 EPSF-1.2
%%Title: 
%%Creator: Frame 5.0
%%CreationDate: 23 19:55 tmp-fixfm-24548.ps
%%For:mfrank mfrank
%%Pages: 1
%%DocumentFonts:
%%BoundingBox: 39 60 547 780
%%BeginPreview: 509 719 1 719
% 0000000000000000000000000000000000000000000000e000001001c00008000000040000000200000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000100000400026000000b3000001020800200000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000003c38d8870022300383111801c1020c00200000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000106c60813f2230008c11180047cf8400200000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000104440813f2200008c11000041020400600000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000010444081002630008313180041020400200000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000003c38f087c01c2003e0b91001f1020800200000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000040000020000000100000000800200000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000040000000200000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000600600000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000070400200000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000660000030436200000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000002203f0008414200000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000002203f0078418200000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000220000044434200000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000003e00000ce436200000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000400200000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000600600000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000001b00c00c18000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000381100800408000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000001811e086c408000019800000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000411b082840803f008800000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000003c111083040803f008800000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000221110868408000008800000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000006713e086c40800000f800000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000001000800408000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000001800c00c18000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000200400000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000360000074436600000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000001403f00cc414200000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000001803f0084418200000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000003400000cc434200000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000036000007c436400000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000004200400000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000040207e00000010020000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000080204000000010020000000001000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000080104000000410020002010003000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000008e107df397e793c234d3c1e7fb000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000821044609224d7c2430a612fe1000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000008a10406292245602430a212c39000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000009a1042a692245642679a212cc9000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000008f107ebbfba79b833cf3c12779800000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000040200000000400000002000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000040200000000400000002000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000c00000006000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000001f768df98000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000001532852bf000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000001553052a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000377907398000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000060000000000000003ffffc00000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000003fc007f00000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000aaaaa80000000000f00000380000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000015000150000000003c000000c0000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000a000000a00000000e000000040000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000014000000500000001c000000060000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000080000000880000070000000060000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000100000000500000de00000000200000000007fffffffffffffffffffffe000000000ffffffffffffffffffffffc00000
% 03ffffffffffffffffffffff0000000027fffffffabfffffffffffff820000000000400000000000000000000020000000008000000000000000000000400000
% 02000000000000000000000100000000440000000540001f00000000830000000000400000000000000000000020000000008000000000000000000000400000
% 020000000000000000000001000000002400000002a0003f00000000830000000000400000000000000000000020000000008000000000000000000000400000
% 02000000000000000000000100000000440000000150007f00000000830000000000400000000000000000000020000000008000000000000000000000400000
% 02000000000000000000000100000000840000000020006000000000830000000000400000000000000000000020000000008000000000000000000000400000
% 02000000000000000000000100000000440000000000000000000000830000000000400010040000000000000020000000008000200800000000000000400000
% 0200000000061806000000010000000084000000000c300c00000000830000000000400030ff01b000000000002000000000800061fe03600000000000400000
% 020003607c0310b20000000100000001046006c0f8062164000000008300000000004000101400900000000000200000000080002028010000007fffffe00000
% 02000120000510e20000000100000000847c0240000a21c40000000083000000000040001054009000000000002000000000800020a801c0000ffffffffc0000
% 020001207c0790e2000000010000000104ff0240f80f21c40000000083000000000040003db700f00000000000200000000080007b6e008000380000004e0000
% 020001e0000d91b200000001000080020fff83c0001b2364000000008300000000004000000000000000000000200000000080000000000001b0000000460000
% 020000000000180600000001000200013c7c00000000300c000000008300000000004000000000000000000000200000000080000000000001e0000000420000
% 0200000000000000000000010e77800274400000000000000000000083000000000040000000000000000000002000000000e0002a00800003c0000000420000
% 0200000000000000000000010652b001c4000000000000000000000083000000000040000000000000000000002000000000c0155555400003e0000000420000
% 0200000000000000000000010a528007040000000000000000000000830000000000400000000000000000000020000000018020000aa0000780000000420000
% 0200000000000000000000010f52801c04000000000000000000000083000000000040000000000000000000002000000003c040000154000e00000000420000
% 0200000000000000000000010000007a0400000000000000000000008300000000004000000000c300c00000002000000003c0800002ab860580000000420000
% 02000183606030c000000001000003e404000306c18061800000000083000000000040006c0f806216400000002000000001c100d81f00c42c80000000420000
% 020000c2384590403e0d800100001f0004000184710b2080f81b00008300000000004000240000a21c4000000020000000068200400001443880000000420000
% 0200014224471040000480010007f80404000284490e2080000900008300000000004000240f80f21c4000000020000000038400701f01e43880000000420000
% 020001e2244710403e0480013fff0008040003c4490e2080f809000083000000000040003c0001b23640000000200000001c8800200003646c80000000420000
% 02000362784d9040000787ffff000004040006c4f11b2080000f000083000000000040000000000300c000000020000000179000000000060180000000420000
% 02000003006030c00000000100000008040000060180618000000000830000000000400000000000000000000020000000188800000000000000000000460000
% 02000000000000000000000100000000040000000000000000000000830000000000400000000000000000000020000000ce9000000000000000000000460000
% 02000200000000000000000100000008040000000000000000000000830000000000400000000000000000000020000000eaa000000000000000000000460000
% 0200040000000000000000010000001004000000000000000000000083000000000040000000000000000000002000000038c000000000000000000000460000
% 02000800000000000000000100000008040000000000000000000000830000000000400000000000000000000020000000008000000000000000000000460000
% 020010000000000000000001000000100400000000000000000000008300000000004000306c0c0618000000002000000100400060d8300c3000000000460000
% 020020000000080400000001000000200400000000001008000000008300000000004000184708b20807c1b00020000000808000308e2164101f036000460000
% 020041607c0790b20000000100000010040002c0f80f2164000000008300000000004000284488e2080000900020000002c10000508921c41000010000460000
% 020081c0000890e2000000010000002004000380001121c40000000083000000000040003c4488e20807c0900020000007c28000788921c4101f01c000460000
% 020101c07c0890e2000000010000000004000380f81121c40000000082000000000040006c4f09b2080000f00020000000208000d89e23641000008000460000
% 020a0360000799b20000000100000020040006c0000f336400000000820000000000400000600c0618000000002000000422800000c0300c3000000000460000
% 0214000000008804000000010000004004000000000110080000000086000000000040000000000000000000002000000ba48000000000000000000000460000
% 0228007e0003000000000001000000200400000000060000000000008600000000004000000000c0000000000020000009888000000000000000000000460000
% 0250000fc000000000000001000000400400000000000000000000008c00000000004000400000e0000000000020000003108000000000000000000000460000
% 02800000fe00000000000001000000000400000000000000000000008c000000000040008000007000000000002000003a088000000000000000000000440000
% 030000000fe00000000000011000004004000000000000000000000098000000000040010000003800000000002000000c108000000000000000000000440000
% 0200000000fe00000000000133f60080040000000000000000000000b0000000000040020000000f0080000000200000742080000000000201000000004c0000
% 040000000007f00000000001125fc040040000000000000000000000e0000000000040012c0f80f7164000000020000098408000581f01e42c800000004c0000
% 0a00000000007f800000000112580080040000000000000000000003c00000000000400238000113dc40000000200000c8208000700002243880000000580000
% 12000000000003fe000000011676000004000000000000000000001f8000000000004004380f81127c4000000020000070408000701f02243880000000780000
% 220000000000001ff8000001000000800400000000000000000007f880000000000040086c0000f33e4000000020000010808000d80001e66c80000000700000
% 12000000000000003fff00010000010004000000000000000007ff80800000000000400000000011078000000020000001008000000000220100000001c00000
% 2200000000000000000fffffffffffffffffffffffffffffffffc00080000000000040080000006001f000000020000002008000000000c000000000ff400000
% 4200000000000000000000010000010004fffffff800000000000000800000000000401000000000003e000000207ffffffffffffffffffffffffffff0400000
% 020000000000000000000001000002000400000000000000000000008000000000004020000000000007ffffffffffc0020080000000007ffff0000000400000
% 4200000000000000000000010000000004000000000000000000000080000000000040100000000000001f800020000004008000000000000000000000400000
% 82000000000000000000000100000200040000000000000000000000800000000000402000000000000000000024000008008000000000000000000000400000
% 4200000000000000000000010000040004000000000000000000000080000000000040400000000000000000002cfd8010008000000000000000000000400000
% 8200000000000000000000010000080004000000000000000000000080000000000040200000000000000000002497f008008000000000000000000000400000
% 42000000000000000000000100000400040000000000000000000000800000000000404000000000000000000024960010008000000000000000000000400000
% 820000000000000000000001000008000400000000000000000000008000000000004000000000000000000000259d8020008000000000000000000000400000
% 42000000000000000000000100001000040000000000000000000000800000000000404000000000000000000020000040008000000000000000000000400000
% 82000000000000000000000100002000040000000000000000000000800000000000400000000000000000000020000080008000000000000000000000400000
% 42000000000000000000000100004000040000000000000000000000800000000000404000000000000000000020000100008000000000000000000000400000
% 82000000000000000000000100008000040000000000000000000000800000000000402000000000000000000020000200008000000000000000000000400000
% 42000000000000000000000100010000040000000000000000000000800000000000401000000000000000000020000400008000000000000000000000400000
% 220000000000000000000001000a000007ffffffffffffffffffffff8000000000007febffffffffffffffffffe000280000ffffffffffffffffffffffc00000
% 53ffffffffffffffffffffff00140000000000000000000000000000000000000000000500000000000000000000005000000000000000000000000000000000
% 0a000000000000000000000002a000000000000000000000000000000000000000000000a0000000000000000000028000000000000000000000000000000000
% 05500000000000000000000555000000000000000000000000000000000000000000000055000000000000000000540000000000000000000000000000000000
% 00aaaaaaaaaaaaaaaaaaaaaa80000000000000000000000000000000000000000000000002aaa8000000000000aaa00000000000000000000000000000000000
% 00000055555555555000000000000000000000000000000000000000000000000000000000015555555555555550000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000004040020f00000000000400000000440040000001000000080200000010000000
% 00009040f80000002000000010000000000900000001000001000000000000008040060880000000000000008000400000008009000000400200000010000000
% 00011040840000002000000000010000000800000080200008000000000000008020070980810040000040018000400004018019000010c00201002010100000
% 00011020820200402020000002030000000800002180601018004000000000008f20091f9ea15e79cbfc79f19a0f4cbfc79d9e19e7871ed81e79e7bcf3de79e0
% 00011e2082f3cf79e7bcf3fc33c3249a0e7938f7bd836795db1a7bc00000000090200908be813e4849144b20a11f44914484be092f81124822f93fa517d283e0
% 0001132083f27f4a2fa507f0124124a10289090fa4812f9049214b000000000090200f88b081304949144960a11844914494b0092c05124ba2c11c2516128300
% 000111208382384a2c25061c12411f210a89290c24812c11492149c00000000099201088b281324b491449c0b319449144b4b2092c8d124832c91ca59652cb20
% 000113208592394b2ca5966412411b331ac9699ca4812c9349334a40000000008e2019ccdcc19c49fdd449e0de0e65dd449edc0d270792681f71e724fb9271c0
% 00011e20f8e3ce49f724e3bc1241921e0f7d3ce724c13719ed1e4bc0000000004040000000000000000000700000000000000000000000000001000000000000
% 00008040000200000000000000000000000100000000000000000000000000004040000000000000000002200000000000000000000000000001000000000000
% 00008040000200000000000000000000000500000000000000000000000000000000000000000000000001c00000000000000000000000000003000000000000
% 00000000000600000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000ffffffffffffffffffffffff00000ffffffffffffffffffffffff8000000000007ffffffffffffffffffffffff00000ffffffffffffffffffffffffc00000
% 00080000000000000000000000100000800000000000000000000000800000000000400000000000000000000000100000800000000000000000000000400000
% 00080000000000000000000000100000800000000000000000000000800000000000400000000000000000000000100000800000000000000000000000400000
% 00080000000000000000000000100000800000000000000000000000800000000000400000000000000000000000100000800000000000000000000000400000
% 00080000000000000000000000100000800000000000000000000000800000000000400000000000000000000000100000800000000000000000000000400000
% 00080000000000000000000000100000800000000000000000000000800000000000400000000000000000000000100000800000000000000000000000400000
% 00080000000000000000000000100000800000000000000000000000800000000000400000000000000000000000100000800000000000000000000000400000
% 00080000000000000000000000100000800000000000000000000000800000000000400000000000000000000000100000800000000000000000000000400000
% 00080000000000000000000000100000800000000000000000000000800000000000400000000000000000000000100000800000000000000000000000400000
% 00081004000000000000000000100000808040000000000000000000800000000000404010000000000000000000100000808040000008000000000000400000
% 000831ef01b000000000000000100000818ff01b000000000000000080000000000040c7bc0d8003c00000000000100000818ff01b001e000000000000400000
% 00081024009000000000000000100000808140080000000000000000800000000000404090048003800000000000100000808140080008000000000000400000
% 000810a40090000000000000001000008085400e0000000000000000800000000000404290048000c000000000001000008085400e0008000000000000400000
% 00083f6700f00000000000000010000081fb7004000000000000000080000000000040fd9c079803c0000000000010000081fb7004300e000000000000400000
% 00080000000000000000000000100000800000000000000000000000800000000000400000001000000000000000100000800000002000000000000000400000
% 00080000000000000000000000100000800000000000000000000000800000000000400000000000000000000000100000800000000000000000000000400000
% 00080000000000000000000000100000800000000000000000000000800000000000400000000000000000000000100000800000000000000000000000400000
% 00080000000000000000000000100000800000000000000000000000800000000000400000000000000000000000100000800000000000000000000000400000
% 0008000000000000000000000010000e800000000000000000000000800000000000400000000000000000000000100018800000000000000000000000400000
% 0008000000000000000000000010000fc0000000000000000000000080000000000040000000000000000000000010001f800000000000000000000000400000
% 0008000000000001180310800010003fe0000000000009801904000080000000000040000000000004c00c420000101fff810000000000098019040000400000
% 00082c0f80f73db208e73c40001001ff8160f80f39fb10873bc2000080000000000040f03e079cf6c8439cf10000107e1c83c0f80f39fb10873bc20000400000
% 000838000048c4820912104000100f8481c00004462810889102000080000000000040e00002231208444841000013c000810000044628108891020000400000
% 0008380f804fc0e209f2104000101c0081c0f8047e0e108f9102000080000000000040303e023f038847c84100001700008100f8047e0e108f91020000400000
% 00086c0000e738431ee71c40001030008360000e39c419e739c2000080000000000040f000071ce10cf39c7100001e000081c0000e39c419e739c20000400000
% 00080000000000010000008000106000800000000000080000040000800000000000400000000000040000020000180000800000000000080000040000400000
% 0008000000000000000000000010c000800000000000000000000000800000000000400000000000000000000000300000800000000000000000000000400000
% 00080000000000000000000000118000800000000000000000000000800000000000400000000000000000000000700000800000000000000000000000400000
% 00080000000000000000000000118000800000000000000000000000800000000000400000000000000000000000f00000800000000000000000000000400000
% 00080000000000000000000000130000800000000000000000000000800000000000400000000000000000000000d00000800000000000000000000000400000
% 00080000000000000000000000160000800000000000000000000000800000000000400000000000000000000001900000800000000000000000000000400000
% 0008000000c300c000000000001600008000000c180c000000000000800000000000400000000402000000000003100000800000000908000000000000400000
% 00086c0f80622c4000000000001c00008360f806116400000000000080000000000040b03e0788f10000000000061000008160f80f13c4000000000000400000
% 0008240000a2384000000000001c00008100050a11c400000000000080000000000040e0000888e100000000000e10000081c000111104000000000000400000
% 0008240f80f23840000000000018000081c2aa8f11c400000000000080000000000040e03e08883100000000000c10000081c0f8111104000000000000400000
% 00083c0001b26c4000000000001800008055541b136400000000000080000000000041b000078cf10000000000181000008360000f19c4000000000000400000
% 00080000000300c000000000001800008aa00000180c000000000000800000000000400000008402000000000030100000800000010808000000000000400000
% 00080000000000000000000000300000500000000000000000000000800000000000400000030000000000000060100000800000060000000000000000400000
% 00080000000000000000000000300002a000000000000000000000008000000000004000000000000000000000c0100000800000000000000000000000400000
% 00080000000000000000000000700005800000000000000000000000800000000000400000000000000000000180100000800000000000000000000000400000
% 00080000000000000000000000700008800000000000000000000000800000000000400000000000000000000700100000800000000000000000000000400000
% 00080000000000000000000000500010800000000000000000000000800000000000400000000000000000003e00100000800000000000000000000000400000
% 000830cc180630000000000000d000208186c0c03180000000000000800000000000400000310040308007fff800100000800000620080610001000000400000
% 0008188710b2100f81b0000000d0004080c4708b10807c0d8000000080000000000040f71ef21ec3dfe017e0000010000081ee79e43d8f3fc02c800000400000
% 0008288490e2100000900000019000208144488e108000040000000080000000000040e88312084452801c20000010000081d10a241091250038800000400000
% 00093c8490e2100f809000000190004081e4488e10807c0700000000800000000000403f8b12084452801c200000100000807f2a241091250038800000400000
% 000a6c8f11b2100000f00000011000808364f09b108000020000000080000000000040f736f31cf3f6e33620000010000081eed9e639ef6dc66c800000400000
% 000c00c0180630000000000003100100800600c03180000000000000800000000000400000010000400200400000100000800000020001000401000000400000
% 000a0000000000000000000003100080800000000000000000000000800000000000400000000001800000000000100000800000000006000000000000400000
% 000c0000000000000000000006100100800000000000000000000000800000000000400000000000000000000000100000800000000000000000000000400000
% 00080000000000000000000006100200800000000000000000000000800000000000400000000000000000000000100000800000000000000000000000400000
% 0004000000000000000000000c100100800000000000000000000000800000000000400000000000000000000000100000800000000000000000000000400000
% 0008000000000000000000000c100200800000000000000000000000800000000000400000000000000000000000100000800000000000000000000000400000
% 00100000000100800000000018100000800000000808000000000000800000000000400000060c030000000000001000008000000c190c000000000000400000
% 00082c0f80f22c4000000000181002008160f80f116400000000000080000000000041b03e0308f10000000000001000008360e80613c4000000000000400000
% 0018380001123840000000003010040081c0001111c40000000000008000000000004090000508e10000000000001000008100154a1104000000000000400000
% 0028380f81123840000000003010000081c0f81111c400000000000080000000000040903e07883100000000000010000081c0aaaf1104000000000000400000
% 00486c0000f36c4000000000601004008360000f1b6400000000000080000000000040f0000d88f10000000000001000008095451b11c4000000000000400000
% 002800000011008000000000c0100800800000010808000000000000800000000000400000000c0300000000000010000082a80000180c000000000000400000
% 004800000060000000000001c0100400800000060000000000000000800000000000400000000000000000000000100000950000000000000000000000400000
% 00880000000000000000000700100800800000000000000000000000800000000000400000000000000000000000100000a00000000000000000000000400000
% 00480000000000000000003e00101000800000000000000000000000800000000000400000000000000000000000100005800000000000000000000000400000
% 00880000000000000000fff800100800800000000000000000000000800000000000400000000000000000000000100008800000000000000000000000400000
% 01080000000000000000000000101000800000000000000000000000800000000000400000000000000000000000100050800000000000000000000000400000
% 008800000c20100c100010000010000080000062008061000100000080000000000040c3306018c00000000000001000208186c0c83180000000000000400000
% 01083dc7bc47b0f7bc0588000010100081ee79e43d8f3fc02c80000080000000000041621c4788403e06c000000010004080c4709e10807c0d80000000400000
% 02083a20c4421114900708000010200081d10a24109125003880000080000000000042a212470840000240000000100080814448881080000400000000400000
% 01080fe2c44211149007080000100000807f2a24109125003880000080000000000044f2124188403e024000000010010081e4488810807c0700000000400000
% 02083dcdbc673cfd9ccd88000010200081eed9e639ef6dc66c8000008000000000004bb23c4788400003c00000001002008364f08e1080000200000000400000
% 040800000020001000801000001040008000000200010004010000008000000000004403006018c0000000000000100400800600c03180000000000000400000
% 02080000000000600000000000100000800000000006000000000000800000000000480000000000000000000000100200800000000000000000000000400000
% 04080000000000000000000000104000800000000000000000000000800000000000500000000000000000000000100400800000000000000000000000400000
% 02080000000000000000000000108000800000000000000000000000800000000000200000000000000000000000100800800000000000000000000000400000
% 04080000000000000000000000110000800000000000000000000000800000000000400000000000000000000000100000800000000000000000000000400000
% 02080000000000000000000000120000800000000000000000000000800000000000800000000000000000000000100800800000000000000000000000400000
% 040ffffffffffffffffffffffff10000ffffffffffffffffffffffff8000000000017ffffffffffffffffffffffff01000ffffffffffffffffffffffffc00000
% 02000000000000000000000000020000000000000000000000000000000000000002000000000000000000000000002000000000000000000000000000000000
% 04000000000000000000000000140000000000000000000000000000000000000004000000000000000000000000004000000000000000000000000000000000
% 02000000000000000000000000280000000000000000000000000000000000000002000000000000000000000000002000000000000000000000000000000000
% 01000000000000000000000001400000000000000000000000000000000000000004000000000000000000000000004000000000000000000000000000000000
% 00a0000000000000000000002a800000000000000000000000000000000000000008000000000000000000000000008000000000000000000000000000000000
% 00554000000000000000005550000000000000000000000000000000000000000010000000000000000000000000010000000000000000000000000000000000
% 0000aaaaaaaaaaaaaaaaaaa8000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000540000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000800000000000000000000002aa00000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000005555555555555555555555554000000000000000000000000000000000000
% 0000000000180001800000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaa0000000000000000000000000000000000000000
% 00002090043c0003c000000048000040000000004000000200000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000040900c2200020000000040000240008000004000000200000000000000000000000180000000000000000000000000000000000000000000000000000000
% 000040880e26010200800020410006400190000040200402020000000000000002020083c0000000400202000000000040000000408002000010080000080000
% 00004788127e3d47b4a92e2bd9e7c679e1956783cf3cf79e7bcf3c00000000000402018220000002000000000040000040000000040002000090080000480000
% 0000488812227d0242892224492c824be0912f845f27f4a2fa507c0000000000040101c2601000860000002000c00400400000040c0002080190080400c80000
% 000048881f2261024287ca244925824b00912c74582384a2c25060000000000004790247e79434f6cbf6763cf8cd057bcb3cf0f5cd9e720f399e09e79fcf0000
% 00004c88212265026686da264927024b20912c86592394b2ca5964000000000004f902422f90429a49121225905084fc4941f10444a0120988920be4b2490000
% 000047c833b339833cc48f33e9278349c0d9e703ee3ce49f724e38000000000004c103e22c10428a49122224b05084c44941810444a05208a8920b0496490000
% 0000201000000000000000000001c0000000000000200000000000000000000004c904222c90668a49124224e05984ce4965919444b2d208e8920b249c490000
% 00002010000000000000000000088000000000000020000000000000000000000471067337183cf35dd27a24f06f0673ef38e0e6469c7b0f3cd20dc49e690000
% 00000000000000000000000000070000000000000060000000000000000000000202000000000080000000003800000000000000000000080000000007000000
% 00000000000000000000000000000000000000000000000000000000000000000202000000000080000000011000000000000000000000080000000022000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000018000000000e00000000000000000000018000000001c000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000fffffffffffffffffffffffffffffffffffffffffffffffffff00007ffffffffffffffffffffffffffffffffffffffffffffffffffc0000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000880200000000000000000000000000000000000000000000001000044010000002000000000000000000000000000000000000000040000000000
% 0000000000098f780d8007800000000000000000000000000000000000000100004c3fc06c007800000000000000000000000000000000000000040000000000
% 00000000000881200480070000000000000000000000000000000000000001000044050020002000000000000000000000000000000000000000040000000000
% 00000000000885200480018000000000000000000000000000000000000001000044150038002000000000000000000000000000000000000000040000000000
% 000000000009fb3807b007800000000000000000000000000000000000000100004f6dc011803800000000000000000000000000000000000000040000000000
% 00000000000800000020000000000000000000000000000000000000000001000040000001000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000118031080000000000000000000000000000001000041000000000004c00c82000000000000000000000000000000040000000000
% 0000000000083c0f80f73db208e73c40000000000000000000000000000001000043c07c07b8fd88471de1000000000000000000000000000000040000000000
% 00000000000838000048c48209121040000000000000000000000000000001000041000002451408488881000000000000000000000000000000040000000000
% 0000000000080c0f804fc0e209f21040000000000000000000000000000001000041007c027d07084f8881000000000000000000000000000000040000000000
% 0000000000083c0000e738431ee71c40000000000000000000000000000001000041c0000738e20cf71ce1000000000000000000000000000000040000000000
% 00000000000800000000000100000080000000000000000000000000000001000040000000000004000002000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000001008000000000000000000000000000000000000001000040000000088400000000000000000000000000000000000000040000000000
% 0000000000082c0f80f23c4000000000000000000000000000000000000001000041607c0791e200000000000000000000000000000000000000040000000000
% 00000000000838000112384000000000000000000000000000000000000001000041c00008908200000000000000000000000000000000000000040000000000
% 000000000008380f81120c4000000000000000000000000000000000000001000041c07c08908200000000000000000000000000000000000000040000000000
% 0000000000086c0000f33c400000000000000000000000000000000000000100004360000798e200000000000000000000000000000000000000040000000000
% 00000000000800000011008000000000000000000000000000000000000001000040000000880400000000000000000000000000000000000000040000000000
% 00000000000800000060000000000000000000000000000000000000000001000040000003000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000c20100c10001000000000000000000000000000000001000040000031004030800080000000000000000000000000000000040000000000
% 0000000000083dc7bc47b0f7bc058800000000000000000000000000000001000041e73cf23cc79fe01640000000000000000000000000000000040000000000
% 0000000000083a20c442111490070800000000000000000000000000000001000041c88512104892801c40000000000000000000000000000000040000000000
% 0000000000080fe2c4421114900708000000000000000000000000000000010000406f9512104892801c40000000000000000000000000000000040000000000
% 0000000000083dcdbc673cfd9ccd8800000000000000000000000000000001000041e76cf338f7b6e63640000000000000000000000000000000040000000000
% 00000000000800000020001000801000000000000000000000000000000001000040000001000080040080000000000000000000000000000000040000000000
% 00000000000800000000006000000000000000000000000000000000000001000040000000000300000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000c26306018c000020043060318300c220000000000000100004000003130c310c60000100118181861886108000000000000040000000000
% 0000000000083dc7bc441847888f8ef280411e020c23c42100000000000001000041e73cf220623c443e73d401087810311e2104000000000000040000000000
% 0000000000083a20c445284708a29ee2004122029423842100000000000001000041c8851228a210450af3900108881451082104000000000000040000000000
% 0000000000080fe2c4473c4188e6a232804122039e20c421000000000000010000406f951238f210471b10d40108881c79082104000000000000040000000000
% 0000000000083dcdbc676c4788efbef2d843de63b623c42100000000000001000041e76cf339b21c473ff3d6c11e7b1cd90e2104000000000000040000000000
% 000000000008000000200060180000001040004000300c2200000000000001000040000001000300c00000008100020001806108000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 0000000000080000000008c60c0618000082000000000000000000000000010000400000000026186418c0000210000000000000000000000000040000000000
% 0000000000086fe7b8fd908308f211f1dea1000000000000000000000000010000436fbce7ec440c4f0887cef288000000000000000000000000040000000000
% 0000000000082402451410a508e21453dc8100000000000000000000000001000041001118a045144408a15ee208000000000000000000000000040000000000
% 00000000000827e27d0710e788321cd446a100000000000000000000000001000041cf91f838471e4408e3623288000000000000000000000000040000000000
% 0000000000083c0738e218ed88f21df7deb1000000000000000000000000010000408038e71067364708e7fef2c8000000000000000000000000040000000000
% 0000000000080000000008000c060000000200000000000000000000000001000040000000002000601800000010000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000c26306c0c0618c00002002010030c3606018c0004200100004000003130c3306418c30000100100400c6198310c60001100040000000000
% 0000000000083dc7bc44184708f20887cef28023fc02062384788403641001000041e73cf220621c4f08423e73d4011ef008310e23c4201b1080040000000000
% 0000000000083a20c445284488e208a15ee2002390028a2244708401241001000041c8851228a2124408428af390011c400a5109210420081080040000000000
% 0000000000080fe2c4473c44883208e362328020d0038f22441884012410010000406f951238f2124408439b10d40106400e79092104200e1080040000000000
% 0000000000083dcdbc676c4f08f208e7fef2d823dc639b2784788461e41001000041e76cf339b23c470843bff3d6611e730ed91e21c421841080040000000000
% 0000000000080000002000600c061800000010200040003006018c400420010000400000010003006018c0000000410002000180300c61001100040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000800000000000000000000000000000000000000000000000001000040000000000000000000000000000000000000000000000000040000000000
% 00000000000fffffffffffffffffffffffffffffffffffffffffffffffffff00007ffffffffffffffffffffffffffffffffffffffffffffffffffc0000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000fffffffffffffffffffffffffffffffffffffffffffffffffff0000fffffffffffffffffffffffffffffffffffffffffffffffffff80000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800100000000000000000000000000000000000000000000001000080008000000000000000000000000000000000000000000000080000000000
% 00000000000806018009000080200000000000000000000000000000000001000080301800480004020000000000000000000000000000000000080000000000
% 0000000000084bb0980b8dec802000000000000000000000000000000000010000825d89805cde64020000000000000000000000000000000000080000000000
% 0000000000087a90bc0908be80200000000000000000000000000000000001000083d48bc0488af4020000000000000000000000000000000000080000000000
% 00000000000836b9d8098cec80200000000000000000000000000000000001000081b5dd804cce64020000000000000000000000000000000000080000000000
% 00000000000800000000000000200000000000000000000000000000000001000080000000000000020000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000008000000000000000000000000000000000000001000080000000000800000000000000000000000000000000000000080000000000
% 00000000000802400000000400022000000040082008000000048000000001000080120000000040002200000002008100800000002400000000080000000000
% 00000000000802ed7b00799c01ceecce7007e03bf3883c18cfe48000000001000080176fb003d9c00eee6677003f039f9c81e0ccef2400000000080000000000
% 00000000000802402f8028a403d329ee7007404fa7883c11f0e480000000010000801202f8014a401f324f77003a04bd3c81e09f072400000000080000000000
% 00000000000802623b2039fd03dfecdef40f607fb7880018dcc480000000010000801313b101dfc81ffe66ff407b07bdbc8000cdc62400000000080000000000
% 00000000000802022020200100000000040007800008000000000000000001000080101201010008000000004000780000800000000000000000080000000000
% 000000000008000c6000600000000000000000000000000000000000000001000080006600030000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000802000000000000000000000000000000000000000000000001000080100000000000000000000000000000000000000000000000080000000000
% 000000000008006012000000031e804000000000000000000000000000000100008003012000000019e802000000000000000000000000000000080000000000
% 0000000000080660176fb03fc11280400000000000000000000000000000010000803301737d83de092802000000000000000000000000000000080000000000
% 00000000000802401202f83fc152804000000000000000000000000000000100008012012017c3de0b2802000000000000000000000000000000080000000000
% 00000000000807601313b00003dc80400000000000000000000000000000010000803b01309d80001fc802000000000000000000000000000000080000000000
% 00000000000800000012000000000040000000000000000000000000000001000080000000900000000002000000000000000000000000000000080000000000
% 00000000000800000066000000000000000000000000000000000000000001000080000003300000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800020000100000000000002000000000000000000000000001000080001000008000000000000100000000000000000000000000080000000000
% 000000000008000030100040000c008000040010088000188040000000000100008000030080040000c0040000200100440000c8020000000000080000000000
% 00000000000800063017b1c0bc04efc0966e6313bb999dc880400000000001000080003300bd9c05e04e7e096373311ddd98ee48020000000000080000000000
% 000000000008000220129240bc05ee80f424f217cc93ddc88040000000000100008000120094a405e05e740f4127a13e653cee48020000000000080000000000
% 00000000000800073013bbc0000ffec066766317ff99bfc880400000000001000080003b009dfc0000fef60663b3313ffd99fe48020000000000080000000000
% 0000000000080000000200000000001e000000100000001800400000000001000080000000100000000000f000000100000000c0020000000000080000000000
% 00000000000800000006000000000000000000000000000000000000000001000080000000300000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000008000000000000000001000080000000000000000000000000000000800000000000000000080000000000
% 00000000000800000300200000400402100003000000400000000000000001000080000030010000020020110000300000040000000000000000080000000000
% 0000000000080000013bf0199dccc4ee766771078799c00000000000000001000080000011df818ceecc2777633b903c3d9c0000000000000000080000000000
% 0000000000080000017ba013fe5e85f294f77107828a400000000000000001000080000013dd011ff3e82f9947bb903c14a40000000000000000080000000000
% 000000000008000003ffb019bfccc5fef66ff100039fc0000000000000000100008000003bfd818dfecc2fff637f90001dfc0000000000000000080000000000
% 0000000000080000000003c000000400000003000200000000000000000001000080000000003c00000020000000300010000000000000000000080000000000
% 00000000000800000000000000000000000000000600000000000000000001000080000000000000000000000000000030000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000080000000000000000000000000000000000001000080000000000004000000000000000000000000000000000000080000000000
% 00000000000800000000088004002080201100003200000000000000000001000080000000004800200204020088000190000000000000000000080000000000
% 000000000008000003b7b8bd9c00efce2777633b9200000000000000000001000080000039bdcbcce00e7e7273bb339c90000000000000000000080000000000
% 000000000008000003fac894a4013e9e2f9947bb920000000000000000000100008000003bd649452012f4f2f4ca7b9c90000000000000000000080000000000
% 000000000008000007b6f89dfd01fede2fff637f9200000000000000000001000080000079b7c9cfe81ef6f2f7fb37bc90000000000000000000080000000000
% 00000000000800000000001001000000200000003000000000000000000001000080000000000100080000020000000180000000000000000000080000000000
% 00000000000800000000003000000000000000000000000000000000000001000080000000000300000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800020030000800000000000000000000000000000000000001000080001001800080000000000000000000000000000000000000080000000000
% 00000000000800020313b008000000000000000000000000000000000000010000800010309d8080000000000000000000000000000000000000080000000000
% 00000000000800020793f808000000000000000000000000000000000000010000800010789fc080000000000000000000000000000000000000080000000000
% 0000000000080002033fb00800000000000000000000000000000000000001000080001031fd8080000000000000000000000000000000000000080000000000
% 00000000000800020000000800000000000000000000000000000000000001000080001000000080000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 000000000008000004b783ffdfd8deccb0fff7bfff90000000000000000001000080000049bc3fdeff8cf66b07fffbbffd000000000000000000080000000000
% 000000000008000007960315e2484452909723c13c88000000000000000001000080000078b0314f1284229904b93c09e4800000000000000000080000000000
% 00000000000800000790f859a24ae45290962341348000000000000000000100008000007887c58d12ae229904b13409a4000000000000000000080000000000
% 000000000008000006b783fbdbdfecccd0ef67b37f00000000000000000001000080000069bc3f9edffe666d077b7b1bf8000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000800000000000000000000000000000000000001000080000000000080000000000000000000000000000000000000080000000000
% 00000000000800020030000180880000000ff201000000000000000000000100008000100180000c04800000007fa00800000000000000000000080000000000
% 00000000000800020313b019809dbec0ff0c220100000000000000000000010000800010309d818c05daf60ff061200800000000000000000000080000000000
% 00000000000800020793f80900880be0ff01220100000000000000000000010000800010789fc08804805f0ff009200800000000000000000000080000000000
% 0000000000080002033fb01d808c4ec0000f62010000000000000000000001000080001031fd81cc04c47600007b200800000000000000000000080000000000
% 00000000000800020000000000004800000000010000000000000000000001000080001000000000000440000000000800000000000000000000080000000000
% 000000000008000000000000000198000000000000000000000000000000010000800000000000000018c0000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800020000100000000000000000000000000000000000000001000080001000008000000000000000000000000000000000000000080000000000
% 000000000008000030100040000c008000010010088000188040000000000100008000030080040000c0040000080100440000c8020000000000080000000000
% 00000000000800063017b1c0bc04efc066776313bb999dc880400000000001000080003300bd9c05e04e7e0663bb311ddd98ee48020000000000080000000000
% 000000000008000220129240bc05ee804ff9f217cc93ddc88040000000000100008000120094a405e05e7404f7cfa13e653cee48020000000000080000000000
% 00000000000800073013bbc0000ffec066ff6317ff99bfc880400000000001000080003b009dfc0000fef60667fb313ffd99fe48020000000000080000000000
% 0000000000080000000200000000001e000000100000001800400000000001000080000000100000000000f000000100000000c0020000000000080000000000
% 00000000000800000006000000000000000000000000000000000000000001000080000000300000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000100000800000000000020000000000000000000000001000080000010000080000000000001000000000000000000000000080000000000
% 00000000000800000030100040000c0040000200100440000c804000000001000080000001808002000060040000200080440000c40200000000080000000000
% 0000000000080000033013d9c09e04eee0966733139dd99ce480400000000100008000003180bd8e05e0277e04b373189ddcccee440200000000080000000000
% 00000000000800000120114a409e05ee40f4227a17a653dce480400000000100008000001100949205e02f7407a12790be649eee440200000000080000000000
% 000000000008000003b011dfc0000ffe6066733317bfd9bde4804000000001000080000039809dde00007ff60333b318bffccdfe440200000000080000000000
% 000000000008000000000100000000000f000000100000000c00400000000100008000000000100000000000f000000080000000c00200000000080000000000
% 00000000000800000000030000000000000000000000000000000000000001000080000000003000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000040000000000000000080000000000000001000080000000000000004000000000000000004000000000000000080000000000
% 00000000000800000003001000008004011000030000004000000000000001000080000000180100000800201080001800000200000000000000080000000000
% 0000000000080000000139f8258dccc4777663b90783d9c00000000000000100008000000009df812cdc662773b33b883c3cce00000000000000080000000000
% 0000000000080000000179d03d049e84f994f3b907814a40000000000000010000800000000bdd01e848f42f94a7bb883c145200000000000000080000000000
% 00000000000800000003fbd8198eccc4fff667f90001dfc0000000000000010000800000001ffd80ccec662ff7b37f88001cfe00000000000000080000000000
% 000000000008000000000003c000000400000003000100000000000000000100008000000000001e000000200000001800100000000000000000080000000000
% 00000000000800000000000000000000000000000003000000000000000001000080000000000000000000000000000000300000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000810080420000600002008200000000000000000001000080000000041004022000060000200410000000000000000000080000000000
% 00000000000800000003bb9c9dceccee20f07703bf1c0000000000000000010000800000001df9c4eeec67720783f01df9c00000000000000000080000000000
% 00000000000800000004f93cbe529eee20f07204fa3c00000000000000000100008000000027d3c5f328f7720783a027d3c00000000000000000080000000000
% 00000000000800000007f9bcbfdecdfe2000f307fb3c0000000000000000010000800000003fdbc5ffec6ff20007b03fdbc00000000000000000080000000000
% 00000000000800000000000080000000600000780000000000000000000001000080000000000004000000060000078000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000100000000000000000000000000000000000000000001000080000010000000000000000000000000000000000000000000080000000000
% 00000000000800000100000000000000000000000000000000000000000001000080000010000000000000000000000000000000000000000000080000000000
% 00000000000800000100000000000000000000000000000000000000000001000080000010000000000000000000000000000000000000000000080000000000
% 00000000000800000100000000000000000000000000000000000000000001000080000010000000000000000000000000000000000000000000080000000000
% 00000000000800000100000000000000000000000000000000000000000001000080000010000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000800000000000200000000000000000000000001000080000000000080000000000010000000000000000000000000080000000000
% 0000000000080000001010004000c008000040020000000000000000000001000080000000808002000c00400002001000000000000000000000080000000000
% 0000000000080000013013d9c1004efc0966e332000000000000000000000100008000001180bd8e080477e09337331000000000000000000000080000000000
% 00000000000800000200114a41005ee80f4247a200000000000000000000010000800000200094920804f740f2127a1000000000000000000000080000000000
% 0000000000080000020011dfc000ffec066763320000000000000000000001000080000020009dde000eff60633b331000000000000000000000080000000000
% 00000000000800000000010000000000f000000000000000000000000000010000800000000010000000000f0000000000000000000000000000080000000000
% 00000000000800000000030000000000000000000000000000000000000001000080000000003000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 0000000000080000000000000000cf6cff0ed07fb49bc37cdfe1efcf020001000080000000000000000c7b6ff07687bda5bc1bedef0ffc781000080000000000
% 0000000000080000000000003c80513257076013cf8b02d444e0a947061001000080000000000001e4048995703b011e7cb016a4470594383100080000000000
% 0000000000080000000000003c80573266052012cf9c43d844c0c956002001000080000000000001e404b996602901167dc41ec4460695300200080000000000
% 0000000000080000000000000000cfacdf0f6037b6bfc2f4cde1afff002001000080000000000000000c7d6df07b033db7fc17accf0dff780200080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800020030000800000000000000000000000000000000000001000080001001800080000000000000000000000000000000000000080000000000
% 00000000000800020313b008000000000000000000000000000000000000010000800010309d8080000000000000000000000000000000000000080000000000
% 00000000000800020793f808000000000000000000000000000000000000010000800010789fc080000000000000000000000000000000000000080000000000
% 0000000000080002033fb00800000000000000000000000000000000000001000080001031fd8080000000000000000000000000000000000000080000000000
% 00000000000800020000000800000000000000000000000000000000000001000080001000000080000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 000000000008000004b783ffdfd8deccb0fff7bfff90000000000000000001000080000049bc3fdeff8cf66b07fffbbffd000000000000000000080000000000
% 000000000008000007960315e2484452909723c13c88000000000000000001000080000078b0314f1284229904b93c09e4800000000000000000080000000000
% 00000000000800000790f859a24ae45290962341348000000000000000000100008000007887c58d12ae229904b13409a4000000000000000000080000000000
% 000000000008000006b783fbdbdfecccd0ef67b37f00000000000000000001000080000069bc3f9edffe666d077b7b1bf8000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800020000000000000000000000000000000000000000000001000080001000000000000000000000000000000000000000000000080000000000
% 00000000000800020000000000000000000000000000000000000000000001000080001000000000000000000000000000000000000000000000080000000000
% 00000000000800020000000000000000000000000000000000000000000001000080001000000000000000000000000000000000000000000000080000000000
% 00000000000800020000000000000000000000000000000000000000000001000080001000000000000000000000000000000000000000000000080000000000
% 00000000000800020000000000000000000000000000000000000000000001000080001000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000802000000000000000000000000000000000000000000000001000080100000000000000000000000000000000000000000000000080000000000
% 00000000000802000000000000000000000000000000000000000000000001000080100000000000000000000000000000000000000000000000080000000000
% 00000000000802000000000000000000000000000000000000000000000001000080100000000000000000000000000000000000000000000000080000000000
% 00000000000802000000000000000000000000000000000000000000000001000080100000000000000000000000000000000000000000000000080000000000
% 00000000000802000000000000000000000000000000000000000000000001000080100000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000a000000000000000000000000000000000000000000000000010000a0000000000000000000000000000000000000000000000000080000000000
% 00000000000a000000000000000000000000000000000000000000000000010000a0000000000000000000000000000000000000000000000000080000000000
% 00000000000a000000000000000000000000000000000000000000000000010000a0000000000000000000000000000000000000000000000000080000000000
% 00000000000a000000000000000000000000000000000000000000000000010000a0000000000000000000000000000000000000000000000000080000000000
% 00000000000a000000000000000000000000000000000000000000000000010000a0000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000800000000000000000000000000000000000000000000000001000080000000000000000000000000000000000000000000000000080000000000
% 00000000000fffffffffffffffffffffffffffffffffffffffffffffffffff0000fffffffffffffffffffffffffffffffffffffffffffffffffff80000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000c0000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000009f00087800000080003e637c3e0000044004000000100000000000000020000002000000000000000000000000000000000000
% 00000000000000000000000001110018440000000000224142220800040000000800900000000040000020000002000000000000000000000000000000000000
% 0000000000000000000000000110801c4c02000010003041413018000400004018019000000000c8000020200402010000000000000000000000000000000000
% 000000000000000000000000013c8024fc7a85bd9e7c1841411819a0f4cbfc79d9e19e785f9cd0cab3c1e7bcf79e79e7bc000000000000000000000000000000
% 0000000000000000000000000110802444fa04b092c80c41410c0a11f44914484be092f84884d04897c22fa7f4a2f9287c000000000000000000000000000000
% 0000000000000000000000000110803e44c2049c9258064141060a11844914494b0092c04894504896022c2384a2c12860000000000000000000000000000000
% 0000000000000000000000000110804244ca04a49270626242620b319449144b4b2092c848b4604896432ca394b2c92ce4000000000000000000000000000000
% 00000000000000000000000001188067667307bc92787c3e7c7c0de0e65dd449edc0d270ee9e206cf381f73ce49f712739000000000000000000000000000000
% 0000000000000000000000000081000000000000001c000000000000000000000000000000004000000000200000000000000000000000000000000000000000
% 0000000000000000000000000081000000000000008800000000000000000000000000000000c000000000200000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000070000000000000000000000000000000018000000000600000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000001fd000000004000000400f000000003e637c3e0000000000000002000000000400000800000000000000000000000000000
% 00000000000000000000000000000125000000004000000400800040000224142220000000000000002000000000400000000000000000000000000000000000
% 000000000000000000000000000000210002000040000004008020c0000304141300000000020010002000010000400000000200000000000000000000000000
% 00000000000000000000000000000021e783deb3cd03cd3cf1ed28c9268184141180bf7afcd2b41e69e7f8395e1c5e683fb2f3c0000000000000000000000000
% 000000000000000000000000000000212f827894508410c5f090a0492840c41410c091fa450a3412862fe0093e045884649bf240000000000000000000000000
% 000000000000000000000000000000212c022e9450f410c58090a047c8406414106091c2450a1412862c382930144e842c8d8240000000000000000000000000
% 000000000000000000000000000000212c823296598659e59099a046ccc62624262091ca459a1812cf2cc869323452cc388d9240000000000000000000000000
% 000000000000000000000000000000392703def3ef038f3ee0cf30648787c3e7c7c1dd7774f3081279f7783d9c1e7e783c84e248000000000000000000000000
% 0000000000000000000000000000000000020000000000000000000000000000000000000000100000000000000000000e000000000000000000000000000000
% 00000000000000000000000000000000000200000000000000000000000000000000000000003000000000000000000044000000000000000000000000000000
% 00000000000000000000000000000000000600000000000000000000000000000000000000006000000000000000000038000000000000000000000000000000
%%EndImage
%%EndPreview
save
countdictstack
mark
newpath
/showpage {} def
%%EndProlog
%%Page 1 1
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		 {papersizefailure} if
		 {} stopped pop
		 
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
%	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(5.0) FMVERSION
1 1 0 0 612 792 0 1 5 FMDOCUMENT
0 0 /Courier FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
 3 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
( int v, t) 432.15 513.4 T
( t = recv\050left\051) 432.15 502.4 T
( x = g\050t\051) 432.15 491.4 T
( send\050right,x\051) 432.15 480.4 T
(v = A[t]) 437.55 469.4 T
( A[b[t]] = v) 432.15 458.4 T
432.15 451.8 529.42 527.4 R
0.5 H
0 Z
N
( int v) 168.21 513.4 T
( x = recv\050left\051) 168.21 502.4 T
( v = A[x]) 168.21 491.4 T
( A[b[x]] = v) 168.21 480.4 T
( x = g\050x\051) 168.21 469.4 T
( send\050right,x\051) 168.21 458.4 T
168.21 451.8 263.74 527.4 R
N
0 11 Q
(for\050i=0; i<N; i++\051 {) 221.4 772.07 T
(   u = A[x]) 221.4 759.07 T
(   A[b[x]] = u) 221.4 746.07 T
(   x = g\050x\051) 221.4 733.07 T
0 9 Q
(}) 221.4 721.4 T
(   u = A[x]) 173.04 654.05 T
(   A[b[x]] = u) 173.04 643.05 T
(   x = g\050x\051) 173.04 632.05 T
173.04 607.45 264.05 665.05 R
N
(   u = A[x]) 46.25 654.05 T
(   A[b[x]] = u) 46.25 643.05 T
(   x = g\050x\051) 46.25 632.05 T
46.25 605.65 135.24 665.05 R
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(anti-) 140.1 649.05 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(true-) 138.05 622.84 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(may true-) 169.96 674.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(   int v) 440.04 654.97 T
(   v = A[x]) 440.04 643.97 T
(   A[b[x]] = v) 440.04 632.97 T
(   x = g\050x\051) 440.04 621.97 T
440.04 606.78 529.25 665.97 R
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(true-) 404.29 612.32 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(may true-) 0 -300 427.43 622.15 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
(\050c\051  After renaming to eliminate the anti-dependence) 294.82 585.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050b\051 Dependences in tw) 53.63 584.17 T
(o adjacent iterations) 161.81 584.17 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
(int u, s) 85.95 376.6 T
( s = recv\050left\051) 83.7 365.6 T
( x = g\050s\051) 83.7 354.6 T
( send\050right,x\051) 83.7 343.6 T
( send\050&A[s]&mask,{ld,&A[s]}\051) 83.7 332.6 T
( u=recv\050&A[s]&mask\051) 83.7 321.6 T
( send\050&A[b[s]]&mask,{st,&A[b[s]],u}\051) 83.7 310.6 T
83.7 295.2 287.1 390.6 R
N
(int v, t) 307.35 376.6 T
( t = recv\050left\051) 305.1 365.6 T
( x = g\050t\051) 305.1 354.6 T
( send\050right,x\051) 305.1 343.6 T
( send\050&A[t]&mask,{ld,&A[t]}\051) 305.1 332.6 T
( v=recv\050&A[t]&mask\051) 305.1 321.6 T
( send\050&A[b[t]]&mask,{st,&A[b[t]],v}\051) 305.1 310.6 T
305.1 295.2 508.5 390.6 R
N
0 7 Q
(while \050true\051 {) 89.1 265 T
(  {type, pid, address, st_data} = recv\050\051) 83.7 256.34 T
(  if \050type == LD\051 {) 83.7 248.34 T
(    if \050pid >= last_writer[address]\051 {) 83.7 240.34 T
(      last_reader[address] = pid) 83.7 232.34 T
(      send\050pid, data[address]\051) 83.7 224.34 T
(    } else {) 83.7 216.34 T
(      MIS-SPECULATION DETECTED!) 83.7 208.34 T
(    } else if \050type == ST\051 {) 83.7 200.34 T
(    if \050pid >= last_reader[address]\051 {) 83.7 192.34 T
(      if \050pid >= last_writer[address]\051 {) 83.7 184.34 T
(        last_writer[address] = pid) 83.7 176.34 T
(        data[address] = st_data) 83.7 168.34 T
(      }) 83.7 160.34 T
(      /* \050pid < last_writer\051) 83.7 152.34 T
(             => IGNORE BY THOMAS WRITE RULE */) 83.7 144.34 T
(    } else {) 83.7 136.34 T
(      MIS-SPECULATION DETECTED!) 83.7 128.34 T
(    }) 83.7 120.34 T
(  }) 83.7 112.34 T
(}) 83.7 104.34 T
83.7 99.01 287.1 279 R
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
(\050a\051 Example loop nest) 243.27 709.32 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050d\051 After forw) 55.6 432.12 T
(arding the true-dependence) 123.45 432.12 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050e\051 After optimizing to reduce critical path length) 300.06 429.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050f\051  After using SUDS to eliminate the may true dependence.) 141.64 76.4 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 7 Q
(while \050true\051 {) 309.6 265 T
(  {type, pid, address, st_data} = recv\050\051) 304.2 256.34 T
(  if \050type == LD\051 {) 304.2 248.34 T
(    if \050pid >= last_writer[address]\051 {) 304.2 240.34 T
(      last_reader[address] = pid) 304.2 232.34 T
(      send\050pid, data[address]\051) 304.2 224.34 T
(    } else {) 304.2 216.34 T
(      MIS-SPECULATION DETECTED!) 304.2 208.34 T
(    } else if \050type == ST\051 {) 304.2 200.34 T
(    if \050pid >= last_reader[address]\051 {) 304.2 192.34 T
(      if \050pid >= last_writer[address]\051 {) 304.2 184.34 T
(        last_writer[address] = pid) 304.2 176.34 T
(        data[address] = st_data) 304.2 168.34 T
(      }) 304.2 160.34 T
(      /* \050pid < last_writer\051) 304.2 152.34 T
(             => IGNORE BY THOMAS WRITE RULE */) 304.2 144.34 T
(    } else {) 304.2 136.34 T
(      MIS-SPECULATION DETECTED!) 304.2 128.34 T
(    }) 304.2 120.34 T
(  }) 304.2 112.34 T
(}) 304.2 104.34 T
304.2 99.01 507.6 279 R
N
1 12 Q
(       The psudo-code for tw) 138.04 63.12 T
(o SUDS memory nodes are also gi) 267.89 63.12 T
(v) 433.58 63.12 T
(en.) 439.4 63.12 T
177.7 654.98 178.76 655.01 2 L
1 H
N
178.76 655.01 178.15 656.54 183.59 655.15 178.24 653.45 4 Y
N
178.76 655.01 178.15 656.54 183.59 655.15 178.24 653.45 4 Y
V
125.45 643.45 M
 131.65 643.45 154.39 643.45 164.73 649.33 D
 171.59 653.23 173.87 654.87 177.7 654.98 D
2 Z
N
206.13 664.78 206.92 664.08 2 L
0 Z
3 X
N
206.92 664.08 207.53 665.6 210.5 660.86 205.47 663.3 4 Y
N
206.92 664.08 207.53 665.6 210.5 660.86 205.47 663.3 4 Y
V
62.45 639.85 M
 40.85 621.85 40.85 621.85 40.85 611.95 D
 40.85 602.05 40.85 602.05 98.45 602.05 D
 156.05 602.05 156.05 602.05 163.25 636.25 D
 170.45 670.45 170.45 670.45 185.24 670.45 D
 197.17 670.45 199.63 670.62 206.13 664.78 D
2 Z
N
230.74 664.04 229.87 663.43 2 L
0 Z
0 X
N
229.87 663.43 231.21 662.49 225.94 660.69 229.45 665.01 4 Y
N
229.87 663.43 231.21 662.49 225.94 660.69 229.45 665.01 4 Y
V
66.05 630.85 M
 109.25 620.05 109.25 620.05 190.25 620.05 D
 271.25 620.05 271.25 620.05 271.25 646.15 D
 271.25 672.25 271.25 672.25 256.85 672.25 D
 244.36 672.25 242.65 672.33 230.74 664.04 D
2 Z
N
0 9 Q
(   int u) 313.25 654.97 T
(   u = A[x]) 313.25 643.97 T
(   A[b[x]] = u) 313.25 632.97 T
(   x = g\050x\051) 313.25 621.97 T
313.25 606.78 402.24 665.97 R
0.5 H
0 Z
N
471.55 650.52 472.56 650.2 2 L
1 H
3 X
N
472.56 650.2 472.49 651.83 477.13 648.73 471.55 648.91 4 Y
N
472.56 650.2 472.49 651.83 477.13 648.73 471.55 648.91 4 Y
V
329.45 630.17 M
 315.05 606.78 315.05 601.38 368.15 601.38 D
 421.25 601.38 421.25 601.38 434.75 626.58 D
 448.25 651.78 448.25 651.78 458.15 651.78 D
 465.11 651.78 467.22 651.91 471.55 650.52 D
2 Z
N
497.35 653.1 496.54 652.42 2 L
0 Z
0 X
N
496.54 652.42 497.95 651.6 492.85 649.34 495.98 653.96 4 Y
N
496.54 652.42 497.95 651.6 492.85 649.34 495.98 653.96 4 Y
V
352.85 630.17 M
 352.85 628.63 364.21 621.52 372.65 619.38 D
 385.33 616.15 373.29 619.38 453.65 619.38 D
 534.02 619.38 534.09 615.57 534.09 637.15 D
 534.09 658.72 539.97 657.17 515.41 657.17 D
 497.76 657.17 500.35 655.6 497.35 653.1 D
2 Z
N
164.47 506.19 165.51 506.39 2 L
0 Z
N
165.51 506.39 164.68 507.8 170.25 507.27 165.24 504.77 4 Y
N
165.51 506.39 164.68 507.8 170.25 507.27 165.24 504.77 4 Y
V
120.45 464.4 M
 136.86 464.4 136.86 464.4 145.07 484.34 D
 151.98 501.14 153.02 504.05 164.47 506.19 D
2 Z
N
( int u) 51.67 513.4 T
( x = recv\050left\051) 51.67 502.4 T
( u = A[x]) 51.67 491.4 T
( A[b[x]] = u) 51.67 480.4 T
( x = g\050x\051) 51.67 469.4 T
( send\050right,x\051) 51.67 458.4 T
51.67 451.8 147.2 527.4 R
0.5 H
0 Z
N
187.32 492.34 188.37 492.46 2 L
1 H
3 X
N
188.37 492.46 187.64 493.93 193.15 493 187.99 490.87 4 Y
N
188.37 492.46 187.64 493.93 193.15 493 187.99 490.87 4 Y
V
55.49 482.4 M
 45.94 459 45.94 459 45.94 451.8 D
 45.94 444.6 45.94 444.6 98.48 444.6 D
 151.02 444.6 151.02 444.6 156.75 467.1 D
 161.99 487.68 162.43 489.54 187.32 492.34 D
2 Z
N
426.44 506.84 427.49 506.95 2 L
0 Z
0 X
N
427.49 506.95 426.78 508.43 432.29 507.42 427.09 505.36 4 Y
N
427.49 506.95 426.78 508.43 432.29 507.42 427.09 505.36 4 Y
V
381.57 484.2 M
 398.29 484.2 398.29 484.2 406.64 495 D
 413.69 504.11 414.78 505.68 426.44 506.84 D
2 Z
N
( int u, s) 313.48 513.4 T
( s = recv\050left\051) 313.48 502.4 T
( x = g\050s\051) 313.48 491.4 T
( send\050right,x\051) 313.48 480.4 T
( u = A[s]) 313.48 469.4 T
( A[b[s]] = u) 313.48 458.4 T
313.48 451.8 410.75 527.4 R
0.5 H
0 Z
N
451.81 470.36 452.86 470.53 2 L
1 H
3 X
N
452.86 470.53 452.06 471.96 457.6 471.31 452.55 468.92 4 Y
N
452.86 470.53 452.06 471.96 457.6 471.31 452.55 468.92 4 Y
V
319.32 460.8 M
 307.65 446.4 307.65 446.4 307.65 443.7 D
 307.65 441 307.65 441 361.15 441 D
 414.64 441 414.64 441 420.48 453.6 D
 425.83 465.16 426.27 466.17 451.81 470.36 D
2 Z
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%+ Times-Roman
%%Trailer
cleartomark
countdictstack exch sub { end } repeat
restore
%%EOF

%%EndDocument

 endTexFig
 994 4758 a Fh(Figure)19 b(2:)k(An)c(e)o(xample)h(of)f(ho)n(w)h(SUDS)d
(parallelizes)i(a)g(simple)g(loop.)1922 5627 y(3)p eop
%%Page: 4 4
4 3 bop -152 -69 a Fh(produces)29 b(some)e(load)g(imbalance)h(it)e
(also)g(dramatically)h(simpli\002es)g(the)-152 14 y(protocols)20
b(for)e(checkpointing)j(of)e(true)g(dependences)i(and)e(the)g(v)n
(alidation)-152 97 y(of)26 b(memory)h(dependence)h(speculations)g(as)e
(described)h(in)e(Sections)h(3.3)-152 180 y(and)20 b(3.5.)-40
263 y(The)29 b(application)g(address)h(space)f(is)f(c)o(yclically)h
(distrib)o(uted)f(across)-152 346 y(the)j(memory)h(nodes)g(at)f(the)g
(w)o(ord)g(\(32)h(bit\))e(granularity)-5 b(.)60 b(During)32
b(se-)-152 429 y(quential)e(sections)g(of)f(the)h(program)g(the)f
(memory)h(nodes)h(simply)e(pro-)-152 512 y(cess)18 b(each)g(memory)h
(request)f(and)g(reply)g(with)f(either)h(load)g(data)f(or)h(a)g(store)
-152 596 y(ackno)n(wledgement.)26 b(During)18 b(parallel)g(loops)h
(memory)g(requests)g(may)f(ar)o(-)-152 679 y(ri)n(v)o(e)28
b(out)f(of)h(order)m(,)h(and)f(the)g(memory)g(nodes)g(must)g(both)g(v)n
(alidate)g(that)-152 762 y(these)c(requests)f(don')o(t)g(violate)h
(sequential)f(order)h(and)f(pro)o(vide)h(f)o(acilities)-152
845 y(for)e(rolling)g(back)h(to)f(a)g(consistent)h(state)f(in)g(the)g
(case)g(that)g(a)g(dependence)-152 928 y(violation)e(is)e(detected.)
-152 1150 y Fi(3.2)91 b(Example)-152 1283 y Fh(Figure)25
b(2)h(gi)n(v)o(es)f(a)h(step)f(by)h(step)f(demonstration)i(of)e(ho)n(w)
h(our)f(compiler)-152 1366 y(transforms)d(a)f(loop)g(so)h(that)e(the)i
(runtime)f(system)g(can)h(e)o(xploit)f(the)g(a)o(v)n(ail-)-152
1449 y(able)g(parallelism.)28 b(The)21 b(loop)g(contains)h(a)e(true)h
(dependence)i(on)e(the)g(v)n(ari-)-152 1532 y(able)d
Fd(x)p Fh(,)f(an)h(anti-dependence)h(on)f(the)g(v)n(ariable)g
Fd(u)f Fh(and)h(a)f(potential)h(depen-)-152 1615 y(dence)h(on)f(the)g
(accesses)h(to)e(the)h(global)g(array)g Fd(A)p Fh(.)f(The)h(system)g
(is)f(based)i(on)-152 1698 y(the)i(idea)g(that)f(the)g(loop)h
(iterations)g(will)e(be)i(distrib)o(uted)f(c)o(yclically)h(along)-152
1781 y(the)e(compute)h(nodes.)-40 1864 y(First)14 b(the)h(compiler)h
(peforms)f(renaming)h(on)g(the)f(pri)n(v)n(ate)h(v)n(ariable)f
Fd(u)g Fh(to)-152 1947 y(eliminate)23 b(the)g(anti-dependence)j
(\(Figure)d(2\(c\)\).)35 b(Second)24 b(the)f(compiler)-152
2030 y(inserts)30 b(communication)h(instructions)g(so)f(that)f(compute)
i(node)g(on)g(the)-152 2113 y(left)18 b(can)h(forw)o(ard)g(the)g(v)n
(alue)g(of)g(v)n(ariable)g Fd(x)f Fh(to)h(the)f(compute)i(node)f(on)h
(the)-152 2196 y(right)h(\(Figure)f(2\(d\)\).)28 b(Finally)20
b(we)h(perform)g(an)f(optimization,)i(described)-152
2280 y(in)c(Section)g(3.3)f(to)h(reduce)h(the)e(critical)g(path)i
(length)f(between)g(the)g(recei)n(v)o(e)-152 2363 y(of)30
b(v)n(ariable)h Fd(x)f Fh(and)g(the)g(corresponding)j(send)d(operation)
h(in)f(the)g(same)-152 2446 y(iteration)19 b(\(Figure)g(2\(e\)\).)-40
2529 y(Figure)30 b(2\(f\))f(sho)n(ws)h(ho)n(w)f(the)h(code)g(might)f
(be)h(mapped)g(onto)g(four)-152 2612 y(processing)i(elements.)59
b(The)30 b(tw)o(o)h(elements)g(on)g(the)f(top)h(act)g(as)f(com-)-152
2695 y(pute)c(nodes,)i(while)d(the)g(tw)o(o)g(processing)i(elements)f
(on)g(the)f(bottom)h(act)-152 2778 y(as)19 b(memory)h(nodes,)f(and)g
(run)g(the)g(memory)h(dependence)h(v)n(alidation)e(pro-)-152
2861 y(tocol)g(described)h(in)f(Section)g(3.5.)-152 3083
y Fi(3.3)91 b(F)m(orw)o(arding)22 b(tr)q(ue)k(dependences)-152
3216 y Fh(The)18 b(task)g(of)g(identifying)g(loop)g(carried)g(true)g
(dependences)i(is)d(carried)h(out)-152 3299 y(by)23 b(the)g(compiler)g
(in)g(our)g(system.)35 b(Currently)-5 b(,)23 b(our)g(compiler)g(uses)h
(stan-)-152 3382 y(dard)k(data)f(\003o)n(w)f(analysis)h(techniques)i
(to)d(identify)h(scalar)g(loop)g(carried)-152 3465 y(dependences)h([26)
q(].)41 b(An)o(y)26 b(scalar)f(v)n(ariables)h(modi\002ed)g(within)f
(the)g(loop)-152 3548 y(nest,)e(need)f(to)g(be)g(either)f(pri)n(v)n
(atized)i(by)f(renaming)h(\(see)e(Section)h(3.4\))g(or)-152
3631 y(forw)o(arded)k(to)e(the)g(ne)o(xt)g(iteration.)39
b(If)24 b(the)g(compiler)g(\002nds)h(that)f(there)g(is)-152
3714 y(an)f(inter)o(-iteration)e(dependence)j(on)f(a)f(particular)g(v)n
(ariable)g(it)g(inserts)g(e)o(x-)-152 3797 y(plicit)c(communication)h
(instructions)g(into)f(the)g(code.)24 b(The)18 b(compiler)g(uses)-152
3880 y(an)26 b(analysis)h(similar)e(to)g(that)h(used)g(by)g(T)-6
b(.N.)25 b(V)l(ijaykumar)h(for)g(the)f(Mul-)-152 3964
y(tiscalar)h([36)q(])g(to)g(identify)g(the)g(optimal)h(placement)g(of)f
(communication)-152 4047 y(instructions.)-40 4130 y(At)18
b(runtime)g(the)h(master)f(node)h(checkpoints)h(all)d(the)h(loop)h
(carried)f(de-)-152 4213 y(pendences)23 b(so)f(that)e(if)h(a)g
(mis-speculation)h(occurs)g(the)f(computation)h(can)-152
4296 y(be)i(rolled)g(back)h(to)e(a)h(consistent)g(state.)37
b(Since)24 b(only)g(the)g(master)g(check-)-152 4379 y(points)d(this)g
(cost)g(can)g(be)g(amortized)g(o)o(v)o(er)g(a)f(number)i(of)f(loop)g
(iterations.)-152 4462 y(The)d(dra)o(wback)h(of)f(this)f(approach)j(is)
d(that)h(when)g(a)g(mis-speculation)h(does)-152 4545
y(occur)35 b(we)f(may)h(need)g(to)f(rollback)h(slightly)g(further)f
(than)h(necessary)-5 b(.)-152 4628 y(So)27 b(f)o(ar)g(we)g(ha)o(v)o(e)h
(not)f(found)h(this)f(to)g(be)h(a)f(problem.)48 b(As)27
b(discussed)i(in)-152 4711 y(Section)g(4,)j(in)d(the)g(programs)i(we)e
(ha)o(v)o(e)g(e)o(xamined,)k(the)c(ratio)g(of)g(mis-)-152
4794 y(speculations)19 b(per)e(chunk)i(is)d(lo)n(w)h(enough)i(that)e
(it)g(does)h(not)f(constrain)h(par)o(-)-152 4877 y(allelism.)-40
4960 y(Currently)-5 b(,)19 b(our)h(compiler)f(only)h(performs)g
(dependence)h(analysis)f(for)-152 5043 y(scalars.)40
b(F)o(or)24 b(af)n(\002ne)h(array)f(accesses)i(a)e(compiler)h(could)g
(perform)g(array)-152 5126 y(dependence)33 b(analysis)e(to)g(identify)f
(array)h(based)g(dependences.)61 b(Note)-152 5209 y(that)19
b(this)g(compiler)h(analysis)g(can)g(be)f(optimistic)g(since)h(forw)o
(arding)g(non-)-152 5292 y(dependent)30 b(data)e(does)h(not)f(violate)g
(sequential)h(semantics)f(of)g(the)g(pro-)-152 5375 y(gram.)53
b(This)28 b(is)g(optimistic)g(in)h(the)f(sense)i(that)e(it)g(permits)g
(the)h(re)o(gister)2040 -69 y(allocation)c(and)h(lo)n(w-latenc)o(y)f
(forw)o(arding)h(of)f(the)g(data)g(v)n(alues)h(in)f(ques-)2040
14 y(tion,)k(rather)e(than)g(completing)h(a)f(more)h(e)o(xpensi)n(v)o
(e)g(round)g(trip)f(request)2040 97 y(to)c(one)g(of)g(the)g(memory)h
(nodes.)35 b(Ho)n(we)n(v)o(er)m(,)25 b(to)d(reduce)i(the)f(critical)f
(path)2040 180 y(cost,)k(the)e(compiler)h(needs)g(to)f(identify)h(a)f
(minimal)g(set)g(of)h(v)n(alues)g(to)f(be)2040 263 y(forw)o(arded.)2152
346 y(Another)32 b(important)f(compiler)h(optimization)f(is)g(the)g
(reduction)h(of)2040 429 y(critical)17 b(path)h(lengths)g(of)g(true)f
(dependence)j(chains.)j(Man)o(y)c(typical)f(loops)2040
512 y(use)d(the)g(forw)o(arded)h(v)n(alues)g(early)f(in)g(an)g
(iteration)g(while)g(pre)n(v)o(enting)h(early)2040 596
y(forw)o(arding)21 b(by)g(not)f(updating)h(the)g(v)n(alues)f(until)g
(late)g(in)g(the)g(iteration.)26 b(In)2040 679 y(the)e(w)o(orst)g
(case,)i(this)e(will)f(completely)i(sequentialize)g(the)f(loop.)39
b(Ho)n(w-)2040 762 y(e)n(v)o(er)m(,)22 b(in)f(man)o(y)h(cases)g(it)e
(is)h(possible)h(to)f(calculate)h(and)g(forw)o(ard)g(the)f(ne)n(w)2040
845 y(v)n(alue)j(as)g(soon)g(as)g(the)f(v)n(alue)i(from)e(the)h(pre)n
(vious)g(iteration)g(is)f(recei)n(v)o(ed.)2040 928 y(The)d(compiler)g
(can)h(reduce)g(the)f(critical)f(path)h(length)h(by)f(making)h(a)f(cop)
o(y)2040 1011 y(of)h(the)g(dependent)i(v)n(ariable,)e(then)h(modifying)
g(the)f(v)n(ariable,)g(and)h(\002nally)2040 1094 y(transforming)e(all)e
(the)h(uses)h(of)e(the)h(v)n(ariable)h(to)f(uses)g(of)g(the)g(cop)o(y)
-5 b(.)2040 1316 y Fi(3.4)90 b(Renaming)2040 1449 y Fh(Man)o(y)17
b(scalars,)g(arrays)g(and)g(other)g(data)f(structures)h(that)f(are)g
(used)i(to)e(prop-)2040 1532 y(agate)27 b(v)n(alues)h(within)f(a)h
(loop)g(iteration)f(are)g(normally)h(de\002ned)g(outside)2040
1615 y(the)33 b(scope)h(of)f(the)g(loop)h(body)-5 b(.)67
b(This)32 b(will)g(create)h(anti-)g(and)h(output-)2040
1698 y(dependences)21 b(across)e(the)f(iterations,)g(forcing)h(the)f
(loop)h(to)f(be)h(serialized.)2040 1781 y(Compiler)d(analysis)h(can)f
(identify)h(these)f(v)n(ariables)h(by)f(performing)h(scalar)2040
1864 y(pri)n(v)n(atization)26 b(and)g(array)g(data-\003o)n(w)g
(analysis.)43 b(body)27 b([28,)e(23)q(,)g(24,)g(34)q(].)2040
1947 y(Pri)n(v)n(atizable)j(v)n(ariables)g(are)f(allocated)h(locally)g
(in)f(each)h(processor)h(and)2040 2030 y(ne)n(v)o(er)20
b(communicated)g(outside.)2152 2113 y(This)27 b(local)h(allocation)g
(is)f(performed)h(by)g(creating)g(a)g(second)g Fg(safe-)2040
2196 y(stac)o(k)e Fh(on)g(which)g(pri)n(v)n(atizable)g(v)n(ariables)g
(may)g(be)g(placed.)44 b(At)25 b(runtime)2040 2280 y(each)f(compute)g
(node)h(maintains)e(its)g(o)n(wn)h(local)f(safe-stack)h(and)g(all)f
(pri-)2040 2363 y(v)n(atizable)c(v)n(ariables)f(are)g(accessed)h(of)n
(f)f(of)g(this)g(stack.)23 b(This)17 b(has)i(tw)o(o)f(ben-)2040
2446 y(e\002ts.)33 b(First,)22 b(this)h(pro)o(vides)g(a)g(cheap)g(form)
g(of)g(renaming.)35 b(Each)22 b(pri)n(v)n(ati-)2040 2529
y(zable)i(v)n(ariable)h(can)f(no)n(w)g(be)g(independently)i(addressed)f
(on)g(each)f(com-)2040 2612 y(pute)f(node.)34 b(There)23
b(is)f(an)g(additional)h(caching)h(bene\002t)e(in)h(that)f(v)n
(ariables)2040 2695 y(that)16 b(memory)h(references)g(to)f(the)g
(safe-stack)g(are)g(completely)h(local)f(to)g(the)2040
2778 y(compute)i(node,)g(and)g(do)f(not)h(need)g(to)f(be)g
(communicated)i(to)d(the)i(memory)2040 2861 y(nodes.)2040
3083 y Fi(3.5)90 b(Memor)s(y)25 b(dependence)c(speculation)2040
3216 y Fh(The)j(memory)i(dependence)g(speculation)g(system)e(is)g(in)h
(some)f(w)o(ays)h(the)2040 3299 y(core)e(of)f(the)g(system.)33
b(It)22 b(is)g(the)g(f)o(all)g(back)h(dependence)h(mechanism)g(that)
2040 3382 y(w)o(orks)19 b(in)f(all)f(cases,)i(e)n(v)o(en)f(if)g(the)g
(compiler)g(can)h(not)f(analyze)h(a)f(particular)2040
3465 y(v)n(ariable.)53 b(Since)28 b(only)h(a)g(portion)g(of)g(the)f
(dependences)j(in)e(a)f(program)2040 3548 y(can)g(be)g(pro)o(v)o(ed)h
(by)f(the)g(compiler)g(to)f(be)h(pri)n(v)n(atizable)g(or)g(loop)g
(carried)2040 3631 y(dependences,)33 b(a)27 b(lar)o(ge)h(fraction)g(of)
g(the)g(total)g(memory)h(traf)n(\002c)e(will)g(be)2040
3714 y(directed)d(through)h(the)e(memory)i(dependence)h(speculation)e
(system.)38 b(As)2040 3797 y(such)20 b(it)e(is)g(necessary)j(to)d
(minimize)h(the)g(latenc)o(y)h(of)f(this)f(subsystem.)2152
3880 y(The)e(method)g(we)g(use)g(to)f(v)n(alidate)h(memory)h
(dependence)h(correctness)2040 3964 y(is)h(based)i(on)e(Basic)h(T)m
(imestamp)g(Ordering)g([4])f(a)g(traditional)h(transaction)2040
4047 y(processing)g(concurrenc)o(y)g(control)e(mechanism.)24
b(As)18 b(sho)n(wn)h(in)g(Figure)f(3,)2040 4130 y(each)27
b(processing)g(element)g(which)f(is)g(dedicated)h(as)f(a)g(memory)h
(depen-)2040 4213 y(dence)21 b(node)h(contains)f(three)f(data)g
(structures)h(in)f(its)f(local)i(memory)-5 b(.)27 b(The)2040
4296 y(\002rst)16 b(is)g(an)g(array)h(which)g(is)f(dedicated)i(to)e
(storing)h(actual)g(program)g(v)n(alues.)2040 4379 y(The)22
b(ne)o(xt)f(is)g(a)h(small)f(hash)h(table)g(which)g(is)f(used)h(as)g(a)
f Fg(timestamp)h(cac)o(he)2040 4462 y Fh(to)f(v)n(alidate)g(the)g
(absence)h(of)f(memory)h(con\003icts.)29 b(Finally)-5
b(,)21 b(there)g(is)f(a)h Fg(lo)o(g)2040 4545 y Fh(which)d(contains)g
(a)g(list)e(of)i(the)f(hash)h(entries)g(that)f(are)h(in)f(use)h(and)g
(the)f(orig-)2040 4628 y(inal)i(data)g(v)n(alue)h(from)f(each)g(memory)
h(location)f(that)g(has)g(been)h(modi\002ed.)2040 4711
y(At)26 b(the)h(end)g(of)f(each)h(chunk)h(of)e(parallel)h(iterations)f
(the)h(log)f(is)g(used)h(to)2040 4794 y(either)20 b(commit)g(the)g
(most)g(recent)g(changes)i(permanently)f(to)f(memory)-5
b(,)20 b(or)2040 4877 y(to)f(roll)f(back)i(to)f(the)g(memory)h(state)e
(from)h(the)g(be)o(gining)h(of)f(the)g(chunk.)2152 4960
y(The)29 b(v)n(alidation)g(protocol)h(w)o(orks)f(as)g(follo)n(ws.)52
b(Each)29 b(memory)h(lo-)2040 5043 y(cation)f(has)h(tw)o(o)f
(timestamps)g(associated)g(with)g(it,)h(one)g(indicating)f(the)2040
5126 y(last)h(time)g(a)g(location)h(w)o(as)f(read)h(\()p
Fd(last-read)p Fh(\))d(and)j(one)g(indicating)2040 5209
y(the)25 b(last)f(time)h(a)f(location)i(w)o(as)f(written)f(\()p
Fd(last-written)p Fh(\).)38 b(As)25 b(each)2040 5292
y(load)g(request)f(arri)n(v)o(es,)h(its)e(timestamp)i(\()p
Fd(read-time)p Fh(\))d(is)h(compared)i(to)1922 5627 y(4)p
eop
%%Page: 5 5
5 4 bop -55 -152 a
 14208860 12645880 13024788 13551042 35587932 33811824 startTexFig
 -55 -152 a
%%BeginDocument: figs/hash.epsi
%!PS-Adobe-2.0 EPSF-1.2
%%Title: 
%%Creator: Frame 5.0
%%CreationDate: 23 20:52 tmp-fixfm-24626.ps
%%For:mfrank mfrank
%%Pages: 1
%%DocumentFonts:
%%BoundingBox: 198 206 541 514
%%BeginPreview: 344 307 1 307
% 00000000000000000000000000000000000000104000000000000000000000000000001000102000000000
% 00000000000000000000000000000000000000104000000000000000000000000000001000002000000000
% 00000000000000000000000000000000000000104000000000000000000000000000001000002000000000
% 000000000000000000000000000000000000f9f7ce0000000000000000000000003ef1f1c013e000000000
% 0000000000000000000000000000000000000b3cc8000000000000000000000000239b3220166000000000
% 0000000000000000000000000000000000007a1848000000000000000000000000230a17e0142000000000
% 000000000000000000000000000000000000ca1848000000000000000000000000230a1600142000000000
% 0000000000000000000000000000000000008b3cc8000000000000000000000000239b3220166000000000
% 000000000000000000000000000000000000fdffc800000000000180000000000022f1f1c013e000000000
% 0000000000000000000000000000000000000008000000000000fffc000000000000000000000000000000
% 0000000000000000000000000000000000000008000000000003e01f00000000000000001fc00000000000
% 00000000000000000000000000000000000000080000000000070003800000000000000000000000000000
% 000000000000000000000000000000000000000800000000001c0000e00000000000000000000000000000
% 00000000000000000000000000000000000000080000000000780000780000000000200000000000000000
% 00000000000000000000000000000000000000080000000000700000380000000000200000000000000000
% 00000000000000000000000000000000000000080000000000f800007c0000000000200000000000000000
% 000000000000000000000000000000000000000c0000000000dc0000ec0000000000200000000000000000
% 000000000000000000000000000000000000000c00000000018e0001c60000000000200000000000000000
% 000000000000000000000000000000000000000c0000000003070003830000000000200000000000000000
% 000000000000000000000000000000000000000c0000000003038007030000000000200000000000000000
% 0000000000000000000000000000000000000004000000000601c00e018000000000200000000000000000
% 0000000000000000000000000000000000000006000000000600e01c018000000000200000000000000000
% 00000000000000000000000000000000000000070000000006007038018000000000200000000000000000
% 00000000000000000000000000000000000000038000000004003870008000000000200000000000000000
% 0000000000000000000000000000000000000001e000000804001ce0008000000000200000000000000000
% 00000000000000000000000000000000000000007e00000e0c000fc000c000000000200000000000000000
% 00000000000000000000000000000000000000000fffffff0c00078000ff80000000200000000000000000
% 000000000000000000000000000000000000000000007fff8c00078000fffc000000200000000000000000
% 00000000000000000000000000000000000000000000000e0c000fc000c007000000200000000000000000
% 00000000000000000000000000000000000000000000000004001ce0008001c00000200000000000000000
% 00000000000000000000000000000000000000000000000004003870008000e00000200000000000000000
% 00000000000000000000000000000000000000000000000006007038018000600000200000000000000000
% 0000000000400000000000000000000000000000000000000600e01c018000300000700000000000000000
% 0000000000400800000000000000000000000000000000000601c00e0180001800001c0000000000000000
% 000000000040080000000000000000000000000000000000030380070300001800000e0000000000000000
% 000000000fcfddf80000000000000000000000000000000003070003830000080000039800000000000000
% 0000000018c8490800000000000000000000000000000000018e0001c600000c000001d800000000000000
% 000000001041c8380000000000000000000000000000000000dc0000ec00000c0000007c00000000000000
% 00000000104fc9f80000000000000000000000000000000000f800007c00000c0000003c00000000000000
% 00000000104849080000000000000000000000000000000000700000380000040000007e00000000000000
% 0000000018c8c9180000000000000000000000000000000000780000780000060000007e00000000000000
% 000000000fcfedfc00000000000000000000000000000000001c0000e00000060000000000000000000000
% 00000000000000000000000000000000000000000000000000070003800000060000000000000000000000
% 0000000000000000000000000000000000000000000000000003e01f000000060000000000000000000000
% 0000000000000000000000000000000000000000000000000000fffc000000020000000000000000000000
% 00000000000000000000000000000000000000000000000000000600000000020000001fffffffff000000
% 00000000000000000000000000000000000000000000000000000000000000020000001000000001000000
% 00000000000000000000000000000000000000000000000000000000000000020000001000000001000000
% 00000000000000000000000000000000000000000000000000000000000000020000001000000001000000
% 000001ff9e3ff1e7e300000000000000000000000000000000100000400000030000001000000001000000
% 00000198b33313362200000000000000000000000000000000100000400000030000001000000001000000
% 00000110a12212143600000000000000000000000000000000100000400000030000001000000001000000
% 00000110ff22121434000000000000000000000000000000001fbf1c7e0000030000001000000001000000
% 00000110a02212141c0000000000000000000000000000000018a122620000030000001000000001000000
% 00000110b32213341c00000000000000000000000000000000108730420000030000fc1000000001000000
% 000001109e2211e4180000000000000000000000000000000010bf1c420000030000781000000001000000
% 0000000000000000180000000000000000000000000000000010a102420000030001f81000000001000000
% 0000000000000000180000000000000000000000000000000010a362420000030003b01000000001000000
% 0000000000000000300000000000000000000000000000000010bfbc42000003000e301000000001000000
% 0000000000000000000000000000000000000000000000000000000000000003001c001000000001000000
% 00000000000000000000000000000000000000000000000000000000000000030030001000000001000000
% 00000000000000000000000000000000000000000000000000000000000000010060001000000001000000
% 000000000000000000000000000000000000000000000000000000000000000100c0001000000001000000
% 00000001fffffffff000000000000000000000000000000000000000000000010180001000000001000000
% 00000001000000001000000000000000000000000000000000000000000000010180001000000001000000
% 00000001000000001000000000000000000000000000000000000000000000010300001000000001000000
% 00000001000000001000000000000000000000000000000000000000000000010300001000000001000000
% 00000001000000001000000000000000000000000000000000000000000000010600001000000001000000
% 00000001000000001000000000000000000000000000000000000000000000010600001fffffffff000000
% 00000001000000001000000000000000000000000000000000000000000000010400000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000010400000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000010400000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000010c00000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000010c00000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000010c00000078f1ffbe3f3cf0
% 000000010000000010000000000000000000000000000000000000000000000108000000cd9998b3213198
% 000000010000000010000000000000000000000000000000000000000000000108000000810910a1072108
% 000000010000000010000000000000000000000000000000000000000000000108000000810910a13f23f8
% 000000010000000010000000000000000000000000000000000000000000000108000000850910a1212100
% 000000010000000010000000000000000000000000000000000000000000000108000000cd9910b3232198
% 00000001000000001000000000000000000000000000000000000000000000010800000078f110be3fa0f0
% 00000001000000001000000000000000000000000000000000000000000000010800000000000020000000
% 00000001000000001000000000000000000000000000000000000000000000011800000000000020000000
% 00000001000000001000000000000000000000000000000000000000000000011800000000000020000000
% 00000001000000001000000000000000000000000000000000000000000000011800000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000011800000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000011800000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000011800000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000011800000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000011800000000000000000000
% 000000010000000010000000000000000000000000000000000000000000000ff800000000000000000000
% 0000000100000000100000000000000000000000000000000000000000000007d800000000000000000000
% 0000000100000000100000000000000000000000000000000000000000000003d800000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000019800000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000019800000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000001800000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000001800000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000001800000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000101804000000000000000000
% 00000001000000001000000000000000000000007ffffffffffffffffffffffffffffffffffffffffffffc
% 00000001000000001000000000000000000000004000000000000000000000101804000000000000000004
% 00000001000000001000000000000000000000004000000000000000000000101804000000000000000004
% 00000001000000001000000000000000000000004000000000000000000000101804000000000000000004
% 00000001000000001000000010000000000020004000000000000000000000101804000000000000000004
% 00000001000000001000000010002000000020004000000000000000000000101804000000000000000004
% 00000001000000001000000010002000000020004000000000000000000000101804000000000000000004
% 00000001000000001000000013ef700e71f3e71c4000000000000000000000101804000000000000000004
% 00000001000000001000000010282008881668904000000000000000000000101804000000000000000004
% 00000001000000001000000011ee2009f8f43f904000000000000000000000101804000000000000000004
% 00000001000000001000000013232009819438104000000000000000000000100004000000000000000004
% 00000001000000001000000012392008891668904000000000000000000000100004000000000000000004
% 00000001000000001000000013ff300871fbe7104000000000000000000000100004000000000000000004
% 00000001000000001000000000000000000000004000000000000000000000100004000000000000000004
% 000000010000000010000000000007f0000000004000000000000000000000100004000000000000000004
% 00000001000000001000000000000000000000004000000000000000000000100004000000000000000004
% 00000001000000001000000000000000000000004000000000000000000000100004000000000000000004
% 00000001000000001000000000000000000000004000000000000000000000100004000000000000000004
% 0000000100000000100000000000000000000000fffffffffffffffffffffffffffffffffffffffffffffc
% 00000001000000001000000000000000000000004000000000000000000000100004000000000000000004
% 00000001000000001000000001000000000400004000000000000000000000100004000000000000000004
% 00000001000000001000000001000200000100004000000000000000000000100004000000000000000004
% 00000001000000001000000001000200000100004000000000000000000000100004000000000000000004
% 000000010000000010000000017cf70133778e384000000000000000000000100004000000000000000004
% 00000001000000001000000001048201b24511204000000000000000000000100004000000000000000004
% 000000010000000010000000013ce200ba453f204000000000000000000000100004000000000000000004
% 00000001000000001000000001643200ae4530204000000000000000000000100004000000000000000004
% 00000001000000001000000001459200ec4511204000000000000000000000100004000000000000000004
% 000000010000000010000000017ef300cc458e204000000000000000000000100004000000000000000004
% 00000001000000001000000000000000000000004000000000000000000000100004000000000000000004
% 0000000100000000100000000000007f000000004000000000000000000000100004000000000000000004
% 00000001000000001000000000000000000000004000000000000000000000100004000000000000000004
% 00000001000000001000000000000000000000004000000000000000000000100004000000000000000004
% 00000001000000001000000000000000000000004000000000000000000000100004000000000000000004
% 00000001000000001000000000000000000000004000000000000000000000100004000000000000000004
% 00000001000000001000000000000000000000004000000000000000000000100004000000000000000004
% 0000000100000000100000000000000000000000fffffffffffffffffffffffffffffffffffffffffffffc
% 00000001000000001000000000000000000000004000000000000000000000100004000000000000000004
% 00000001000000001000000000000000000000004000000000000000000000100004000000000000000004
% 00000001000000001000000000000000000400004000000000000000000000100004000000000000000004
% 00000001000000001000000000000000000400004000000000000000000000100004000000000000000004
% 00000001000000001000000000000000000ef9f04000000000000000000000100004000000000000000004
% 0000000100000000100000000000000000040b304000000000000000000000100004000000000000000004
% 0000000100000000100000000000000000047a304000000000000000000000103c04000000000000000004
% 000000010000000010000000000000000004ca304000000000000000000000103c04000000000000000004
% 0000000100000000100000000000000000048b304000000000000000000000103c04000000000000000004
% 000000010000000010000000000000000006fdf04000000000000000000000103c04000000000000000004
% 00000001000000001000000000000000000000304000000000000000000000101804000000000000000004
% 00000001000000001000000000000000000001304000000000000000000000101804000000000000000004
% 00000001000000001000000000000000000001e04000000000000000000000101804000000000000000004
% 00000001000000001000000000000000000000004000000000000000000000101804000000000000000004
% 00000001000000001000000000000000000000004000000000000000000000101004000000000000000004
% 00000001000000001000000000000000000000004000000000000000000000101004000000000000000004
% 00000001000000001000000000000000000000004000000000000000000000103004000000000000000004
% 00000003fffffffff000000000000000000000007ffffffffffffffffffffffffffffffffffffffffffffc
% 00000001000000001000000000000000000000000000000000000000000000003000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000006000000000000000000000
% 0000000100000000100000000000000000000000000000000000000000000000c000000000000000000000
% 0000000100000000100000000000000000000000000000000000000000000001c000000000000000000000
% 00104001008000001000000000000000000000000000000000000000000000038000004000000000000000
% 001040010080400010000000000000000000000000000000000000000000001e0000040000000100000000
% 00104001008040001000000000000000000000000000000000000000000000780000040000000100000000
% f9f7ce810f9fe7c01000000000000000000000000000000000000000000007e000000e4ffc78739f9ffbe0
% 0b3cc8011981404010000000000000000000000000000000000000000001fe00000c044cc4cc8910998b30
% 7a184801108f43c0101800000000000000000000000000000000000003ffe000000c04488484c103910a10
% ca1848011099464010380000000000000000000000000000000001fffff00000001e044885fc711f910a10
% 8b3cc80119914440107800000000000000000000000003ffffffffff00000000001e044884800910910a10
% fdf7c8810f9fe7e011ffffffffffffffffffffffffffffffff80000000000000003f044884cd8911910b30
% 000000010000000011f800000000000000000000000000000000000000000000003f06488478f19fd10be0
% 0000000100000000107800000000000000000000000000000000000000000000000c000000000000000200
% 0000000100000000101800000000000000000000000000000000000000000000000c000000000000000200
% 0000000100000000100000000000000000000000000000000000000000000000000c000000000000000200
% 00000003fffffffff00000000000000000000000000000000000000000000000000c000000000000008000
% 0000000100000000100000000000000000000000000000000000000000000000000c000000000000008000
% 0000000100000000100000000000000000000000000000000000000000000000000c000000000000008000
% 0000000100000000100000000000000000000000000000000000000000000000000c000000001e7e3cfc78
% 0000000100000000100000000000000000000000000000000000000000000000000800000000334266c4cc
% 0000000100000000100000000000000000000000000000000000000000000000000800000000200e408484
% 0000000100000000100000000000000000000000000000000000000000000000000800000000207e4085fc
% 00000001000000001000000000000000000000000000000000000000000000000008000000002142428480
% 000000010000000010000000000000000000000000000000000000000000000000180000000033466684cc
% 00000001000000001000000000000000000000000000000000000000000000000018000000001e7f3c8478
% 00000001000000001000000000000000000000000000000000000000000000000010000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000030000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000030000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000060000000000000000000
% 000000010000000010000000000000000000000000000000000000000000000000c0000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000780000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000007e00000000000000000000
% 000000010000000010000000000000000000000000000000000000001ffffffff800000000000000000000
% 0000000100000000100000000000000000000000000000000000007fffffff000000000000000000000000
% 000000010000000010000000000000000000000000000000000003e0000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000f00000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000001c00000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000003800000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000006000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000004000000000000000000000000000000000
% 0000000100000000100000000000000000000000000000000000c000000000000000000000000000000000
% 0000000100000000100000000000000000000000000000000000c000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000018000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000018000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000010000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000010000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000010000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000030000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000030000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000030000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000030000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000020000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000020000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000020000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000020000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000020000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000020000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000020000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000060000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000060000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000060000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000060000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000060000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000060000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000060000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000060000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000060000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000060000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000004060100000000000000000000000000000000
% 00000001000000001000000000000000000000007ffffffffffffffffffffffffffffffffffffffffffffc
% 00000001000000001000000000000000000000004000000004060100000000000000000000000000000004
% 00000001000000001000000010000200000000004000000004060100000000000000000000000000000004
% 00000001000000001000000010000200000040004000000004060100000000000000000000000000000004
% 00000001000000001000000010000200000040004000000004060100000000000000000000000000000004
% 0000000100000000100000001f3ef3e0073eef984000000004060100000000000000000000000000000004
% 0000000100000000100000001102822008a248904000000004060100000000000000000000000000000004
% 000000010000000010000000111ee2201fa2489040000000040f0100000000000000000000000000000004
% 00000001000000001000000011323220182248f040000000040f0100000000000000000000000000000004
% 0000000100000000100000001123922008a2486040000000040f0100000000000000000000000000000004
% 000000010000000010000000113ff2200722686040000000040f0100000000000000000000000000000004
% 00000001000000001000000000000000000000404000000004000100000000000000000000000000000004
% 0000000100000000100000000000000fe00000404000000004000100000000000000000000000000000004
% 00000001000000001000000000000000000000804000000004000100000000000000000000000000000004
% 00000001000000001000000000000000000000004000000004000100000000000000000000000000000004
% 00000001000000001000000000000000000000004000000004000100000000000000000000000000000004
% 00000001000000001000000000000000000000004000000004000100000000000000000000000000000004
% 00000001000000001000000000000000000000004000000004000100000000000000000000000000000004
% 0000000100000000100000000000000000000000fffffffffffffffffffffffffffffffffffffffffffffc
% 00000001000000001000000000000000000000004000000004000100000000000000000000000000000004
% 00000001000000001000000000400008000080004000000004000100000000000000000000000000000004
% 00000001000000001000000000400008000000404000000004000100000000000000000000000000000004
% 00000001000000001000000000400008000000404000000004000100000000000000000000000000000004
% 0000000100000000100000001e7c73c93c78bee04000000004000100000000000000000000000000000004
% 00000001000000001000000033448e6a36cca2404000000004000100000000000000000000000000000004
% 0000000100000000100000002045fc0e2284a2404000000004000100000000000000000000000000000004
% 0000000100000000100000002045840b2284a2404000000004000100000000000000000000000000000004
% 00000001000000001000000033448e6936cca2404000000004000100000000000000000000000000000004
% 0000000100000000100000001e4473c9bc78a2604000000004000100000000000000000000000000000004
% 00000001000000001000000000000000200000004000000004000100000000000000000000000000000004
% 00000001000000001000000000000000200000004000000004000100000000000000000000000000000004
% 00000001000000001000000000000000200000004000000004000100000000000000000000000000000004
% 00000001000000001000000000000000000000004000000004000100000000000000000000000000000004
% 00000001000000001000000000000000000000004000000004000100000000000000000000000000000004
% 00000001000000001000000000000040000000004000000004000100000000000000000000000000000004
% 00000001000000001000000000000040200000004000000004000100000000000000000000000000000004
% 00000001000000001000000000000040200000007ffffffffffffffffffffffffffffffffffffffffffffc
% 000000010000000010000000000007cff3e000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000cc0a02000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000847a1e000000000000000000000000000000000000000000000000000
% 0000000100000000100000000000084ca32000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000cc8a22000000000000000000000000000000000000000000000100000
% 000000010000000010000000000007cff3f000000000000000000000000000000000000000000000100000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000100000
% 0000000100000000100000000000000000000000000000000000000000000000000000000000000011e1f0
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000133330
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000121230
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000121230
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000121230
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000133330
% 0000000100000000100000000000000000000000000000000000000000000000000000000000000011e3f0
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000030
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000230
% 000000010000000010000000000000000000000000000000000000000000000000000000000000000001e0
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001000000001000000000000000000000000000000000000000000000000000000000000000000000
% 00000001fffffffff000000000000000000000000000000000000000000000000000000000000000000000
%%EndImage
%%EndPreview
save
countdictstack
mark
newpath
/showpage {} def
%%EndProlog
%%Page 1 1
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		 {papersizefailure} if
		 {} stopped pop
		 
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
%	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(5.0) FMVERSION
1 1 0 0 612 792 0 1 2 FMDOCUMENT
0 0 /Helvetica FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 0.5 1 0 0 0.5 0 1]
[ 0.4 1 0 0 0.6 0 1]
[ 0.3 1 0 0 0.7 0 1]
[ 0.2 1 0 0 0.8 0 1]
[ 0.1 1 0 0 0.9 0 1]
[ 0 0.5 1 0 1 0.5 0]
[ 0.4 1 0 0 0.6 0 1]
[ 0.2 1 0 0 0.8 0 1]
[ 0.7 1 0 0 0.3 0 1]
[ 0.8 1 0 0 0.2 0 1]
[ 0.9 1 0 0 0.1 0 1]
[ 0.3 1 0 0 0.7 0 1]
[ 0 0.2 0 0.8 0.2 0 0.2]
[ 0 0.25 1 0 1 0.75 0]
[ 0 0 0 0 1 1 1]
[ 0 0 0 1 0 0 0]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 1 1 0 0 0 0 1]
[ 0 0 1 0 1 1 0]
[ 1 0 1 0 0 1 0]
[ 0 1 1 0 1 0 0]
[ 0 0 0 0.5 0.5 0.5 0.5]
[ 0.02 0.02 0 0.36 0.63 0.63 0.64]
[ 0 0.02 0.06 0 1 0.98 0.94]
[ 0.4 0 0 0.6 0 0.4 0.4]
[ 0 0.8 0.6 0 1 0.2 0.4]
[ 0 0.6 0.4 0.2 0.8 0.2 0.4]
[ 0 0.4 0.2 0.4 0.6 0.2 0.4]
[ 0 0.2 0 0.6 0.4 0.2 0.4]
[ 0.2 0.2 0 0.6 0.2 0.2 0.4]
[ 0.4 0.2 0 0.6 0 0.2 0.4]
[ 0 1 0.6 0 1 0 0.4]
[ 0 0.8 0.4 0.2 0.8 0 0.4]
[ 0 0.6 0.2 0.4 0.6 0 0.4]
[ 0 0.4 0 0.6 0.4 0 0.4]
[ 0.2 0.4 0 0.6 0.2 0 0.4]
[ 0.4 0.4 0 0.6 0 0 0.4]
[ 0 0 0.8 0 1 1 0.2]
[ 0.2 0 0.8 0 0.8 1 0.2]
[ 0.4 0 0.8 0 0.6 1 0.2]
[ 0.6 0 0.8 0 0.4 1 0.2]
[ 0.8 0 0.8 0 0.2 1 0.2]
[ 0 0.2 0.8 0 1 0.8 0.2]
[ 0 0 0.6 0.2 0.8 0.8 0.2]
[ 0.2 0 0.6 0.2 0.6 0.8 0.2]
[ 0.4 0 0.6 0.2 0.4 0.8 0.2]
[ 0.6 0 0.6 0.2 0.2 0.8 0.2]
[ 0.8 0 0.6 0.2 0 0.8 0.2]
[ 0 0.4 0.8 0 1 0.6 0.2]
[ 0 0.2 0.6 0.2 0.8 0.6 0.2]
[ 0 0 0.4 0.4 0.6 0.6 0.2]
[ 0.2 0 0.4 0.4 0.4 0.6 0.2]
[ 0.4 0 0.4 0.4 0.2 0.6 0.2]
[ 0.6 0 0.4 0.4 0 0.6 0.2]
[ 0 0.6 0.8 0 1 0.4 0.2]
[ 0 0.4 0.6 0.2 0.8 0.4 0.2]
[ 0 0.2 0.4 0.4 0.6 0.4 0.2]
[ 0 0 0.2 0.6 0.4 0.4 0.2]
[ 0.2 0 0.2 0.6 0.2 0.4 0.2]
[ 0.4 0 0.2 0.6 0 0.4 0.2]
[ 0 0.8 0.8 0 1 0.2 0.2]
[ 0 0.6 0.6 0.2 0.8 0.2 0.2]
[ 0 0.4 0.4 0.4 0.6 0.2 0.2]
[ 0 0.2 0.2 0.6 0.4 0.2 0.2]
[ 0 0 0 0.8 0.2 0.2 0.2]
[ 0.2 0 0 0.8 0 0.2 0.2]
[ 0 1 0.8 0 1 0 0.2]
[ 0 0.8 0.6 0.2 0.8 0 0.2]
[ 0 0.6 0.4 0.4 0.6 0 0.2]
[ 0 0.4 0.2 0.6 0.4 0 0.2]
[ 0 0.2 0 0.8 0.2 0 0.2]
[ 0.2 0.2 0 0.8 0 0 0.2]
[ 0.2 0 1 0 0.8 1 0]
[ 0.4 0 1 0 0.6 1 0]
[ 0.6 0 1 0 0.4 1 0]
[ 0 0.2 1 0 1 0.8 0]
[ 0 0 0.8 0.2 0.8 0.8 0]
[ 0.2 0 0.8 0.2 0.6 0.8 0]
[ 0.4 0 0.8 0.2 0.4 0.8 0]
[ 0.6 0 0.8 0.2 0.2 0.8 0]
[ 0.8 0 0.8 0.2 0 0.8 0]
[ 0 0.4 1 0 1 0.6 0]
[ 0 0.2 0.8 0.2 0.8 0.6 0]
[ 0 0 0.6 0.4 0.6 0.6 0]
[ 0.2 0 0.6 0.4 0.4 0.6 0]
[ 0.4 0 0.6 0.4 0.2 0.6 0]
[ 0.6 0 0.6 0.4 0 0.6 0]
[ 0 0.6 1 0 1 0.4 0]
[ 0 0.4 0.8 0.2 0.8 0.4 0]
[ 0 0.2 0.6 0.4 0.6 0.4 0]
[ 0 0 0.4 0.6 0.4 0.4 0]
[ 0.2 0 0.4 0.6 0.2 0.4 0]
[ 0.4 0 0.4 0.6 0 0.4 0]
[ 0 0.8 1 0 1 0.2 0]
[ 0 0.6 0.8 0.2 0.8 0.2 0]
[ 0 0.4 0.6 0.4 0.6 0.2 0]
[ 0 0.2 0.4 0.6 0.4 0.2 0]
[ 0 0 0.2 0.8 0.2 0.2 0]
[ 0.2 0 0.2 0.8 0 0.2 0]
[ 0 0.8 0.8 0.2 0.8 0 0]
[ 0 0.6 0.6 0.4 0.6 0 0]
[ 0 0.4 0.4 0.6 0.4 0 0]
[ 0 0.2 0.2 0.8 0.2 0 0]
[ 0 0.02 0.11 0.32 0.68 0.66 0.56]
[ 0 0 0.07 0.09 0.91 0.91 0.84]
[ 0 0.1 0.16 0.06 0.94 0.84 0.78]
[ 0.2 0.07 0 0 0.8 0.93 1]
[ 0 0.84 0.26 0.16 0.84 0 0.58]
[ 0 0.69 0.69 0 1 0.31 0.31]
[ 0 0.51 0.5 0 1 0.49 0.5]
[ 0 0 0 0.78 0.22 0.22 0.22]
[ 0 0 0 0.74 0.26 0.26 0.26]
[ 0 0 0 0.7 0.3 0.3 0.3]
[ 0 0 0 0.67 0.33 0.33 0.33]
[ 0 0 0 0.84 0.16 0.16 0.16]
[ 0 0 0 0.87 0.13 0.13 0.13]
[ 0 0 0 0.89 0.11 0.11 0.11]
[ 0 0 0 0.91 0.09 0.09 0.09]
[ 0 0 0 0.93 0.07 0.07 0.07]
[ 0 0 0 0.95 0.05 0.05 0.05]
[ 0 0 0 0.97 0.03 0.03 0.03]
[ 0 0 0 0.98 0.02 0.02 0.02]
[ 0 0.25 1 0 1 0.75 0]
[ 0.9 1 0 0 0.1 0 1]
[ 0.8 1 0 0 0.2 0 1]
[ 0.7 1 0 0 0.3 0 1]
[ 0 0.5 1 0 1 0.5 0]
[ 0.1 1 0 0 0.9 0 1]
[ 0.2 1 0 0 0.8 0 1]
[ 0.3 1 0 0 0.7 0 1]
[ 0.4 1 0 0 0.6 0 1]
[ 0.5 1 0 0 0.5 0 1]
[ 0 0.29 0 0 1 0.71 1]
[ 0 0.41 0 0 1 0.59 1]
[ 0 0.59 0 0 1 0.41 1]
[ 0 0.71 0 0 1 0.29 1]
[ 0.35 0 0 0 0.65 1 1]
[ 0.35 0.29 0 0 0.65 0.71 1]
[ 0.35 0.41 0 0 0.65 0.59 1]
[ 0.35 0.59 0 0 0.65 0.41 1]
[ 0.35 0.71 0 0 0.65 0.29 1]
[ 0.35 1 0 0 0.65 0 1]
[ 0.5 0 0 0 0.5 1 1]
[ 0.5 0.29 0 0 0.5 0.71 1]
[ 0.5 0.41 0 0 0.5 0.59 1]
[ 0.5 0.59 0 0 0.5 0.41 1]
[ 0.5 0.71 0 0 0.5 0.29 1]
[ 0.5 1 0 0 0.5 0 1]
[ 0.65 0 0 0 0.35 1 1]
[ 0.65 0.29 0 0 0.35 0.71 1]
[ 0.65 0.41 0 0 0.35 0.59 1]
[ 0.65 0.59 0 0 0.35 0.41 1]
[ 0.65 0.71 0 0 0.35 0.29 1]
[ 0.65 1 0 0 0.35 0 1]
[ 1 0.29 0 0 0 0.71 1]
[ 1 0.41 0 0 0 0.59 1]
[ 1 0.59 0 0 0 0.41 1]
[ 1 0.71 0 0 0 0.29 1]
[ 0 0 0.39 0 1 1 0.61]
[ 0 0.29 0.39 0 1 0.71 0.61]
[ 0 0.41 0.39 0 1 0.59 0.61]
[ 0 0.59 0.39 0 1 0.41 0.61]
[ 0 0.71 0.39 0 1 0.29 0.61]
[ 0 1 0.39 0 1 0 0.61]
[ 0.35 0 0.39 0 0.65 1 0.61]
[ 0.06 0 0.1 0.29 0.65 0.71 0.61]
[ 0 0.06 0.04 0.35 0.65 0.59 0.61]
[ 0 0.24 0.04 0.35 0.65 0.41 0.61]
[ 0 0.35 0.04 0.35 0.65 0.29 0.61]
[ 0 0.65 0.04 0.35 0.65 0 0.61]
[ 0.5 0 0.39 0 0.5 1 0.61]
[ 0.2 0 0.1 0.29 0.5 0.71 0.61]
[ 0.11 0.02 0 0.39 0.5 0.59 0.61]
[ 0.11 0.2 0 0.39 0.5 0.41 0.61]
[ 0.11 0.31 0 0.39 0.5 0.29 0.61]
[ 0.11 0.61 0 0.39 0.5 0 0.61]
[ 0.65 0 0.39 0 0.35 1 0.61]
[ 0.35 0 0.1 0.29 0.35 0.71 0.61]
[ 0.25 0.02 0 0.39 0.35 0.59 0.61]
[ 0.25 0.2 0 0.39 0.35 0.41 0.61]
[ 0.25 0.31 0 0.39 0.35 0.29 0.61]
[ 0.25 0.61 0 0.39 0.35 0 0.61]
[ 1 0 0.39 0 0 1 0.61]
[ 0.71 0 0.1 0.29 0 0.71 0.61]
[ 0.61 0.02 0 0.39 0 0.59 0.61]
[ 0.61 0.2 0 0.39 0 0.41 0.61]
[ 0.61 0.31 0 0.39 0 0.29 0.61]
[ 0.61 0.61 0 0.39 0 0 0.61]
[ 0 0 0.61 0 1 1 0.39]
[ 0 0.29 0.61 0 1 0.71 0.39]
[ 0 0.41 0.61 0 1 0.59 0.39]
[ 0 0.59 0.61 0 1 0.41 0.39]
[ 0 0.71 0.61 0 1 0.29 0.39]
[ 0 1 0.61 0 1 0 0.39]
[ 0.35 0 0.61 0 0.65 1 0.39]
[ 0.06 0 0.31 0.29 0.65 0.71 0.39]
[ 0 0.06 0.25 0.35 0.65 0.59 0.39]
[ 0 0.24 0.25 0.35 0.65 0.41 0.39]
[ 0 0.35 0.25 0.35 0.65 0.29 0.39]
[ 0 0.65 0.25 0.35 0.65 0 0.39]
[ 0.5 0 0.61 0 0.5 1 0.39]
[ 0.2 0 0.31 0.29 0.5 0.71 0.39]
[ 0.09 0 0.2 0.41 0.5 0.59 0.39]
[ 0 0.09 0.11 0.5 0.5 0.41 0.39]
[ 0 0.21 0.11 0.5 0.5 0.29 0.39]
[ 0 0.5 0.11 0.5 0.5 0 0.39]
[ 0.65 0 0.61 0 0.35 1 0.39]
[ 0.35 0 0.31 0.29 0.35 0.71 0.39]
[ 0.24 0 0.2 0.41 0.35 0.59 0.39]
[ 0.06 0 0.02 0.59 0.35 0.41 0.39]
[ 0.04 0.1 0 0.61 0.35 0.29 0.39]
[ 0.04 0.39 0 0.61 0.35 0 0.39]
[ 1 0 0.61 0 0 1 0.39]
[ 0.71 0 0.31 0.29 0 0.71 0.39]
[ 0.59 0 0.2 0.41 0 0.59 0.39]
[ 0.41 0 0.02 0.59 0 0.41 0.39]
[ 0.39 0.1 0 0.61 0 0.29 0.39]
[ 0.39 0.39 0 0.61 0 0 0.39]
[ 0 0.29 1 0 1 0.71 0]
[ 0 0.41 1 0 1 0.59 0]
[ 0 0.59 1 0 1 0.41 0]
[ 0 0.71 1 0 1 0.29 0]
[ 0.35 0 1 0 0.65 1 0]
[ 0.06 0 0.71 0.29 0.65 0.71 0]
[ 0 0.06 0.65 0.35 0.65 0.59 0]
[ 0 0.24 0.65 0.35 0.65 0.41 0]
[ 0 0.35 0.65 0.35 0.65 0.29 0]
[ 0 0.65 0.65 0.35 0.65 0 0]
[ 0.5 0 1 0 0.5 1 0]
[ 0.2 0 0.71 0.29 0.5 0.71 0]
[ 0.09 0 0.59 0.41 0.5 0.59 0]
[ 0 0.09 0.5 0.5 0.5 0.41 0]
[ 0 0.21 0.5 0.5 0.5 0.29 0]
[ 0.65 0 1 0 0.35 1 0]
[ 0.35 0 0.71 0.29 0.35 0.71 0]
[ 0.24 0 0.59 0.41 0.35 0.59 0]
[ 0.06 0 0.41 0.59 0.35 0.41 0]
[ 0 0.06 0.35 0.65 0.35 0.29 0]
[ 0 0.35 0.35 0.65 0.35 0 0]
[ 0.71 0 0.71 0.29 0 0.71 0]
[ 0.59 0 0.59 0.41 0 0.59 0]
[ 0.41 0 0.41 0.59 0 0.41 0]
[ 0.29 0 0.29 0.71 0 0.29 0]
[ 0 0 0 0.06 0.94 0.94 0.94]
[ 0 0 0 0.12 0.88 0.88 0.88]
[ 0 0 0 0.18 0.82 0.82 0.82]
[ 0 0 0 0.24 0.76 0.76 0.76]
[ 0 0 0 0.29 0.71 0.71 0.71]
[ 0 0 0 0.35 0.65 0.65 0.65]
[ 0 0 0 0.41 0.59 0.59 0.59]
[ 0 0 0 0.47 0.53 0.53 0.53]
[ 0 0 0 0.53 0.47 0.47 0.47]
[ 0 0 0 0.59 0.41 0.41 0.41]
[ 0 0 0 0.65 0.35 0.35 0.35]
[ 0 0 0 0.71 0.29 0.29 0.29]
[ 0 0 0 0.76 0.24 0.24 0.24]
[ 0 0 0 0.82 0.18 0.18 0.18]
[ 0 0 0 0.88 0.12 0.12 0.12]
[ 0 0 0 0.94 0.06 0.06 0.06]
[ 0.29 0.15 0 0.06 0.65 0.79 0.94]
[ 0.11 0 0.11 0.14 0.75 0.86 0.75]
[ 0 0 0 0.25 0.75 0.75 0.75]
[ 0.5 0 0 0.5 0 0.5 0.5]
[ 0 0.5 0 0.5 0.5 0 0.5]
[ 0.5 0.5 0 0.5 0 0 0.5]
[ 0 0 0.5 0.5 0.5 0.5 0]
[ 0.5 0 0.5 0.5 0 0.5 0]
[ 0 0.5 0.5 0.5 0.5 0 0]
[ 0 0.25 1 0 1 0.75 0]
 277 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
360 360 540 414 R
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
360 396 540 396 2 L
N
360 378 540 378 2 L
N
0 0 0 1 0 0 0 K
0 14 Q
(timestamp) 475.43 345.45 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cache) 504 331.95 T
0 0 0 1 0 0 0 K
468 414 468 360 2 L
N
450 414 450 360 2 L
N
360 252 540 288 R
N
360 270 540 270 2 L
N
396 288 396 252 2 L
N
414 288 414 252 2 L
N
90 450 2.25 2.25 405 279 G
467.99 346.33 465.87 346.34 468 350 470.11 346.33 4 Y
0 Z
N
467.99 346.33 465.87 346.34 468 350 470.11 346.33 4 Y
V
405 279 M
 405 324 405 324 436.5 324 D
 465.85 324 467.95 324 467.99 345.83 D
2 Z
N
90 450 2.25 2.25 459 369 G
229.5 207 265.5 450 R
N
229.5 360 265.5 360 2 L
N
229.5 342 265.5 342 2 L
N
0 0 0 1 0 0 0 K
(log) 521.32 237.45 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(data) 234 470.9 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(memory) 220.5 457.4 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(addr:) 198 346.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(data) 234 346.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(last_reader) 297 400.88 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(last_writer) 300.83 384.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tag) 338.82 366.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(hash_entry) 297 276.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(checkpoint) 297 258.98 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(data) 315 245.48 T
0 0 0 1 0 0 0 K
274.71 346.5 274.71 344.36 271 346.5 274.71 348.64 4 Y
0 Z
N
274.71 346.5 274.71 344.36 271 346.5 274.71 348.64 4 Y
V
459 369 M
 459 346.71 459 346.5 275.21 346.5 D
2 Z
N
90 450 18 18 45 414 486 AA
401.27 498.73 426.73 473.27 2 L
N
401.27 473.27 426.73 498.73 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(addr) 342 504.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
(hash) 400.5 454.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(node_id) 463.5 504 T
0 0 0 1 0 0 0 K
386.79 486 386.79 488.14 390.5 486 386.79 483.86 4 Y
0 Z
N
386.79 486 386.79 488.14 390.5 486 386.79 483.86 4 Y
V
355.5 504 M
 355.5 486.91 355.5 486.02 386.29 486 D
2 Z
N
454.5 423.2 456.64 423.2 454.5 419.5 452.36 423.2 4 Y
0 Z
N
454.5 423.2 456.64 423.2 454.5 419.5 452.36 423.2 4 Y
V
432 486 M
 453.91 486 454.49 486 454.5 423.7 D
2 Z
N
472.84 456.89 471.89 458.77 476.11 458.55 473.8 455 4 Y
0 Z
N
472.84 456.89 471.89 458.77 476.11 458.55 473.8 455 4 Y
V
459 405 M
 459 445.78 458.9 449.8 472.4 456.66 D
2 Z
N
482.09 475.11 483.28 476.88 485.17 473.05 480.91 473.33 4 Y
0 Z
N
482.09 475.11 483.28 476.88 485.17 473.05 480.91 473.33 4 Y
V
472.5 499.5 472.5 481.5 481.68 475.38 3 L
2 Z
N
481.5 445.5 517.5 468 R
N
0 0 0 1 0 0 0 K
0 14 Q
(compare) 486 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%Trailer
cleartomark
countdictstack exch sub { end } repeat
restore
%%EOF

%%EndDocument

 endTexFig
 -152 1616 a Fh(Figure)23 b(3:)30 b(Data)22 b(structures)h(used)g(by)g
(the)g(memory)g(dependence)i(specu-)-152 1699 y(lation)19
b(subsystem.)-152 1948 y(the)28 b Fd(last-written)e Fh(stamp)i(for)g
(its)g(memory)g(location.)51 b(If)28 b Fd(read-)-152
2031 y(time)17 b Fc(\025)h Fd(last-written)e Fh(then)i(the)g(load)h(is)
f(okay)h(and)f Fd(last-read)-152 2114 y Fh(is)36 b(updated)i(to)e
Fd(read-time)p Fh(,)j(otherwise)d(the)h(system)f(\003ags)h(a)f(mis-)
-152 2197 y(speculation)20 b(and)g(aborts)f(the)g(current)g(chunk.)-40
2280 y(On)h(a)f(store)g(request,)h(its)e(timestamp)h(\()p
Fd(write-time)p Fh(\))e(is)i(compared)-152 2363 y(\002rst)c(to)g(the)h
Fd(last-read)e Fh(stamp)i(for)f(its)g(memory)h(location.)23
b(If)15 b Fd(write-)-152 2446 y(time)j Fc(\025)h Fd(last-read)e
Fh(then)i(the)g(store)g(is)f(okay)-5 b(,)20 b(otherwise)f(the)g(system)
-152 2529 y(\003ags)d(a)g(mis-speculation)h(and)g(aborts)g(the)f
(current)g(chunk.)24 b(So)16 b(that)g(a)g(store)-152
2612 y(can)23 b(be)f(rolled)g(back)g(in)g(the)g(case)g(of)g(a)f(later)h
(abort,)g(the)g(old)g(v)n(alue)h(of)f(the)-152 2695 y(memory)c
(location)g(is)e(copied)i(into)f(the)h(log)f(before)g(the)h(ne)n(w)f
(store)g(request)-152 2778 y(is)i(e)o(x)o(ecuted.)-40
2861 y(W)-6 b(e)20 b(ha)o(v)o(e)g(implemented)h(an)g(optimization)g(on)
f(store)g(requests)h(that)f(is)-152 2944 y(kno)n(wn)k(as)e(the)h
(Thomas)g(Write)e(Rule)h([4].)33 b(This)22 b(is)g(basically)h(the)g
(obser)o(-)-152 3027 y(v)n(ation)29 b(that)f(if)g Fd(write-time)e
Fe(<)i Fd(last-written)e Fh(then)j(the)f(v)n(alue)-152
3110 y(being)22 b(stored)f(by)g(the)f(current)h(request)g(has)g(been)g
(logically)g(o)o(v)o(er)o(-written)-152 3193 y(without)e(e)n(v)o(er)f
(ha)o(ving)h(been)g(consumed,)h(so)e(the)g(request)h(can)f(be)h
(ignored.)-152 3276 y(If)25 b Fd(write-time)f Fc(\025)h
Fd(last-written)f Fh(then)i(the)f(store)h(is)f(okay)i(and)-152
3359 y Fd(last-written)17 b Fh(is)h(updated)j(as)e Fd(write-time)p
Fh(.)-40 3442 y(The)24 b(f)o(act)g(that)f(SUDS)g(synchronizes)i(the)f
(processing)h(elements)f(be-)-152 3525 y(tween)e(each)f(chunk)i(of)e
(loop)g(iterations)g(permits)g(us)g(to)g(simplify)g(the)g(im-)-152
3608 y(plementation)i(of)f(the)g(v)n(alidation)g(protocol.)33
b(In)22 b(particular)g(the)f(synchro-)-152 3691 y(nization)e(point)f
(can)g(be)g(used)h(to)f(commit)f(or)h(roll)g(back)g(the)g(logs)g(and)h
(reset)-152 3775 y(the)i(timestamp)g(to)f(0.)28 b(Because)21
b(the)g(timestamp)g(is)f(reset)g(we)h(can)g(use)g(the)-152
3858 y(requester')l(s)29 b(physical)f(node-id)h(as)f(the)f(timestamp)h
(for)g(each)h(incoming)-152 3941 y(memory)20 b(request.)-40
4024 y(In)26 b(addition,)i(the)d(relati)n(v)o(ely)h(frequent)g(log)g
(cleaning)g(means)h(that)e(at)-152 4107 y(an)o(y)30 b(point)g(in)f
(time)g(there)h(are)f(only)h(a)g(small)f(number)h(of)g(memory)g(lo-)
-152 4190 y(cations)f(that)f(ha)o(v)o(e)g(a)g(non-zero)i(timestamp.)50
b(T)-6 b(o)28 b(a)o(v)o(oid)g(w)o(asting)h(enor)o(-)-152
4273 y(mous)16 b(amounts)g(of)f(memory)g(space)h(storing)f(0)g
(timestamps,)h(we)f(cache)h(the)-152 4356 y(acti)n(v)o(e)27
b(timestamps)g(in)g(a)f(relati)n(v)o(ely)h(small)f(direct-mapped)i
(hash)g(table.)-152 4439 y(Each)22 b(hash)g(table)f(entry)h(contains)g
(a)f(pair)h(of)f Fd(last-read)f Fh(and)i Fd(last-)-152
4522 y(written)g Fh(timestamps)i(and)g(a)f(cache-tag)h(to)f(indicate)h
(which)g(memory)-152 4605 y(location)c(o)n(wns)f(the)g(hash)h(entry)-5
b(.)-40 4688 y(As)20 b(each)h(memory)g(request)g(arri)n(v)o(es,)f(its)g
(address)h(is)f(hashed.)28 b(If)19 b(there)-152 4771
y(is)f(a)f(hash)i(con\003ict)e(with)g(a)h(dif)n(ferent)g(address)g(the)
g(v)n(alidation)h(mechanism)-152 4854 y(conserv)n(ati)n(v)o(ely)e
(\003ags)e(a)g(mis-speculation)h(and)g(aborts)g(the)f(current)h(chunk.)
-152 4937 y(If)26 b(there)h(is)f(no)h(hash)g(con\003ict)f(the)h
(timestamp)f(ordering)h(mechanism)h(is)-152 5020 y(in)m(v)o(ok)o(ed)21
b(as)d(described)i(abo)o(v)o(e.)-40 5103 y(Log)36 b(entries)f(only)h
(need)g(to)g(be)f(created)h(the)g(\002rst)e(time)h(a)g(chunk)-152
5186 y(touches)29 b(a)e(memory)h(location,)i(at)d(the)h(same)g(time)f
(an)g(empty)h(hash)g(en-)-152 5269 y(try)20 b(is)f(allocated.)26
b(Future)20 b(references)h(to)e(the)h(same)g(memory)h(location)f(do)
-152 5352 y(not)27 b(need)g(to)g(be)g(logged,)i(as)d(the)h(original)g
(memory)g(v)n(alue)g(has)g(already)p 2649 -72 775 4 v
2647 11 4 84 v 2774 -14 a(Operation)170 b(Cost)p 3422
11 V 2649 14 775 4 v 2649 29 V 2647 112 4 84 v 2694 87
a(Dispatch)p 3195 112 V 345 w(12)p 3422 112 V 2649 116
775 4 v 2647 199 4 84 v 2694 174 a(V)-8 b(alidation)p
3195 199 V 303 w(29)p 3422 199 V 2649 202 775 4 v 2647
285 4 84 v 2694 260 a(Log)19 b(allocation)p 3195 285
V 215 w(9)p 3422 285 V 2649 288 775 4 v 2647 371 4 84
v 2694 346 a(Message)h(Reply)p 3195 371 V 152 w(17)p
3422 371 V 2649 375 775 4 v 2647 458 4 84 v 2694 433
a(Log)f(clean)p 3195 458 V 352 w(7)p 3422 458 V 2649
461 775 4 v 2649 476 V 2647 559 4 84 v 2694 534 a(T)-6
b(otal)p 3195 559 V 458 w(74)p 3422 559 V 2649 562 775
4 v 2040 781 a(T)g(able)25 b(1:)35 b(Amortized)25 b(cost)g(breakdo)n
(wn)h(for)f(a)g(load)g(operation.)41 b(Subse-)2040 864
y(quent)22 b(loads)f(to)g(the)g(same)h(address)g(do)f(not)g(require)h
(additional)f(log)h(allo-)2040 947 y(cation)d(or)g(cleaning)h(and)g
(therefore)f(require)g(only)h(58)f(c)o(ycles.)2040 1196
y(been)h(copied)g(to)f(the)g(log.)2152 1279 y(In)26 b(the)g(common)h
(case)f(the)g(chunk)h(completes)g(without)f(suf)n(fering)g(a)2040
1362 y(mis-speculation.)58 b(At)30 b(the)g(synchronization)i(point)f
(at)f(the)g(end)h(of)f(the)2040 1445 y(chunk,)25 b(each)e(memory)h
(node)g(is)e(responsible)i(for)f(cleaning)g(its)g(logs)g(and)2040
1528 y(hash)18 b(tables.)23 b(It)17 b(does)h(this)f(by)g(w)o(alking)i
(through)f(the)f(entire)h(log)f(and)h(deal-)2040 1611
y(locating)j(the)g(associated)h(hash)g(entry)-5 b(.)29
b(The)21 b(deallocation)h(is)e(done)i(by)g(re-)2040 1694
y(setting)d(the)g(timestamps)g(in)g(the)g(associated)h(hash)f(entry)h
(to)e(0.)2152 1777 y(If)31 b(a)h(mis-speculation)h(is)e(disco)o(v)o
(ered)i(during)f(the)g(e)o(x)o(ecution)h(of)e(a)2040
1860 y(chunk,)i(then)d(the)f(chunk)i(is)e(aborted)h(and)g(a)f
(consistent)h(state)f(must)g(be)2040 1943 y(restored.)e(Each)20
b(memory)h(node)h(is)d(responsible)j(for)e(rolling)g(back)h(its)e(log)
2040 2026 y(to)27 b(the)g(consistent)h(memory)g(state)e(at)h(the)g(end)
h(of)f(the)g(pre)n(vious)h(chunk.)2040 2109 y(This)e(is)g(accomplished)
i(by)f(w)o(alking)g(through)g(the)f(entire)h(log,)h(cop)o(ying)2040
2192 y(the)22 b(checkpointed)i(memory)e(v)n(alue)h(back)f(to)g(its)f
(original)h(memory)g(loca-)2040 2275 y(tion.)h(The)c(hash)h(tables)f
(are)g(cleaned)g(at)g(the)g(same)g(time.)2152 2358 y(In)30
b(the)g(ne)o(xt)g(section)g(we)g(gi)n(v)o(e)g(a)g(breakdo)n(wn)i(of)e
(the)f(costs)h(of)g(the)2040 2441 y(memory)15 b(dependence)i
(speculation)f(system)f(we)f(ha)o(v)o(e)h(implemented,)h(and)2040
2524 y(sho)n(w)32 b(that)e(these)h(costs)g(are)g(nearly)h(lo)n(w)e
(enough)j(to)e(achie)n(v)o(e)h(parallel)2040 2607 y(speedups.)2040
2838 y Fi(4)91 b(Results)2040 2998 y Fh(In)23 b(this)g(section)h(we)f
(present)g(results)g(demonstrating)i(that)d(there)i(is)e(hope)2040
3081 y(of)k(b)o(uilding)h(a)f(softw)o(are)h(based)g(speculation)g
(system)g(that)f(can)g(achie)n(v)o(e)2040 3164 y(parallel)19
b(speedups.)25 b(In)19 b(Section)g(4.1,)g(we)g(present)h(a)f(detailed)h
(cost)f(break-)2040 3247 y(do)n(wn)f(of)f(our)h(w)o(orking)g
(implementation)g(of)f(the)g(SUDS)f(memory)i(depen-)2040
3330 y(dence)29 b(speculation)g(subsystem.)50 b(In)28
b(our)g(current)g(implementation)g(the)2040 3413 y(total)20
b(w)o(orst-case)g(o)o(v)o(erhead)i(per)e(load)h(operation)g(is)f(about)
h(75)f(c)o(ycles.)27 b(In)2040 3496 y(Section)19 b(4.2,)f(we)h(present)
g(simulation)g(results)g(that)f(demonstrate)i(that)f(for)2040
3579 y(the)k(applications)g(we)g(are)f(considering,)j(this)d(latenc)o
(y)h(is)f(within)h(a)f(f)o(actor)2040 3662 y(of)d(about)h(2)g(of)f
(what)g(is)g(required)h(to)g(achie)n(v)o(e)g(parallel)f(speedups.)26
b(That)19 b(is)2040 3745 y(to)j(say)-5 b(,)22 b(these)h(applications)f
(still)f(demonstrate)i(speedups)g(with)f(memory)2040
3828 y(latencies)i(of)g(up)h(to)e(about)i(30)f(c)o(ycles.)39
b(First,)24 b(we)f(sho)n(w)i(ho)n(w)f(the)g(appli-)2040
3911 y(cations)h(speed)h(up)f(gi)n(v)o(en)h(an)f(unrealistically)g
(perfect)g(memory)g(system,)2040 3994 y(one)e(where)f(e)n(v)o(ery)g
(memory)h(operation)f(tak)o(es)h(e)o(xactly)f(one)g(c)o(ycle.)32
b(Then)2040 4077 y(we)27 b(sho)n(w)g(ho)n(w)g(each)g(application)h
(performs)f(as)f(we)h(v)n(ary)g(the)g(memory)2040 4160
y(latenc)o(y)-5 b(.)2040 4382 y Fi(4.1)90 b(Cost)26 b(breakdo)o(wns)
2040 4516 y Fh(In)f(this)h(section)f(we)h(break)g(do)n(wn)g(the)f
(costs)h(for)f(each)h(memory)g(depen-)2040 4599 y(dence)h(speculation)g
(operation)f(in)g(our)g(current)g(implementation)h(of)e(the)2040
4682 y(SUDS)16 b(runtime)i(system.)23 b(The)18 b(memory)g(dependence)i
(speculation)f(mod-)2040 4765 y(ule)d(w)o(as)g(originally)g(written)f
(in)h(C.)f(F)o(or)g(this)h(study)g(we)g(compiled)h(the)f(code)2040
4848 y(with)21 b(the)h(SunPro)g(Compiler)g(v)o(ersion)g(4.2)g(at)f
(optimization)i(le)n(v)o(el)e(5,)i(and)2040 4931 y(performed)f(some)f
(further)f(hand)i(optimization.)28 b(W)-6 b(e)20 b(then)h(hand)h
(counted)2040 5014 y(the)27 b(number)h(of)f(c)o(ycles)g(for)f(the)h
(resulting)g(code)h(assuming)g(a)e(simple)h(5)2040 5097
y(stage)21 b(scalar)h(pipeline.)30 b(This)20 b(kind)i(of)f(pipeline)h
(is)e(representati)n(v)o(e)i(of)f(the)2040 5180 y(kind)j(of)g
(processing)h(element)f(we)g(e)o(xpect)g(to)g(be)g(a)o(v)n(ailable)g
(on)g(each)g(tile)2040 5263 y(of)19 b(a)g(Ra)o(w)f(processor)i([22)q(,)
e(37)q(].)1922 5627 y(5)p eop
%%Page: 6 6
6 5 bop 537 -72 616 4 v 535 11 4 84 v 582 -14 a Fh(Operation)90
b(Cost)p 1151 11 V 537 14 616 4 v 537 29 V 535 112 4
84 v 582 87 a(Rollback)p 924 112 V 182 w(10)p 1151 112
V 537 116 616 4 v 535 199 4 84 v 582 174 a(Log)19 b(clean)p
924 199 V 192 w(7)p 1151 199 V 537 202 616 4 v 537 217
V 535 300 4 84 v 582 275 a(T)-6 b(otal)p 924 300 V 299
w(17)p 1151 300 V 537 303 616 4 v -62 522 a(T)g(able)19
b(2:)24 b(Amortized)19 b(cost)g(breakdo)n(wn)i(for)d(a)h(rollback)h
(operation.)-40 771 y(T)-6 b(able)19 b(1)h(sho)n(ws)f(the)h(breakdo)n
(wn)h(in)e(costs)g(for)g(a)g(load)h(operation.)k(F)o(or)-152
854 y(each)31 b(incoming)g(request)g(the)f(system)h(\002rst)e(needs)i
(to)f(dispatch)h(on)g(the)-152 937 y(request)f(type.)53
b(The)28 b(dispatch)i(code)f(has)h(been)f(optimized)h(in)e(f)o(a)o(v)o
(or)h(of)-152 1020 y(load)f(operations)f(because)h(these)g(operations)f
(are)g(on)h(the)e(critical)h(path.)-152 1103 y(F)o(or)19
b(a)g(load)g(request)g(the)g(dispatch)h(requires)f(12)h(c)o(ycles.)-40
1186 y(The)28 b(total)g(cost)g(for)f(both)i(v)n(alidation)f(and)h(the)f
(actual)g(memory)h(ac-)-152 1269 y(cess)23 b(is)e(29)i(c)o(ycles.)33
b(If)21 b(this)h(is)f(the)i(\002rst)e(access)h(to)g(the)g(memory)h
(location)-152 1352 y(since)d(the)f(last)g(log)g(cleaning)h(operation,)
g(then)g(the)f(system)g(must)g(allocate)-152 1435 y(a)h(ne)n(w)g(log)g
(entry)g(at)f(the)g(cost)h(of)g(9)f(c)o(ycles.)26 b(This)19
b(cost)h(is)f(not)h(incurred)g(on)-152 1518 y(subsequent)i(accesses)f
(to)f(the)g(same)g(memory)g(location.)27 b(Finally)-5
b(,)19 b(a)h(reply)-152 1601 y(message)e(is)f(constructed)h(and)f
(launched)i(to)d(the)h(processing)i(element)e(that)-152
1684 y(made)j(the)f(original)g(load)g(request)h(at)e(a)h(cost)g(of)g
(17)h(c)o(ycles.)-40 1767 y(Later)g(when)g(the)g(chunk)h(of)f(parallel)
g(iterations)g(\002nishes,)f(the)h(system)-152 1850 y(must)28
b(incur)g(an)f(additional)h(cost)g(to)f(clean)h(the)g(logs)f(for)h
(each)g(memory)-152 1933 y(location)17 b(touched)h(during)f(the)g
(parallel)f(chunk.)23 b(This)16 b(cleaning)i(operation)-152
2016 y(costs)h(7)g(c)o(ycles)h(per)f(log)g(entry)-5 b(.)-40
2099 y(In)18 b(sum)f(a)h(load)f(request)h(requires)g(a)f(total)g(of)g
(74)h(c)o(ycles)g(of)f(processing)-152 2182 y(from)30
b(the)g(memory)h(node.)57 b(F)o(or)29 b(a)h(second)h(load)f(request)h
(to)e(the)h(same)-152 2265 y(memory)19 b(location)f(the)g(log)f(entry)h
(neither)g(needs)h(to)e(be)h(allocated)g(or)g(later)-152
2348 y(cleaned,)i(so)f(these)g(additional)h(load)f(requests)h(require)f
(only)h(a)f(total)f(of)h(58)-152 2431 y(c)o(ycles)h(of)f(processing)h
(from)f(the)g(memory)g(node.)-40 2514 y(T)-6 b(able)16
b(2)h(sho)n(ws)f(the)h(cost)f(of)g(performing)h(a)f(rollback)h
(operation)g(in)f(the)-152 2597 y(case)23 b(that)g(a)g(mis-speculation)
g(occurs)h(and)f(the)g(chunk)h(of)f(parallel)f(itera-)-152
2680 y(tions)g(needs)h(to)f(be)g(rolled)g(back.)33 b(This)21
b(operation)i(is)f(performed)h(in)e(b)o(ulk)-152 2763
y(for)26 b(all)f(the)h(memory)g(addresses)h(in)e(the)h(log,)h(so)f(the)
f(message)i(dispatch)-152 2846 y(cost)20 b(can)g(be)h(amortized)f(o)o
(v)o(er)g(a)g(lar)o(ge)f(amount)i(w)o(ork.)26 b(F)o(or)19
b(each)i(entry)f(in)-152 2929 y(the)g(log)f(the)h(checkpointed)h
(memory)f(v)n(alue)g(needs)g(to)g(be)f(copied)i(back)f(to)-152
3012 y(memory)25 b(at)f(a)f(cost)h(of)g(10)h(c)o(ycles.)38
b(In)24 b(addition)h(the)f(hash)g(entry)g(associ-)-152
3095 y(ated)d(with)f(each)h(log)g(entry)f(must)h(be)f(cleaned)i(at)e
(an)h(additional)g(cost)f(of)g(7)-152 3178 y(c)o(ycles.)31
b(The)21 b(total)g(cost)g(of)g(rolling)h(back)g(to)f(a)g(consistent)h
(memory)g(state)-152 3261 y(after)17 b(a)g(mis-speculation)g(is)g(then)
g(the)g(sum)g(of)g(these)g(tw)o(o)g(costs,)g(17)g(c)o(ycles)-152
3344 y(per)i(memory)h(location)g(touched.)-152 3537 y
Fi(Discussion)75 b Fh(There)22 b(are)g(se)n(v)o(eral)g(methods)g(that)g
(we)f(are)h(in)m(v)o(estigat-)-152 3620 y(ing)g(to)f(reduce)h(the)f(a)o
(v)o(erage)h(latenc)o(y)f(of)g(each)h(load)g(request.)30
b(The)21 b(\002rst)f(is)-152 3703 y(to)c(modify)g(the)f(protocol)h(so)g
(that)f(the)h(actual)f(data)h(v)n(alue)g(is)f(returned)h(to)g(the)-152
3786 y(requester)k(before)h(v)n(alidation)f(is)f(performed.)26
b(W)-6 b(e)19 b(belie)n(v)o(e)h(that)f(this)h(opti-)-152
3869 y(mization)e(ould)f(reduce)h(the)f(latenc)o(y)h(of)e(each)i(load)g
(operation)f(to)g(about)h(30)-152 3952 y(c)o(ycles,)h(b)o(ut)g(it)f(w)o
(ould)i(not)f(change)h(the)f(bandwidth)h(requirements)g(placed)-152
4035 y(on)27 b(the)f(memory)h(nodes.)45 b(A)26 b(problem)h(with)e
(changing)j(the)e(protocol)h(in)-152 4118 y(this)18 b(w)o(ay)h(is)f
(that)g(it)g(requires)g(the)h(master)f(node)h(to)g(perform)f(an)h(e)o
(xtra)f(syn-)-152 4201 y(chronization)24 b(tep)f(with)f(the)h(memory)g
(nodes)g(at)g(the)f(end)i(of)e(each)h(chunk)-152 4284
y(to)c(determine)h(whether)f(a)g(mis-speculation)h(has)f(occured.)-40
4367 y(Another)i(technique)f(that)g(has)g(been)g(proposed)h(by)f(other)
g(researchers)-152 4450 y(for)f(reducing)h(both)g(the)f(a)o(v)o(erage)g
(latenc)o(y)h(per)f(memory)g(request)h(and)f(also)-152
4533 y(the)33 b(bandwidth)g(requirements)g(on)g(the)f(memory)h(is)f(to)
g(place)h(a)f(small)-152 4616 y(cache)d(at)f(the)g(processing)i
(elements)f(to)f(e)o(xploit)g(locality)g(in)g(the)h(mem-)-152
4699 y(ory)21 b(reference)f(stream.)26 b(A)19 b(problem)i(with)f(this)f
(approach)j(is)d(k)o(eeping)j(the)-152 4782 y(caches)i(coherent)g(with)
f(one)g(another)m(,)i(and)e(there)g(has)h(been)f(a)g(great)g(deal)-152
4865 y(of)d(acti)n(v)o(e)g(research)g(in)f(this)g(area)h([8,)f(13)q(,)g
(32,)g(20)q(,)g(17)q(,)g(14].)25 b(W)-6 b(e)19 b(are)g(in)m(v)o(es-)
-152 4948 y(tigating)26 b(a)f(technique)i(that)e(w)o(ould)i(allo)n(w)e
(SUDSto)g(cache)h(read-mostly)-152 5031 y(v)n(alues)18
b(by)f(allo)n(wing)h(the)e(system)i(to)e(\223permanently\224)j(mark)e
(an)g(address)h(in)-152 5114 y(the)h(timestamp)g(cache.)2136
383 y
 14208860 14777212 -328908 -526254 18945146 19602964 startTexFig
 2136 383 a
%%BeginDocument: graphs/basline.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: -5 -8 288 298
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
0.500000 0.500000 scale
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
72 72 S9
[6 6] 1.000000 SL
gsave 0.500000 0.000000 0.000000 setrgbcolor
152 492 180.346 492 
L9
grestore
6 SetSym
<04> 166.173 492 SY
20 /Helvetica SetTxt
( Health) 0 198.85 486 TXL
72 72 S9
[] 1.200000 SL
gsave 1.000000 0.647059 0.000000 setrgbcolor
152 466 180.346 466 
L9
grestore
6 SetSym
<04> 166.173 466 SY
20 /Helvetica SetTxt
( Jacobi) 0 198.85 460 TXL
72 72 S9
[7 5 1 4] 1.000000 SL
gsave 0.000000 1.000000 0.000000 setrgbcolor
152 440 180.346 440 
L9
grestore
6 SetSym
<04> 166.173 440 SY
20 /Helvetica SetTxt
( LZW) 0 198.85 434 TXL
72.000000 72.000000 576.000000 72.000000 576.000000 576.000000 72.000000 576.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 576.000000 72.000000 576.000000 576.000000 72.000000 576.000000 newpath moveto lineto lineto lineto closepath clip
72 72 S9
[6 6] 1.000000 SL
142 179.6 M9
282 345.23 M9
562 535.045 M9
gsave 0.500000 0.000000 0.000000 setrgbcolor
D9
grestore
72 72 S9
[] 1.200000 SL
142 198.901 M9
282 343.039 M9
562 390.417 M9
gsave 1.000000 0.647059 0.000000 setrgbcolor
D9
grestore
72 72 S9
[7 5 1 4] 1.000000 SL
142 76.9021 M9
282 78.9548 M9
562 79.8744 M9
gsave 0.000000 1.000000 0.000000 setrgbcolor
D9
grestore
initclip 
12 /Helvetica SetTxt
(|) 0 72 72 TXC
20 /Helvetica SetTxt
(1) 0 72 48 TXC
12 /Helvetica SetTxt
(|) 0 142 72 TXC
20 /Helvetica SetTxt
(2) 0 142 48 TXC
12 /Helvetica SetTxt
(|) 0 212 72 TXC
20 /Helvetica SetTxt
(3) 0 212 48 TXC
12 /Helvetica SetTxt
(|) 0 282 72 TXC
20 /Helvetica SetTxt
(4) 0 282 48 TXC
12 /Helvetica SetTxt
(|) 0 352 72 TXC
20 /Helvetica SetTxt
(5) 0 352 48 TXC
12 /Helvetica SetTxt
(|) 0 422 72 TXC
20 /Helvetica SetTxt
(6) 0 422 48 TXC
12 /Helvetica SetTxt
(|) 0 492 72 TXC
20 /Helvetica SetTxt
(7) 0 492 48 TXC
12 /Helvetica SetTxt
(|) 0 562 72 TXC
20 /Helvetica SetTxt
(8) 0 562 48 TXC
12 /Helvetica SetTxt
(|) -90 72 72 TXC
20 /Helvetica SetTxt
(1.00) 0 62 66 TXR
12 /Helvetica SetTxt
(|) -90 72 114 TXC
20 /Helvetica SetTxt
(1.25) 0 62 108 TXR
12 /Helvetica SetTxt
(|) -90 72 156 TXC
20 /Helvetica SetTxt
(1.50) 0 62 150 TXR
12 /Helvetica SetTxt
(|) -90 72 198 TXC
20 /Helvetica SetTxt
(1.75) 0 62 192 TXR
12 /Helvetica SetTxt
(|) -90 72 240 TXC
20 /Helvetica SetTxt
(2.00) 0 62 234 TXR
12 /Helvetica SetTxt
(|) -90 72 282 TXC
20 /Helvetica SetTxt
(2.25) 0 62 276 TXR
12 /Helvetica SetTxt
(|) -90 72 324 TXC
20 /Helvetica SetTxt
(2.50) 0 62 318 TXR
12 /Helvetica SetTxt
(|) -90 72 366 TXC
20 /Helvetica SetTxt
(2.75) 0 62 360 TXR
12 /Helvetica SetTxt
(|) -90 72 408 TXC
20 /Helvetica SetTxt
(3.00) 0 62 402 TXR
12 /Helvetica SetTxt
(|) -90 72 450 TXC
20 /Helvetica SetTxt
(3.25) 0 62 444 TXR
12 /Helvetica SetTxt
(|) -90 72 492 TXC
20 /Helvetica SetTxt
(3.50) 0 62 486 TXR
12 /Helvetica SetTxt
(|) -90 72 534 TXC
20 /Helvetica SetTxt
(3.75) 0 62 528 TXR
12 /Helvetica SetTxt
(|) -90 72 576 TXC
20 /Helvetica SetTxt
(4.00) 0 62 570 TXR
() 0 324 -16 TXC
[] 3.000000 SL
2 setlinecap
72 72 576 72 
L9
0 setlinecap
72 72 72 576 
L9
( Execution nodes ) 0 576 22 TXR
( Speedup ) 90 11 576 TXR
72.000000 72.000000 576.000000 72.000000 576.000000 576.000000 72.000000 576.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 576.000000 72.000000 576.000000 576.000000 72.000000 576.000000 newpath moveto lineto lineto lineto closepath clip
6 SetSym
<04> 72 72 SY
<04> 142 179.6 SY
<04> 282 345.23 SY
<04> 562 535.045 SY
<04> 72 72 SY
<04> 142 198.901 SY
<04> 282 343.039 SY
<04> 562 390.417 SY
<04> 72 72 SY
<04> 142 76.9021 SY
<04> 282 78.9548 SY
<04> 562 79.8744 SY
initclip 
showpage
%%Trailer
end

%%EndDocument

 endTexFig
 2040 2421 a Fh(Figure)f(4:)24 b(Ideal)18 b(speedups)i(as)f(the)f
(number)i(of)e(compute)i(nodes)g(is)e(v)n(aried)2040
2504 y(from)29 b(1)f(to)h(8)f(if)g(the)h(memory)g(dependence)i
(speculation)f(system)e(were)2040 2587 y(able)23 b(to)g(deli)n(v)o(er)h
(a)f(result)g(in)g(a)g(single)g(c)o(ycle.)36 b(On)23
b(8)g(compute)h(nodes)g(the)2040 2670 y(speedup)18 b(for)e(Health)g(is)
g(3.756,)i(the)e(speedup)i(for)e(Jacobi)h(is)f(2.895)h(and)g(the)2040
2753 y(speedup)k(for)d(LZW)g(is)g(1.046.)p 2517 3984
1039 4 v 2515 4067 4 84 v 2562 4042 a(Application)90
b(Rate)19 b(of)g(Rollback)p 3554 4067 V 2517 4070 1039
4 v 2517 4085 V 2515 4168 4 84 v 2562 4143 a(Health)p
2958 4168 V 594 w(2.3\045)p 3554 4168 V 2517 4172 1039
4 v 2515 4255 4 84 v 2562 4230 a(Jacobi)p 2958 4255 V
622 w(17\045)p 3554 4255 V 2517 4258 1039 4 v 2517 4273
V 2515 4356 4 84 v 2562 4331 a(LZW)p 2958 4356 V 630
w(3.8\045)p 3554 4356 V 2517 4359 1039 4 v 2040 4578
a(T)-6 b(able)22 b(3:)28 b(Rate)22 b(at)f(which)h(parallel)f(chunks)i
(must)f(be)g(rolled)g(back)g(due)g(to)2040 4661 y(mis-speculation)k(on)
f(a)g(system)g(with)f(8)h(compute)h(nodes)g(and)f(16)g(mem-)2040
4744 y(ory)d(nodes.)31 b(These)21 b(numbers)h(include)g(both)g(memory)g
(dependence)i(mis-)2040 4827 y(speculations)c(and)g(branch)g
(mis-speculations.)1922 5627 y(6)p eop
%%Page: 7 7
7 6 bop -55 -152 a
 14208860 14777212 -328908 -526254 18945146 19602964 startTexFig
 -55 -152 a
%%BeginDocument: graphs/varyspec.eps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: -5 -8 288 298
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italic Times-Bold Times-BoldItalic
%%EndComments
0.500000 0.500000 scale
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
68.0625 198 S9
[6 6] 1.000000 SL
gsave 0.500000 0.000000 0.000000 setrgbcolor
196.188 513 224.534 513 
L9
grestore
6 SetSym
<04> 210.361 513 SY
20 /Helvetica SetTxt
( Health) 0 243.038 507 TXL
363.375 124.666 S9
12 SetSym
<04> 210.361 487 SY
20 /Helvetica SetTxt
( Health with SUDS costs) 0 243.038 481 TXL
68.0625 198 S9
[] 1.200000 SL
gsave 1.000000 0.647059 0.000000 setrgbcolor
196.188 461 224.534 461 
L9
grestore
6 SetSym
<04> 210.361 461 SY
20 /Helvetica SetTxt
( Jacobi) 0 243.038 455 TXL
363.375 151.584 S9
12 SetSym
<06> 210.361 435 SY
20 /Helvetica SetTxt
( Jacobi with SUDS costs) 0 243.038 429 TXL
68.0625 198 S9
[7 5 1 4] 1.000000 SL
gsave 0.000000 1.000000 0.000000 setrgbcolor
196.188 409 224.534 409 
L9
grestore
6 SetSym
<04> 210.361 409 SY
20 /Helvetica SetTxt
( LZW) 0 243.038 403 TXL
363.375 188.785 S9
12 SetSym
<02> 210.361 383 SY
20 /Helvetica SetTxt
( LZW with SUDS costs) 0 243.038 377 TXL
68.0625 198 S9
[] 1.200000 SL
gsave 0.500000 0.000000 0.500000 setrgbcolor
196.188 357 224.534 357 
L9
grestore
12 SetSym
20 /Helvetica SetTxt
( Speedup = 1) 0 243.038 351 TXL
72.000000 72.000000 576.000000 72.000000 576.000000 576.000000 72.000000 576.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 576.000000 72.000000 576.000000 576.000000 72.000000 576.000000 newpath moveto lineto lineto lineto closepath clip
68.0625 198 S9
[6 6] 1.000000 SL
68.0625 545.284 M9
72 511.529 M9
75.9375 480.002 M9
83.8125 426.03 M9
99.5625 346.962 M9
131.062 257 M9
194.062 182.655 M9
320.062 133.402 M9
572.062 104.477 M9
gsave 0.500000 0.000000 0.000000 setrgbcolor
D9
grestore
363.375 124.666 S9
gsave 0.500000 0.000000 0.500000 setrgbcolor
D9
grestore
68.0625 198 S9
[] 1.200000 SL
68.0625 436.813 M9
72 421.963 M9
75.9375 407.874 M9
83.8125 383.992 M9
99.5625 345.236 M9
131.062 291.144 M9
194.062 224.726 M9
320.062 162.235 M9
572.062 121.625 M9
gsave 1.000000 0.647059 0.000000 setrgbcolor
D9
grestore
363.375 151.584 S9
gsave 0.500000 0.000000 0.500000 setrgbcolor
D9
grestore
68.0625 198 S9
[7 5 1 4] 1.000000 SL
68.0625 203.906 M9
72 203.757 M9
75.9375 203.591 M9
83.8125 203.247 M9
99.5625 202.509 M9
131.062 200.974 M9
194.062 197.956 M9
320.062 192.355 M9
572.062 182.518 M9
gsave 0.000000 1.000000 0.000000 setrgbcolor
D9
grestore
363.375 188.785 S9
gsave 0.500000 0.000000 0.500000 setrgbcolor
D9
grestore
68.0625 198 S9
[] 1.200000 SL
75.9375 198 M9
83.8125 198 M9
91.6875 198 M9
99.5625 198 M9
107.438 198 M9
115.312 198 M9
123.188 198 M9
131.062 198 M9
138.938 198 M9
146.812 198 M9
154.688 198 M9
162.562 198 M9
170.438 198 M9
178.312 198 M9
186.188 198 M9
194.062 198 M9
201.938 198 M9
209.813 198 M9
217.688 198 M9
225.562 198 M9
233.438 198 M9
241.312 198 M9
249.188 198 M9
257.062 198 M9
264.938 198 M9
272.812 198 M9
280.688 198 M9
288.562 198 M9
296.438 198 M9
304.312 198 M9
312.188 198 M9
320.062 198 M9
327.938 198 M9
335.812 198 M9
343.688 198 M9
351.563 198 M9
359.438 198 M9
367.312 198 M9
375.188 198 M9
383.063 198 M9
390.938 198 M9
398.812 198 M9
406.688 198 M9
414.563 198 M9
422.438 198 M9
430.312 198 M9
438.188 198 M9
446.063 198 M9
453.938 198 M9
461.812 198 M9
469.688 198 M9
477.562 198 M9
485.438 198 M9
493.312 198 M9
501.188 198 M9
509.062 198 M9
516.938 198 M9
524.812 198 M9
532.688 198 M9
540.562 198 M9
548.438 198 M9
556.312 198 M9
564.188 198 M9
572.062 198 M9
gsave 0.500000 0.000000 0.500000 setrgbcolor
D9
grestore
initclip 
12 /Helvetica SetTxt
(|) 0 72 72 TXC
20 /Helvetica SetTxt
(1) 0 72 48 TXC
12 /Helvetica SetTxt
(|) 0 135 72 TXC
20 /Helvetica SetTxt
(17) 0 135 48 TXC
12 /Helvetica SetTxt
(|) 0 198 72 TXC
20 /Helvetica SetTxt
(33) 0 198 48 TXC
12 /Helvetica SetTxt
(|) 0 261 72 TXC
20 /Helvetica SetTxt
(49) 0 261 48 TXC
12 /Helvetica SetTxt
(|) 0 324 72 TXC
20 /Helvetica SetTxt
(65) 0 324 48 TXC
12 /Helvetica SetTxt
(|) 0 387 72 TXC
20 /Helvetica SetTxt
(81) 0 387 48 TXC
12 /Helvetica SetTxt
(|) 0 450 72 TXC
20 /Helvetica SetTxt
(97) 0 450 48 TXC
12 /Helvetica SetTxt
(|) 0 513 72 TXC
20 /Helvetica SetTxt
(113) 0 513 48 TXC
12 /Helvetica SetTxt
(|) 0 576 72 TXC
20 /Helvetica SetTxt
(129) 0 576 48 TXC
12 /Helvetica SetTxt
(|) -90 72 72 TXC
20 /Helvetica SetTxt
(0.00) 0 62 66 TXR
12 /Helvetica SetTxt
(|) -90 72 103.5 TXC
20 /Helvetica SetTxt
(0.25) 0 62 97.5 TXR
12 /Helvetica SetTxt
(|) -90 72 135 TXC
20 /Helvetica SetTxt
(0.50) 0 62 129 TXR
12 /Helvetica SetTxt
(|) -90 72 166.5 TXC
20 /Helvetica SetTxt
(0.75) 0 62 160.5 TXR
12 /Helvetica SetTxt
(|) -90 72 198 TXC
20 /Helvetica SetTxt
(1.00) 0 62 192 TXR
12 /Helvetica SetTxt
(|) -90 72 229.5 TXC
20 /Helvetica SetTxt
(1.25) 0 62 223.5 TXR
12 /Helvetica SetTxt
(|) -90 72 261 TXC
20 /Helvetica SetTxt
(1.50) 0 62 255 TXR
12 /Helvetica SetTxt
(|) -90 72 292.5 TXC
20 /Helvetica SetTxt
(1.75) 0 62 286.5 TXR
12 /Helvetica SetTxt
(|) -90 72 324 TXC
20 /Helvetica SetTxt
(2.00) 0 62 318 TXR
12 /Helvetica SetTxt
(|) -90 72 355.5 TXC
20 /Helvetica SetTxt
(2.25) 0 62 349.5 TXR
12 /Helvetica SetTxt
(|) -90 72 387 TXC
20 /Helvetica SetTxt
(2.50) 0 62 381 TXR
12 /Helvetica SetTxt
(|) -90 72 418.5 TXC
20 /Helvetica SetTxt
(2.75) 0 62 412.5 TXR
12 /Helvetica SetTxt
(|) -90 72 450 TXC
20 /Helvetica SetTxt
(3.00) 0 62 444 TXR
12 /Helvetica SetTxt
(|) -90 72 481.5 TXC
20 /Helvetica SetTxt
(3.25) 0 62 475.5 TXR
12 /Helvetica SetTxt
(|) -90 72 513 TXC
20 /Helvetica SetTxt
(3.50) 0 62 507 TXR
12 /Helvetica SetTxt
(|) -90 72 544.5 TXC
20 /Helvetica SetTxt
(3.75) 0 62 538.5 TXR
12 /Helvetica SetTxt
(|) -90 72 576 TXC
20 /Helvetica SetTxt
(4.00) 0 62 570 TXR
() 0 324 -16 TXC
[] 3.000000 SL
2 setlinecap
72 72 576 72 
L9
0 setlinecap
72 72 72 576 
L9
( Speculation cost (cycles) ) 0 576 22 TXR
( Speedup ) 90 11 576 TXR
72.000000 72.000000 576.000000 72.000000 576.000000 576.000000 72.000000 576.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 576.000000 72.000000 576.000000 576.000000 72.000000 576.000000 newpath moveto lineto lineto lineto closepath clip
6 SetSym
<04> 68.0625 198 SY
<04> 68.0625 545.284 SY
<04> 72 511.529 SY
<04> 75.9375 480.002 SY
<04> 83.8125 426.03 SY
<04> 99.5625 346.962 SY
<04> 131.062 257 SY
<04> 194.062 182.655 SY
<04> 320.062 133.402 SY
<04> 572.062 104.477 SY
12 SetSym
<04> 363.375 124.666 SY
6 SetSym
<04> 68.0625 198 SY
<04> 68.0625 436.813 SY
<04> 72 421.963 SY
<04> 75.9375 407.874 SY
<04> 83.8125 383.992 SY
<04> 99.5625 345.236 SY
<04> 131.062 291.144 SY
<04> 194.062 224.726 SY
<04> 320.062 162.235 SY
<04> 572.062 121.625 SY
12 SetSym
<06> 363.375 151.584 SY
6 SetSym
<04> 68.0625 198 SY
<04> 68.0625 203.906 SY
<04> 72 203.757 SY
<04> 75.9375 203.591 SY
<04> 83.8125 203.247 SY
<04> 99.5625 202.509 SY
<04> 131.062 200.974 SY
<04> 194.062 197.956 SY
<04> 320.062 192.355 SY
<04> 572.062 182.518 SY
12 SetSym
<02> 363.375 188.785 SY
initclip 
showpage
%%Trailer
end

%%EndDocument

 endTexFig
 -152 1886 a Fh(Figure)29 b(5:)42 b(The)28 b(speedups)i(on)f(a)g
(system)f(with)g(8)h(compute)g(nodes)h(and)-152 1969
y(16)f(memory)g(nodes)h(as)e(the)h(cost)f(of)h(handling)g(a)f
(speculati)n(v)o(e)i(memory)-152 2052 y(request)22 b(in)g(the)f(memory)
i(nodes)f(is)g(v)n(aried)g(from)f(1)h(c)o(ycle)g(to)f(128)i(c)o(ycles.)
-152 2135 y(The)h(74)f(c)o(ycle)h(cost)f(for)g(a)h(memory)g(operation)g
(in)f(SUDS)f(is)h(mark)o(ed)h(on)-152 2218 y(the)c(graph.)26
b(The)19 b(crosso)o(v)o(er)i(point)f(for)f(achie)n(ving)i(speedups)g
(is)e(30)h(c)o(ycles)-152 2301 y(for)i(Health,)f(46)h(c)o(ycles)g(for)f
(Jacobi)h(and)g(32)g(c)o(ycles)g(for)f(LZW)-7 b(.)20
b(It)h(may)g(be)-152 2384 y(possible)16 b(to)f(reduce)g(the)g(a)o(v)o
(erage)g(cost)g(of)g(memory)h(in)f(SUDS)e(to)i(belo)n(w)g(30)-152
2468 y(c)o(ycles)h(by)g(using)g(a)f(combination)i(of)e(optimized)h
(protocols)g(and)g(a)f(caching)-152 2551 y(system)20
b(at)e(the)h(compute)h(nodes.)-152 2799 y Fi(4.2)91 b(Application)23
b(results)-152 2933 y Fh(In)29 b(this)f(section)h(we)f(e)o(xamine)h
(the)g(question)g(of)f(ho)n(w)h(f)o(ast)g(the)f(a)o(v)o(erage)-152
3016 y(global)e(memory)h(operation)f(needs)g(to)g(be)g(in)f(order)h(to)
f(achie)n(v)o(e)i(parallel)-152 3099 y(speedups.)48 b(W)-6
b(e)25 b(\002nd)i(that)f(in)g(order)h(to)g(deli)n(v)o(er)f(speedups)i
(the)f(memory)-152 3182 y(system)22 b(must)g(ha)o(v)o(e)g(an)g(a)o(v)o
(erage)g(load)h(latenc)o(y)f(of)f(under)i(30)f(c)o(ycles.)32
b(Al-)-152 3265 y(though)24 b(our)f(system)f(currently)h(has)g(a)f
(load)h(latenc)o(y)g(of)f(about)h(75)g(c)o(ycles)-152
3348 y(we)h(are)f(encouraged)j(that)e(we)f(may)h(be)g(able)g(to)f
(achie)n(v)o(e)i(speedups)g(with)-152 3431 y(a)g(reasonable)h(amount)g
(of)f(further)g(engineering.)43 b(As)25 b(discussed)h(abo)o(v)o(e,)-152
3514 y(between)20 b(the)e(hope)i(of)e(further)h(optimizing)g(the)g
(protocol)g(at)f(the)h(memory)-152 3597 y(nodes)g(and)f(the)f(promise)h
(of)f(reducing)i(latenc)o(y)f(by)g(putting)f(a)h(small)f(cache)-152
3680 y(at)h(each)g(of)f(the)h(compute)h(nodes,)g(we)e(belie)n(v)o(e)h
(that)g(an)g(a)o(v)o(erage)g(latenc)o(y)g(of)-152 3763
y(30)i(c)o(ycles)f(is)g(achie)n(v)n(able.)-40 3846 y(W)-6
b(e)25 b(ha)o(v)o(e)h(conducted)h(a)e(study)h(on)f(3)h(applications,)h
Fd(health)p Fh(,)e Fd(ja-)-152 3929 y(cobi)k Fh(and)h
Fd(LZW)p Fh(.)e Fd(Health)g Fh(is)h(one)g(of)h(the)f(pointer)h(intensi)
n(v)o(e)g(bench-)-152 4012 y(marks)24 b(from)f(the)g(Olden)h(Benchmark)
g(Suite)f([5].)35 b(It)23 b(performs)h(an)f(e)n(v)o(ent)-152
4095 y(dri)n(v)o(en)c(simulation)f(of)g(a)g(health)h(care)f(system.)23
b(Its)17 b(main)i(data)f(structure)g(is)-152 4178 y(a)h(tree)g(of)g
(link)o(ed)h(lists.)j Fd(Jacobi)17 b Fh(is)i(a)g(dense)h(matrix)f
(implementation)h(of)-152 4261 y(the)g(Jacobi)g(relaxation)g
(algorithm.)25 b(While)19 b(this)g(algorithm)h(is)f(easily)g(par)o(-)
-152 4344 y(allelized)d(by)g(a)g(compiler)m(,)h(in)f(these)g(e)o
(xperiments)g(we)g(use)g(only)h(the)f(SUDS)-152 4427
y(compiler)m(,)23 b(which)f(currently)g(does)h(not)f(perform)g(an)o(y)g
(array)g(dependence)-152 4510 y(analysis.)47 b(Our)26
b(\002nal)g(benchmark)i(is)e Fd(LZW)p Fh(,)g(an)h(implementation)g(of)g
(the)-152 4593 y(LZW)d(decompression)k(algorithm)d([38)q(].)42
b(As)25 b(well)g(as)g(performing)i(ran-)-152 4676 y(dom)j(accesses)g
(into)f(se)n(v)o(eral)h(arrays,)h(this)e(application)h(is)f
(additionally)-152 4759 y(constrained)e(by)g(ha)o(ving)f(a)g(lar)o(ge)g
(number)h(of)f(true)f(dependences)k(on)d(its)-152 4842
y(critical)19 b(path.)26 b(F)o(or)19 b(these)h(e)o(xperiments)g(we)g
(ran)g(each)g(application)g(with)g(a)-152 4925 y(relati)n(v)o(ely)g
(small)e(data)i(set.)k(W)-6 b(e)18 b(ran)i(the)f Fd(health)f
Fh(benchmark)j(with)e(341)-152 5008 y(hospitals,)h(the)g
Fd(jacobi)e Fh(benchmark)j(on)f(a)f(50x50)i(matrix)f(and)g(the)f
Fd(LZW)-152 5091 y Fh(benchmark)i(with)e(a)f(750)i(byte)f(compressed)i
(english)e(te)o(xt.)-40 5174 y(T)-6 b(o)30 b(collect)f(some)h(basic)g
(performance)g(numbers)h(we)e(de)n(v)o(eloped)j(a)-152
5257 y(simple)25 b(direct)g(e)o(x)o(ecution)h(simulator)l(.)40
b(W)-6 b(e)24 b(use)h(a)g(compiler)g(based)h(tool,)-152
5340 y(similar)19 b(to)g Fd(pixie)p Fh(,)f(to)h(insert)g(instruction)g
(counting)i(code)e(into)h(each)f(ap-)2040 -69 y(plication)24
b(program,)h(and)f(then)g(we)f(link)h(together)g(the)f(application)i
(code)2040 14 y(and)i(a)f(complete)h(implementation)g(of)f(the)g
(runtime)g(system)h(which)f(has)2040 97 y(been)19 b(ported)f(to)f(run)h
(on)h(a)e(set)h(of)f(UNIX)g(processes)i(which)f(communicate)2040
180 y(via)24 b(UNIX)f(pipes.)39 b(The)23 b(communication)j(code)e(in)g
(the)g(runtime)g(system)2040 263 y(is)d(hand)i(annotated)f(to)g(update)
g(the)g(instruction)g(counters)g(with)f(latencies)2040
346 y(similar)j(to)g(those)h(that)g(might)f(be)h(found)h(on)e(a)h(Ra)o
(w)f(processor)l(.)41 b(One)24 b(of)2040 429 y(the)17
b(nice)g(features)h(of)f(a)g(simulation)g(system)g(lik)o(e)g(this)g(is)
g(that)g(we)f(can)i(v)o(ery)2040 512 y(easily)23 b(change)i(the)e
(costs)g(of)g(v)n(arious)h(portions)g(of)f(the)g(runtime)g(system,)2040
596 y(simply)g(by)g(changing)h(the)e(amounts)i(that)e(the)g(pro\002ler)
g(char)o(ges)h(for)g(each)2040 679 y(runtime)28 b(operation.)52
b(Another)29 b(nice)f(feature)g(of)g(this)g(system)g(is)g(that)g(it)
2040 762 y(has)21 b(allo)n(wed)f(us)g(to)g(use)h(the)f(full)g(suite)g
(of)g(UNIX)g(programming)h(tools)f(to)2040 845 y(deb)o(ug)g(and)f(tune)
h(the)f(protocols)h(in)e(the)h(runtime)h(system.)2152
928 y(First)e(we)h(used)h(our)f(simulator)g(to)g(produce)i
(\223ideal\224)e(speedup)i(curv)o(es.)2040 1011 y(These)d(are)f(sho)n
(wn)i(in)e(Figure)h(4.)23 b(Here)17 b(we)h(ha)o(v)o(e)f(set)h(the)f
(cost)h(for)f(each)i(re-)2040 1094 y(quest)h(to)g(the)g(memory)h
(dependence)h(speculation)f(system)f(to)g(1)g(c)o(ycle.)26
b(In)2040 1177 y(this)17 b(w)o(ay)g(we)g(are)g(able)g(to)g(measure)h
(the)f(maximum)g(speedup)i(that)e(each)g(of)2040 1260
y(these)24 b(applications)h(can)g(achie)n(v)o(e,)h(gi)n(v)o(en)f(an)f
(unrealistically)g(f)o(ast)g(mem-)2040 1343 y(ory)h(system.)40
b(The)25 b(graph)g(sho)n(ws)g(that)f(when)i(the)e(programs)i(are)e(run)
h(on)2040 1426 y(a)d(system)g(with)g(8)g(compute)h(nodes)g(the)g
(speedup)g(for)f Fd(health)f Fh(is)h(3.756)2040 1509
y(o)o(v)o(er)h(sequential)g(e)o(x)o(ecution.)34 b(The)22
b(speedup)i(for)e Fd(jacobi)f Fh(is)h(2.895)h(and)2040
1592 y(the)g(maximum)h(achie)n(v)n(able)h(speedup)f(for)f
Fd(LZW)g Fh(is)f(1.046.)37 b(The)23 b(speedup)2040 1675
y(for)29 b(the)g Fd(LZW)f Fh(application)i(is)e(limited)g(by)i(Amdahl')
l(s)f(la)o(w)f(because)i(the)2040 1758 y(parallel)21
b(loop)g(accounts)h(for)e(only)h(about)h(a)e(third)h(of)g(the)f(total)h
(sequential)2040 1841 y(program)f(e)o(x)o(ecution)g(time.)2152
1924 y(T)-6 b(able)23 b(3)h(sho)n(ws)g(that)f(for)g Fd(health)f
Fh(and)i Fd(LZW)e Fh(the)i(system)f(has)h(v)o(ery)2040
2007 y(fe)n(w)30 b(mis-speculations)h(per)f(parallel)f(chunk.)58
b(The)29 b Fd(jacobi)g Fh(applica-)2040 2090 y(tion)23
b(e)o(xhibits)g(a)f(relati)n(v)o(ely)h(lar)o(ge)f(number)i(of)e
(mis-speculations.)35 b(These)2040 2173 y(mis-speculations)17
b(are)f(all)f(due)i(to)e(branch)i(mis-speculations)g(because)g(the)2040
2256 y(50x50)25 b(input)f(matrix)f(doesn')o(t)g(\002t)g(e)n(v)o(enly)h
(onto)g(8)f(compute)h(nodes.)37 b(The)2040 2339 y(result)20
b(is)g(that)g(the)g(\002rst)f(ro)n(ws)i(of)f(the)g(matrix)g(are)h
(processed)g(in)f(6)h(parallel)2040 2422 y(chunks.)29
b(When)21 b(processing)h(the)e(\002nal)g(chunk)i(six)f(of)f(the)h
(eight)f(compute)2040 2505 y(nodes)i(in)e(the)h(\002nal)g(chunk)h(re)o
(gister)e(a)h(branch)g(mis-speculation)h(because)2040
2588 y(the)o(y)d(are)f(attempting)h(to)g(e)o(x)o(ecute)g(be)o(yond)h
(the)f(loop)g(limit.)j(An)d(input)f(ma-)2040 2671 y(trix)k(that)g
(mapped)h(e)n(v)o(enly)h(onto)e(8)h(nodes)g(w)o(ould)g(not)f(e)o
(xhibit)h(this)f(prob-)2040 2754 y(lem.)2152 2837 y(Figure)d(5)f(sho)n
(ws)h(ho)n(w)g(the)g(parallel)f(speedup)j(is)d(af)n(fected)h(by)g(the)f
(cost)2040 2920 y(of)27 b(each)g(load)g(operation.)47
b(F)o(or)26 b(this)g(e)o(xperiment)h(we)g(held)g(the)f(number)2040
3003 y(of)21 b(compute)h(nodes)g(constant)f(at)g(8,)g(and)g(the)g
(number)h(of)f(memory)g(nodes)2040 3086 y(constant)26
b(at)f(16.)43 b(Then)25 b(we)g(v)n(aried)h(the)f(simulated)h(latenc)o
(y)g(of)f(each)h(re-)2040 3169 y(quest)i(to)f(the)g(memory)h(nodes)g
(between)g(1)g(c)o(ycle)f(\(the)g(ideal)g(case\))h(and)2040
3252 y(128)19 b(c)o(ycles.)24 b(The)18 b(graph)h(sho)n(ws)g(ho)n(w)g
(the)f(speedup)i(for)f(each)g(application)2040 3335 y(de)o(grades)i(as)
e(the)g(memory)h(latenc)o(y)g(increases.)25 b(F)o(or)18
b(reference)i(the)f(graph)2040 3418 y(also)f(sho)n(ws)g(the)f(line)g
(\(speedup)i(=)e(1\))h(at)f(which)h(each)g(application)g(crosses)2040
3501 y(o)o(v)o(er)30 b(from)f(getting)h(parallel)g(speedup)h(to)e(slo)n
(wdo)n(wn.)56 b(The)30 b(crosso)o(v)o(er)2040 3584 y(point)d(for)f
Fd(health)f Fh(occurs)i(at)e(30)i(c)o(ycles)g(per)f(memory)h(request.)
45 b(The)2040 3667 y Fd(LZW)19 b Fh(benchmark)j(crosses)f(o)o(v)o(er)f
(at)g(32)g(c)o(ycles)g(per)g(memory)h(request)g(and)2040
3750 y Fd(jacobi)c Fh(achie)n(v)o(es)i(parallel)f(speedup)i(up)f(to)f
(46)h(c)o(ycles)f(per)h(memory)g(re-)2040 3833 y(quest.)46
b(The)26 b(graph)h(also)g(indicates)g(the)f(slo)n(wdo)n(wns)i(that)e
(are)g(achie)n(v)o(ed)2040 3916 y(by)e(the)g(current)g(implementation)g
(of)g(SUDS)e(with)i(an)g(a)o(v)o(erage)g(memory)2040
3999 y(latenc)o(y)19 b(of)g(74)h(c)o(ycles.)2040 4230
y Fi(5)91 b(Related)23 b(w)o(or)q(k)2040 4390 y Fh(T)m(imestamp)e
(based)h(algorithms)f(ha)o(v)o(e)g(long)h(been)f(used)h(for)e
(concurrenc)o(y)2040 4473 y(control)32 b(in)g(transaction)h(processing)
g(systems.)62 b(The)32 b(memory)g(depen-)2040 4556 y(dence)f(v)n
(alidation)f(algorithm)g(used)g(in)f(SUDS)f(is)i(most)f(similar)g(to)g
(the)2040 4639 y(\223basic)d(timestamp)f(ordering\224)h(technique)h
(proposed)g(by)e(Bernstein)h(and)2040 4722 y(Goodman)18
b([4].)j(More)c(sophisticated)g(multi)n(v)o(ersion)f(timestamp)g
(ordering)2040 4805 y(techniques)24 b([30])e(reduce)h(the)f(number)i
(of)e(f)o(alse)g(dependencies)j(detected)2040 4889 y(by)d(the)g(system)
g(at)f(the)h(cost)f(of)h(a)f(more)h(comple)o(x)h(implementation.)31
b(Op-)2040 4972 y(timistic)23 b(concurrenc)o(y)j(control)e(techniques)h
([21)q(],)f(lik)o(e)g(SUDS,)e(tak)o(e)i(the)2040 5055
y(con)m(v)o(erse)h(approach,)i(optimizing)d(for)g(the)g(case)g(that)g
(operations)h(do)f Fg(not)2040 5138 y Fh(con\003ict.)2152
5221 y(Memory)29 b(dependence)g(speculation)g(is)e(e)n(v)o(en)h(more)f
(similar)g(to)g(vir)o(-)2040 5304 y(tual)h(time)h(systems,)h(such)g(as)
e(the)h(T)m(ime)f(W)-6 b(arp)28 b(mechanism)i([16)q(])e(used)1922
5627 y(7)p eop
%%Page: 8 8
8 7 bop -152 -69 a Fh(e)o(xtensi)n(v)o(ely)22 b(for)e(distrib)o(uted)g
(e)n(v)o(ent)g(dri)n(v)o(en)h(simulation.)28 b(This)19
b(technique)-152 14 y(is)25 b(v)o(ery)h(much)g(lik)o(e)g(multi)n(v)o
(ersion)g(timestamp)g(ordering,)h(b)o(ut)e(in)h(virtual)-152
97 y(time)17 b(systems,)h(as)f(in)g(SUDS,)f(the)h(assignment)h(of)f
(timestamps)h(to)f(tasks)g(is)-152 180 y(dictated)k(by)g(the)g
(sequential)g(program)g(order)l(.)28 b(In)20 b(a)h(transaction)g
(process-)-152 263 y(ing)28 b(system,)h(each)e(transaction)h(can)g(be)f
(assigned)h(a)f(timestamp)g(when-)-152 346 y(e)n(v)o(er)e(it)e(enters)h
(the)g(system.)38 b(More)24 b(speci\002cally)g(after)g(detecting)g(a)g
(con-)-152 429 y(\003ict)19 b(a)h(transaction)g(processing)h(system)f
(restarts)f(whiche)n(v)o(er)i(transaction)-152 512 y(detects)30
b(the)f(con\003ict,)i(gi)n(ving)f(it)e(a)h(higher)h(transaction)g
(number)g(in)f(the)-152 596 y(process.)49 b(SUDS)26 b(must)h(restart)g
(the)g(thread)h(with)f(the)g(later)g(transaction)-152
679 y(number)l(.)-40 762 y(Knight')l(s)e(Liquid)f(system)h([19,)f(18])g
(used)h(a)f(method)h(more)g(lik)o(e)f(op-)-152 845 y(timistic)h
(concurrenc)o(y)i(control)f([21)q(])f(e)o(xcept)h(that)f(timestamps)h
(must)f(be)-152 928 y(pessimistically)i(assigned)g Fg(a)g(priori)p
Fh(,)h(rather)e(than)h(optimistically)f(when)-152 1011
y(the)19 b(task)g(commits,)g(and)g(writes)g(are)f(pessimistically)h(b)o
(uf)n(fered)g(in)g(pri)n(v)n(ate)-152 1094 y(memories)i(and)g(then)f
(written)g(out)g(in)g(serial)g(order)g(so)g(that)g(dif)n(ferent)g(pro-)
-152 1177 y(cessing)h(elements)g(may)f(concurrently)h(write)f(to)g(the)
g(same)g(address.)28 b(The)-152 1260 y(idea)20 b(of)f(using)h(hash)g
(tables)f(rather)g(than)g(full)g(maps)h(to)f(perform)g(indepen-)-152
1343 y(dence)h(v)n(alidation)g(w)o(as)f(originally)g(proposed)i(for)e
(the)g(Liquid)g(system.)-40 1426 y(Knight)f(also)f(pointed)g(out)h(the)
f(similarity)f(between)h(cache)h(coherence)-152 1509
y(schemes)h(and)g(coherence)h(control)e(in)g(transaction)h(processing.)
24 b(The)18 b(Liq-)-152 1592 y(uid)24 b(system)g(used)g(a)f(b)o(us)h
(based)g(protocol)g(similar)f(to)g(a)h(snooping)h(cache)-152
1675 y(coherence)32 b(protocol)e([12)q(].)56 b(SUDS)28
b(uses)j(a)e(scalable)i(protocol)f(that)g(is)-152 1758
y(more)17 b(similar)f(to)g(a)h(directory)g(based)g(cache)h(coherence)g
(protocol)f([6,)f(2)q(,)g(1])-152 1841 y(with)30 b(only)h(a)f(single)g
(pointer)h(per)f(entry)-5 b(,)33 b(sometimes)d(referred)h(to)f(as)g(a)
-152 1924 y(Dir1B)19 b(protocol.)-40 2007 y(The)54 b(P)o(araT)m(ran)f
(system)h(for)f(parallelizing)h(mostly)g(functional)-152
2090 y(code)31 b([33])f(w)o(as)g(another)g(early)g(proposal)h(that)e
(relied)h(on)g(speculation.)-152 2173 y(P)o(araT)m(ran)24
b(w)o(as)f(implemented)i(in)e(softw)o(are)h(on)g(a)f(shared)h(memory)h
(mul-)-152 2256 y(tiprocessor)l(.)74 b(The)36 b(protocols)h(were)e
(based)i(on)f(those)h(used)f(in)g(T)m(ime)-152 2339 y(W)-6
b(arp)22 b([16],)g(with)f(checkpointing)j(performed)f(at)e(e)n(v)o(ery)
i(speculati)n(v)o(e)f(op-)-152 2422 y(eration.)-40 2505
y(SUDS)h(is)g(most)h(directly)f(in\003uenced)i(by)f(the)g(Multiscalar)f
(architec-)-152 2588 y(ture)i([9)q(,)f(31)q(].)42 b(The)25
b(Multiscalar)g(architecture)h(w)o(as)f(the)h(\002rst)e(to)h(include)
-152 2671 y(a)j(lo)n(w-latenc)o(y)h(mechanism)g(for)f(e)o(xplicitly)g
(forw)o(arding)h(dependencies)-152 2754 y(from)23 b(one)h(task)f(to)g
(the)g(ne)o(xt.)36 b(This)23 b(allo)n(ws)g(the)g(compiler)g(to)g(both)h
(a)o(v)o(oid)-152 2837 y(the)18 b(e)o(xpense)i(of)e(completely)h
(serializing)f(do-across)h(loops)g(and)g(also)f(per)o(-)-152
2920 y(mits)c(re)o(gister)h(allocation)g(across)g(task)f(boundaries.)23
b(The)15 b(Multiscalar)g(v)n(al-)-152 3003 y(idates)20
b(memory)g(dependence)h(speculations)g(using)f(a)f(mechanism)h(called)
-152 3086 y(an)35 b(address)f(resolution)h(b)o(uf)n(fer)f(\(ARB\))f([9)
q(,)g(10)q(])g(which)i(is)e(similar)h(to)-152 3169 y(a)f(hardw)o(are)g
(implementation)g(of)g(multi)n(v)o(ersion)g(timestamp)f(ordering.)-152
3252 y(From)c(the)g(perspecti)n(v)o(e)h(of)e(a)h(cache)h(coherence)g
(mechanism)g(the)f(ARB)-152 3335 y(is)19 b(most)g(similar)f(to)h(a)g
(full-map)g(directory)g(based)h(protocol.)-40 3418 y(The)37
b(SUDS)e(compiler)i(algorithms)g(for)f(identifying)h(the)g(optimal)-152
3501 y(placement)d(points)g(for)f(sending)h(and)g(recei)n(ving)g
(loop-carried)h(depen-)-152 3584 y(dences)26 b(are)f(similar)g(to)g
(those)g(used)h(in)f(the)g(multiscalar)f([36)q(].)41
b(The)25 b(pri-)-152 3667 y(mary)17 b(dif)n(ference)h(is)e(that)g(the)h
(Multiscalar)g(algorithms)g(permit)f(some)h(data)-152
3750 y(v)n(alues)29 b(to)f(be)h(forw)o(arded)g(more)f(than)h(once,)i
(lea)o(ving)d(to)g(the)h(hardw)o(are)-152 3833 y(the)f(responsibility)g
(for)f(squashing)i(redundant)g(sends.)49 b(The)28 b(SUDS)e(al-)-152
3916 y(gorithms)k(guarantee)g(to)f(insert)g(send)h(and)g(recei)n(v)o(e)
g(instructions)g(at)f(the)-152 3999 y(optimal)20 b(point)g(in)f(the)h
(control)g(\003o)n(w)f(graph)i(such)f(that)g(each)g(v)n(alue)g(is)f
(sent)-152 4082 y(and)h(recei)n(v)o(ed)g(e)o(xactly)f(once.)-40
4165 y(More)g(recent)f(ef)n(forts)g(ha)o(v)o(e)g(focused)h(on)g
(modifying)g(shared)g(memory)-152 4248 y(cache)28 b(coherence)h
(schemes)f(to)f(support)h(memory)f(dependence)j(specu-)-152
4332 y(lation)c([8)q(,)f(13)q(,)g(32)q(,)h(20,)g(17)q(,)f(14)q(].)44
b(SUDS)25 b(implements)h(its)g(protocols)h(in)-152 4415
y(softw)o(are)f(rather)f(than)g(relying)h(on)g(hardw)o(are)g
(mechanisms.)42 b(In)26 b(the)f(fu-)-152 4498 y(ture)e(SUDS)f(might)h
(permit)f(long-term)i(caching)f(of)g(read-mostly)h(v)n(alues)-152
4581 y(by)18 b(allo)n(wing)g(the)g(softw)o(are)g(system)g(to)g
(\223permanently\224)h(mark)f(an)g(address)-152 4664
y(in)h(the)g(timestamp)g(cache.)-40 4747 y(Another)h(recent)f(trend)g
(has)g(been)h(to)f(e)o(xamine)h(the)f(prediction)g(mech-)-152
4830 y(anism)26 b(used)f(by)h(dependence)h(speculation)f(systems.)42
b(Some)24 b(early)h(sys-)-152 4913 y(tems)18 b([19)q(,)g(33,)g(14)q(])f
(transmit)h(all)g(dependencies)i(through)f(the)g(speculati)n(v)o(e)-152
4996 y(memory)26 b(system.)42 b(SUDS,)23 b(lik)o(e)i(the)g(Multiscalar)
g(allo)n(ws)g(the)g(compiler)-152 5079 y(to)d(statically)g(identify)g
(loop)h(carried)f(dependences)j(which)e(are)f(then)g(for)o(-)-152
5162 y(w)o(arded)32 b(using)f(a)g(separate,)j(f)o(ast,)f(communication)
g(path.)58 b(SUDS)30 b(and)-152 5245 y(other)35 b(systems)h(in)e(this)h
(class)g(essentially)g(statically)f(predict)h(that)g(all)-152
5328 y(memory)19 b(references)g(that)f(the)g(compiler)h(can)f(not)h
(analyze)g(are)f(in)g(f)o(act)g Fg(in-)2040 -69 y(dependent)p
Fh(.)28 b(Se)n(v)o(eral)19 b(recent)i(systems)f([25,)g(35,)g(7])f(ha)o
(v)o(e)h(proposed)i(hard-)2040 14 y(w)o(are)c(mechanisms,)h(based)f(on)
h(runtime)e(branch)i(prediction,)g(for)e(\002nding,)2040
97 y(and)f(e)o(xplicitly)f(forw)o(arding,)h(additional)g(dependences)h
(that)e(the)g(compiler)2040 180 y(can)k(not)h(analyze.)2152
263 y(Memory)33 b(dependence)h(speculation)f(has)g(also)f(been)g(e)o
(xamined)h(in)2040 346 y(the)f(conte)o(xt)g(of)f(\002ne-grain)h
(instruction)f(le)n(v)o(el)h(parallel)f(processing)i(on)2040
429 y(VLIW)27 b(processors.)51 b(The)28 b(point)g(of)g(these)g(systems)
g(is)g(to)g(allo)n(w)g(trace-)2040 512 y(scheduling)22
b(compilers)e(more)g(\003e)o(xibility)g(to)g(statically)f(reorder)i
(memory)2040 596 y(instructions.)i(Nicolau)18 b([27)q(])f(proposed)j
(inserting)e(e)o(xplicit)f(address)i(com-)2040 679 y(parisons)28
b(follo)n(wed)f(by)g(branches)h(to)f(of)n(f-trace)g(\002xup)g(code.)48
b(Huang)28 b Fg(et)2040 762 y(al)17 b Fh([15)q(])f(e)o(xtended)j(this)e
(idea)g(to)g(use)h(predicated)g(instructions)f(to)g(help)h(par)o(-)2040
845 y(allelize)25 b(the)h(comparison)h(code.)45 b(The)25
b(problem)i(with)e(this)g(approach)j(is)2040 928 y(that)17
b(it)g(requires)h Fe(m)11 b Fc(\002)g Fe(n)17 b Fh(comparisons)i(if)e
(there)h(are)f Fe(m)g Fh(loads)h(being)g(spec-)2040 1011
y(ulati)n(v)o(ely)28 b(mo)o(v)o(ed)h(abo)o(v)o(e)g Fe(n)f
Fh(stores.)51 b(This)27 b(problem)i(can)g(be)f(alle)n(viated)2040
1094 y(using)20 b(a)f(small)f(hardw)o(are)i(set-associati)n(v)o(e)g
(table,)e(called)h(a)g(memory)h(con-)2040 1177 y(\003ict)27
b(b)o(uf)n(fer)g(\(MCB\),)g(that)g(holds)h(recently)g(speculated)g
(load)g(addresses)2040 1260 y(and)20 b(pro)o(vides)h(single)e(c)o(ycle)
h(checks)h(on)f(each)g(subsequent)h(store)e(instruc-)2040
1343 y(tion)g([11)q(].)24 b(An)c(MCB)f(has)h(been)g(proposed)h(for)e
(inclusion)h(in)f(the)h(He)n(wlett)2040 1426 y(P)o(ackard/Intel)f
(IA-64)g(EPIC)f(architecture)h([3].)2152 1509 y(The)h(LRPD)e(test)h
([29)q(])g(is)g(a)g(softw)o(are)h(speculation)h(system)e(that)h(tak)o
(es)2040 1592 y(a)28 b(more)g(coarse)h(grained)f(approach)i(than)e
(SUDS.)e(In)i(contrast)h(to)e(most)2040 1675 y(of)i(the)f(systems)h
(described)g(in)g(this)f(section,)j(the)d(LRPD)g(test)g(specula-)2040
1758 y(ti)n(v)o(ely)16 b(block)i(parallelizes)e(a)g(loop)h(as)g(if)f
(it)f(were)i(completely)g(data)g(parallel)2040 1841 y(and)24
b(then)g(tests)f(to)h(ensure)g(that)f(the)h(memory)g(accesses)g(of)g
(the)f(dif)n(ferent)2040 1924 y(processing)k(elements)f(do)g(not)f(o)o
(v)o(erlap.)44 b(It)25 b(is)g(able)g(to)h(identify)f(pri)n(v)n(ati-)
2040 2007 y(zable)j(arrays)f(and)h(reductions)h(at)d(runtime.)49
b(A)27 b(directory)g(based)i(cache)2040 2090 y(coherence)19
b(protocol)f(e)o(xtended)g(to)f(perform)g(the)g(LRPD)f(test)h(is)f
(described)2040 2173 y(in)26 b([39].)44 b(SUDS)24 b(tak)o(es)j(a)f
(\002ner)f(grain)h(approach)i(which)e(can)g(c)o(yclically)2040
2256 y(parallelize)18 b(loops)h(with)e(loop)i(carried)f(dependences)i
(and)f(can)f(parallelize)2040 2339 y(most)h(of)g(a)g(loop)g(that)g(has)
g(only)h(a)f(fe)n(w)g(dynamic)h(dependences.)2040 2570
y Fi(6)91 b(Conclusion)2040 2730 y Fh(In)24 b(this)f(paper)i(we)e(ha)o
(v)o(e)h(in)m(v)o(estigated)g(the)g(issues)g(of)g(whether)g(it)f(is)g
(pos-)2040 2813 y(sible)g(to)g(b)o(uild)g(a)h(softw)o(are)f(based)h
(speculation)h(system)e(for)g(a)g(Ra)o(w)g(pro-)2040
2896 y(cessor)l(.)32 b(Our)22 b(preliminary)g(results)f(are)h
(encouraging.)34 b(Through)22 b(simula-)2040 2979 y(tion)h(we')l(v)o(e)
h(found)g(that)g(the)f(memory)h(request)g(latencies)f(for)g(our)h(w)o
(ork-)2040 3062 y(ing)18 b(prototype)g(system)g(are)f(within)g(a)g(f)o
(actor)h(of)f(2X)g(the)h(latencies)f(that)g(are)2040
3145 y(required)25 b(to)f(achie)n(v)o(e)i(parallel)e(speedup.)41
b(W)-6 b(e)24 b(were)g(able)h(to)f(reduce)h(the)2040
3228 y(softw)o(are)16 b(system')l(s)h(latencies)f(to)g(this)g(le)n(v)o
(el)g(by)h(di)n(viding)g(the)f(dependence)2040 3311 y(handling)26
b(problem)g(into)f(three)g(independent)i(subproblems.)43
b(These)25 b(in-)2040 3394 y(clude)30 b(forw)o(arding)h(true)e
(dependences,)35 b(renaming)30 b(f)o(alse)g(dependences)2040
3477 y(and)h(pro)o(viding)g(memory)g(dependence)i(speculation)e(for)f
(potential)g(de-)2040 3560 y(pendences.)25 b(Mo)o(ving)c(the)e(problem)
h(of)f(renaming)h(into)f(the)g(compiler)g(en-)2040 3643
y(abled)e(us)f(to)g(simplify)f(the)h(implementation)h(of)f(the)g
(memory)h(dependence)2040 3726 y(speculation)j(subsystem.)2152
3809 y(W)-6 b(e)24 b(belie)n(v)o(e)h(that)f(there)h(are)f(caching)i
(techniques)g(that)e(can)h(be)g(used)2040 3892 y(to)j(impro)o(v)o(e)g
(the)g(a)o(v)o(erage)g(memory)h(latencies)e(in)h(our)g(system,)i(and)f
(we)2040 3975 y(are)23 b(acti)n(v)o(ely)f(in)m(v)o(estigating)h(ho)n(w)
g(to)f(inte)o(grate)h(caches)g(into)g(our)f(system.)2040
4058 y(W)-6 b(e)28 b(belie)n(v)o(e)i(that)e(with)h(this)f(additional)h
(engineering)i(ef)n(fort)d(it)g(will)g(be)2040 4141 y(possible)18
b(to)f(b)o(uild)g(an)g(all)f(softw)o(are)i(speculation)g(system)f
(which)g(achie)n(v)o(es)2040 4224 y(parallel)i(speedups.)2040
4442 y Fi(Ref)m(erences)2073 4585 y Fb([1])38 b(Anant)16
b(Agarw)o(al,)g(Richard)h(Simoni,)f(John)f(Hennessy)l(,)g(and)g(Mark)h
(Horo)n(witz.)2188 4660 y(An)22 b(Ev)n(aluation)j(of)d(Directory)i
(Schemes)f(for)f(Cache)i(Coherence.)43 b(In)22 b Fa(15th)2188
4735 y(International)h(Symposium)e(on)e(Computer)i(Ar)n(c)o(hitectur)n
(e)p Fb(,)h(pages)f(280\226289,)2188 4809 y(Honolulu,)d(HI,)f(May)g
(1988.)2073 4917 y([2])38 b(James)26 b(Archibald)h(and)f(Jean-Loup)h
(Baer)l(.)52 b(An)25 b(Economical)j(Solution)f(to)2188
4992 y(the)22 b(Cache)g(Coherence)h(Problem.)37 b(In)21
b Fa(11th)g(International)j(Symposium)e(on)2188 5067
y(Computer)c(Ar)n(c)o(hitectur)n(e)p Fb(,)h(pages)f(355\226362,)f(Ann)g
(Arbor)m(,)g(MI,)g(June)g(1984.)2073 5175 y([3])38 b(Da)o(vid)20
b(I.)e(August,)i(Daniel)h(A.)d(Connors,)i(Scott)g(A.)e(Mahlk)o(e,)j
(John)e(W)-6 b(.)18 b(Sias,)2188 5249 y(K)n(e)n(vin)29
b(M.)d(Crozier)m(,)31 b(Ben-Chung)e(Cheng,)h(P)o(atrick)f(R.)d(Eaton,)k
(Qudus)d(B.)1922 5627 y Fh(8)p eop
%%Page: 9 9
9 8 bop -4 -69 a Fb(Olaniran,)21 b(and)e(W)-5 b(en-Mei)19
b(W)-6 b(.)17 b(Hwu.)28 b(Inte)o(grated)21 b(Predicated)h(and)c
(Specula-)-4 6 y(ti)n(v)o(e)25 b(Ex)o(ecution)f(in)f(the)h(IMP)-6
b(A)m(CT)22 b(EPIC)g(Architecture.)46 b(In)23 b Fa(25th)g(Interna-)-4
81 y(tional)h(Symposium)g(on)e(Computer)i(Ar)n(c)o(hitectur)n(e)g
(\(ISCA-25\))p Fb(,)g(pages)f(227\226)-4 156 y(237,)17
b(Barcelona,)j(Spain,)d(June)g(1998.)-118 260 y([4])37
b(Philip)23 b(A.)e(Bernstein)i(and)f(Nathan)h(Goodman.)39
b(T)n(imestamp-Based)23 b(Algo-)-4 335 y(rithms)d(for)g(Concurrenc)o(y)
i(Control)f(in)f(Distrib)o(uted)i(Database)f(Systems.)33
b(In)-4 410 y Fa(Pr)m(oceedings)16 b(of)e(the)h(Sixth)h(International)h
(Confer)n(ence)f(on)e(V)-7 b(ery)14 b(Lar)n(g)o(e)g(Data)-4
485 y(Bases)p Fb(,)i(pages)i(285\226300,)g(Montreal,)h(Canada,)f
(October)h(1980.)-118 590 y([5])37 b(Martin)16 b(C.)e(Carlisle)i(and)f
(Anne)g(Rogers.)k(Softw)o(are)d(Caching)g(and)f(Computa-)-4
664 y(tion)i(Migration)h(in)e(Olden.)23 b(In)16 b Fa(Pr)m(oceedings)h
(of)f(the)h(F)m(ifth)g(A)n(CM)e(Symposium)-4 739 y(on)25
b(Principles)i(and)f(Pr)o(actice)g(of)g(P)-5 b(ar)o(allel)26
b(Pr)m(o)o(gr)o(amming)p Fb(,)h(pages)f(29\22638,)-4
814 y(Santa)19 b(Barbara,)f(CA,)e(July)i(1995.)-118 919
y([6])37 b(Lucien)19 b(M.)e(Censier)j(and)e(P)o(aul)g(Feautrier)l(.)30
b(A)17 b(Ne)n(w)h(Solution)i(to)e(Coherence)-4 994 y(Problems)i(in)g
(Multicache)j(Systems.)31 b Fa(IEEE)18 b(T)l(r)o(ansactions)j(on)e
(Computer)o(s)p Fb(,)-4 1068 y(C-27\(12\):1112\2261118,)h(December)f
(1978.)-118 1173 y([7])37 b(Geor)o(ge)23 b(Z.)e(Chrysos)h(and)h(Joel)g
(S.)e(Emer)l(.)40 b(Memory)22 b(Dependence)j(Predic-)-4
1248 y(tion)20 b(using)e(Store)h(Sets.)29 b(In)18 b Fa(25th)h
(International)i(Symposium)f(on)e(Computer)-4 1323 y(Ar)n(c)o(hitectur)
n(e)f(\(ISCA-25\))p Fb(,)f(pages)f(142\226153,)h(Barcelona,)i(Spain,)e
(June)f(1998.)-118 1428 y([8])37 b(Manoj)28 b(Franklin.)56
b(Multi-V)-7 b(ersion)28 b(Caches)g(for)f(Multiscalar)i(Processors.)-4
1502 y(In)18 b Fa(Pr)m(oceedings)i(of)e(the)h(F)m(ir)o(st)g
(International)i(Confer)n(ence)f(on)e(High)h(P)-5 b(erfor)o(-)-4
1577 y(mance)18 b(Computing)h(\(HiPC\))p Fb(,)e(1995.)-118
1682 y([9])37 b(Manoj)18 b(Franklin)g(and)f(Gurindar)h(S.)e(Sohi.)23
b(The)16 b(Expandable)j(Split)e(W)m(indo)n(w)-4 1757
y(P)o(aradigm)f(for)f(Exploiting)h(Fine-Grain)h(P)o(arallelism.)k(In)14
b Fa(19th)h(International)-4 1832 y(Symposium)20 b(on)e(Computer)i(Ar)n
(c)o(hitectur)n(e)g(\(ISCA-19\))p Fb(,)g(pages)f(58\22667,)g(Gold)-4
1906 y(Coast,)f(Australia,)h(May)e(1992.)-152 2011 y([10])38
b(Manoj)17 b(Franklin)h(and)e(Gurindar)h(S.)e(Sohi.)22
b(ARB:)16 b(A)f(Hardw)o(are)j(Mechanism)-4 2086 y(for)h(Dynamic)i
(Reordering)g(of)e(Memory)h(References.)33 b Fa(IEEE)18
b(T)l(r)o(ansactions)-4 2161 y(on)f(Computer)o(s)p Fb(,)h
(45\(5\):552\226571,)h(May)f(1996.)-152 2266 y([11])38
b(Da)o(vid)17 b(M.)f(Gallagher)m(,)j(W)m(illiam)f(Y)-9
b(.)16 b(Chen,)h(Scott)g(A.)f(Mahlk)o(e,)i(John)e(C.)g(Gyl-)-4
2340 y(lenhaal,)27 b(and)d(W)-5 b(en)23 b(mei)g(W)-6
b(.)22 b(Hwu.)44 b(Dynamic)24 b(Memory)g(Disambiguation)-4
2415 y(Using)e(the)f(Memory)h(Con\003ict)g(Buf)n(fer.)38
b(In)21 b Fa(Pr)m(oceedings)i(of)e(the)h(6th)f(Inter)o(-)-4
2490 y(national)j(Confer)n(ence)f(on)e(Ar)n(c)o(hitectur)n(e)i(Support)
f(for)g(Pr)m(o)o(gr)o(amming)f(Lan-)-4 2565 y(gua)o(g)o(es)g(and)f
(Oper)o(ating)g(Systems)h(\(ASPLOS\))p Fb(,)d(pages)i(183\226193,)g
(San)g(Jose,)-4 2639 y(California,)g(October)e(1994.)-152
2744 y([12])38 b(James)29 b(R.)f(Goodman.)62 b(Using)29
b(Cache)h(Memory)f(to)g(Reduce)i(Processor)o(-)-4 2819
y(Memory)21 b(T)n(raf)n(\002c.)36 b(In)20 b Fa(10th)i(International)h
(Symposium)f(on)f(Computer)h(Ar)o(-)-4 2894 y(c)o(hitectur)n(e)p
Fb(,)e(pages)e(124\226131,)f(Stockholm,)h(Sweden,)g(June)f(1983.)-152
2999 y([13])38 b(Sridhar)26 b(Gopal,)g(T)-5 b(.)23 b(N.)g(V)l
(ijaykumar)m(,)28 b(James)c(E.)f(Smith,)i(and)g(Gurindar)g(S.)-4
3073 y(Sohi.)e(Speculati)n(v)o(e)d(V)-7 b(ersioning)18
b(Cache.)24 b(In)16 b Fa(Pr)m(oceedings)i(of)f(the)g(F)-7
b(ourth)16 b(In-)-4 3148 y(ternational)23 b(Symposium)d(on)g(High)g(P)
-5 b(erformance)20 b(Computer)h(Ar)n(c)o(hitectur)n(e)-4
3223 y(\(HPCA-4\))p Fb(,)c(pages)g(195\226205,)h(Las)f(V)-7
b(e)o(gas,)16 b(NV)-9 b(,)17 b(February)h(1998.)-152
3328 y([14])38 b(Lance)29 b(Hammond,)g(Mark)f(W)m(ille)o(y)l(,)j(and)d
(K)o(unle)g(Oluk)o(otun.)59 b(Data)29 b(Spec-)-4 3403
y(ulation)i(Support)e(for)f(a)g(Chip)h(Multiprocessor)l(.)62
b(In)29 b Fa(Pr)m(oceedings)g(of)g(the)-4 3477 y(Eighth)23
b(A)n(CM)g(Confer)n(ence)h(on)e(Ar)n(c)o(hitectur)o(al)j(Support)e(for)
g(Pr)m(o)o(gr)o(amming)-4 3552 y(Langua)o(g)o(es)g(and)d(Oper)o(ating)i
(Systems)p Fb(,)g(pages)f(58\22669,)h(San)f(Jose,)f(CA,)g(Oc-)-4
3627 y(tober)e(1998.)-152 3732 y([15])38 b(Andre)n(w)25
b(S.)d(Huang,)k(Gert)e(Sla)o(v)o(enb)o(ur)o(g,)i(and)e(John)f(P)o(aul)h
(Shen.)45 b(Specula-)-4 3807 y(ti)n(v)o(e)25 b(Disambiguation:)35
b(A)23 b(Compilation)i(T)-5 b(echnique)25 b(for)e(Dynamic)h(Mem-)-4
3881 y(ory)31 b(Disambiguation.)70 b(In)30 b Fa(Pr)m(oceedings)i(of)f
(the)g(21st)g(Annual)g(Interna-)-4 3956 y(tional)21 b(Symposium)e(on)g
(Computer)h(Ar)n(c)o(hitectur)n(e)g(\(ISCA\))p Fb(,)e(pages)i
(200\226210,)-4 4031 y(Chicago,)f(Illinois,)f(April)g(1994.)-152
4136 y([16])38 b(Da)o(vid)14 b(R.)f(Jef)n(ferson.)18
b(V)l(irtual)d(T)n(ime.)h Fa(A)n(CM)d(T)l(r)o(ansactions)i(on)f(Pr)m(o)
o(gr)o(amming)-4 4210 y(Langua)o(g)o(es)19 b(and)e(Systems)p
Fb(,)h(7\(3\):404\226425,)h(July)e(1985.)-152 4315 y([17])38
b(If)n(f)o(at)22 b(H.)c(Kazi)j(and)f(Da)o(vid)g(J.)f(Lilja.)34
b(Coarse-Grained)22 b(Speculati)n(v)o(e)i(Ex)o(ecu-)-4
4390 y(tion)17 b(in)g(Shared-Memory)h(Multiprocessors.)24
b(In)16 b Fa(International)j(Confer)n(ence)-4 4465 y(on)h(Super)n
(computing)j(\(ICS\))p Fb(,)d(pages)g(93\226100,)i(Melbourne,)g
(Australia,)g(July)-4 4540 y(1998.)-152 4645 y([18])38
b(Thomas)14 b(F)-5 b(.)12 b(Knight,)j(Jr)l(.)i(System)d(and)g(Method)h
(for)e(P)o(arallel)k(Processing)e(with)-4 4719 y(Mostly)j(Functional)h
(Languages.)25 b(U.S.)15 b(P)o(atent)j(4,825,360,)f(issued)g(Apr)l(.)g
(25,)-4 4794 y(1989)h(\(e)o(xpired\).)-152 4899 y([19])38
b(T)-5 b(om)20 b(Knight.)39 b(An)21 b(Architecture)k(for)c(Mostly)i
(Functional)h(Languages.)39 b(In)-4 4974 y Fa(Pr)m(oceedings)30
b(of)f(the)g(A)n(CM)f(Confer)n(ence)i(on)e(Lisp)g(and)h(Functional)h
(Pr)m(o-)-4 5048 y(gr)o(amming)p Fb(,)18 b(pages)f(88\22693,)h(August)f
(1986.)-152 5153 y([20])38 b(V)-7 b(enkata)22 b(Krishnan)f(and)g(Josep)
f(T)-5 b(orrellas.)34 b(Hardw)o(are)22 b(and)f(Softw)o(are)g(Sup-)-4
5228 y(port)32 b(for)g(Speculati)n(v)o(e)j(Ex)o(ecution)f(of)d
(Sequential)k(Binaries)e(on)f(a)g(Chip-)-4 5303 y(Multiprocessor.)83
b(In)35 b Fa(International)i(Confer)n(ence)g(on)e(Super)n(computing)-4
5378 y(\(ICS\))p Fb(,)17 b(Melbourne,)i(Australia,)g(July)e(1998.)2040
-69 y([21])38 b(H.)19 b(T)-5 b(.)19 b(K)o(ung)i(and)g(John)f(T)-5
b(.)19 b(Robinson.)35 b(On)20 b(Optimistic)i(Methods)g(for)e(Con-)2188
6 y(currenc)o(y)d(Control.)i Fa(A)n(CM)c(T)l(r)o(ansactions)h(on)f
(Database)g(Systems)p Fb(,)h(6\(2\):213\226)2188 81 y(226,)h(June)g
(1981.)2040 177 y([22])38 b(W)-5 b(alter)20 b(Lee,)e(Rajee)n(v)j
(Barua,)f(,)e(Matthe)n(w)j(Frank,)e(De)n(v)n(abhatuni)j(Srikrishna,)
2188 252 y(Jonathan)f(Babb,)f(V)l(i)n(v)o(ek)g(Sarkar)m(,)g(and)g
(Saman)f(Amarasinghe.)32 b(Space-T)n(ime)2188 327 y(Scheduling)27
b(of)d(Instruction-Le)n(v)o(el)k(P)o(arallelism)f(on)d(a)g(Ra)o(w)h
(Machine.)48 b(In)2188 401 y Fa(Pr)m(oceedings)19 b(of)f(the)g(Eighth)h
(A)n(CM)e(Confer)n(ence)j(on)d(Ar)n(c)o(hitectur)o(al)j(Support)2188
476 y(for)26 b(Pr)m(o)o(gr)o(amming)f(Langua)o(g)o(es)j(and)d(Oper)o
(ating)i(Systems)p Fb(,)h(pages)e(46\22657,)2188 551
y(San)17 b(Jose,)g(CA,)f(October)j(1998.)2040 647 y([23])38
b(Z.)20 b(Li.)39 b(Array)22 b(Pri)n(v)n(atization)k(for)c(P)o(arallel)i
(Ex)o(ecution)f(of)f(Loops.)38 b(In)22 b Fa(Con-)2188
722 y(fer)n(ence)16 b(Pr)m(oceedings,)g(1992)e(International)j(Confer)n
(ence)f(on)e(Super)n(comput-)2188 797 y(ing)p Fb(,)j(DC,)g(July)g
(1992.)2040 893 y([24])38 b(D.)28 b(E.)g(Maydan,)k(S.)c(P)-7
b(.)28 b(Amarasinghe,)33 b(and)d(M.)e(S.)g(Lam.)61 b(Array)29
b(Data-)2188 968 y(Flo)n(w)20 b(Analysis)h(and)f(its)g(Use)g(in)f
(Array)i(Pri)n(v)n(atization.)37 b(In)19 b Fa(T)-5 b(wentieth)22
b(A)n(CM)2188 1043 y(SIGPLAN-SIGA)n(CT)i(Symposium)i(on)f(Principles)i
(of)e(Pr)m(o)o(gr)o(amming)g(Lan-)2188 1118 y(gua)o(g)o(es)19
b(\(POPL\))p Fb(,)c(pages)j(2\22615,)f(Charleston,)i(SC,)d(January)j
(1993.)2040 1214 y([25])38 b(Andreas)j(Mosho)o(v)o(os)e(and)h(Gurindar)
h(S.)e(Sohi.)97 b(Streamlining)42 b(Inter)o(-)2188 1289
y(operation)22 b(Memory)d(Communication)j(via)e(Data)g(Dependence)i
(Prediction.)2188 1364 y(In)h Fa(30th)h(Annual)g(International)i
(Symposium)f(on)e(Micr)m(oar)n(c)o(hitectur)n(e)k(\(MI-)2188
1438 y(CR)m(O\))p Fb(,)17 b(Research)i(T)n(riangle)f(P)o(ark,)f(NC,)f
(December)j(1997.)2040 1535 y([26])38 b(Ste)n(v)o(en)24
b(Muchnick.)41 b Fa(Advanced)23 b(Compiler)h(Design)e(and)g
(Implementation)p Fb(.)2188 1610 y(Mor)o(gan)17 b(Kaufmann)h
(Publishers,)g(San)g(Mateo,)g(1997.)2040 1706 y([27])38
b(Ale)o(xandru)25 b(Nicolau.)46 b(Run-T)n(ime)23 b(Disambiguation:)37
b(Coping)24 b(with)g(Stati-)2188 1781 y(cally)16 b(Unpredictable)j
(Dependencies.)j Fa(IEEE)13 b(T)l(r)o(ansactions)k(on)d(Computer)o(s)p
Fb(,)2188 1856 y(38\(5\):663\226678,)19 b(May)e(1989.)2040
1952 y([28])38 b(Karen)26 b(Pieper)l(.)52 b Fa(P)-5 b(ar)o(allelizing)
28 b(Compiler)o(s:)39 b(Implementation)29 b(and)c(Ef)o(fec-)2188
2027 y(tiveness)p Fb(.)d(PhD)14 b(thesis,)i(Dept.)g(of)f(Computer)h
(Science,)h(Stanford)g(Uni)n(v)o(ersity)l(,)2188 2102
y(June)g(1993.)2040 2198 y([29])38 b(La)o(wrence)20 b(Rauchwer)o(ger)h
(and)e(Da)o(vid)h(P)o(adua.)30 b(The)18 b(LRPD)g(T)-5
b(est:)25 b(Specula-)2188 2273 y(ti)n(v)o(e)18 b(Run-T)n(ime)g(P)o
(arallelization)k(of)16 b(Loops)h(with)g(Pri)n(v)n(atization)22
b(and)17 b(Reduc-)2188 2348 y(tion)23 b(P)o(arallelization.)44
b(In)22 b Fa(Pr)m(oceedings)h(of)g(the)f(SIGPLAN)f(Confer)n(ence)j(on)
2188 2422 y(Pr)m(o)o(gr)o(amming)16 b(Langua)o(g)o(e)i(Design)e(and)f
(Implementation)p Fb(,)k(pages)e(218\226232,)2188 2497
y(La)g(Jolla,)g(CA,)g(June)g(1995.)2040 2594 y([30])38
b(Da)o(vid)16 b(P)-7 b(.)15 b(Reed.)22 b(Implementing)c(Atomic)f
(Actions)g(on)e(Decentralized)21 b(Data.)2188 2668 y
Fa(A)n(CM)c(T)l(r)o(ansactions)i(on)e(Computer)h(Systems)p
Fb(,)g(1\(1\):3\22623,)g(February)g(1983.)2040 2765 y([31])38
b(Gurindar)18 b(S.)f(Sohi,)g(Scott)h(E.)d(Breach,)k(and)e(T)-5
b(.)16 b(N.)g(V)l(ijaykumar)l(.)26 b(Multiscalar)2188
2840 y(Processors.)g(In)17 b Fa(22nd)h(International)i(Symposium)f(on)e
(Computer)i(Ar)n(c)o(hitec-)2188 2914 y(tur)n(e)p Fb(,)e(pages)h
(414\226425,)f(Santa)i(Mar)o(gherita)g(Ligure,)e(Italy)l(,)h(June)f
(1995.)2040 3011 y([32])38 b(J.)28 b(Gre)o(gory)i(Stef)n(f)o(an)h(and)e
(T)-5 b(odd)29 b(C.)f(Mo)n(wry)l(.)62 b(The)29 b(Potential)j(for)d
(Using)2188 3086 y(Thread-Le)n(v)o(el)i(Data)e(Speculation)i(to)e(F)o
(acilitate)j(Automatic)e(P)o(aralleliza-)2188 3160 y(tion.)25
b(In)16 b Fa(Pr)m(oceedings)j(of)e(the)h(F)-7 b(ourth)17
b(International)j(Symposium)e(on)f(High-)2188 3235 y(P)-5
b(erformance)20 b(Computer)h(Ar)n(c)o(hitectur)n(e)g(\(HPCA-4\))p
Fb(,)e(pages)h(2\22613,)g(Las)e(V)-7 b(e-)2188 3310 y(gas,)17
b(NV)-9 b(,)16 b(February)i(1998.)2040 3406 y([33])38
b(Pete)16 b(T)n(ink)o(er)f(and)g(Morry)g(Katz.)20 b(P)o(arallel)d(Ex)o
(ecution)f(of)f(Sequential)i(Scheme)2188 3481 y(with)22
b(P)o(araT)n(ran.)40 b(In)22 b Fa(Pr)m(oceedings)h(of)f(the)g(A)n(CM)g
(Confer)n(ence)i(on)d(Lisp)h(and)2188 3556 y(Functional)d(Pr)m(o)o(gr)o
(amming)p Fb(,)e(pages)h(40\22651,)g(July)f(1988.)2040
3652 y([34])38 b(Peng)14 b(T)m(u)f(and)g(Da)o(vid)h(P)o(adua.)j
(Automatic)e(Array)f(Pri)n(v)n(atization.)21 b(In)13
b Fa(Pr)m(oceed-)2188 3727 y(ings)20 b(of)f(the)h(6th)g(International)j
(W)-6 b(orkshop)20 b(on)f(Langua)o(g)o(es)i(and)f(Compiler)o(s)2188
3802 y(for)d(P)-5 b(ar)o(allel)18 b(Computing)p Fb(,)h(Portland,)f(OR,)
e(August)i(1993.)2040 3898 y([35])38 b(Gary)17 b(S.)e(T)-5
b(yson)15 b(and)i(T)-5 b(odd)15 b(M.)g(Austin.)23 b(Impro)o(ving)17
b(the)g(Accurac)o(y)h(and)e(Per)o(-)2188 3973 y(formance)26
b(of)e(Memory)g(Communication)j(Through)e(Renaming.)48
b(In)25 b Fa(30th)2188 4048 y(Annual)16 b(International)j(Symposium)d
(on)g(Micr)m(oar)n(c)o(hitectur)n(e)j(\(MICR)m(O\))p
Fb(,)d(Re-)2188 4122 y(search)i(T)n(riangle)h(P)o(ark,)e(NC,)f
(December)j(1997.)2040 4219 y([36])38 b(T)-5 b(.)20 b(N.)f(V)l
(ijaykumar)l(.)38 b Fa(Compiling)22 b(for)f(the)g(Multiscalar)j(Ar)n(c)
o(hitectur)n(e)p Fb(.)37 b(PhD)2188 4294 y(thesis,)20
b(Uni)n(v)o(ersity)h(of)d(W)m(isconsin-Madison)k(Computer)e(Sciences)h
(Depart-)2188 4368 y(ment,)c(January)h(1998.)2040 4465
y([37])38 b(Elliot)c(W)-5 b(aingold,)38 b(Michael)d(T)-5
b(aylor)m(,)36 b(De)n(v)n(abhaktuni)h(Srikrishna,)h(V)l(i)n(v)o(ek)2188
4540 y(Sarkar)m(,)d(W)-5 b(alter)31 b(Lee,)i(V)l(ictor)f(Lee,)h(Jang)d
(Kim,)j(Matthe)n(w)f(Frank,)i(Peter)2188 4614 y(Finch,)16
b(Rajee)n(v)h(Barua,)f(Jonathan)g(Babb,)g(Saman)f(Amarasinghe,)h(and)f
(Anant)2188 4689 y(Agarw)o(al.)24 b(Baring)18 b(It)f(All)g(to)g(Softw)o
(are:)23 b(Ra)o(w)17 b(Machines.)24 b Fa(IEEE)15 b(Computer)p
Fb(,)2188 4764 y(30\(9\):86\22693,)k(September)f(1997.)2040
4860 y([38])38 b(T)-5 b(erry)18 b(W)-5 b(elch.)27 b(A)17
b(T)-5 b(echnique)20 b(for)d(High-Performance)k(Data)d(Compression.)
2188 4935 y Fa(IEEE)e(Computer)p Fb(,)h(17\(6\):8\22619,)i(June)e
(1984.)2040 5032 y([39])38 b(Y)-7 b(e)37 b(Zhang,)k(La)o(wrence)c
(Rauchwer)o(ger)m(,)44 b(and)37 b(Josep)f(T)-5 b(orrellas.)87
b(Hard-)2188 5106 y(w)o(are)19 b(for)f(Speculati)n(v)o(e)k(Run-T)n(ime)
c(P)o(arallelization)23 b(in)18 b(Distrib)o(uted)i(Shared-)2188
5181 y(Memory)31 b(Multiprocessors.)70 b(In)31 b Fa(F)-7
b(ourth)31 b(International)i(Symposium)f(on)2188 5256
y(High-P)-5 b(erformance)16 b(Computer)e(Ar)n(c)o(hitectur)n(e)i
(\(HPCA-4\))p Fb(,)d(pages)i(162\226173,)2188 5330 y(Las)i(V)-7
b(e)o(gas,)16 b(NV)-9 b(,)17 b(February)h(1998.)1922
5627 y Fh(9)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
